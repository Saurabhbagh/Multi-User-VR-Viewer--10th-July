.TH "UnityAds" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
UnityAds
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <UnityAds\&.h>\fP
.PP
Inherits NSObject\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(instancetype) \- \fBNS_UNAVAILABLE\fP"
.br
.in -1c
.SS "Class Methods"

.in +1c
.ti -1c
.RI "(instancetype) + \fBNS_UNAVAILABLE\fP"
.br
.ti -1c
.RI "(void) + \fBinitialize:delegate:\fP"
.br
.ti -1c
.RI "(void) + \fBinitialize:delegate:testMode:\fP"
.br
.ti -1c
.RI "(void) + \fBshow:\fP"
.br
.ti -1c
.RI "(void) + \fBshow:placementId:\fP"
.br
.ti -1c
.RI "(id< \fBUnityAdsDelegate\fP >) + \fBgetDelegate\fP"
.br
.ti -1c
.RI "(void) + \fBsetDelegate:\fP"
.br
.ti -1c
.RI "(BOOL) + \fBgetDebugMode\fP"
.br
.ti -1c
.RI "(void) + \fBsetDebugMode:\fP"
.br
.ti -1c
.RI "(BOOL) + \fBisSupported\fP"
.br
.ti -1c
.RI "(BOOL) + \fBisReady\fP"
.br
.ti -1c
.RI "(BOOL) + \fBisReady:\fP"
.br
.ti -1c
.RI "(UnityAdsPlacementState) + \fBgetPlacementState\fP"
.br
.ti -1c
.RI "(UnityAdsPlacementState) + \fBgetPlacementState:\fP"
.br
.ti -1c
.RI "(NSString *) + \fBgetVersion\fP"
.br
.ti -1c
.RI "(BOOL) + \fBisInitialized\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fC\fBUnityAds\fP\fP is a static class with methods for preparing and showing ads\&.
.PP
\fBWarning:\fP
.RS 4
In order to ensure expected behaviour, the delegate must always be set\&. 
.RE
.PP

.PP
Definition at line 147 of file UnityAds\&.h\&.
.SH "Method Documentation"
.PP 
.SS "+ (BOOL) getDebugMode "
Get the current debug status of \fC\fBUnityAds\fP\fP\&.
.PP
\fBReturns:\fP
.RS 4
If \fCYES\fP, \fC\fBUnityAds\fP\fP will provide verbose logs\&. 
.RE
.PP

.SS "+ (id<\fBUnityAdsDelegate\fP>) getDelegate "
Provides the currently assigned \fC\fBUnityAdsDelegate\fP\fP\&.
.PP
\fBReturns:\fP
.RS 4
The current \fC\fBUnityAdsDelegate\fP\fP\&. 
.RE
.PP

.SS "+ (UnityAdsPlacementState) getPlacementState "
Check the current state of the default placement\&.
.PP
\fBReturns:\fP
.RS 4
If this is \fCkUnityAdsPlacementStateReady\fP, the placement is ready to show ads\&. Other states represent errors\&. 
.RE
.PP

.SS "+ (UnityAdsPlacementState) getPlacementState: (NSString *) placementId"
Check the current state of a placement\&.
.PP
\fBParameters:\fP
.RS 4
\fIplacementId\fP The placement ID, as defined in Unity Ads admin tools\&.
.RE
.PP
\fBReturns:\fP
.RS 4
If this is \fCkUnityAdsPlacementStateReady\fP, the placement is ready to show ads\&. Other states represent errors\&. 
.RE
.PP

.SS "+ (NSString *) getVersion "
Check the version of this \fC\fBUnityAds\fP\fP SDK
.PP
\fBReturns:\fP
.RS 4
String representing the current version name\&. 
.RE
.PP

.SS "+ (void) initialize: (NSString *) gameId(nullable id< \fBUnityAdsDelegate\fP >) delegate"
Initializes \fBUnityAds\fP\&. \fBUnityAds\fP should be initialized when app starts\&.
.PP
\fBParameters:\fP
.RS 4
\fIgameId\fP Unique identifier for a game, given by Unity Ads admin tools or Unity editor\&. 
.br
\fIdelegate\fP delegate for \fBUnityAdsDelegate\fP callbacks 
.RE
.PP

.SS "+ (void) initialize: (NSString *) gameId(nullable id< \fBUnityAdsDelegate\fP >) delegate(BOOL) testMode"
Initializes \fBUnityAds\fP\&. \fBUnityAds\fP should be initialized when app starts\&.
.PP
\fBParameters:\fP
.RS 4
\fIgameId\fP Unique identifier for a game, given by Unity Ads admin tools or Unity editor\&. 
.br
\fIdelegate\fP delegate for \fBUnityAdsDelegate\fP callbacks 
.br
\fItestMode\fP Set this flag to \fCYES\fP to indicate test mode and show only test ads\&. 
.RE
.PP

.SS "+ (BOOL) isInitialized "
Check that \fC\fBUnityAds\fP\fP has been initialized\&. This might be useful for debugging initialization problems\&.
.PP
\fBReturns:\fP
.RS 4
If \fCYES\fP, Unity Ads has been successfully initialized\&. 
.RE
.PP

.SS "+ (BOOL) isReady "
Check if the default placement is ready to show an ad\&.
.PP
\fBReturns:\fP
.RS 4
If \fCYES\fP, the default placement is ready to show an ad\&. 
.RE
.PP

.SS "+ (BOOL) isReady: (NSString *) placementId"
Check if a particular placement is ready to show an ad\&.
.PP
\fBParameters:\fP
.RS 4
\fIplacementId\fP The placement ID being checked\&.
.RE
.PP
\fBReturns:\fP
.RS 4
If \fCYES\fP, the placement is ready to show an ad\&. 
.RE
.PP

.SS "+ (BOOL) isSupported "
Check to see if the current device supports using Unity Ads\&.
.PP
\fBReturns:\fP
.RS 4
If \fCNO\fP, the current device cannot initialize \fC\fBUnityAds\fP\fP or show ads\&. 
.RE
.PP

.SS "+ (instancetype) NS_UNAVAILABLE "

.SS "\- (instancetype) NS_UNAVAILABLE "

.SS "+ (void) setDebugMode: (BOOL) enableDebugMode"
Set the logging verbosity of \fC\fBUnityAds\fP\fP\&. Debug mode indicates verbose logging\&. 
.PP
\fBWarning:\fP
.RS 4
Does not relate to test mode for ad content\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIenableDebugMode\fP \fCYES\fP for verbose logging\&. 
.RE
.PP

.SS "+ (void) setDelegate: (id< \fBUnityAdsDelegate\fP >) delegate"
Allows the delegate to be reassigned after \fBUnityAds\fP has already been initialized\&.
.PP
\fBParameters:\fP
.RS 4
\fIdelegate\fP The new `\fBUnityAdsDelegate\fP' for \fBUnityAds\fP to send callbacks to\&. 
.RE
.PP

.SS "+ (void) show: (UIViewController *) viewController"
Show an ad using the defaul placement\&.
.PP
\fBParameters:\fP
.RS 4
\fIviewController\fP The \fCUIViewController\fP that is to present the ad view controller\&. 
.RE
.PP

.SS "+ (void) \fBshow:\fP (UIViewController *) viewController(NSString *) placementId"
Show an ad using the provided placement ID\&.
.PP
\fBParameters:\fP
.RS 4
\fIviewController\fP The \fCUIViewController\fP that is to present the ad view controller\&. 
.br
\fIplacementId\fP The placement ID, as defined in Unity Ads admin tools\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
