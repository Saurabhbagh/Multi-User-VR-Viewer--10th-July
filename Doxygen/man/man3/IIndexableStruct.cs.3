.TH "O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/IIndexableStruct.cs" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/IIndexableStruct.cs
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "interface \fBLeap\&.Unity\&.IIndexableStruct< T, ThisIndexableType >\fP"
.br
.RI "This is a definition-friendly interface that new 'indexable' struct definitions can implement to make it a little easier to implement foreach and Query() operations for their struct\&. (You can use the \fBIndexableStructEnumerator\fP for this purpose, you just have to pass it type arguments that correspond to your struct type\&.) "
.ti -1c
.RI "class \fBLeap\&.Unity\&.BoxedIndexableStruct< Element, IndexableStruct >\fP"
.br
.RI "Explicit boxing class for IIndexableStructs that implements \fBIIndexable\fP\&. "
.ti -1c
.RI "class \fBLeap\&.Unity\&.BoxedIndexableStructExtensions\fP"
.br
.ti -1c
.RI "struct \fBLeap\&.Unity\&.IndexableStructEnumerator< Element, IndexableStruct >\fP"
.br
.RI "A two-generic-argument variant of an enumerator that allows an \fBIIndexableStruct\fP to quickly define an Enumerator that avoids allocation\&. "
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBLeap\fP"
.br
.ti -1c
.RI "namespace \fBLeap\&.Unity\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
