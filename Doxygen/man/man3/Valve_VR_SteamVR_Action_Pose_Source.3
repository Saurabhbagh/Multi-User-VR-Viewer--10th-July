.TH "Valve.VR.SteamVR_Action_Pose_Source" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Valve.VR.SteamVR_Action_Pose_Source
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBValve\&.VR\&.SteamVR_Action_In_Source\fP, and \fBValve\&.VR\&.ISteamVR_Action_Pose\fP\&.
.PP
Inherited by \fBValve\&.VR\&.SteamVR_Action_Skeleton_Source\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "override void \fBPreinitialize\fP (\fBSteamVR_Action\fP wrappingAction, \fBSteamVR_Input_Sources\fP forInputSource)"
.br
.RI "\fB[Should not be called by user code]\fP Sets up the internals of the action source before \fBSteamVR\fP has been initialized\&. "
.ti -1c
.RI "override void \fBInitialize\fP ()"
.br
.RI "\fB[Should not be called by user code]\fP Initializes the handle for the inputSource, the pose action data size, and any other related \fBSteamVR\fP data\&. "
.ti -1c
.RI "override void \fBUpdateValue\fP ()"
.br
.RI "\fB[Should not be called by user code]\fP Updates the data for this action and this input source\&. Sends related events\&. "
.ti -1c
.RI "virtual void \fBUpdateValue\fP (bool skipStateAndEventUpdates)"
.br
.RI "\fB[Should not be called by user code]\fP Updates the data for this action and this input source\&. Sends related events\&. "
.ti -1c
.RI "bool \fBGetVelocitiesAtTimeOffset\fP (float secondsFromNow, out Vector3 velocityAtTime, out Vector3 angularVelocityAtTime)"
.br
.RI "\fBSteamVR\fP keeps a log of past poses so you can retrieve old poses or estimated poses in the future by passing in a secondsFromNow value that is negative or positive\&. "
.ti -1c
.RI "bool \fBGetPoseAtTimeOffset\fP (float secondsFromNow, out Vector3 positionAtTime, out Quaternion rotationAtTime, out Vector3 velocityAtTime, out Vector3 angularVelocityAtTime)"
.br
.RI "\fBSteamVR\fP keeps a log of past poses so you can retrieve old poses or estimated poses in the future by passing in a secondsFromNow value that is negative or positive\&. "
.ti -1c
.RI "void \fBUpdateTransform\fP (Transform transformToUpdate)"
.br
.RI "Update a transform's local position and local roation to match the pose\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBETrackingUniverseOrigin\fP \fBuniverseOrigin\fP = \fBETrackingUniverseOrigin\&.TrackingUniverseRawAndUncalibrated\fP"
.br
.ti -1c
.RI "float \fBpredictedSecondsFromNow\fP = 0\&.011f"
.br
.RI "The amount of time in the future (or past!) the input system will predict poses for\&. Default is one frame forward (at 90hz) to account for render time\&. "
.ti -1c
.RI "float \fBchangeTolerance\fP = Mathf\&.Epsilon"
.br
.RI "The distance the pose needs to move/rotate before a change is detected "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBSetCacheVariables\fP ()"
.br
.ti -1c
.RI "bool \fBGetChanged\fP ()"
.br
.ti -1c
.RI "virtual void \fBCheckAndSendEvents\fP ()"
.br
.ti -1c
.RI "Vector3 \fBGetUnityCoordinateVelocity\fP (\fBHmdVector3_t\fP vector)"
.br
.ti -1c
.RI "Vector3 \fBGetUnityCoordinateAngularVelocity\fP (\fBHmdVector3_t\fP vector)"
.br
.ti -1c
.RI "Vector3 \fBGetUnityCoordinateVelocity\fP (float x, float y, float z)"
.br
.ti -1c
.RI "Vector3 \fBGetUnityCoordinateAngularVelocity\fP (float x, float y, float z)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBInputPoseActionData_t\fP \fBposeActionData\fP = new \fBInputPoseActionData_t\fP()"
.br
.ti -1c
.RI "\fBInputPoseActionData_t\fP \fBlastPoseActionData\fP = new \fBInputPoseActionData_t\fP()"
.br
.ti -1c
.RI "\fBInputPoseActionData_t\fP \fBtempPoseActionData\fP = new \fBInputPoseActionData_t\fP()"
.br
.ti -1c
.RI "\fBSteamVR_Action_Pose\fP \fBposeAction\fP"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static uint \fBposeActionData_size\fP = 0"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "override bool \fBchanged\fP\fC [get, protected set]\fP"
.br
.RI "True when the orientation of the pose has changhed more than changeTolerance in the last update\&. Note: Will only return true if the action is also active\&. "
.ti -1c
.RI "override bool \fBlastChanged\fP\fC [get, protected set]\fP"
.br
.RI "The value of the action's 'changed' during the previous update "
.ti -1c
.RI "override ulong \fBactiveOrigin\fP\fC [get]\fP"
.br
.RI "The handle to the origin of the component that was used to update this pose "
.ti -1c
.RI "override ulong \fBlastActiveOrigin\fP\fC [get]\fP"
.br
.RI "The handle to the origin of the component that was used to update the value for this action (for the previous update) "
.ti -1c
.RI "override bool \fBactive\fP\fC [get]\fP"
.br
.RI "True if this action is bound and the ActionSet is active "
.ti -1c
.RI "override bool \fBactiveBinding\fP\fC [get]\fP"
.br
.RI "True if the action is bound "
.ti -1c
.RI "override bool \fBlastActive\fP\fC [get, protected set]\fP"
.br
.RI "If the action was active (ActionSet active and binding active) during the last update "
.ti -1c
.RI "override bool \fBlastActiveBinding\fP\fC [get]\fP"
.br
.RI "If the action's binding was active during the previous update "
.ti -1c
.RI "\fBETrackingResult\fP \fBtrackingState\fP\fC [get]\fP"
.br
.RI "The state of the tracking system that is used to create pose data (position, rotation, etc) "
.ti -1c
.RI "\fBETrackingResult\fP \fBlastTrackingState\fP\fC [get]\fP"
.br
.RI "The tracking state for this pose during the previous update "
.ti -1c
.RI "bool \fBposeIsValid\fP\fC [get]\fP"
.br
.RI "True if the pose retrieved for this action and input source is valid (good data from the tracking source) "
.ti -1c
.RI "bool \fBlastPoseIsValid\fP\fC [get]\fP"
.br
.RI "True if the pose was valid during the previous update "
.ti -1c
.RI "bool \fBdeviceIsConnected\fP\fC [get]\fP"
.br
.RI "True if the device bound to this action and input source is connected "
.ti -1c
.RI "bool \fBlastDeviceIsConnected\fP\fC [get]\fP"
.br
.RI "True if the device bound to this action was connected during the previous update "
.ti -1c
.RI "Vector3 \fBlocalPosition\fP\fC [get, protected set]\fP"
.br
.RI "The local position of this action relative to the universe origin "
.ti -1c
.RI "Quaternion \fBlocalRotation\fP\fC [get, protected set]\fP"
.br
.RI "The local rotation of this action relative to the universe origin "
.ti -1c
.RI "Vector3 \fBlastLocalPosition\fP\fC [get, protected set]\fP"
.br
.RI "The local position for this pose during the previous update "
.ti -1c
.RI "Quaternion \fBlastLocalRotation\fP\fC [get, protected set]\fP"
.br
.RI "The local rotation for this pose during the previous update "
.ti -1c
.RI "Vector3 \fBvelocity\fP\fC [get, protected set]\fP"
.br
.RI "The local velocity of this pose relative to the universe origin "
.ti -1c
.RI "Vector3 \fBlastVelocity\fP\fC [get, protected set]\fP"
.br
.RI "The velocity for this pose during the previous update "
.ti -1c
.RI "Vector3 \fBangularVelocity\fP\fC [get, protected set]\fP"
.br
.RI "The local angular velocity of this pose relative to the universe origin "
.ti -1c
.RI "Vector3 \fBlastAngularVelocity\fP\fC [get, protected set]\fP"
.br
.RI "The angular velocity for this pose during the previous update "
.in -1c
.SS "Events"

.in +1c
.ti -1c
.RI "\fBSteamVR_Action_Pose\&.ActiveChangeHandler\fP \fBonActiveChange\fP"
.br
.RI "Event fires when the active state (ActionSet active and binding active) changes "
.ti -1c
.RI "\fBSteamVR_Action_Pose\&.ActiveChangeHandler\fP \fBonActiveBindingChange\fP"
.br
.RI "Event fires when the active state of the binding changes "
.ti -1c
.RI "\fBSteamVR_Action_Pose\&.ChangeHandler\fP \fBonChange\fP"
.br
.RI "Event fires when the orientation of the pose changes more than the changeTolerance "
.ti -1c
.RI "\fBSteamVR_Action_Pose\&.UpdateHandler\fP \fBonUpdate\fP"
.br
.RI "Event fires when the action is updated "
.ti -1c
.RI "\fBSteamVR_Action_Pose\&.TrackingChangeHandler\fP \fBonTrackingChanged\fP"
.br
.RI "Event fires when the state of the tracking system that is used to create pose data (position, rotation, etc) changes "
.ti -1c
.RI "\fBSteamVR_Action_Pose\&.ValidPoseChangeHandler\fP \fBonValidPoseChanged\fP"
.br
.RI "Event fires when the state of the pose data retrieved for this action changes validity (good/bad data from the tracking source) "
.ti -1c
.RI "\fBSteamVR_Action_Pose\&.DeviceConnectedChangeHandler\fP \fBonDeviceConnectedChanged\fP"
.br
.RI "Event fires when the device bound to this action is connected or disconnected "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 408 of file SteamVR_Action_Pose\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual void Valve\&.VR\&.SteamVR_Action_Pose_Source\&.CheckAndSendEvents ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBValve\&.VR\&.SteamVR_Action_Skeleton_Source\fP\&.
.PP
Definition at line 670 of file SteamVR_Action_Pose\&.cs\&.
.SS "bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.GetChanged ()\fC [protected]\fP"

.PP
Definition at line 596 of file SteamVR_Action_Pose\&.cs\&.
.SS "bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.GetPoseAtTimeOffset (float secondsFromNow, out Vector3 positionAtTime, out Quaternion rotationAtTime, out Vector3 velocityAtTime, out Vector3 angularVelocityAtTime)"

.PP
\fBSteamVR\fP keeps a log of past poses so you can retrieve old poses or estimated poses in the future by passing in a secondsFromNow value that is negative or positive\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsecondsFromNow\fP The time offset in the future (estimated) or in the past (previously recorded) you want to get data from
.RE
.PP
\fBReturns:\fP
.RS 4
true if we successfully returned a pose
.RE
.PP

.PP
Definition at line 638 of file SteamVR_Action_Pose\&.cs\&.
.SS "Vector3 Valve\&.VR\&.SteamVR_Action_Pose_Source\&.GetUnityCoordinateAngularVelocity (\fBHmdVector3_t\fP vector)\fC [protected]\fP"

.PP
Definition at line 699 of file SteamVR_Action_Pose\&.cs\&.
.SS "Vector3 Valve\&.VR\&.SteamVR_Action_Pose_Source\&.GetUnityCoordinateAngularVelocity (float x, float y, float z)\fC [protected]\fP"

.PP
Definition at line 713 of file SteamVR_Action_Pose\&.cs\&.
.SS "Vector3 Valve\&.VR\&.SteamVR_Action_Pose_Source\&.GetUnityCoordinateVelocity (\fBHmdVector3_t\fP vector)\fC [protected]\fP"

.PP
Definition at line 694 of file SteamVR_Action_Pose\&.cs\&.
.SS "Vector3 Valve\&.VR\&.SteamVR_Action_Pose_Source\&.GetUnityCoordinateVelocity (float x, float y, float z)\fC [protected]\fP"

.PP
Definition at line 704 of file SteamVR_Action_Pose\&.cs\&.
.SS "bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.GetVelocitiesAtTimeOffset (float secondsFromNow, out Vector3 velocityAtTime, out Vector3 angularVelocityAtTime)"

.PP
\fBSteamVR\fP keeps a log of past poses so you can retrieve old poses or estimated poses in the future by passing in a secondsFromNow value that is negative or positive\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsecondsFromNow\fP The time offset in the future (estimated) or in the past (previously recorded) you want to get data from
.RE
.PP
\fBReturns:\fP
.RS 4
true if we successfully returned a pose
.RE
.PP

.PP
Definition at line 615 of file SteamVR_Action_Pose\&.cs\&.
.SS "override void Valve\&.VR\&.SteamVR_Action_Pose_Source\&.Initialize ()\fC [virtual]\fP"

.PP
\fB[Should not be called by user code]\fP Initializes the handle for the inputSource, the pose action data size, and any other related \fBSteamVR\fP data\&. 
.PP
Reimplemented from \fBValve\&.VR\&.SteamVR_Action_In_Source\fP\&.
.PP
Reimplemented in \fBValve\&.VR\&.SteamVR_Action_Skeleton_Source\fP\&.
.PP
Definition at line 543 of file SteamVR_Action_Pose\&.cs\&.
.SS "override void Valve\&.VR\&.SteamVR_Action_Pose_Source\&.Preinitialize (\fBSteamVR_Action\fP wrappingAction, \fBSteamVR_Input_Sources\fP forInputSource)\fC [virtual]\fP"

.PP
\fB[Should not be called by user code]\fP Sets up the internals of the action source before \fBSteamVR\fP has been initialized\&. 
.PP
Reimplemented from \fBValve\&.VR\&.SteamVR_Action_Source\fP\&.
.PP
Reimplemented in \fBValve\&.VR\&.SteamVR_Action_Skeleton_Source\fP\&.
.PP
Definition at line 533 of file SteamVR_Action_Pose\&.cs\&.
.SS "void Valve\&.VR\&.SteamVR_Action_Pose_Source\&.SetCacheVariables ()\fC [protected]\fP"

.PP
Definition at line 587 of file SteamVR_Action_Pose\&.cs\&.
.SS "void Valve\&.VR\&.SteamVR_Action_Pose_Source\&.UpdateTransform (Transform transformToUpdate)"

.PP
Update a transform's local position and local roation to match the pose\&. 
.PP
\fBParameters:\fP
.RS 4
\fItransformToUpdate\fP The transform of the object to be updated
.RE
.PP

.PP
Definition at line 664 of file SteamVR_Action_Pose\&.cs\&.
.SS "override void Valve\&.VR\&.SteamVR_Action_Pose_Source\&.UpdateValue ()\fC [virtual]\fP"

.PP
\fB[Should not be called by user code]\fP Updates the data for this action and this input source\&. Sends related events\&. 
.PP
Implements \fBValve\&.VR\&.SteamVR_Action_In_Source\fP\&.
.PP
Reimplemented in \fBValve\&.VR\&.SteamVR_Action_Skeleton_Source\fP\&.
.PP
Definition at line 554 of file SteamVR_Action_Pose\&.cs\&.
.SS "virtual void Valve\&.VR\&.SteamVR_Action_Pose_Source\&.UpdateValue (bool skipStateAndEventUpdates)\fC [virtual]\fP"

.PP
\fB[Should not be called by user code]\fP Updates the data for this action and this input source\&. Sends related events\&. 
.PP
Reimplemented in \fBValve\&.VR\&.SteamVR_Action_Skeleton_Source\fP\&.
.PP
Definition at line 562 of file SteamVR_Action_Pose\&.cs\&.
.SH "Member Data Documentation"
.PP 
.SS "float Valve\&.VR\&.SteamVR_Action_Pose_Source\&.changeTolerance = Mathf\&.Epsilon"

.PP
The distance the pose needs to move/rotate before a change is detected 
.PP
Definition at line 418 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBInputPoseActionData_t\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastPoseActionData = new \fBInputPoseActionData_t\fP()\fC [protected]\fP"

.PP
Definition at line 523 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBSteamVR_Action_Pose\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.poseAction\fC [protected]\fP"

.PP
Definition at line 528 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBInputPoseActionData_t\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.poseActionData = new \fBInputPoseActionData_t\fP()\fC [protected]\fP"

.PP
Definition at line 521 of file SteamVR_Action_Pose\&.cs\&.
.SS "uint Valve\&.VR\&.SteamVR_Action_Pose_Source\&.poseActionData_size = 0\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line 412 of file SteamVR_Action_Pose\&.cs\&.
.SS "float Valve\&.VR\&.SteamVR_Action_Pose_Source\&.predictedSecondsFromNow = 0\&.011f"

.PP
The amount of time in the future (or past!) the input system will predict poses for\&. Default is one frame forward (at 90hz) to account for render time\&. 
.PP
Definition at line 415 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBInputPoseActionData_t\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.tempPoseActionData = new \fBInputPoseActionData_t\fP()\fC [protected]\fP"

.PP
Definition at line 525 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBETrackingUniverseOrigin\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.universeOrigin = \fBETrackingUniverseOrigin\&.TrackingUniverseRawAndUncalibrated\fP"

.PP
Definition at line 410 of file SteamVR_Action_Pose\&.cs\&.
.SH "Property Documentation"
.PP 
.SS "override bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.active\fC [get]\fP"

.PP
True if this action is bound and the ActionSet is active 
.PP
Definition at line 465 of file SteamVR_Action_Pose\&.cs\&.
.SS "override bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.activeBinding\fC [get]\fP"

.PP
True if the action is bound 
.PP
Definition at line 468 of file SteamVR_Action_Pose\&.cs\&.
.SS "override ulong Valve\&.VR\&.SteamVR_Action_Pose_Source\&.activeOrigin\fC [get]\fP"

.PP
The handle to the origin of the component that was used to update this pose 
.PP
Definition at line 451 of file SteamVR_Action_Pose\&.cs\&.
.SS "Vector3 Valve\&.VR\&.SteamVR_Action_Pose_Source\&.angularVelocity\fC [get]\fP, \fC [protected set]\fP"

.PP
The local angular velocity of this pose relative to the universe origin 
.PP
Definition at line 515 of file SteamVR_Action_Pose\&.cs\&.
.SS "override bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.changed\fC [get]\fP, \fC [protected set]\fP"

.PP
True when the orientation of the pose has changhed more than changeTolerance in the last update\&. Note: Will only return true if the action is also active\&. 
.PP
Definition at line 444 of file SteamVR_Action_Pose\&.cs\&.
.SS "bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.deviceIsConnected\fC [get]\fP"

.PP
True if the device bound to this action and input source is connected 
.PP
Definition at line 490 of file SteamVR_Action_Pose\&.cs\&.
.SS "override bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastActive\fC [get]\fP, \fC [protected set]\fP"

.PP
If the action was active (ActionSet active and binding active) during the last update 
.PP
Definition at line 472 of file SteamVR_Action_Pose\&.cs\&.
.SS "override bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastActiveBinding\fC [get]\fP"

.PP
If the action's binding was active during the previous update 
.PP
Definition at line 475 of file SteamVR_Action_Pose\&.cs\&.
.SS "override ulong Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastActiveOrigin\fC [get]\fP"

.PP
The handle to the origin of the component that was used to update the value for this action (for the previous update) 
.PP
Definition at line 462 of file SteamVR_Action_Pose\&.cs\&.
.SS "Vector3 Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastAngularVelocity\fC [get]\fP, \fC [protected set]\fP"

.PP
The angular velocity for this pose during the previous update 
.PP
Definition at line 518 of file SteamVR_Action_Pose\&.cs\&.
.SS "override bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastChanged\fC [get]\fP, \fC [protected set]\fP"

.PP
The value of the action's 'changed' during the previous update 
.PP
Definition at line 447 of file SteamVR_Action_Pose\&.cs\&.
.SS "bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastDeviceIsConnected\fC [get]\fP"

.PP
True if the device bound to this action was connected during the previous update 
.PP
Definition at line 493 of file SteamVR_Action_Pose\&.cs\&.
.SS "Vector3 Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastLocalPosition\fC [get]\fP, \fC [protected set]\fP"

.PP
The local position for this pose during the previous update 
.PP
Definition at line 503 of file SteamVR_Action_Pose\&.cs\&.
.SS "Quaternion Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastLocalRotation\fC [get]\fP, \fC [protected set]\fP"

.PP
The local rotation for this pose during the previous update 
.PP
Definition at line 506 of file SteamVR_Action_Pose\&.cs\&.
.SS "bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastPoseIsValid\fC [get]\fP"

.PP
True if the pose was valid during the previous update 
.PP
Definition at line 487 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBETrackingResult\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastTrackingState\fC [get]\fP"

.PP
The tracking state for this pose during the previous update 
.PP
Definition at line 481 of file SteamVR_Action_Pose\&.cs\&.
.SS "Vector3 Valve\&.VR\&.SteamVR_Action_Pose_Source\&.lastVelocity\fC [get]\fP, \fC [protected set]\fP"

.PP
The velocity for this pose during the previous update 
.PP
Definition at line 512 of file SteamVR_Action_Pose\&.cs\&.
.SS "Vector3 Valve\&.VR\&.SteamVR_Action_Pose_Source\&.localPosition\fC [get]\fP, \fC [protected set]\fP"

.PP
The local position of this action relative to the universe origin 
.PP
Definition at line 497 of file SteamVR_Action_Pose\&.cs\&.
.SS "Quaternion Valve\&.VR\&.SteamVR_Action_Pose_Source\&.localRotation\fC [get]\fP, \fC [protected set]\fP"

.PP
The local rotation of this action relative to the universe origin 
.PP
Definition at line 500 of file SteamVR_Action_Pose\&.cs\&.
.SS "bool Valve\&.VR\&.SteamVR_Action_Pose_Source\&.poseIsValid\fC [get]\fP"

.PP
True if the pose retrieved for this action and input source is valid (good data from the tracking source) 
.PP
Definition at line 484 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBETrackingResult\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.trackingState\fC [get]\fP"

.PP
The state of the tracking system that is used to create pose data (position, rotation, etc) 
.PP
Definition at line 478 of file SteamVR_Action_Pose\&.cs\&.
.SS "Vector3 Valve\&.VR\&.SteamVR_Action_Pose_Source\&.velocity\fC [get]\fP, \fC [protected set]\fP"

.PP
The local velocity of this pose relative to the universe origin 
.PP
Definition at line 509 of file SteamVR_Action_Pose\&.cs\&.
.SH "Event Documentation"
.PP 
.SS "\fBSteamVR_Action_Pose\&.ActiveChangeHandler\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.onActiveBindingChange"

.PP
Event fires when the active state of the binding changes 
.PP
Definition at line 424 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBSteamVR_Action_Pose\&.ActiveChangeHandler\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.onActiveChange"

.PP
Event fires when the active state (ActionSet active and binding active) changes 
.PP
Definition at line 421 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBSteamVR_Action_Pose\&.ChangeHandler\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.onChange"

.PP
Event fires when the orientation of the pose changes more than the changeTolerance 
.PP
Definition at line 427 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBSteamVR_Action_Pose\&.DeviceConnectedChangeHandler\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.onDeviceConnectedChanged"

.PP
Event fires when the device bound to this action is connected or disconnected 
.PP
Definition at line 439 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBSteamVR_Action_Pose\&.TrackingChangeHandler\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.onTrackingChanged"

.PP
Event fires when the state of the tracking system that is used to create pose data (position, rotation, etc) changes 
.PP
Definition at line 433 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBSteamVR_Action_Pose\&.UpdateHandler\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.onUpdate"

.PP
Event fires when the action is updated 
.PP
Definition at line 430 of file SteamVR_Action_Pose\&.cs\&.
.SS "\fBSteamVR_Action_Pose\&.ValidPoseChangeHandler\fP Valve\&.VR\&.SteamVR_Action_Pose_Source\&.onValidPoseChanged"

.PP
Event fires when the state of the pose data retrieved for this action changes validity (good/bad data from the tracking source) 
.PP
Definition at line 436 of file SteamVR_Action_Pose\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
