.TH "Leap.Image" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Leap.Image \- The \fBImage\fP class represents a stereo image pair from the \fBLeap\fP Motion device\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBFormatType\fP { \fBFormatType\&.INFRARED\fP = 0, \fBFormatType\&.IBRG\fP = 1 }"
.br
.RI "Enumerates the possible image formats\&. "
.ti -1c
.RI "enum \fBImageType\fP { \fBImageType\&.DEFAULT\fP, \fBImageType\&.RAW\fP }"
.br
.ti -1c
.RI "enum \fBCameraType\fP { \fBCameraType\&.LEFT\fP = 0, \fBCameraType\&.RIGHT\fP = 1 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBImage\fP (Int64 frameId, Int64 timestamp, \fBImageData\fP leftImage, \fBImageData\fP rightImage)"
.br
.ti -1c
.RI "byte [] \fBData\fP (\fBCameraType\fP camera)"
.br
.RI "The buffer containing the image data\&. "
.ti -1c
.RI "UInt32 \fBByteOffset\fP (\fBCameraType\fP camera)"
.br
.RI "The offset, in number of bytes, from the beginning of the \fBData()\fP buffer to the first byte of the image data for the specified camera\&. "
.ti -1c
.RI "float [] \fBDistortion\fP (\fBCameraType\fP camera)"
.br
.RI "The distortion calibration map for this image\&. "
.ti -1c
.RI "\fBVector\fP \fBPixelToRectilinear\fP (\fBCameraType\fP camera, \fBVector\fP pixel)"
.br
.RI "Provides the corrected camera ray intercepting the specified point on the image\&. "
.ti -1c
.RI "\fBVector\fP \fBRectilinearToPixel\fP (\fBCameraType\fP camera, \fBVector\fP ray)"
.br
.RI "Provides the point in the image corresponding to a ray projecting from the camera\&. "
.ti -1c
.RI "bool \fBEquals\fP (\fBImage\fP other)"
.br
.RI "Compare \fBImage\fP object equality\&. "
.ti -1c
.RI "override string \fBToString\fP ()"
.br
.RI "A string containing a brief, human readable description of the \fBImage\fP object\&. "
.ti -1c
.RI "float \fBRayOffsetX\fP (\fBCameraType\fP camera)"
.br
.RI "The horizontal ray offset for a particular camera\&. "
.ti -1c
.RI "float \fBRayOffsetY\fP (\fBCameraType\fP camera)"
.br
.RI "The vertical ray offset for a particular camera\&. "
.ti -1c
.RI "float \fBRayScaleX\fP (\fBCameraType\fP camera)"
.br
.RI "The horizontal ray scale factor for a particular camera\&. "
.ti -1c
.RI "float \fBRayScaleY\fP (\fBCameraType\fP camera)"
.br
.RI "The vertical ray scale factor for a particular camera\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "UInt32 \fBNumBytes\fP\fC [get]\fP"
.br
.RI "The number of bytes in the \fBData()\fP buffer corresponding to each image\&. Use the \fBByteOffset()\fP function to find the starting byte offset for each image\&. "
.ti -1c
.RI "Int64 \fBSequenceId\fP\fC [get]\fP"
.br
.RI "The image sequence ID\&. "
.ti -1c
.RI "int \fBWidth\fP\fC [get]\fP"
.br
.RI "The image width\&. "
.ti -1c
.RI "int \fBHeight\fP\fC [get]\fP"
.br
.RI "The image height\&. "
.ti -1c
.RI "int \fBBytesPerPixel\fP\fC [get]\fP"
.br
.RI "The number of bytes per pixel\&. "
.ti -1c
.RI "\fBFormatType\fP \fBFormat\fP\fC [get]\fP"
.br
.RI "The image format\&. "
.ti -1c
.RI "\fBImageType\fP \fBType\fP\fC [get]\fP"
.br
.ti -1c
.RI "int \fBDistortionWidth\fP\fC [get]\fP"
.br
.RI "The stride of the distortion map\&. "
.ti -1c
.RI "int \fBDistortionHeight\fP\fC [get]\fP"
.br
.RI "The distortion map height\&. Currently fixed at 64\&. "
.ti -1c
.RI "Int64 \fBTimestamp\fP\fC [get]\fP"
.br
.RI "Returns a timestamp indicating when this frame began being captured on the device\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBImage\fP class represents a stereo image pair from the \fBLeap\fP Motion device\&. 

In addition to image data, the \fBImage\fP object provides a distortion map for correcting lens distortion\&. 
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 21 of file Image\&.cs\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBLeap\&.Image\&.CameraType\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILEFT \fP\fP
.TP
\fB\fIRIGHT \fP\fP
.PP
Definition at line 387 of file Image\&.cs\&.
.SS "enum \fBLeap\&.Image\&.FormatType\fP\fC [strong]\fP"

.PP
Enumerates the possible image formats\&. The \fBImage\&.Format()\fP function returns an item from the FormatType enumeration\&. 
.PP
\fBSince:\fP
.RS 4
2\&.2\&.0 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIINFRARED \fP\fP
.TP
\fB\fIIBRG \fP\fP
.PP
Definition at line 377 of file Image\&.cs\&.
.SS "enum \fBLeap\&.Image\&.ImageType\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDEFAULT \fP\fP
.TP
\fB\fIRAW \fP\fP
.PP
Definition at line 382 of file Image\&.cs\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Leap\&.Image\&.Image (Int64 frameId, Int64 timestamp, \fBImageData\fP leftImage, \fBImageData\fP rightImage)"

.PP
Definition at line 27 of file Image\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "UInt32 Leap\&.Image\&.ByteOffset (\fBCameraType\fP camera)"

.PP
The offset, in number of bytes, from the beginning of the \fBData()\fP buffer to the first byte of the image data for the specified camera\&. 
.PP
\fBSince:\fP
.RS 4
4\&.0 
.RE
.PP

.PP
Definition at line 73 of file Image\&.cs\&.
.SS "byte [] Leap\&.Image\&.Data (\fBCameraType\fP camera)"

.PP
The buffer containing the image data\&. The image data is a set of 8-bit intensity values\&. The buffer is image\&.Width * image\&.Height * image\&.BytesPerPixel bytes long\&.
.PP
Use the ByteOffset(` method to find the beginning offset of the data for the specified camera\&.
.PP
\fBSince:\fP
.RS 4
4\&.0 
.RE
.PP

.PP
Definition at line 60 of file Image\&.cs\&.
.SS "float [] Leap\&.Image\&.Distortion (\fBCameraType\fP camera)"

.PP
The distortion calibration map for this image\&. The calibration map is a 64x64 grid of points\&. Each point is defined by a pair of 32-bit floating point values\&. Each point in the map represents a ray projected into the camera\&. The value of a grid point defines the pixel in the image data containing the brightness value produced by the light entering along the corresponding ray\&. By interpolating between grid data points, you can find the brightness value for any projected ray\&. Grid values that fall outside the range [0\&.\&.1] do not correspond to a value in the image data and those points should be ignored\&.
.PP
The calibration map can be used to render an undistorted image as well as to find the true angle from the camera to a feature in the raw image\&. The distortion map itself is designed to be used with GLSL shader programs\&. In other contexts, it may be more convenient to use the \fBImage\fP Rectify() and Warp() functions\&.
.PP
Distortion is caused by the lens geometry as well as imperfections in the lens and sensor window\&. The calibration map is created by the calibration process run for each device at the factory (and which can be rerun by the user)\&.
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 118 of file Image\&.cs\&.
.SS "bool Leap\&.Image\&.Equals (\fBImage\fP other)"

.PP
Compare \fBImage\fP object equality\&. Two \fBImage\fP objects are equal if and only if both \fBImage\fP objects represent the exact same \fBImage\fP and both Images are valid\&. 
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 185 of file Image\&.cs\&.
.SS "\fBVector\fP Leap\&.Image\&.PixelToRectilinear (\fBCameraType\fP camera, \fBVector\fP pixel)"

.PP
Provides the corrected camera ray intercepting the specified point on the image\&. Given a point on the image, \fBPixelToRectilinear()\fP corrects for camera distortion and returns the true direction from the camera to the source of that image point within the \fBLeap\fP Motion field of view\&.
.PP
This direction vector has an x and y component [x, y, 1], with the third element always one\&. Note that this vector uses the 2D camera coordinate system where the x-axis parallels the longer (typically horizontal) dimension and the y-axis parallels the shorter (vertical) dimension\&. The camera coordinate system does not correlate to the 3D \fBLeap\fP Motion coordinate system\&.
.PP
\fBNote:\fP This function should be called immediately after an image is obtained\&. Incorrect results will be returned if the image orientation has changed or a different device is plugged in between the time the image was received and the time this function is called\&.
.PP
Note, this function was formerly named Rectify()\&. 
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 145 of file Image\&.cs\&.
.SS "float Leap\&.Image\&.RayOffsetX (\fBCameraType\fP camera)"

.PP
The horizontal ray offset for a particular camera\&. Used to convert between normalized coordinates in the range [0\&.\&.1] and the ray slope range [-4\&.\&.4]\&.
.PP
\fBSince:\fP
.RS 4
4\&.0 
.RE
.PP

.PP
Definition at line 309 of file Image\&.cs\&.
.SS "float Leap\&.Image\&.RayOffsetY (\fBCameraType\fP camera)"

.PP
The vertical ray offset for a particular camera\&. Used to convert between normalized coordinates in the range [0\&.\&.1] and the ray slope range [-4\&.\&.4]\&.
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 324 of file Image\&.cs\&.
.SS "float Leap\&.Image\&.RayScaleX (\fBCameraType\fP camera)"

.PP
The horizontal ray scale factor for a particular camera\&. Used to convert between normalized coordinates in the range [0\&.\&.1] and the ray slope range [-4\&.\&.4]\&.
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 339 of file Image\&.cs\&.
.SS "float Leap\&.Image\&.RayScaleY (\fBCameraType\fP camera)"

.PP
The vertical ray scale factor for a particular camera\&. Used to convert between normalized coordinates in the range [0\&.\&.1] and the ray slope range [-4\&.\&.4]\&.
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 354 of file Image\&.cs\&.
.SS "\fBVector\fP Leap\&.Image\&.RectilinearToPixel (\fBCameraType\fP camera, \fBVector\fP ray)"

.PP
Provides the point in the image corresponding to a ray projecting from the camera\&. Given a ray projected from the camera in the specified direction, \fBRectilinearToPixel()\fP corrects for camera distortion and returns the corresponding pixel coordinates in the image\&.
.PP
The ray direction is specified in relationship to the camera\&. The first vector element corresponds to the 'horizontal' view angle; the second corresponds to the 'vertical' view angle\&.
.PP
The \fBRectilinearToPixel()\fP function returns pixel coordinates outside of the image bounds if you project a ray toward a point for which there is no recorded data\&.
.PP
\fBRectilinearToPixel()\fP is typically not fast enough for realtime distortion correction\&. For better performance, use a shader program executed on a GPU\&.
.PP
\fBNote:\fP This function should be called immediately after an image is obtained\&. Incorrect results will be returned if the image orientation has changed or a different device is plugged in between the time the image was received and the time this function is called\&.
.PP
Note, this function was formerly named Warp()\&. 
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 174 of file Image\&.cs\&.
.SS "override string Leap\&.Image\&.ToString ()"

.PP
A string containing a brief, human readable description of the \fBImage\fP object\&. 
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 196 of file Image\&.cs\&.
.SH "Property Documentation"
.PP 
.SS "int Leap\&.Image\&.BytesPerPixel\fC [get]\fP"

.PP
The number of bytes per pixel\&. Use this value along with \fBImage\&.Width()\fP and \fBImage\&.Height()\fP to calculate the size of the data buffer\&.
.PP
\fBSince:\fP
.RS 4
2\&.2\&.0 
.RE
.PP

.PP
Definition at line 238 of file Image\&.cs\&.
.SS "int Leap\&.Image\&.DistortionHeight\fC [get]\fP"

.PP
The distortion map height\&. Currently fixed at 64\&. 
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 295 of file Image\&.cs\&.
.SS "int Leap\&.Image\&.DistortionWidth\fC [get]\fP"

.PP
The stride of the distortion map\&. Since each point on the 64x64 element distortion map has two values in the buffer, the stride is 2 times the size of the grid\&. (Stride is currently fixed at 2 * 64 = 128)\&.
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 283 of file Image\&.cs\&.
.SS "\fBFormatType\fP Leap\&.Image\&.Format\fC [get]\fP"

.PP
The image format\&. 
.PP
\fBSince:\fP
.RS 4
2\&.2\&.0 
.RE
.PP

.PP
Definition at line 248 of file Image\&.cs\&.
.SS "int Leap\&.Image\&.Height\fC [get]\fP"

.PP
The image height\&. 
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 224 of file Image\&.cs\&.
.SS "UInt32 Leap\&.Image\&.NumBytes\fC [get]\fP"

.PP
The number of bytes in the \fBData()\fP buffer corresponding to each image\&. Use the \fBByteOffset()\fP function to find the starting byte offset for each image\&. 
.PP
\fBSince:\fP
.RS 4
4\&.0 
.RE
.PP

.PP
Definition at line 87 of file Image\&.cs\&.
.SS "Int64 Leap\&.Image\&.SequenceId\fC [get]\fP"

.PP
The image sequence ID\&. 
.PP
\fBSince:\fP
.RS 4
2\&.2\&.1 
.RE
.PP

.PP
Definition at line 204 of file Image\&.cs\&.
.SS "Int64 Leap\&.Image\&.Timestamp\fC [get]\fP"

.PP
Returns a timestamp indicating when this frame began being captured on the device\&. 
.PP
\fBSince:\fP
.RS 4
2\&.2\&.7 
.RE
.PP

.PP
Definition at line 365 of file Image\&.cs\&.
.SS "\fBImageType\fP Leap\&.Image\&.Type\fC [get]\fP"

.PP
Definition at line 261 of file Image\&.cs\&.
.SS "int Leap\&.Image\&.Width\fC [get]\fP"

.PP
The image width\&. 
.PP
\fBSince:\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.PP
Definition at line 214 of file Image\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
