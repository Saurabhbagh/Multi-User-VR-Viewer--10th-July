.TH "Leap.Unity.FingerModel" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Leap.Unity.FingerModel
.SH SYNOPSIS
.br
.PP
.PP
Inherits MonoBehaviour\&.
.PP
Inherited by \fBLeap\&.Unity\&.RiggedFinger\fP, and \fBLeap\&.Unity\&.SkeletalFinger\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBSetLeapHand\fP (\fBHand\fP hand)"
.br
.ti -1c
.RI "\fBHand\fP \fBGetLeapHand\fP ()"
.br
.ti -1c
.RI "\fBFinger\fP \fBGetLeapFinger\fP ()"
.br
.ti -1c
.RI "virtual void \fBInitFinger\fP ()"
.br
.ti -1c
.RI "abstract void \fBUpdateFinger\fP ()"
.br
.ti -1c
.RI "Vector3 \fBGetTipPosition\fP ()"
.br
.ti -1c
.RI "Vector3 \fBGetJointPosition\fP (int joint)"
.br
.ti -1c
.RI "Ray \fBGetRay\fP ()"
.br
.ti -1c
.RI "Vector3 \fBGetBoneCenter\fP (int bone_type)"
.br
.ti -1c
.RI "Vector3 \fBGetBoneDirection\fP (int bone_type)"
.br
.ti -1c
.RI "Quaternion \fBGetBoneRotation\fP (int bone_type)"
.br
.ti -1c
.RI "float \fBGetBoneLength\fP (int bone_type)"
.br
.ti -1c
.RI "float \fBGetBoneWidth\fP (int bone_type)"
.br
.ti -1c
.RI "float \fBGetFingerJointStretchMecanim\fP (int joint_type)"
.br
.ti -1c
.RI "float \fBGetFingerJointSpreadMecanim\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "const int \fBNUM_BONES\fP = 4"
.br
.ti -1c
.RI "const int \fBNUM_JOINTS\fP = 3"
.br
.ti -1c
.RI "\fBFinger\&.FingerType\fP \fBfingerType\fP = \fBFinger\&.FingerType\&.TYPE_INDEX\fP"
.br
.ti -1c
.RI "Transform [] \fBbones\fP = new Transform[\fBNUM_BONES\fP]"
.br
.ti -1c
.RI "Transform [] \fBjoints\fP = new Transform[\fBNUM_BONES\fP \- 1]"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBHand\fP \fBhand_\fP"
.br
.ti -1c
.RI "\fBFinger\fP \fBfinger_\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The base class for all fingers\&.
.PP
This class serves as the interface between the HandController object, the parent \fBHand\fP object and the concrete finger objects\&.
.PP
Subclasses of \fBFingerModel\fP must implement \fBInitFinger()\fP and \fBUpdateFinger()\fP\&. The InitHand() function is typically called by the parent \fBHandModel\fP InitHand() method; likewise, the \fBUpdateFinger()\fP function is typically called by the parent \fBHandModel\fP UpdateHand() function\&. 
.PP
Definition at line 27 of file FingerModel\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "Vector3 Leap\&.Unity\&.FingerModel\&.GetBoneCenter (int bone_type)"
Returns the center of the given bone on the finger 
.PP
Definition at line 117 of file FingerModel\&.cs\&.
.SS "Vector3 Leap\&.Unity\&.FingerModel\&.GetBoneDirection (int bone_type)"
Returns the direction the given bone is facing on the finger 
.PP
Definition at line 129 of file FingerModel\&.cs\&.
.SS "float Leap\&.Unity\&.FingerModel\&.GetBoneLength (int bone_type)"
Returns the length of the finger bone\&. 
.PP
Definition at line 153 of file FingerModel\&.cs\&.
.SS "Quaternion Leap\&.Unity\&.FingerModel\&.GetBoneRotation (int bone_type)"
Returns the rotation quaternion of the given bone 
.PP
Definition at line 141 of file FingerModel\&.cs\&.
.SS "float Leap\&.Unity\&.FingerModel\&.GetBoneWidth (int bone_type)"
Returns the width of the finger bone\&. 
.PP
Definition at line 158 of file FingerModel\&.cs\&.
.SS "float Leap\&.Unity\&.FingerModel\&.GetFingerJointSpreadMecanim ()"
Returns Mecanim spread angle, which only applies to joint_type = 0 NOTE: Positive spread is towards thumb for index and middle, but is in the opposite direction for the ring and pinky\&. For the thumb negative spread rotates the thumb in to the palm\&. 
.PP
Definition at line 193 of file FingerModel\&.cs\&.
.SS "float Leap\&.Unity\&.FingerModel\&.GetFingerJointStretchMecanim (int joint_type)"
Returns Mecanim stretch angle in the range (-180, +180] NOTE: Positive stretch opens the hand\&. For the thumb this moves it away from the palm\&. 
.PP
Definition at line 167 of file FingerModel\&.cs\&.
.SS "Vector3 Leap\&.Unity\&.FingerModel\&.GetJointPosition (int joint)"
Returns the location of the given joint on the finger 
.PP
Definition at line 96 of file FingerModel\&.cs\&.
.SS "\fBFinger\fP Leap\&.Unity\&.FingerModel\&.GetLeapFinger ()"
The \fBLeap\fP \fBFinger\fP object\&. 
.PP
Definition at line 64 of file FingerModel\&.cs\&.
.SS "\fBHand\fP Leap\&.Unity\&.FingerModel\&.GetLeapHand ()"
The \fBLeap\fP \fBHand\fP object\&. 
.PP
Definition at line 62 of file FingerModel\&.cs\&.
.SS "Ray Leap\&.Unity\&.FingerModel\&.GetRay ()"
Returns a ray from the tip of the finger in the direction it is pointing\&. 
.PP
Definition at line 111 of file FingerModel\&.cs\&.
.SS "Vector3 Leap\&.Unity\&.FingerModel\&.GetTipPosition ()"
Returns the location of the tip of the finger 
.PP
Definition at line 84 of file FingerModel\&.cs\&.
.SS "virtual void Leap\&.Unity\&.FingerModel\&.InitFinger ()\fC [virtual]\fP"
Implement this function to initialize this finger after it is created\&. Typically, this function is called by the parent \fBHandModel\fP object\&. 
.PP
Reimplemented in \fBLeap\&.Unity\&.SkeletalFinger\fP\&.
.PP
Definition at line 70 of file FingerModel\&.cs\&.
.SS "void Leap\&.Unity\&.FingerModel\&.SetLeapHand (\fBHand\fP hand)"
Sets the \fBLeap\fP \fBHand\fP and \fBLeap\fP \fBFinger\fP for this finger\&. Note that \fBLeap\fP \fBHand\fP and \fBFinger\fP objects are recreated every frame\&. The parent \fBHandModel\fP object calls this function to set or update the underlying finger\&. The tracking data in the \fBLeap\fP objects are used to update the \fBFingerModel\fP\&. 
.PP
Definition at line 54 of file FingerModel\&.cs\&.
.SS "abstract void Leap\&.Unity\&.FingerModel\&.UpdateFinger ()\fC [pure virtual]\fP"
Implement this function to update this finger once per game loop\&. Typically, this function is called by the parent \fBHandModel\fP object's UpdateHand() function, which is called in the \fBUnity\fP Update() phase for graphics hand models and in the FixedUpdate() phase for physics hand models\&. 
.PP
Implemented in \fBLeap\&.Unity\&.RiggedFinger\fP, \fBLeap\&.Unity\&.RigidFinger\fP, and \fBLeap\&.Unity\&.SkeletalFinger\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "Transform [] Leap\&.Unity\&.FingerModel\&.bones = new Transform[\fBNUM_BONES\fP]"
Bones positioned and rotated by \fBFingerModel\fP\&. 
.PP
Definition at line 39 of file FingerModel\&.cs\&.
.SS "\fBFinger\fP Leap\&.Unity\&.FingerModel\&.finger_\fC [protected]\fP"
The \fBLeap\fP \fBFinger\fP object\&. 
.PP
Definition at line 47 of file FingerModel\&.cs\&.
.SS "\fBFinger\&.FingerType\fP Leap\&.Unity\&.FingerModel\&.fingerType = \fBFinger\&.FingerType\&.TYPE_INDEX\fP"

.PP
Definition at line 35 of file FingerModel\&.cs\&.
.SS "\fBHand\fP Leap\&.Unity\&.FingerModel\&.hand_\fC [protected]\fP"
The \fBLeap\fP \fBHand\fP object\&. 
.PP
Definition at line 45 of file FingerModel\&.cs\&.
.SS "Transform [] Leap\&.Unity\&.FingerModel\&.joints = new Transform[\fBNUM_BONES\fP \- 1]"
Joints positioned and rotated by \fBFingerModel\fP\&. 
.PP
Definition at line 41 of file FingerModel\&.cs\&.
.SS "const int Leap\&.Unity\&.FingerModel\&.NUM_BONES = 4"
The number of bones in a finger\&. 
.PP
Definition at line 30 of file FingerModel\&.cs\&.
.SS "const int Leap\&.Unity\&.FingerModel\&.NUM_JOINTS = 3"
The number of joints in a finger\&. 
.PP
Definition at line 33 of file FingerModel\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
