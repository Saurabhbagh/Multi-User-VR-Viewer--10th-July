.TH "Leap.Vector" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Leap.Vector \- The \fBVector\fP struct represents a three-component mathematical vector or point such as a direction or position in three-dimensional space\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits IEquatable< Vector >\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "float [] \fBToFloatArray\fP ()"
.br
.ti -1c
.RI "\fBVector\fP (float \fBx\fP, float \fBy\fP, float \fBz\fP)"
.br
.RI "Creates a new \fBVector\fP with the specified component values\&. "
.ti -1c
.RI "\fBVector\fP (\fBVector\fP vector)"
.br
.RI "Copies the specified \fBVector\fP\&. "
.ti -1c
.RI "float \fBDistanceTo\fP (\fBVector\fP other)"
.br
.RI "The distance between the point represented by this \fBVector\fP object and a point represented by the specified \fBVector\fP object\&. "
.ti -1c
.RI "float \fBAngleTo\fP (\fBVector\fP other)"
.br
.RI "The angle between this vector and the specified vector in radians\&. "
.ti -1c
.RI "float \fBDot\fP (\fBVector\fP other)"
.br
.RI "The dot product of this vector with another vector\&. "
.ti -1c
.RI "\fBVector\fP \fBCross\fP (\fBVector\fP other)"
.br
.RI "The cross product of this vector and the specified vector\&. "
.ti -1c
.RI "override string \fBToString\fP ()"
.br
.RI "Returns a string containing this vector in a human readable format: (x, y, z)\&. "
.ti -1c
.RI "bool \fBEquals\fP (\fBVector\fP v)"
.br
.RI "Compare \fBVector\fP equality component-wise\&. "
.ti -1c
.RI "override bool \fBEquals\fP (\fBObject\fP obj)"
.br
.ti -1c
.RI "bool \fBIsValid\fP ()"
.br
.RI "Returns true if all of the vector's components are finite\&. If any component is NaN or infinite, then this returns false\&. "
.ti -1c
.RI "override int \fBGetHashCode\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBVector\fP \fBoperator+\fP (\fBVector\fP v1, \fBVector\fP v2)"
.br
.ti -1c
.RI "static \fBVector\fP \fBoperator \-\fP (\fBVector\fP v1, \fBVector\fP v2)"
.br
.ti -1c
.RI "static \fBVector\fP \fBoperator *\fP (\fBVector\fP v1, float scalar)"
.br
.ti -1c
.RI "static \fBVector\fP \fBoperator *\fP (float scalar, \fBVector\fP v1)"
.br
.ti -1c
.RI "static \fBVector\fP \fBoperator/\fP (\fBVector\fP v1, float scalar)"
.br
.ti -1c
.RI "static \fBVector\fP \fBoperator \-\fP (\fBVector\fP v1)"
.br
.ti -1c
.RI "static bool \fBoperator==\fP (\fBVector\fP v1, \fBVector\fP v2)"
.br
.ti -1c
.RI "static bool \fBoperator !=\fP (\fBVector\fP v1, \fBVector\fP v2)"
.br
.ti -1c
.RI "static \fBVector\fP \fBLerp\fP (\fBVector\fP a, \fBVector\fP b, float t)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "float \fBx\fP"
.br
.ti -1c
.RI "float \fBy\fP"
.br
.ti -1c
.RI "float \fBz\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static readonly \fBVector\fP \fBZero\fP = new \fBVector\fP(0, 0, 0)"
.br
.RI "The zero vector: (0, 0, 0) "
.ti -1c
.RI "static readonly \fBVector\fP \fBOnes\fP = new \fBVector\fP(1, 1, 1)"
.br
.RI "The ones vector: (1, 1, 1) "
.ti -1c
.RI "static readonly \fBVector\fP \fBXAxis\fP = new \fBVector\fP(1, 0, 0)"
.br
.RI "The x-axis unit vector: (1, 0, 0) "
.ti -1c
.RI "static readonly \fBVector\fP \fBYAxis\fP = new \fBVector\fP(0, 1, 0)"
.br
.RI "The y-axis unit vector: (0, 1, 0) "
.ti -1c
.RI "static readonly \fBVector\fP \fBZAxis\fP = new \fBVector\fP(0, 0, 1)"
.br
.RI "The z-axis unit vector: (0, 0, 1) "
.ti -1c
.RI "static readonly \fBVector\fP \fBForward\fP = new \fBVector\fP(0, 0, \-1)"
.br
.RI "The unit vector pointing forward along the negative z-axis: (0, 0, -1) "
.ti -1c
.RI "static readonly \fBVector\fP \fBBackward\fP = new \fBVector\fP(0, 0, 1)"
.br
.RI "The unit vector pointing backward along the positive z-axis: (0, 0, 1) "
.ti -1c
.RI "static readonly \fBVector\fP \fBLeft\fP = new \fBVector\fP(\-1, 0, 0)"
.br
.RI "The unit vector pointing left along the negative x-axis: (-1, 0, 0) "
.ti -1c
.RI "static readonly \fBVector\fP \fBRight\fP = new \fBVector\fP(1, 0, 0)"
.br
.RI "The unit vector pointing right along the positive x-axis: (1, 0, 0) "
.ti -1c
.RI "static readonly \fBVector\fP \fBUp\fP = new \fBVector\fP(0, 1, 0)"
.br
.RI "The unit vector pointing up along the positive y-axis: (0, 1, 0) "
.ti -1c
.RI "static readonly \fBVector\fP \fBDown\fP = new \fBVector\fP(0, \-1, 0)"
.br
.RI "The unit vector pointing down along the negative y-axis: (0, -1, 0) "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "float \fBthis[uint index]\fP\fC [get, set]\fP"
.br
.RI "Index vector components numerically\&. Index 0 is x, index 1 is y, and index 2 is z\&. "
.ti -1c
.RI "float \fBMagnitude\fP\fC [get]\fP"
.br
.RI "The magnitude, or length, of this vector\&. "
.ti -1c
.RI "float \fBMagnitudeSquared\fP\fC [get]\fP"
.br
.RI "The square of the magnitude, or length, of this vector\&. "
.ti -1c
.RI "float \fBPitch\fP\fC [get]\fP"
.br
.RI "The pitch angle in radians\&. "
.ti -1c
.RI "float \fBRoll\fP\fC [get]\fP"
.br
.RI "The roll angle in radians\&. "
.ti -1c
.RI "float \fBYaw\fP\fC [get]\fP"
.br
.RI "The yaw angle in radians\&. "
.ti -1c
.RI "\fBVector\fP \fBNormalized\fP\fC [get]\fP"
.br
.RI "A normalized copy of this vector\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBVector\fP struct represents a three-component mathematical vector or point such as a direction or position in three-dimensional space\&. 

The \fBLeap\fP Motion software employs a right-handed Cartesian coordinate system\&. Values given are in units of real-world millimeters\&. The origin is centered at the center of the \fBLeap\fP Motion \fBController\fP\&. The x- and z-axes lie in the horizontal plane, with the x-axis running parallel to the long edge of the device\&. The y-axis is vertical, with positive values increasing upwards (in contrast to the downward orientation of most computer graphics coordinate systems)\&. The z-axis has positive values increasing away from the computer screen\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 37 of file Vector\&.cs\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Leap\&.Vector\&.Vector (float x, float y, float z)"

.PP
Creates a new \fBVector\fP with the specified component values\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 79 of file Vector\&.cs\&.
.SS "Leap\&.Vector\&.Vector (\fBVector\fP vector)"

.PP
Copies the specified \fBVector\fP\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 90 of file Vector\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "float Leap\&.Vector\&.AngleTo (\fBVector\fP other)"

.PP
The angle between this vector and the specified vector in radians\&. The angle is measured in the plane formed by the two vectors\&. The angle returned is always the smaller of the two conjugate angles\&. Thus A\&.angleTo(B) == B\&.angleTo(A) and is always a positive value less than or equal to pi radians (180 degrees)\&.
.PP
If either vector has zero length, then this function returns zero\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 121 of file Vector\&.cs\&.
.SS "\fBVector\fP Leap\&.Vector\&.Cross (\fBVector\fP other)"

.PP
The cross product of this vector and the specified vector\&. The cross product is a vector orthogonal to both original vectors\&. It has a magnitude equal to the area of a parallelogram having the two vectors as sides\&. The direction of the returned vector is determined by the right-hand rule\&. Thus A\&.cross(B) == -B\&.cross(A)\&.
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 156 of file Vector\&.cs\&.
.SS "float Leap\&.Vector\&.DistanceTo (\fBVector\fP other)"

.PP
The distance between the point represented by this \fBVector\fP object and a point represented by the specified \fBVector\fP object\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 103 of file Vector\&.cs\&.
.SS "float Leap\&.Vector\&.Dot (\fBVector\fP other)"

.PP
The dot product of this vector with another vector\&. The dot product is the magnitude of the projection of this vector onto the specified vector\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 142 of file Vector\&.cs\&.
.SS "bool Leap\&.Vector\&.Equals (\fBVector\fP v)"

.PP
Compare \fBVector\fP equality component-wise\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 174 of file Vector\&.cs\&.
.SS "override bool Leap\&.Vector\&.Equals (\fBObject\fP obj)"

.PP
Definition at line 178 of file Vector\&.cs\&.
.SS "override int Leap\&.Vector\&.GetHashCode ()"

.PP
Definition at line 375 of file Vector\&.cs\&.
.SS "bool Leap\&.Vector\&.IsValid ()"

.PP
Returns true if all of the vector's components are finite\&. If any component is NaN or infinite, then this returns false\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 187 of file Vector\&.cs\&.
.SS "static \fBVector\fP Leap\&.Vector\&.Lerp (\fBVector\fP a, \fBVector\fP b, float t)\fC [static]\fP"

.PP
Definition at line 367 of file Vector\&.cs\&.
.SS "static bool Leap\&.Vector\&.operator != (\fBVector\fP v1, \fBVector\fP v2)\fC [static]\fP"

.PP
Definition at line 67 of file Vector\&.cs\&.
.SS "static \fBVector\fP Leap\&.Vector\&.operator * (\fBVector\fP v1, float scalar)\fC [static]\fP"

.PP
Definition at line 47 of file Vector\&.cs\&.
.SS "static \fBVector\fP Leap\&.Vector\&.operator * (float scalar, \fBVector\fP v1)\fC [static]\fP"

.PP
Definition at line 51 of file Vector\&.cs\&.
.SS "static \fBVector\fP Leap\&.Vector\&.operator \- (\fBVector\fP v1, \fBVector\fP v2)\fC [static]\fP"

.PP
Definition at line 43 of file Vector\&.cs\&.
.SS "static \fBVector\fP Leap\&.Vector\&.operator \- (\fBVector\fP v1)\fC [static]\fP"

.PP
Definition at line 59 of file Vector\&.cs\&.
.SS "static \fBVector\fP Leap\&.Vector\&.operator+ (\fBVector\fP v1, \fBVector\fP v2)\fC [static]\fP"

.PP
Definition at line 39 of file Vector\&.cs\&.
.SS "static \fBVector\fP Leap\&.Vector\&.operator/ (\fBVector\fP v1, float scalar)\fC [static]\fP"

.PP
Definition at line 55 of file Vector\&.cs\&.
.SS "static bool Leap\&.Vector\&.operator== (\fBVector\fP v1, \fBVector\fP v2)\fC [static]\fP"

.PP
Definition at line 63 of file Vector\&.cs\&.
.SS "float [] Leap\&.Vector\&.ToFloatArray ()"

.PP
Definition at line 71 of file Vector\&.cs\&.
.SS "override string Leap\&.Vector\&.ToString ()"

.PP
Returns a string containing this vector in a human readable format: (x, y, z)\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 166 of file Vector\&.cs\&.
.SH "Member Data Documentation"
.PP 
.SS "readonly \fBVector\fP Leap\&.Vector\&.Backward = new \fBVector\fP(0, 0, 1)\fC [static]\fP"

.PP
The unit vector pointing backward along the positive z-axis: (0, 0, 1) 
.PP
Definition at line 344 of file Vector\&.cs\&.
.SS "readonly \fBVector\fP Leap\&.Vector\&.Down = new \fBVector\fP(0, \-1, 0)\fC [static]\fP"

.PP
The unit vector pointing down along the negative y-axis: (0, -1, 0) 
.PP
Definition at line 364 of file Vector\&.cs\&.
.SS "readonly \fBVector\fP Leap\&.Vector\&.Forward = new \fBVector\fP(0, 0, \-1)\fC [static]\fP"

.PP
The unit vector pointing forward along the negative z-axis: (0, 0, -1) 
.PP
Definition at line 339 of file Vector\&.cs\&.
.SS "readonly \fBVector\fP Leap\&.Vector\&.Left = new \fBVector\fP(\-1, 0, 0)\fC [static]\fP"

.PP
The unit vector pointing left along the negative x-axis: (-1, 0, 0) 
.PP
Definition at line 349 of file Vector\&.cs\&.
.SS "readonly \fBVector\fP Leap\&.Vector\&.Ones = new \fBVector\fP(1, 1, 1)\fC [static]\fP"

.PP
The ones vector: (1, 1, 1) 
.PP
Definition at line 319 of file Vector\&.cs\&.
.SS "readonly \fBVector\fP Leap\&.Vector\&.Right = new \fBVector\fP(1, 0, 0)\fC [static]\fP"

.PP
The unit vector pointing right along the positive x-axis: (1, 0, 0) 
.PP
Definition at line 354 of file Vector\&.cs\&.
.SS "readonly \fBVector\fP Leap\&.Vector\&.Up = new \fBVector\fP(0, 1, 0)\fC [static]\fP"

.PP
The unit vector pointing up along the positive y-axis: (0, 1, 0) 
.PP
Definition at line 359 of file Vector\&.cs\&.
.SS "float Leap\&.Vector\&.x"

.PP
Definition at line 219 of file Vector\&.cs\&.
.SS "readonly \fBVector\fP Leap\&.Vector\&.XAxis = new \fBVector\fP(1, 0, 0)\fC [static]\fP"

.PP
The x-axis unit vector: (1, 0, 0) 
.PP
Definition at line 324 of file Vector\&.cs\&.
.SS "float Leap\&.Vector\&.y"

.PP
Definition at line 220 of file Vector\&.cs\&.
.SS "readonly \fBVector\fP Leap\&.Vector\&.YAxis = new \fBVector\fP(0, 1, 0)\fC [static]\fP"

.PP
The y-axis unit vector: (0, 1, 0) 
.PP
Definition at line 329 of file Vector\&.cs\&.
.SS "float Leap\&.Vector\&.z"

.PP
Definition at line 221 of file Vector\&.cs\&.
.SS "readonly \fBVector\fP Leap\&.Vector\&.ZAxis = new \fBVector\fP(0, 0, 1)\fC [static]\fP"

.PP
The z-axis unit vector: (0, 0, 1) 
.PP
Definition at line 334 of file Vector\&.cs\&.
.SS "readonly \fBVector\fP Leap\&.Vector\&.Zero = new \fBVector\fP(0, 0, 0)\fC [static]\fP"

.PP
The zero vector: (0, 0, 0) 
.PP
Definition at line 314 of file Vector\&.cs\&.
.SH "Property Documentation"
.PP 
.SS "float Leap\&.Vector\&.Magnitude\fC [get]\fP"

.PP
The magnitude, or length, of this vector\&. The magnitude is the L2 norm, or Euclidean distance between the origin and the point represented by the (x, y, z) components of this \fBVector\fP object\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 230 of file Vector\&.cs\&.
.SS "float Leap\&.Vector\&.MagnitudeSquared\fC [get]\fP"

.PP
The square of the magnitude, or length, of this vector\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 238 of file Vector\&.cs\&.
.SS "\fBVector\fP Leap\&.Vector\&.Normalized\fC [get]\fP"

.PP
A normalized copy of this vector\&. A normalized vector has the same direction as the original vector, but with a length of one\&.
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 300 of file Vector\&.cs\&.
.SS "float Leap\&.Vector\&.Pitch\fC [get]\fP"

.PP
The pitch angle in radians\&. Pitch is the angle between the negative z-axis and the projection of the vector onto the y-z plane\&. In other words, pitch represents rotation around the x-axis\&. If the vector points upward, the returned angle is between 0 and pi radians (180 degrees); if it points downward, the angle is between 0 and -pi radians\&.
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 253 of file Vector\&.cs\&.
.SS "float Leap\&.Vector\&.Roll\fC [get]\fP"

.PP
The roll angle in radians\&. Roll is the angle between the y-axis and the projection of the vector onto the x-y plane\&. In other words, roll represents rotation around the z-axis\&. If the vector points to the left of the y-axis, then the returned angle is between 0 and pi radians (180 degrees); if it points to the right, the angle is between 0 and -pi radians\&.
.PP
Use this function to get roll angle of the plane to which this vector is a normal\&. For example, if this vector represents the normal to the palm, then this function returns the tilt or roll of the palm plane compared to the horizontal (x-z) plane\&.
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 273 of file Vector\&.cs\&.
.SS "float Leap\&.Vector\&.this[uint index]\fC [get]\fP, \fC [set]\fP"

.PP
Index vector components numerically\&. Index 0 is x, index 1 is y, and index 2 is z\&. 
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 198 of file Vector\&.cs\&.
.SS "float Leap\&.Vector\&.Yaw\fC [get]\fP"

.PP
The yaw angle in radians\&. Yaw is the angle between the negative z-axis and the projection of the vector onto the x-z plane\&. In other words, yaw represents rotation around the y-axis\&. If the vector points to the right of the negative z-axis, then the returned angle is between 0 and pi radians (180 degrees); if it points to the left, the angle is between 0 and -pi radians\&.
.PP
\fBSince:\fP
.RS 4
1\&.0 
.RE
.PP

.PP
Definition at line 288 of file Vector\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
