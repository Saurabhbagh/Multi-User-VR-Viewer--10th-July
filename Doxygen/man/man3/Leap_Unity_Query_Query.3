.TH "Leap.Unity.Query.Query< T >" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Leap.Unity.Query.Query< T > \- A \fBQuery\fP object is a type of immutable ordered collection of elements that can be used to perform useful queries\&. These queries are very similar to LINQ style queries, providing useful methods such as Where, Select, Concat, etc\&.\&.\&.\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBEnumerator\fP"
.br
.ti -1c
.RI "struct \fBQuerySlice\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQuery\fP (T[] array, int count)"
.br
.RI "Constructs a new query given a source array and a count\&. The query assumes ownership of the array, so you should not use it or store it after the query is constructed\&. "
.ti -1c
.RI "\fBQuery\fP (ICollection< T > collection)"
.br
.RI "Constructs a new query of the given collection\&. "
.ti -1c
.RI "\fBQuery\fP (\fBQuery\fP< T > other)"
.br
.RI "Constructs a query that is an exact copy of another query\&. "
.ti -1c
.RI "\fBQuery\fP< K > \fBOfType< K >\fP ()"
.br
.RI "Returns a new \fBQuery\fP representing only the items of the current \fBQuery\fP that are of a specific type\&. "
.ti -1c
.RI "\fBQuery\fP< K > \fBCast< K >\fP ()"
.br
.RI "Returns a new \fBQuery\fP representing the current query sequence where each element is cast to a new type\&. "
.ti -1c
.RI "void \fBDispose\fP ()"
.br
.RI "Disposes of the resources that this query holds\&. The \fBQuery\fP cannot be used after this method is called\&. "
.ti -1c
.RI "void \fBDeconstruct\fP (out T[] array, out int count)"
.br
.RI "Deconstructs this \fBQuery\fP into its base elements, the array and the count\&. The caller assumes ownership of the array and is responsible for managing its lifecycle\&. The \fBQuery\fP cannot be used after this method is called\&. "
.ti -1c
.RI "\fBQuerySlice\fP \fBDeconstruct\fP ()"
.br
.RI "Deconstructs this \fBQuery\fP into a simple \fBQuerySlice\fP construct\&. This is simply a utility overload of the regular Deconstruct method\&. The user is still responsible for managing the memory lifecycle of the returned slice\&. The \fBQuery\fP cannot be used after this method is called\&. "
.ti -1c
.RI "\fBEnumerator\fP \fBGetEnumerator\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
A \fBQuery\fP object is a type of immutable ordered collection of elements that can be used to perform useful queries\&. These queries are very similar to LINQ style queries, providing useful methods such as Where, Select, Concat, etc\&.\&.\&.\&. 

The \fBQuery\fP struct and its interfaces use a pooling strategy backed by ArrayPool to incur an amortized cost of zero GC allocations\&.
.PP
A \fBQuery\fP struct is immutable, and so cannot be modified once it has been created\&. You can use a query in few ways:
.IP "\(bu" 2
The simplest way is to call an operator method such as Where or Select\&. These methods CONSUME the query to produce a new query\&. Trying to use the original query after it has been consumed will cause a runtime error\&.
.IP "\(bu" 2
The next way is to call a collapsing operator, which will consume the query and produce a non-query value or other side-effect\&. \fBExamples\fP of collapsing operators are First, Last, or ElementAt\&.
.IP "\(bu" 2
The last way to use a query is to Deconstruct it, by calling a Deconstruct method to destroy the query and get access to its underlying data\&. You will be responsible for cleaning up or disposing the data you get\&. 
.PP

.PP
Definition at line 91 of file Query\&.cs\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBLeap\&.Unity\&.Query\&.Query\fP< T >\&.\fBQuery\fP (T [] array, int count)"

.PP
Constructs a new query given a source array and a count\&. The query assumes ownership of the array, so you should not use it or store it after the query is constructed\&. 
.PP
Definition at line 102 of file Query\&.cs\&.
.SS "\fBLeap\&.Unity\&.Query\&.Query\fP< T >\&.\fBQuery\fP (ICollection< T > collection)"

.PP
Constructs a new query of the given collection\&. 
.PP
Definition at line 123 of file Query\&.cs\&.
.SS "\fBLeap\&.Unity\&.Query\&.Query\fP< T >\&.\fBQuery\fP (\fBQuery\fP< T > other)"

.PP
Constructs a query that is an exact copy of another query\&. 
.PP
Definition at line 134 of file Query\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBQuery\fP<K> \fBLeap\&.Unity\&.Query\&.Query\fP< T >\&.Cast< K > ()"

.PP
Returns a new \fBQuery\fP representing the current query sequence where each element is cast to a new type\&. 
.PP
\fBType Constraints\fP
.TP
\fIK\fP : \fIclass\fP
.PP
Definition at line 178 of file Query\&.cs\&.
.SS "void \fBLeap\&.Unity\&.Query\&.Query\fP< T >\&.Deconstruct (out T [] array, out int count)"

.PP
Deconstructs this \fBQuery\fP into its base elements, the array and the count\&. The caller assumes ownership of the array and is responsible for managing its lifecycle\&. The \fBQuery\fP cannot be used after this method is called\&. 
.PP
Definition at line 203 of file Query\&.cs\&.
.SS "\fBQuerySlice\fP \fBLeap\&.Unity\&.Query\&.Query\fP< T >\&.Deconstruct ()"

.PP
Deconstructs this \fBQuery\fP into a simple \fBQuerySlice\fP construct\&. This is simply a utility overload of the regular Deconstruct method\&. The user is still responsible for managing the memory lifecycle of the returned slice\&. The \fBQuery\fP cannot be used after this method is called\&. 
.PP
Definition at line 220 of file Query\&.cs\&.
.SS "void \fBLeap\&.Unity\&.Query\&.Query\fP< T >\&.Dispose ()"

.PP
Disposes of the resources that this query holds\&. The \fBQuery\fP cannot be used after this method is called\&. 
.PP
Definition at line 188 of file Query\&.cs\&.
.SS "\fBEnumerator\fP \fBLeap\&.Unity\&.Query\&.Query\fP< T >\&.GetEnumerator ()"

.PP
Definition at line 228 of file Query\&.cs\&.
.SS "\fBQuery\fP<K> \fBLeap\&.Unity\&.Query\&.Query\fP< T >\&.OfType< K > ()"

.PP
Returns a new \fBQuery\fP representing only the items of the current \fBQuery\fP that are of a specific type\&. For example ('A', 1, null, 5\&.0f, 900, 'hello')\&.\fBQuery()\fP\&.OfType<string>() would result in ('A', 'hello') 
.PP
\fBType Constraints\fP
.TP
\fIK\fP : \fIT\fP
.PP
Definition at line 158 of file Query\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
