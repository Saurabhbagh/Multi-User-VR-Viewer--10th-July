.TH "Leap.Unity.DeltaBuffer< SampleType, DerivativeType >" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Leap.Unity.DeltaBuffer< SampleType, DerivativeType > \- Allows you to add to a capped-size ring buffer of Ts and, when full, compute the buffer's average change over time\&. \fBDeltaBuffer\fP without type parameters supports Vector3s; \fBDeltaFloatBuffer\fP supports floats, and \fBDeltaQuaternionBuffer\fP supports Quaternion rotations\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBLeap\&.Unity\&.DeltaBuffer< Vector3, Vector3 >\fP, and \fBLeap\&.Unity\&.IIndexable< SampleType >\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBValueTimePair\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDeltaBuffer\fP (int bufferSize)"
.br
.ti -1c
.RI "void \fBClear\fP ()"
.br
.ti -1c
.RI "void \fBAdd\fP (SampleType sample, float sampleTime)"
.br
.ti -1c
.RI "SampleType \fBGet\fP (int idx)"
.br
.ti -1c
.RI "SampleType \fBGetLatest\fP ()"
.br
.ti -1c
.RI "void \fBSet\fP (int idx, SampleType sample, float sampleTime)"
.br
.ti -1c
.RI "void \fBSetLatest\fP (SampleType sample, float sampleTime)"
.br
.ti -1c
.RI "float \fBGetTime\fP (int idx)"
.br
.ti -1c
.RI "float \fBGetLatestTime\fP ()"
.br
.ti -1c
.RI "abstract DerivativeType \fBDelta\fP ()"
.br
.RI "Returns the average change between each sample per unit time\&. "
.ti -1c
.RI "\fBIndexableEnumerator\fP< SampleType > \fBGetEnumerator\fP ()"
.br
.ti -1c
.RI "\fBDeltaBuffer\fP (int bufferSize)"
.br
.ti -1c
.RI "override Vector3 \fBDelta\fP ()"
.br
.RI "Returns the average change between each sample per unit time, or zero if the buffer contains one or fewer elements\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBRingBuffer\fP< \fBValueTimePair\fP > \fB_buffer\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "int \fBCount\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsFull\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsEmpty\fP\fC [get]\fP"
.br
.ti -1c
.RI "int \fBCapacity\fP\fC [get]\fP"
.br
.ti -1c
.RI "SampleType \fBthis[int idx]\fP\fC [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allows you to add to a capped-size ring buffer of Ts and, when full, compute the buffer's average change over time\&. \fBDeltaBuffer\fP without type parameters supports Vector3s; \fBDeltaFloatBuffer\fP supports floats, and \fBDeltaQuaternionBuffer\fP supports Quaternion rotations\&. 

A ring buffer of Vector3s with a \fBDelta()\fP function that computes the buffer's average change over time\&.
.PP
To support other types, subclass \fBDeltaBuffer\fP with your sample type and average change type (in many cases the these are the same) and implement the \fBDelta()\fP function to compute the average change of samples currently in the buffer\&. 
.PP
The larger the buffer, the more stable but also delayed the resulting average change over time\&. A buffer size of 5 is a good start for 60-90 Hz updates\&. 
.PP
Definition at line 25 of file DeltaBuffer\&.cs\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.\fBDeltaBuffer\fP (int bufferSize)"

.PP
Definition at line 32 of file DeltaBuffer\&.cs\&.
.SS "\fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.\fBDeltaBuffer\fP (int bufferSize)"

.PP
Definition at line 112 of file DeltaBuffer\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "void \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.Add (SampleType sample, float sampleTime)"

.PP
Definition at line 52 of file DeltaBuffer\&.cs\&.
.SS "void \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.Clear ()"

.PP
Definition at line 50 of file DeltaBuffer\&.cs\&.
.SS "abstract DerivativeType \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.Delta ()\fC [pure virtual]\fP"

.PP
Returns the average change between each sample per unit time\&. If the buffer is empty, you should return the identity for your derivative type\&. 
.PP
Implements \fBLeap\&.Unity\&.DeltaBuffer< Vector3, Vector3 >\fP\&.
.PP
Implemented in \fBLeap\&.Unity\&.DeltaQuaternionBuffer\fP, \fBLeap\&.Unity\&.DeltaFloatBuffer\fP, \fBLeap\&.Unity\&.DeltaBuffer< SampleType, DerivativeType >\fP, \fBLeap\&.Unity\&.DeltaBuffer< float, float >\fP, \fBLeap\&.Unity\&.DeltaBuffer< Quaternion, Vector3 >\fP, \fBLeap\&.Unity\&.DeltaBuffer< SampleType, DerivativeType >\fP, \fBLeap\&.Unity\&.DeltaBuffer< float, float >\fP, and \fBLeap\&.Unity\&.DeltaBuffer< Quaternion, Vector3 >\fP\&.
.SS "override Vector3 \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.Delta ()\fC [virtual]\fP"

.PP
Returns the average change between each sample per unit time, or zero if the buffer contains one or fewer elements\&. The larger the buffer, the more stable but also delayed the resulting average change over time\&. A buffer size of 5 is a good start for 60-90 Hz updates\&. 
.PP
Implements \fBLeap\&.Unity\&.DeltaBuffer< Vector3, Vector3 >\fP\&.
.PP
Definition at line 121 of file DeltaBuffer\&.cs\&.
.SS "SampleType \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.Get (int idx)"

.PP
Definition at line 61 of file DeltaBuffer\&.cs\&.
.SS "\fBIndexableEnumerator\fP<SampleType> \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.GetEnumerator ()"

.PP
Definition at line 95 of file DeltaBuffer\&.cs\&.
.SS "SampleType \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.GetLatest ()"

.PP
Definition at line 65 of file DeltaBuffer\&.cs\&.
.SS "float \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.GetLatestTime ()"

.PP
Definition at line 82 of file DeltaBuffer\&.cs\&.
.SS "float \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.GetTime (int idx)"

.PP
Definition at line 78 of file DeltaBuffer\&.cs\&.
.SS "void \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.Set (int idx, SampleType sample, float sampleTime)"

.PP
Definition at line 69 of file DeltaBuffer\&.cs\&.
.SS "void \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.SetLatest (SampleType sample, float sampleTime)"

.PP
Definition at line 73 of file DeltaBuffer\&.cs\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBRingBuffer\fP<\fBValueTimePair\fP> \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&._buffer\fC [protected]\fP"

.PP
Definition at line 36 of file DeltaBuffer\&.cs\&.
.SH "Property Documentation"
.PP 
.SS "int \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.Capacity\fC [get]\fP"

.PP
Definition at line 44 of file DeltaBuffer\&.cs\&.
.SS "int \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.Count\fC [get]\fP"

.PP
Definition at line 38 of file DeltaBuffer\&.cs\&.
.SS "bool \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.IsEmpty\fC [get]\fP"

.PP
Definition at line 42 of file DeltaBuffer\&.cs\&.
.SS "bool \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.IsFull\fC [get]\fP"

.PP
Definition at line 40 of file DeltaBuffer\&.cs\&.
.SS "SampleType \fBLeap\&.Unity\&.DeltaBuffer\fP< SampleType, DerivativeType >\&.this[int idx]\fC [get]\fP"

.PP
Definition at line 46 of file DeltaBuffer\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
