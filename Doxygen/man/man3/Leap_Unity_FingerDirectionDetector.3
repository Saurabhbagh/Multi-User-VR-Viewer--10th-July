.TH "Leap.Unity.FingerDirectionDetector" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Leap.Unity.FingerDirectionDetector
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBLeap\&.Unity\&.Detector\fP\&.
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "float \fBPeriod\fP = \&.1f"
.br
.ti -1c
.RI "\fBHandModelBase\fP \fBHandModel\fP = null"
.br
.ti -1c
.RI "\fBFinger\&.FingerType\fP \fBFingerName\fP = \fBFinger\&.FingerType\&.TYPE_INDEX\fP"
.br
.ti -1c
.RI "\fBPointingType\fP \fBPointingType\fP = \fBPointingType\&.RelativeToHorizon\fP"
.br
.ti -1c
.RI "Vector3 \fBPointingDirection\fP = Vector3\&.forward"
.br
.ti -1c
.RI "Transform \fBTargetObject\fP = null"
.br
.ti -1c
.RI "float \fBOnAngle\fP = 15f"
.br
.ti -1c
.RI "float \fBOffAngle\fP = 25f"
.br
.ti -1c
.RI "bool \fBShowGizmos\fP = true"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Detects when specified fingers are pointing in the specified manner\&.
.PP
Directions can be specified relative to the global frame of reference, relative to the camera frame of reference, or using a combination of the two -- relative to the camera direction in the x-z plane, but not changing relative to the horizon\&.
.PP
You can alternatively specify a target game object\&.
.PP
If added to a \fBHandModelBase\fP instance or one of its children, this detector checks the finger direction at the interval specified by the Period variable\&. You can also specify which hand model to observe explicitly by setting handModel in the \fBUnity\fP editor or in code\&.
.PP
\fBSince:\fP
.RS 4
4\&.1\&.2 
.RE
.PP

.PP
Definition at line 31 of file FingerDirectionDetector\&.cs\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBFinger\&.FingerType\fP Leap\&.Unity\&.FingerDirectionDetector\&.FingerName = \fBFinger\&.FingerType\&.TYPE_INDEX\fP"
The finger to compare to the specified direction\&. 
.PP
\fBSince:\fP
.RS 4
4\&.1\&.2 
.RE
.PP

.PP
Definition at line 54 of file FingerDirectionDetector\&.cs\&.
.SS "\fBHandModelBase\fP Leap\&.Unity\&.FingerDirectionDetector\&.HandModel = null"
The \fBHandModelBase\fP instance to observe\&. Set automatically if not explicitly set in the editor\&. 
.PP
\fBSince:\fP
.RS 4
4\&.1\&.2 
.RE
.PP

.PP
Definition at line 47 of file FingerDirectionDetector\&.cs\&.
.SS "float Leap\&.Unity\&.FingerDirectionDetector\&.OffAngle = 25f"
The turn-off angle\&. The detector deactivates when the specified finger points more than this many degrees away from the target direction\&. The off angle must be larger than the on angle\&. 
.PP
\fBSince:\fP
.RS 4
4\&.1\&.2 
.RE
.PP

.PP
Definition at line 107 of file FingerDirectionDetector\&.cs\&.
.SS "float Leap\&.Unity\&.FingerDirectionDetector\&.OnAngle = 15f"
The turn-on angle\&. The detector activates when the specified finger points within this many degrees of the target direction\&. 
.PP
\fBSince:\fP
.RS 4
4\&.1\&.2 
.RE
.PP

.PP
Definition at line 98 of file FingerDirectionDetector\&.cs\&.
.SS "float Leap\&.Unity\&.FingerDirectionDetector\&.Period = \&.1f"
The interval at which to check finger state\&. 
.PP
\fBSince:\fP
.RS 4
4\&.1\&.2 
.RE
.PP

.PP
Definition at line 39 of file FingerDirectionDetector\&.cs\&.
.SS "Vector3 Leap\&.Unity\&.FingerDirectionDetector\&.PointingDirection = Vector3\&.forward"
The target direction as interpreted by the PointingType setting\&. Ignored when Pointingtype is 'AtTarget\&.' 
.PP
\fBSince:\fP
.RS 4
4\&.1\&.2 
.RE
.PP

.PP
Definition at line 83 of file FingerDirectionDetector\&.cs\&.
.SS "\fBPointingType\fP Leap\&.Unity\&.FingerDirectionDetector\&.PointingType = \fBPointingType\&.RelativeToHorizon\fP"
Specifies how to interprete the direction specified by PointingDirection\&.
.PP
.IP "\(bu" 2
RelativeToCamera -- the target direction is defined relative to the camera's forward vector, i\&.e\&. (0, 0, 1) is the cmaera's local forward direction\&.
.IP "\(bu" 2
RelativeToHorizon -- the target direction is defined relative to the camera's forward vector, except that it does not change with pitch\&.
.IP "\(bu" 2
RelativeToWorld -- the target direction is defined as a global direction that does not change with camera movement\&. For example, (0, 1, 0) is always world up, no matter which way the camera is pointing\&.
.IP "\(bu" 2
AtTarget -- a target object is used as the pointing direction (The specified PointingDirection is ignored)\&.
.PP
.PP
In VR scenes, RelativeToHorizon with a direction of (0, 0, 1) for camera forward and RelativeToWorld with a direction of (0, 1, 0) for absolute up, are often the most useful settings\&. 
.PP
\fBSince:\fP
.RS 4
4\&.1\&.2 
.RE
.PP

.PP
Definition at line 74 of file FingerDirectionDetector\&.cs\&.
.SS "bool Leap\&.Unity\&.FingerDirectionDetector\&.ShowGizmos = true"
Whether to draw the detector's Gizmos for debugging\&. (Not every detector provides gizmos\&.) 
.PP
\fBSince:\fP
.RS 4
4\&.1\&.2 
.RE
.PP

.PP
Definition at line 113 of file FingerDirectionDetector\&.cs\&.
.SS "Transform Leap\&.Unity\&.FingerDirectionDetector\&.TargetObject = null"
The object to point at when the PointingType is 'AtTarget\&.' Ignored otherwise\&. 
.PP
Definition at line 90 of file FingerDirectionDetector\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
