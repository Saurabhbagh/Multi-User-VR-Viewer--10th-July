.TH "Leap.Unity.Animation.Tween" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Leap.Unity.Animation.Tween
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "MaterialSelector \fBTarget\fP (Material material)"
.br
.ti -1c
.RI "TransformSelector \fBTarget\fP (Transform transform)"
.br
.ti -1c
.RI "\fBTween\fP \fBValue\fP (float a, float b, Action< float > onValue)"
.br
.ti -1c
.RI "\fBTween\fP \fBValue\fP (Vector2 a, Vector2 b, Action< Vector2 > onValue)"
.br
.ti -1c
.RI "\fBTween\fP \fBValue\fP (Vector3 a, Vector3 b, Action< Vector3 > onValue)"
.br
.ti -1c
.RI "\fBTween\fP \fBValue\fP (Quaternion a, Quaternion b, Action< Quaternion > onValue)"
.br
.ti -1c
.RI "\fBTween\fP \fBValue\fP (Color a, Color b, Action< Color > onValue)"
.br
.ti -1c
.RI "\fBTween\fP \fBAddInterpolator\fP (\fBIInterpolator\fP interpolator)"
.br
.RI "Adds a new Interpolator to this \fBTween\fP\&. This Interpolator will have it's Interpolate method called every step of the \fBTween\fP with the smoothed progress value\&. All Interpolators are recycled when the \fBTween\fP itself is Recycled\&. "
.ti -1c
.RI "\fBTween\fP \fBOverTime\fP (float seconds)"
.br
.RI "Specifies that this \fBTween\fP should travel from begining to end over a certain number of seconds\&. "
.ti -1c
.RI "\fBTween\fP \fBAtRate\fP (float unitsPerSecond)"
.br
.RI "Specifies that this \fBTween\fP should travel at the given rate\&. This rate is measured against the FIRST interpolator added to this \fBTween\fP, at the moment AtRate is called\&. "
.ti -1c
.RI "\fBTween\fP \fBSmooth\fP (\fBSmoothType\fP type=SmoothType\&.Smooth)"
.br
.RI "Specifies that this \fBTween\fP should the given smoothing method\&. "
.ti -1c
.RI "\fBTween\fP \fBSmooth\fP (AnimationCurve curve)"
.br
.RI "Specifies that this \fBTween\fP should use the given \fBAnimation\fP curve for its smoothing\&. The curve should map from [0-1] to [0-1]\&. "
.ti -1c
.RI "\fBTween\fP \fBSmooth\fP (Func< float, float > smoothFunction)"
.br
.RI "Specifies that this \fBTween\fP should use the given Function for its smoothing\&. The function should map from [0-1] to [0-1]\&. "
.ti -1c
.RI "\fBTween\fP \fBOnProgress\fP (Action< float > action)"
.br
.RI "Specifies an action to be called every step of the \fBTween\fP\&. "
.ti -1c
.RI "\fBTween\fP \fBOnLeaveStart\fP (Action action)"
.br
.RI "Specifies an action to be called whenever this \fBTween\fP is Played forward when at the start\&. "
.ti -1c
.RI "\fBTween\fP \fBOnReachStart\fP (Action action)"
.br
.RI "Specifies an action to be called whenever this \fBTween\fP reaches the start\&. "
.ti -1c
.RI "\fBTween\fP \fBOnLeaveEnd\fP (Action action)"
.br
.RI "Specifies an action to be called whenever this \fBTween\fP is Played backwards when at the end\&. "
.ti -1c
.RI "\fBTween\fP \fBOnReachEnd\fP (Action action)"
.br
.RI "Specifies an action to be called whenever this \fBTween\fP reaches the end\&. "
.ti -1c
.RI "\fBTween\fP \fBPlay\fP ()"
.br
.RI "Starts playing this \fBTween\fP\&. It will continue from the same position it left off on, and will continue in the same direction\&. "
.ti -1c
.RI "\fBTween\fP \fBPlay\fP (\fBDirection\fP \fBdirection\fP)"
.br
.RI "Starts playing this \fBTween\fP in a specific direction\&. It will condition from the same position it left off on\&. The direction will change even if the \fBTween\fP is already playing\&. "
.ti -1c
.RI "\fBTween\fP \fBPlay\fP (float destinationPercent)"
.br
.RI "Starts playing this \fBTween\fP towards a destination percent\&. Once it reaches that value, it will stop\&. If the destination percent is not 0 or 1, it will not trigger OnReachStart or OnReachEnd\&. "
.ti -1c
.RI "\fBTweenInstance\&.TweenYieldInstruction\fP \fBYield\fP ()"
.br
.RI "Returns a custom yield instruction that can be yielded to in order to wait for the completion of this \fBTween\fP\&. This will yield correctly even if the \fBTween\fP is modified as it is playing\&. "
.ti -1c
.RI "void \fBPause\fP ()"
.br
.RI "Pauses this \fBTween\fP\&. It retains its position and direction\&. "
.ti -1c
.RI "void \fBStop\fP ()"
.br
.RI "Stops this \fBTween\fP\&. If it is not a persistant \fBTween\fP, it will be recycled right away\&. "
.ti -1c
.RI "void \fBRelease\fP ()"
.br
.RI "Forces this \fBTween\fP to be recycled right away\&. Once this method is called, the \fBTween\fP will be invalid and unable to be modified\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBTween\fP \fBSingle\fP ()"
.br
.RI "Create a single-use \fBTween\fP that will auto-release itself as soon as it is finished playing\&. "
.ti -1c
.RI "static \fBTween\fP \fBPersistent\fP ()"
.br
.RI "Creates a persistant \fBTween\fP that will not ever auto-release itself\&. You must specifically call Release in order for the resources of the tween to be returned to the pool\&. "
.ti -1c
.RI "static \fBTween\fP \fBAfterDelay\fP (float delay, Action onReachEnd)"
.br
.RI "Create a single-use \fBTween\fP that will fire onReachEnd after the specified delay in seconds\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "bool \fBisValid\fP\fC [get]\fP"
.br
.RI "Returns whether or not this \fBTween\fP is considered valid\&. A \fBTween\fP can become invalid under the following conditions: "
.ti -1c
.RI "bool \fBisRunning\fP\fC [get]\fP"
.br
.RI "Returns whether or not the \fBTween\fP is currently running\&. "
.ti -1c
.RI "\fBDirection\fP? \fBdirection\fP\fC [get, set]\fP"
.br
.RI "Gets or sets whether or not this \fBTween\fP is moving forwards or backwards\&. "
.ti -1c
.RI "float \fBtimeLeft\fP\fC [get]\fP"
.br
.RI "Gets how much time is left before the \fBTween\fP stops\&. "
.ti -1c
.RI "float \fBprogress\fP\fC [get, set]\fP"
.br
.RI "Gets or sets how far along completion this \fBTween\fP is\&. This value is a percent that ranges from 0 to 1\&. "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 15 of file MaterialInterpolators\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.AddInterpolator (\fBIInterpolator\fP interpolator)"

.PP
Adds a new Interpolator to this \fBTween\fP\&. This Interpolator will have it's Interpolate method called every step of the \fBTween\fP with the smoothed progress value\&. All Interpolators are recycled when the \fBTween\fP itself is Recycled\&. 
.PP
Definition at line 152 of file Tween\&.cs\&.
.SS "static \fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.AfterDelay (float delay, Action onReachEnd)\fC [static]\fP"

.PP
Create a single-use \fBTween\fP that will fire onReachEnd after the specified delay in seconds\&. 
.PP
Definition at line 44 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.AtRate (float unitsPerSecond)"

.PP
Specifies that this \fBTween\fP should travel at the given rate\&. This rate is measured against the FIRST interpolator added to this \fBTween\fP, at the moment AtRate is called\&. 
.PP
Definition at line 176 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.OnLeaveEnd (Action action)"

.PP
Specifies an action to be called whenever this \fBTween\fP is Played backwards when at the end\&. 
.PP
Definition at line 253 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.OnLeaveStart (Action action)"

.PP
Specifies an action to be called whenever this \fBTween\fP is Played forward when at the start\&. 
.PP
Definition at line 233 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.OnProgress (Action< float > action)"

.PP
Specifies an action to be called every step of the \fBTween\fP\&. This callback happens after:
.IP "\(bu" 2
OnLeaveStart
.IP "\(bu" 2
OnLeaveEnd
.IP "\(bu" 2
All interpolators have been interpolated This callback happens before:
.IP "\(bu" 2
OnReachStart
.IP "\(bu" 2
OnReachEnd 
.PP

.PP
Definition at line 223 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.OnReachEnd (Action action)"

.PP
Specifies an action to be called whenever this \fBTween\fP reaches the end\&. 
.PP
Definition at line 263 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.OnReachStart (Action action)"

.PP
Specifies an action to be called whenever this \fBTween\fP reaches the start\&. 
.PP
Definition at line 243 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.OverTime (float seconds)"

.PP
Specifies that this \fBTween\fP should travel from begining to end over a certain number of seconds\&. 
.PP
Definition at line 166 of file Tween\&.cs\&.
.SS "void Leap\&.Unity\&.Animation\&.Tween\&.Pause ()"

.PP
Pauses this \fBTween\fP\&. It retains its position and direction\&. 
.PP
Definition at line 335 of file Tween\&.cs\&.
.SS "static \fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Persistent ()\fC [static]\fP"

.PP
Creates a persistant \fBTween\fP that will not ever auto-release itself\&. You must specifically call Release in order for the resources of the tween to be returned to the pool\&. 
.PP
Definition at line 37 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Play ()"

.PP
Starts playing this \fBTween\fP\&. It will continue from the same position it left off on, and will continue in the same direction\&. 
.PP
Definition at line 273 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Play (\fBDirection\fP direction)"

.PP
Starts playing this \fBTween\fP in a specific direction\&. It will condition from the same position it left off on\&. The direction will change even if the \fBTween\fP is already playing\&. 
.PP
Definition at line 293 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Play (float destinationPercent)"

.PP
Starts playing this \fBTween\fP towards a destination percent\&. Once it reaches that value, it will stop\&. If the destination percent is not 0 or 1, it will not trigger OnReachStart or OnReachEnd\&. 
.PP
Definition at line 307 of file Tween\&.cs\&.
.SS "void Leap\&.Unity\&.Animation\&.Tween\&.Release ()"

.PP
Forces this \fBTween\fP to be recycled right away\&. Once this method is called, the \fBTween\fP will be invalid and unable to be modified\&. 
.PP
Definition at line 363 of file Tween\&.cs\&.
.SS "static \fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Single ()\fC [static]\fP"

.PP
Create a single-use \fBTween\fP that will auto-release itself as soon as it is finished playing\&. 
.PP
Definition at line 29 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Smooth (\fBSmoothType\fP type = \fCSmoothType\&.Smooth\fP)"

.PP
Specifies that this \fBTween\fP should the given smoothing method\&. 
.PP
Definition at line 185 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Smooth (AnimationCurve curve)"

.PP
Specifies that this \fBTween\fP should use the given \fBAnimation\fP curve for its smoothing\&. The curve should map from [0-1] to [0-1]\&. 
.PP
Definition at line 195 of file Tween\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Smooth (Func< float, float > smoothFunction)"

.PP
Specifies that this \fBTween\fP should use the given Function for its smoothing\&. The function should map from [0-1] to [0-1]\&. 
.PP
Definition at line 206 of file Tween\&.cs\&.
.SS "void Leap\&.Unity\&.Animation\&.Tween\&.Stop ()"

.PP
Stops this \fBTween\fP\&. If it is not a persistant \fBTween\fP, it will be recycled right away\&. 
.PP
Definition at line 346 of file Tween\&.cs\&.
.SS "MaterialSelector Leap\&.Unity\&.Animation\&.Tween\&.Target (Material material)"

.PP
Definition at line 16 of file MaterialInterpolators\&.cs\&.
.SS "TransformSelector Leap\&.Unity\&.Animation\&.Tween\&.Target (Transform transform)"

.PP
Definition at line 17 of file TransformInterpolators\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Value (float a, float b, Action< float > onValue)"

.PP
Definition at line 19 of file ValueInterpolators\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Value (Vector2 a, Vector2 b, Action< Vector2 > onValue)"

.PP
Definition at line 39 of file ValueInterpolators\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Value (Vector3 a, Vector3 b, Action< Vector3 > onValue)"

.PP
Definition at line 59 of file ValueInterpolators\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Value (Quaternion a, Quaternion b, Action< Quaternion > onValue)"

.PP
Definition at line 79 of file ValueInterpolators\&.cs\&.
.SS "\fBTween\fP Leap\&.Unity\&.Animation\&.Tween\&.Value (Color a, Color b, Action< Color > onValue)"

.PP
Definition at line 99 of file ValueInterpolators\&.cs\&.
.SS "\fBTweenInstance\&.TweenYieldInstruction\fP Leap\&.Unity\&.Animation\&.Tween\&.Yield ()"

.PP
Returns a custom yield instruction that can be yielded to in order to wait for the completion of this \fBTween\fP\&. This will yield correctly even if the \fBTween\fP is modified as it is playing\&. 
.PP
Definition at line 326 of file Tween\&.cs\&.
.SH "Property Documentation"
.PP 
.SS "\fBDirection\fP? Leap\&.Unity\&.Animation\&.Tween\&.direction\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets whether or not this \fBTween\fP is moving forwards or backwards\&. 
.PP
Definition at line 74 of file Tween\&.cs\&.
.SS "bool Leap\&.Unity\&.Animation\&.Tween\&.isRunning\fC [get]\fP"

.PP
Returns whether or not the \fBTween\fP is currently running\&. 
.PP
Definition at line 64 of file Tween\&.cs\&.
.SS "bool Leap\&.Unity\&.Animation\&.Tween\&.isValid\fC [get]\fP"

.PP
Returns whether or not this \fBTween\fP is considered valid\&. A \fBTween\fP can become invalid under the following conditions: 
.IP "\(bu" 2
It was constructed with the default constructor\&. Only ever use \fBTween\&.Single\fP or Tween\&.Persistant to create Tweens\&.
.IP "\(bu" 2
It was constructed with \fBTween\&.Single\fP and has already finished playing\&. Use Tween\&.Persistant if you want to keep it for longer\&.
.IP "\(bu" 2
It had Release called\&. 
.PP

.PP
Definition at line 55 of file Tween\&.cs\&.
.SS "float Leap\&.Unity\&.Animation\&.Tween\&.progress\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets how far along completion this \fBTween\fP is\&. This value is a percent that ranges from 0 to 1\&. 
.PP
Definition at line 100 of file Tween\&.cs\&.
.SS "float Leap\&.Unity\&.Animation\&.Tween\&.timeLeft\fC [get]\fP"

.PP
Gets how much time is left before the \fBTween\fP stops\&. 
.PP
Definition at line 89 of file Tween\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
