.TH "Leap.Unity.ProduceConsumeBuffer< T >" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Leap.Unity.ProduceConsumeBuffer< T >
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBProduceConsumeBuffer\fP (int minCapacity)"
.br
.RI "Constructs a new produce consumer buffer of at least a certain capacity\&. Once the buffer is created, the capacity cannot be modified\&. "
.ti -1c
.RI "bool \fBTryEnqueue\fP (ref T t)"
.br
.RI "Tries to enqueue a value into the buffer\&. If the buffer is already full, this method will perform no action and return false\&. This method is only safe to be called from a single producer thread\&. "
.ti -1c
.RI "bool \fBTryEnqueue\fP (T t)"
.br
.RI "Tries to enqueue a value into the buffer\&. If the buffer is already full, this method will perform no action and return false\&. This method is only safe to be called from a single producer thread\&. "
.ti -1c
.RI "bool \fBTryPeek\fP (out T t)"
.br
.RI "Tries to get the next element that would be dequeued from this buffer\&. If there is no element yet, this method will return false\&. If there is an element ready to be dequeued, it will be copied to the out param and this method will return true\&. "
.ti -1c
.RI "bool \fBTryDequeue\fP (out T t)"
.br
.RI "Tries to dequeue a value off of the buffer\&. If the buffer is empty this method will perform no action and return false\&. This method is only safe to be called from a single consumer thread\&. "
.ti -1c
.RI "bool \fBTryDequeue\fP ()"
.br
.RI "Tries to dequeue a value off of the buffer\&. If the buffer is empty this method will perform no action and return false\&. This method is only safe to be called from a single consumer thread\&. "
.ti -1c
.RI "bool \fBTryDequeueAll\fP (out T mostRecent)"
.br
.RI "Tries to dequeue all values off of the buffer, returning the most recently added element\&. If there was an element found, this method will return true, else it will return false\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "int \fBCapacity\fP\fC [get]\fP"
.br
.RI "Returns the maximum number of elements that the buffer can hold\&. "
.ti -1c
.RI "int \fBCount\fP\fC [get]\fP"
.br
.RI "Returns the current number of elements that are held inside the buffer\&. "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 15 of file ProduceConsumeBuffer\&.cs\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBLeap\&.Unity\&.ProduceConsumeBuffer\fP< T >\&.\fBProduceConsumeBuffer\fP (int minCapacity)"

.PP
Constructs a new produce consumer buffer of at least a certain capacity\&. Once the buffer is created, the capacity cannot be modified\&. If the minimum capacity is a power of two, it will be used as the actual capacity\&. If the minimum capacity is not a power of two, the next highest power of two will be used as the capacity\&. This behavior is an optimization, Internally this class uses a bitwise AND operation instead of a slower modulus operation for indexing, which only is possible if the array length is a power of two\&. 
.PP
Definition at line 30 of file ProduceConsumeBuffer\&.cs\&.
.SH "Member Function Documentation"
.PP 
.SS "bool \fBLeap\&.Unity\&.ProduceConsumeBuffer\fP< T >\&.TryDequeue (out T t)"

.PP
Tries to dequeue a value off of the buffer\&. If the buffer is empty this method will perform no action and return false\&. This method is only safe to be called from a single consumer thread\&. 
.PP
Definition at line 127 of file ProduceConsumeBuffer\&.cs\&.
.SS "bool \fBLeap\&.Unity\&.ProduceConsumeBuffer\fP< T >\&.TryDequeue ()"

.PP
Tries to dequeue a value off of the buffer\&. If the buffer is empty this method will perform no action and return false\&. This method is only safe to be called from a single consumer thread\&. 
.PP
Definition at line 143 of file ProduceConsumeBuffer\&.cs\&.
.SS "bool \fBLeap\&.Unity\&.ProduceConsumeBuffer\fP< T >\&.TryDequeueAll (out T mostRecent)"

.PP
Tries to dequeue all values off of the buffer, returning the most recently added element\&. If there was an element found, this method will return true, else it will return false\&. 
.PP
Definition at line 157 of file ProduceConsumeBuffer\&.cs\&.
.SS "bool \fBLeap\&.Unity\&.ProduceConsumeBuffer\fP< T >\&.TryEnqueue (ref T t)"

.PP
Tries to enqueue a value into the buffer\&. If the buffer is already full, this method will perform no action and return false\&. This method is only safe to be called from a single producer thread\&. 
.PP
Definition at line 83 of file ProduceConsumeBuffer\&.cs\&.
.SS "bool \fBLeap\&.Unity\&.ProduceConsumeBuffer\fP< T >\&.TryEnqueue (T t)"

.PP
Tries to enqueue a value into the buffer\&. If the buffer is already full, this method will perform no action and return false\&. This method is only safe to be called from a single producer thread\&. 
.PP
Definition at line 97 of file ProduceConsumeBuffer\&.cs\&.
.SS "bool \fBLeap\&.Unity\&.ProduceConsumeBuffer\fP< T >\&.TryPeek (out T t)"

.PP
Tries to get the next element that would be dequeued from this buffer\&. If there is no element yet, this method will return false\&. If there is an element ready to be dequeued, it will be copied to the out param and this method will return true\&. This method is only safe to be called from a single consumer thread\&. 
.PP
Definition at line 109 of file ProduceConsumeBuffer\&.cs\&.
.SH "Property Documentation"
.PP 
.SS "int \fBLeap\&.Unity\&.ProduceConsumeBuffer\fP< T >\&.Capacity\fC [get]\fP"

.PP
Returns the maximum number of elements that the buffer can hold\&. 
.PP
Definition at line 56 of file ProduceConsumeBuffer\&.cs\&.
.SS "int \fBLeap\&.Unity\&.ProduceConsumeBuffer\fP< T >\&.Count\fC [get]\fP"

.PP
Returns the current number of elements that are held inside the buffer\&. 
.PP
Definition at line 65 of file ProduceConsumeBuffer\&.cs\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
