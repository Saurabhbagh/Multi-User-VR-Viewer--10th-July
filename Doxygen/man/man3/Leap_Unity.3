.TH "Leap.Unity" 3 "Sat Jul 20 2019" "Version https://github.com/Saurabhbagh/Multi-User-VR-Viewer--10th-July/" "Multi User Vr Viewer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Leap.Unity
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBAnimation\fP"
.br
.ti -1c
.RI "namespace \fBAttachments\fP"
.br
.ti -1c
.RI "namespace \fBAttributes\fP"
.br
.ti -1c
.RI "namespace \fBEncoding\fP"
.br
.ti -1c
.RI "namespace \fBExamples\fP"
.br
.ti -1c
.RI "namespace \fBInfix\fP"
.br
.ti -1c
.RI "namespace \fBInteraction\fP"
.br
.ti -1c
.RI "namespace \fBLeap\fP"
.br
.ti -1c
.RI "namespace \fBQuery\fP"
.br
.ti -1c
.RI "namespace \fBRuntimeGizmos\fP"
.br
.ti -1c
.RI "namespace \fBSpace\fP"
.br
.ti -1c
.RI "namespace \fBSwizzle\fP"
.br
.ti -1c
.RI "namespace \fBTests\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAbstractHoldDetector\fP"
.br
.ti -1c
.RI "class \fBAnimationCurveUtil\fP"
.br
.ti -1c
.RI "class \fBArrayPool\fP"
.br
.ti -1c
.RI "class \fBAssetFolder\fP"
.br
.RI "A convenient serializable representation of an asset folder\&. Only useful for editor scripts since asset folder structure is not preserved for builds\&. The asset folder struct itself is still available at runtime for serialization ease, but the Path property will not be available\&. "
.ti -1c
.RI "class \fBAssetFolderPropertyDrawer\fP"
.br
.ti -1c
.RI "class \fBAutoValueProxy\fP"
.br
.RI "A helpful implementation of \fBIValueProxy\fP\&. The class is a monobehaviour and so can be attached to game objects\&. Auto-pushing can also be turned on and off\&. When Auto-pushing is enabled, the behaviour will push the value on every LateUpdate\&. "
.ti -1c
.RI "class \fBBitConverterNonAlloc\fP"
.br
.ti -1c
.RI "class \fBBoxedIndexableStruct\fP"
.br
.RI "Explicit boxing class for IIndexableStructs that implements \fBIIndexable\fP\&. "
.ti -1c
.RI "class \fBBoxedIndexableStructExtensions\fP"
.br
.ti -1c
.RI "class \fBCapsuleHand\fP"
.br
.ti -1c
.RI "class \fBComment\fP"
.br
.ti -1c
.RI "class \fBCommentEditor\fP"
.br
.ti -1c
.RI "class \fBConnectionMonitor\fP"
.br
.ti -1c
.RI "class \fBCorePreferences\fP"
.br
.ti -1c
.RI "class \fBCustomEditorBase\fP"
.br
.ti -1c
.RI "class \fBCustomPropertyDrawerBase\fP"
.br
.ti -1c
.RI "class \fBDebugHand\fP"
.br
.ti -1c
.RI "class \fBDefaultCurve\fP"
.br
.ti -1c
.RI "class \fBDelayBuffer\fP"
.br
.ti -1c
.RI "class \fBDeltaBuffer\fP"
.br
.RI "Allows you to add to a capped-size ring buffer of Ts and, when full, compute the buffer's average change over time\&. \fBDeltaBuffer\fP without type parameters supports Vector3s; \fBDeltaFloatBuffer\fP supports floats, and \fBDeltaQuaternionBuffer\fP supports Quaternion rotations\&. "
.ti -1c
.RI "class \fBDeltaFloatBuffer\fP"
.br
.RI "A ring buffer of floats with a \fBDelta()\fP function that computes the buffer's average change over time\&. \fBDelta()\fP will return zero if the buffer contains one or fewer samples\&. "
.ti -1c
.RI "class \fBDeltaQuaternionBuffer\fP"
.br
.RI "A ring buffer of Quaternions with a \fBDelta()\fP function that computes the buffer's average change over time as an angle-axis vector\&. Returns Vector3\&.zero if the buffer contains one or fewer samples\&. "
.ti -1c
.RI "class \fBDeque\fP"
.br
.ti -1c
.RI "class \fBDetector\fP"
.br
.ti -1c
.RI "class \fBDetectorLogicGate\fP"
.br
.ti -1c
.RI "class \fBDisconnectionNotice\fP"
.br
.ti -1c
.RI "class \fBEditorUtils\fP"
.br
.ti -1c
.RI "struct \fBEither\fP"
.br
.RI "A data structure that represents either a value of type A or a value of type B\&. The value can never be both A and B\&. Neither A nor B can ever be null\&. "
.ti -1c
.RI "class \fBEnableDepthBuffer\fP"
.br
.ti -1c
.RI "class \fBEnum\fP"
.br
.ti -1c
.RI "class \fBEnumEventTable\fP"
.br
.ti -1c
.RI "class \fBEnumEventTableEditor\fP"
.br
.ti -1c
.RI "class \fBExecuteAfterAttribute\fP"
.br
.ti -1c
.RI "class \fBExecuteAfterDefault\fP"
.br
.ti -1c
.RI "class \fBExecuteBeforeAttribute\fP"
.br
.ti -1c
.RI "class \fBExecuteBeforeDefault\fP"
.br
.ti -1c
.RI "class \fBExtendedFingerDetector\fP"
.br
.ti -1c
.RI "class \fBFingerDirectionDetector\fP"
.br
.ti -1c
.RI "class \fBFingerModel\fP"
.br
.ti -1c
.RI "class \fBFpsLabel\fP"
.br
.ti -1c
.RI "class \fBFrameRateControls\fP"
.br
.RI "Provides control of target frame rate\&. "
.ti -1c
.RI "class \fBGuiRectUtil\fP"
.br
.ti -1c
.RI "class \fBHandDrop\fP"
.br
.ti -1c
.RI "class \fBHandEnableDisable\fP"
.br
.ti -1c
.RI "class \fBHandModel\fP"
.br
.ti -1c
.RI "class \fBHandModelBase\fP"
.br
.ti -1c
.RI "class \fBHandModelManager\fP"
.br
.RI "The \fBHandModelManager\fP manages a pool of HandModelBases and makes HandRepresentations when a it detects a \fBLeap\fP \fBHand\fP from its configured \fBLeapProvider\fP\&. "
.ti -1c
.RI "class \fBHandRepresentation\fP"
.br
.ti -1c
.RI "class \fBHands\fP"
.br
.RI "Static convenience methods and extension methods for getting useful \fBHand\fP data\&. "
.ti -1c
.RI "class \fBHandTransitionBehavior\fP"
.br
.RI "A component to be attached to a \fBHandModelBase\fP to handle starting and ending of tracking\&. "
.ti -1c
.RI "class \fBHandUtils\fP"
.br
.RI "Utility methods for constructing and manipulating \fBLeap\fP hand object data\&. "
.ti -1c
.RI "struct \fBHash\fP"
.br
.ti -1c
.RI "class \fBHotkeys\fP"
.br
.ti -1c
.RI "interface \fBICanReportDuplicateInformation\fP"
.br
.ti -1c
.RI "interface \fBIIndexable\fP"
.br
.RI "This easy-to-implement interface represents the ability to index into a collection of elements of type T\&. IIndexables inherit Query() via an extension method\&. "
.ti -1c
.RI "class \fBIIndexableExtensions\fP"
.br
.ti -1c
.RI "interface \fBIIndexableStruct\fP"
.br
.RI "This is a definition-friendly interface that new 'indexable' struct definitions can implement to make it a little easier to implement foreach and Query() operations for their struct\&. (You can use the \fBIndexableStructEnumerator\fP for this purpose, you just have to pass it type arguments that correspond to your struct type\&.) "
.ti -1c
.RI "interface \fBIMinHeapNode\fP"
.br
.ti -1c
.RI "struct \fBIndexableEnumerator\fP"
.br
.ti -1c
.RI "struct \fBIndexableStructEnumerator\fP"
.br
.RI "A two-generic-argument variant of an enumerator that allows an \fBIIndexableStruct\fP to quickly define an Enumerator that avoids allocation\&. "
.ti -1c
.RI "class \fBInternalUtility\fP"
.br
.ti -1c
.RI "interface \fBIPoolable\fP"
.br
.RI "Implement this interface to recieve a callback whenever your object is spawned from a pool\&. "
.ti -1c
.RI "interface \fBIProgressView\fP"
.br
.RI "This interface describes a generic way to update the progress of an action\&. "
.ti -1c
.RI "interface \fBISerializableDictionary\fP"
.br
.ti -1c
.RI "interface \fBIValueProxy\fP"
.br
.RI "A simple interface that allows an object to act as a 'proxy' interface to another object\&. The proxy can store a serialized representation of a value on another object\&. The value of the proxy can either be updated from the object (pull), or be pushed out to the object (push)\&. "
.ti -1c
.RI "class \fBKeyEnableBehaviors\fP"
.br
.ti -1c
.RI "class \fBKeyEnableGameObjects\fP"
.br
.ti -1c
.RI "class \fBLeapColor\fP"
.br
.RI "Contains color constants like UnityEngine\&.Color, but for \fIall\fP the colors you can think of\&. If you can think of a color that doesn't exist here, add it! "
.ti -1c
.RI "class \fBLeapEyeDislocator\fP"
.br
.RI "Moves the camera to each eye position on pre-render\&. Only necessary for image pass-through (IR viewer) scenarios\&. "
.ti -1c
.RI "class \fBLeapEyeDislocatorEditor\fP"
.br
.ti -1c
.RI "class \fBLeapImageRetriever\fP"
.br
.RI "Acquires images from a \fBLeapServiceProvider\fP and uploads image data as shader global data for use by any shaders that render those images\&. "
.ti -1c
.RI "class \fBLeapImageRetrieverEditor\fP"
.br
.ti -1c
.RI "class \fBLeapPreferences\fP"
.br
.RI "This attribute is used to add items to the \fBLeap\fP Motion preferences window\&. This allows each module to define their own preferences and still have them all show up under the same window\&. "
.ti -1c
.RI "class \fBLeapProfiling\fP"
.br
.RI "Utility class used by the \fBLeapServiceProvider\fP for profiling the \fBLeapCSharp\fP dll "
.ti -1c
.RI "class \fBLeapProjectCheckAttribute\fP"
.br
.RI "Add this attribute to a settings check\&. This method will be called often while the \fBLeap\fP Motion \fBUnity\fP Window is open, so it should be as light-weight as possible! If you need to do a heavy check that involves scanning the current scene for example, you should gate the check behind a button\&. "
.ti -1c
.RI "class \fBLeapProjectChecks\fP"
.br
.RI "Utility class for working with project checks\&. Note, most features are only available in the Editor\&. "
.ti -1c
.RI "class \fBLeapProvider\fP"
.br
.RI "Provides \fBFrame\fP object data to the \fBUnity\fP application by firing events as soon as \fBFrame\fP data is available\&. Frames contain all currently tracked Hands in view of the \fBLeap\fP Motion \fBController\fP\&. "
.ti -1c
.RI "class \fBLeapProviderExtensions\fP"
.br
.ti -1c
.RI "class \fBLeapRigUpgrader\fP"
.br
.RI "Can scan the currently open scene and detect instances of an old \fBLeap\fP Rig hierarchy, render a GUI describing the old rig, and provides functionality for automatically upgrading the rig\&. "
.ti -1c
.RI "class \fBLeapServiceProvider\fP"
.br
.RI "The \fBLeapServiceProvider\fP provides tracked \fBLeap\fP \fBHand\fP data and images from the device via the \fBLeap\fP service running on the client machine\&. "
.ti -1c
.RI "class \fBLeapServiceProviderEditor\fP"
.br
.ti -1c
.RI "class \fBLeapTestProvider\fP"
.br
.ti -1c
.RI "class \fBLeapUnityWindow\fP"
.br
.ti -1c
.RI "class \fBLeapXRServiceProvider\fP"
.br
.RI "The \fBLeapXRServiceProvider\fP expands on the standard \fBLeapServiceProvider\fP to account for the offset of the \fBLeap\fP device with respect to the attached HMD and warp tracked hand positions based on the motion of the headset to account for the differing latencies of the two tracking systems\&. "
.ti -1c
.RI "class \fBLeapXRServiceProviderEditor\fP"
.br
.ti -1c
.RI "class \fBListAndArrayExtensions\fP"
.br
.ti -1c
.RI "class \fBMaybe\fP"
.br
.ti -1c
.RI "class \fBMinHeap\fP"
.br
.ti -1c
.RI "class \fBMultiTypedList\fP"
.br
.ti -1c
.RI "class \fBMultiTypedListUtil\fP"
.br
.ti -1c
.RI "class \fBMultiTypedReference\fP"
.br
.RI "Represents a single reference to a value of type BaseType\&. "
.ti -1c
.RI "class \fBMultiTypedReferenceUtil\fP"
.br
.ti -1c
.RI "class \fBOldRigHierarchy\fP"
.br
.RI "Description of an old \fBLeap\fP VR rig from before Core version 4\&.4\&. "
.ti -1c
.RI "class \fBPalmDirectionDetector\fP"
.br
.ti -1c
.RI "class \fBPinchDetector\fP"
.br
.RI "A basic utility class to aid in creating pinch based actions\&. Once linked with a \fBHandModelBase\fP, it can be used to detect pinch gestures that the hand makes\&. "
.ti -1c
.RI "class \fBPool\fP"
.br
.RI "A very lightweight pool implementation\&. When you call Spawn, an object of type T will be returned\&. If the pool was not empty, the T will be taken from the pool\&. If the pool was empty, a new T will be constructed and returned instead\&. Calling recycle will return a T to the pool\&. "
.ti -1c
.RI "struct \fBPose\fP"
.br
.RI "A position and rotation\&. You can multiply two poses; this acts like Matrix4x4 multiplication, but Poses always have unit scale\&. "
.ti -1c
.RI "class \fBPoseExtensions\fP"
.br
.ti -1c
.RI "class \fBPostProcessProvider\fP"
.br
.ti -1c
.RI "class \fBPostProcessProviderEditor\fP"
.br
.ti -1c
.RI "class \fBProduceConsumeBuffer\fP"
.br
.ti -1c
.RI "struct \fBProfilerSample\fP"
.br
.RI "A utility struct for ease of use when you want to wrap a piece of code in a Profiler\&.BeginSample/EndSample\&. Usage: "
.ti -1c
.RI "class \fBProgressBar\fP"
.br
.RI "This class allows you to easily give feedback of an action as it completes\&. "
.ti -1c
.RI "class \fBProximityDetector\fP"
.br
.ti -1c
.RI "class \fBProximityEvent\fP"
.br
.ti -1c
.RI "struct \fBReadonlyHashSet\fP"
.br
.RI "A simple wrapper around HashSet to provide readonly access\&. Useful when you want to return a HashSet to someone but you want to make sure they don't muck it up! "
.ti -1c
.RI "struct \fBReadonlyList\fP"
.br
.RI "A simple wrapper around List to provide readonly access\&. Useful when you want to return a list to someone but you want to make sure they don't muck it up! "
.ti -1c
.RI "struct \fBReadonlySlice\fP"
.br
.ti -1c
.RI "class \fBReadonlySliceExtensions\fP"
.br
.ti -1c
.RI "class \fBRiggedFinger\fP"
.br
.RI "Manages the position and orientation of the bones in a model rigged for skeletal animation\&. "
.ti -1c
.RI "class \fBRiggedHand\fP"
.br
.ti -1c
.RI "class \fBRigidFinger\fP"
.br
.ti -1c
.RI "class \fBRigidHand\fP"
.br
.ti -1c
.RI "class \fBRingBuffer\fP"
.br
.ti -1c
.RI "class \fBSDictionaryAttribute\fP"
.br
.ti -1c
.RI "class \fBSerializableDictionary\fP"
.br
.RI "In order to have this class be serialized, you will always need to create your own non-generic version specific to your needs\&. This is the same workflow that exists for using the UnityEvent class as well\&. "
.ti -1c
.RI "class \fBSerializableDictionaryBase\fP"
.br
.ti -1c
.RI "class \fBSerializableDictionaryEditor\fP"
.br
.ti -1c
.RI "class \fBSerializableHashSet\fP"
.br
.ti -1c
.RI "class \fBSerializableHashSetBase\fP"
.br
.ti -1c
.RI "class \fBSerializableHashSetEditor\fP"
.br
.ti -1c
.RI "struct \fBSerializableType\fP"
.br
.ti -1c
.RI "class \fBSHashSetAttribute\fP"
.br
.ti -1c
.RI "struct \fBSingleLayer\fP"
.br
.RI "An object you can use to represent a single \fBUnity\fP layer as a dropdown in the inspector\&. Can be converted back and forth between the integer representation \fBUnity\fP usually uses in its own methods\&. "
.ti -1c
.RI "class \fBSingleLayerEditor\fP"
.br
.ti -1c
.RI "class \fBSkeletalFinger\fP"
.br
.ti -1c
.RI "class \fBSkeletalHand\fP"
.br
.ti -1c
.RI "struct \fBSlice\fP"
.br
.ti -1c
.RI "class \fBSliceExtensions\fP"
.br
.ti -1c
.RI "class \fBSlidingMax\fP"
.br
.ti -1c
.RI "class \fBSmoothedFloat\fP"
.br
.RI "Time-step independent exponential smoothing\&. "
.ti -1c
.RI "class \fBSmoothedQuaternion\fP"
.br
.RI "Time-step independent exponential smoothing\&. "
.ti -1c
.RI "class \fBSmoothedVector3\fP"
.br
.RI "Time-step independent exponential smoothing\&. "
.ti -1c
.RI "class \fBStationaryTestLeapProvider\fP"
.br
.ti -1c
.RI "class \fBStreamingAsset\fP"
.br
.ti -1c
.RI "class \fBStreamingAssetPropertyDrawer\fP"
.br
.ti -1c
.RI "class \fBStreamingFolder\fP"
.br
.ti -1c
.RI "class \fBStreamingFolderPropertyDrawer\fP"
.br
.ti -1c
.RI "class \fBTransformHistory\fP"
.br
.RI "Implements a resample-able transform history\&. "
.ti -1c
.RI "class \fBTransformUtil\fP"
.br
.ti -1c
.RI "class \fBType\fP"
.br
.ti -1c
.RI "class \fBUnityMatrixExtension\fP"
.br
.ti -1c
.RI "class \fBUnityQuaternionExtension\fP"
.br
.ti -1c
.RI "class \fBUnityVectorExtension\fP"
.br
.ti -1c
.RI "class \fBUtils\fP"
.br
.ti -1c
.RI "class \fBXRHeightOffset\fP"
.br
.ti -1c
.RI "class \fBXRHeightOffsetEditor\fP"
.br
.ti -1c
.RI "class \fBXRSupportUtil\fP"
.br
.RI "Wraps various (but not all) 'XR' calls with \fBUnity\fP 5\&.6-supporting 'VR' calls via #ifdefs\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBUnityObject\fP = UnityEngine\&.Object"
.br
.ti -1c
.RI "using \fBTestHandPose\fP = TestHandFactory\&.TestHandPose"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBLogicType\fP { \fBLogicType\&.AndGate\fP, \fBLogicType\&.OrGate\fP }"
.br
.ti -1c
.RI "enum \fBPointingState\fP { \fBPointingState\&.Extended\fP, \fBPointingState\&.NotExtended\fP, \fBPointingState\&.Either\fP }"
.br
.ti -1c
.RI "enum \fBPointingType\fP { \fBPointingType\&.RelativeToCamera\fP, \fBPointingType\&.RelativeToHorizon\fP, \fBPointingType\&.RelativeToWorld\fP, \fBPointingType\&.AtTarget\fP }"
.br
.ti -1c
.RI "enum \fBChirality\fP { \fBChirality\&.Left\fP, \fBChirality\&.Right\fP }"
.br
.ti -1c
.RI "enum \fBModelType\fP { \fBModelType\&.Graphics\fP, \fBModelType\&.Physics\fP }"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "using \fBLeap\&.Unity\&.TestHandPose\fP = typedef TestHandFactory\&.TestHandPose"

.PP
Definition at line 15 of file LeapProvider\&.cs\&.
.SS "typedef \fBUnityEngine\fP \fBObject\fP \fBLeap\&.Unity\&.UnityObject\fP"

.PP
Definition at line 21 of file LeapRigUpgrader\&.cs\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBLeap\&.Unity\&.Chirality\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILeft \fP\fP
.TP
\fB\fIRight \fP\fP
.PP
Definition at line 18 of file HandModelBase\&.cs\&.
.SS "enum \fBLeap\&.Unity\&.LogicType\fP\fC [strong]\fP"
The type of logic used to combine the watched detectors\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIAndGate \fP\fP
.TP
\fB\fIOrGate \fP\fP
.PP
Definition at line 155 of file DetectorLogicGate\&.cs\&.
.SS "enum \fBLeap\&.Unity\&.ModelType\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIGraphics \fP\fP
.TP
\fB\fIPhysics \fP\fP
.PP
Definition at line 19 of file HandModelBase\&.cs\&.
.SS "enum \fBLeap\&.Unity\&.PointingState\fP\fC [strong]\fP"
Defines the settings for comparing extended finger states 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIExtended \fP\fP
.TP
\fB\fINotExtended \fP\fP
.TP
\fB\fIEither \fP\fP
.PP
Definition at line 185 of file ExtendedFingerDetector\&.cs\&.
.SS "enum \fBLeap\&.Unity\&.PointingType\fP\fC [strong]\fP"
Settings for handling pointing conditions
.IP "\(bu" 2
RelativeToCamera -- the target direction is defined relative to the camera's forward vector\&.
.IP "\(bu" 2
RelativeToHorizon -- the target direction is defined relative to the camera's forward vector, except that it does not change with pitch\&.
.IP "\(bu" 2
RelativeToWorld -- the target direction is defined as a global direction that does not change with camera movement\&.
.IP "\(bu" 2
AtTarget -- a target object is used to determine the pointing direction\&.
.PP
.PP
\fBSince:\fP
.RS 4
4\&.1\&.2 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRelativeToCamera \fP\fP
.TP
\fB\fIRelativeToHorizon \fP\fP
.TP
\fB\fIRelativeToWorld \fP\fP
.TP
\fB\fIAtTarget \fP\fP
.PP
Definition at line 201 of file PalmDirectionDetector\&.cs\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Multi User Vr Viewer from the source code\&.
