<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_leap_1_1_unity_1_1_produce_consume_buffer">
<title>Leap.Unity.ProduceConsumeBuffer&lt; T &gt; Class Template Reference</title>
<indexterm><primary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</primary></indexterm>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1abb2dd45e9fdf9542e1392a16b5a19a9e">ProduceConsumeBuffer</link> (int minCapacity)</para>

<para>Constructs a new produce consumer buffer of at least a certain capacity. Once the buffer is created, the capacity cannot be modified. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a2c3eaa1d8aafc68cf6d8d020ae47e4de">TryEnqueue</link> (ref T t)</para>

<para>Tries to enqueue a value into the buffer. If the buffer is already full, this method will perform no action and return false. This method is only safe to be called from a single producer thread. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1ae80a5be8a8e07eb8b922fdfca764f1da">TryEnqueue</link> (T t)</para>

<para>Tries to enqueue a value into the buffer. If the buffer is already full, this method will perform no action and return false. This method is only safe to be called from a single producer thread. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a4884c0e9c693c92439a2bc7fe99275e9">TryPeek</link> (out T t)</para>

<para>Tries to get the next element that would be dequeued from this buffer. If there is no element yet, this method will return false. If there is an element ready to be dequeued, it will be copied to the out param and this method will return true. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a8974fa947fcc940620300c54d3de6f1b">TryDequeue</link> (out T t)</para>

<para>Tries to dequeue a value off of the buffer. If the buffer is empty this method will perform no action and return false. This method is only safe to be called from a single consumer thread. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a0a756b193a73f2ab9dd21a89dce33b65">TryDequeue</link> ()</para>

<para>Tries to dequeue a value off of the buffer. If the buffer is empty this method will perform no action and return false. This method is only safe to be called from a single consumer thread. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a72a0d4ce3f8ec48ed46fa80f5944f988">TryDequeueAll</link> (out T mostRecent)</para>

<para>Tries to dequeue all values off of the buffer, returning the most recently added element. If there was an element found, this method will return true, else it will return false. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Properties    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a04753532a728b38e5cc0226c797fbef1">Capacity</link><computeroutput> [get]</computeroutput>
</para>

<para>Returns the maximum number of elements that the buffer can hold. </para>
</listitem>
            <listitem><para>int <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1ab7a378bf347d928035288ae0e790b938">Count</link><computeroutput> [get]</computeroutput>
</para>

<para>Returns the current number of elements that are held inside the buffer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__produce_consume_buffer_8cs_source_1l00015">15</link> of file <link linkend="__produce_consume_buffer_8cs_source">ProduceConsumeBuffer.cs</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_leap_1_1_unity_1_1_produce_consume_buffer_1abb2dd45e9fdf9542e1392a16b5a19a9e"/>    <section>
    <title>ProduceConsumeBuffer()</title>
<indexterm><primary>ProduceConsumeBuffer</primary><secondary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</primary><secondary>ProduceConsumeBuffer</secondary></indexterm>
<para><computeroutput><link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">Leap.Unity.ProduceConsumeBuffer</link>&lt; T &gt;.<link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">ProduceConsumeBuffer</link> (int minCapacity)</computeroutput></para><para>

<para>Constructs a new produce consumer buffer of at least a certain capacity. Once the buffer is created, the capacity cannot be modified. </para>
</para>

<para>If the minimum capacity is a power of two, it will be used as the actual capacity. If the minimum capacity is not a power of two, the next highest power of two will be used as the capacity. This behavior is an optimization, Internally this class uses a bitwise AND operation instead of a slower modulus operation for indexing, which only is possible if the array length is a power of two. </para>
<para>
Definition at line <link linkend="__produce_consume_buffer_8cs_source_1l00030">30</link> of file <link linkend="__produce_consume_buffer_8cs_source">ProduceConsumeBuffer.cs</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a8974fa947fcc940620300c54d3de6f1b"/>    <section>
    <title>TryDequeue()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>TryDequeue</primary><secondary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</primary><secondary>TryDequeue</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">Leap.Unity.ProduceConsumeBuffer</link>&lt; T &gt;.TryDequeue (out T t)</computeroutput></para><para>

<para>Tries to dequeue a value off of the buffer. If the buffer is empty this method will perform no action and return false. This method is only safe to be called from a single consumer thread. </para>
</para>
<para>
Definition at line <link linkend="__produce_consume_buffer_8cs_source_1l00127">127</link> of file <link linkend="__produce_consume_buffer_8cs_source">ProduceConsumeBuffer.cs</link>.</para>
    </section><anchor xml:id="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a0a756b193a73f2ab9dd21a89dce33b65"/>    <section>
    <title>TryDequeue()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>TryDequeue</primary><secondary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</primary><secondary>TryDequeue</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">Leap.Unity.ProduceConsumeBuffer</link>&lt; T &gt;.TryDequeue ( )</computeroutput></para><para>

<para>Tries to dequeue a value off of the buffer. If the buffer is empty this method will perform no action and return false. This method is only safe to be called from a single consumer thread. </para>
</para>
<para>
Definition at line <link linkend="__produce_consume_buffer_8cs_source_1l00143">143</link> of file <link linkend="__produce_consume_buffer_8cs_source">ProduceConsumeBuffer.cs</link>.</para>
    </section><anchor xml:id="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a72a0d4ce3f8ec48ed46fa80f5944f988"/>    <section>
    <title>TryDequeueAll()</title>
<indexterm><primary>TryDequeueAll</primary><secondary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</primary><secondary>TryDequeueAll</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">Leap.Unity.ProduceConsumeBuffer</link>&lt; T &gt;.TryDequeueAll (out T mostRecent)</computeroutput></para><para>

<para>Tries to dequeue all values off of the buffer, returning the most recently added element. If there was an element found, this method will return true, else it will return false. </para>
</para>
<para>
Definition at line <link linkend="__produce_consume_buffer_8cs_source_1l00157">157</link> of file <link linkend="__produce_consume_buffer_8cs_source">ProduceConsumeBuffer.cs</link>.</para>
    </section><anchor xml:id="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a2c3eaa1d8aafc68cf6d8d020ae47e4de"/>    <section>
    <title>TryEnqueue()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>TryEnqueue</primary><secondary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</primary><secondary>TryEnqueue</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">Leap.Unity.ProduceConsumeBuffer</link>&lt; T &gt;.TryEnqueue (ref T t)</computeroutput></para><para>

<para>Tries to enqueue a value into the buffer. If the buffer is already full, this method will perform no action and return false. This method is only safe to be called from a single producer thread. </para>
</para>
<para>
Definition at line <link linkend="__produce_consume_buffer_8cs_source_1l00083">83</link> of file <link linkend="__produce_consume_buffer_8cs_source">ProduceConsumeBuffer.cs</link>.</para>
    </section><anchor xml:id="_class_leap_1_1_unity_1_1_produce_consume_buffer_1ae80a5be8a8e07eb8b922fdfca764f1da"/>    <section>
    <title>TryEnqueue()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>TryEnqueue</primary><secondary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</primary><secondary>TryEnqueue</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">Leap.Unity.ProduceConsumeBuffer</link>&lt; T &gt;.TryEnqueue (T t)</computeroutput></para><para>

<para>Tries to enqueue a value into the buffer. If the buffer is already full, this method will perform no action and return false. This method is only safe to be called from a single producer thread. </para>
</para>
<para>
Definition at line <link linkend="__produce_consume_buffer_8cs_source_1l00097">97</link> of file <link linkend="__produce_consume_buffer_8cs_source">ProduceConsumeBuffer.cs</link>.</para>
    </section><anchor xml:id="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a4884c0e9c693c92439a2bc7fe99275e9"/>    <section>
    <title>TryPeek()</title>
<indexterm><primary>TryPeek</primary><secondary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</primary><secondary>TryPeek</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">Leap.Unity.ProduceConsumeBuffer</link>&lt; T &gt;.TryPeek (out T t)</computeroutput></para><para>

<para>Tries to get the next element that would be dequeued from this buffer. If there is no element yet, this method will return false. If there is an element ready to be dequeued, it will be copied to the out param and this method will return true. </para>
</para>

<para>This method is only safe to be called from a single consumer thread. </para>
<para>
Definition at line <link linkend="__produce_consume_buffer_8cs_source_1l00109">109</link> of file <link linkend="__produce_consume_buffer_8cs_source">ProduceConsumeBuffer.cs</link>.</para>
</section>
</section>
<section>
<title>Property Documentation</title>
<anchor xml:id="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a04753532a728b38e5cc0226c797fbef1"/>    <section>
    <title>Capacity</title>
<indexterm><primary>Capacity</primary><secondary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</primary><secondary>Capacity</secondary></indexterm>
<para><computeroutput>int <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">Leap.Unity.ProduceConsumeBuffer</link>&lt; T &gt;.Capacity<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>Returns the maximum number of elements that the buffer can hold. </para>
</para>
<para>
Definition at line <link linkend="__produce_consume_buffer_8cs_source_1l00056">56</link> of file <link linkend="__produce_consume_buffer_8cs_source">ProduceConsumeBuffer.cs</link>.</para>
    </section><anchor xml:id="_class_leap_1_1_unity_1_1_produce_consume_buffer_1ab7a378bf347d928035288ae0e790b938"/>    <section>
    <title>Count</title>
<indexterm><primary>Count</primary><secondary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.ProduceConsumeBuffer&lt; T &gt;</primary><secondary>Count</secondary></indexterm>
<para><computeroutput>int <link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">Leap.Unity.ProduceConsumeBuffer</link>&lt; T &gt;.Count<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>Returns the current number of elements that are held inside the buffer. </para>
</para>
<para>
Definition at line <link linkend="__produce_consume_buffer_8cs_source_1l00065">65</link> of file <link linkend="__produce_consume_buffer_8cs_source">ProduceConsumeBuffer.cs</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/<link linkend="__produce_consume_buffer_8cs">ProduceConsumeBuffer.cs</link></section>
</section>
