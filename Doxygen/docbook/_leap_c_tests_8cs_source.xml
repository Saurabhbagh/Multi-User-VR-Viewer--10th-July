<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__leap_c_tests_8cs_source">
<title>LeapCTests.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Editor/Tests/LeapCTests.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Threading;
00012 <emphasis role="keyword">using</emphasis>&#32;System.Runtime.InteropServices;
00013 
00014 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00015 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap_internal">LeapInternal</link>;
00016 
00017 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_leap_c_sharp_1_1_tests">Leap.LeapCSharp.Tests</link>&#32;{
00018 
00019 &#32;&#32;[TestFixture]
<anchor xml:id="__leap_c_tests_8cs_source_1l00020"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests">00020</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests">LeapCTests</link>&#32;{
00021 
00022 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00023"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1adde34c1811e7232528b77aa9ce3c35c3">00023</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1adde34c1811e7232528b77aa9ce3c35c3">TestNow</link>()&#32;{
00024 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;start&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a92e9bb730041df4094e328bcf326da47">GetNow</link>();
00025 &#32;&#32;&#32;&#32;&#32;&#32;Thread.Sleep(1);
00026 
00027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;stop&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a92e9bb730041df4094e328bcf326da47">GetNow</link>();
00028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;delta&#32;=&#32;stop&#32;-&#32;start;
00029 
00030 &#32;&#32;&#32;&#32;&#32;&#32;Assert.Greater(delta,&#32;200);
00031 &#32;&#32;&#32;&#32;&#32;&#32;Assert.Less(delta,&#32;1800);
00032 &#32;&#32;&#32;&#32;}
00033 
00034 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00035"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a2a8d719baeeb77249e0f524e68dce6e9">00035</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a2a8d719baeeb77249e0f524e68dce6e9">TestRebaserLifeCycle</link>()&#32;{
00036 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;rebaser&#32;=&#32;IntPtr.Zero;
00037 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1aff89b9602b8eae92c47079d89d4be8fc">CreateClockRebaser</link>(out&#32;rebaser);
00038 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(result&#32;==&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success);
00039 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreNotEqual(IntPtr.Zero,&#32;rebaser,&#32;<emphasis role="stringliteral">&quot;Handle&#32;no&#32;longer&#32;zero&quot;</emphasis>);
00040 
00041 &#32;&#32;&#32;&#32;&#32;&#32;Int64&#32;sysNow&#32;=&#32;DateTime.Now.Millisecond;
00042 &#32;&#32;&#32;&#32;&#32;&#32;Int64&#32;leapNow&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a92e9bb730041df4094e328bcf326da47">GetNow</link>();
00043 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a27dbedabde4b0e1b86cea09687ba3f49">UpdateRebase</link>(rebaser,&#32;sysNow,&#32;leapNow);
00044 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(result&#32;==&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success);
00045 
00046 &#32;&#32;&#32;&#32;&#32;&#32;Int64&#32;rebasedTime;
00047 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4c10837b7f5fa82c07eca68c17d3a49d">RebaseClock</link>(rebaser,&#32;sysNow&#32;+&#32;10,&#32;out&#32;rebasedTime);
00048 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(result&#32;==&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success);
00049 
00050 &#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Rebased:&#32;&quot;</emphasis>&#32;+&#32;rebasedTime);
00051 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a72516d54ac9cccc3c7bd8bb064109273">DestroyClockRebaser</link>(rebaser);
00052 &#32;&#32;&#32;&#32;}
00053 
00054 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00055"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a69a66157f9ae366d500c44f6b41b548a">00055</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a69a66157f9ae366d500c44f6b41b548a">TestCreateConnection</link>()&#32;{
00056 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result;
00057 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>&#32;config&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>();
00058 &#32;&#32;&#32;&#32;&#32;&#32;config.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g_1a1bf89a95e26e6ddc466744ce0661a18a">server_namespace</link>&#32;=&#32;Marshal.StringToHGlobalAnsi(<emphasis role="stringliteral">&quot;Leap&#32;Service&quot;</emphasis>);
00059 &#32;&#32;&#32;&#32;&#32;&#32;config.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g_1a70b836de05823b343ec5df4e6751ba8d">flags</link>&#32;=&#32;0;
00060 &#32;&#32;&#32;&#32;&#32;&#32;config.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g_1a4746dd9bc79ad1934f2801e68e38d9d1">size</link>&#32;=&#32;(uint)Marshal.SizeOf(config);
00061 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00062 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(ref&#32;config,&#32;out&#32;connHandle);
00063 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00064 &#32;&#32;&#32;&#32;&#32;&#32;Assert.False(connHandle&#32;==&#32;IntPtr.Zero,&#32;<emphasis role="stringliteral">&quot;Configured&#32;connection&#32;failed.&quot;</emphasis>);
00065 
00066 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;defConn&#32;=&#32;IntPtr.Zero;
00067 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;defConn);
00068 &#32;&#32;&#32;&#32;&#32;&#32;Assert.False(defConn&#32;==&#32;IntPtr.Zero,&#32;<emphasis role="stringliteral">&quot;Default&#32;config&#32;connection&#32;failed.&quot;</emphasis>);
00069 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00070 &#32;&#32;&#32;&#32;&#32;&#32;Marshal.FreeHGlobal(config.server_namespace);
00071 &#32;&#32;&#32;&#32;}
00072 
00073 &#32;&#32;&#32;&#32;[Ignore(<emphasis role="stringliteral">&quot;info.status&#32;is&#32;not&#32;returning&#32;true&#32;even&#32;though&#32;the&#32;result&#32;was&#32;returned&#32;&quot;</emphasis>
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;as&#32;successful.&#32;See&#32;the&#32;commented-out&#32;assert&#32;at&#32;the&#32;bottom&#32;of&#32;the&#32;test.&quot;</emphasis>)]
00075 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00076"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1aa9366a0620dbe96061e538a2875e3618">00076</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1aa9366a0620dbe96061e538a2875e3618">TestOpenConnection</link>()&#32;{
00077 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00078 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00079 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00080 
00081 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00082 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00083 
00084 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___i_n_f_o">LEAP_CONNECTION_INFO</link>&#32;info&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___i_n_f_o">LEAP_CONNECTION_INFO</link>();
00085 &#32;&#32;&#32;&#32;&#32;&#32;info.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___i_n_f_o_1a5428e50901ec7335e8450706a26e180a">size</link>&#32;=&#32;(uint)Marshal.SizeOf(typeof(<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___i_n_f_o">LEAP_CONNECTION_INFO</link>));
00086 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1abaf56f46dac48027a36aa0c08d94abbf">GetConnectionInfo</link>(connHandle,&#32;ref&#32;info);
00087 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00088 
00089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assert.AreEqual(eLeapConnectionStatus.eLeapConnectionStatus_Connected,&#32;info.status,&#32;&quot;Status:&#32;&quot;&#32;+&#32;info.status);</emphasis>
00090 &#32;&#32;&#32;&#32;}
00091 
00092 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00093"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a9cbd5a2d5a1b94fdf980f4134c0dc0eb">00093</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a9cbd5a2d5a1b94fdf980f4134c0dc0eb">TestGetConnectionInfo</link>()&#32;{
00094 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00095 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result;
00096 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___i_n_f_o">LEAP_CONNECTION_INFO</link>&#32;info&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___i_n_f_o">LEAP_CONNECTION_INFO</link>();
00097 &#32;&#32;&#32;&#32;&#32;&#32;info.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___i_n_f_o_1a3d12b72914f3b4bf9b536a6a429cfdbc">status</link>&#32;=&#32;<link linkend="_namespace_leap_internal_1a98a6a4220fcab393d11bf4ec2eecdea6">eLeapConnectionStatus</link>.eLeapConnectionStatus_HandshakeIncomplete;
00098 &#32;&#32;&#32;&#32;&#32;&#32;info.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___i_n_f_o_1a5428e50901ec7335e8450706a26e180a">size</link>&#32;=&#32;(uint)Marshal.SizeOf(typeof(<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___i_n_f_o">LEAP_CONNECTION_INFO</link>));
00099 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1abaf56f46dac48027a36aa0c08d94abbf">GetConnectionInfo</link>(connHandle,&#32;ref&#32;info);
00100 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_InvalidArgument,&#32;result);
00101 
00102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>&#32;config&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>();
00103 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(ref&#32;config,&#32;out&#32;connHandle);
00104 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00105 
00106 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1abaf56f46dac48027a36aa0c08d94abbf">GetConnectionInfo</link>(connHandle,&#32;ref&#32;info);
00107 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00108 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a98a6a4220fcab393d11bf4ec2eecdea6">eLeapConnectionStatus</link>.eLeapConnectionStatus_NotConnected,&#32;info.status,&#32;<emphasis role="stringliteral">&quot;Not&#32;connected&#32;before&#32;OpenConnection&quot;</emphasis>);
00109 
00110 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00111 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;polls&#32;=&#32;10;
00113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;polls;&#32;i++)&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;1;
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;==&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success)&#32;<emphasis role="keywordflow">break</emphasis>;
00118 &#32;&#32;&#32;&#32;&#32;&#32;}
00119 
00120 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1abaf56f46dac48027a36aa0c08d94abbf">GetConnectionInfo</link>(connHandle,&#32;ref&#32;info);
00121 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00122 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a98a6a4220fcab393d11bf4ec2eecdea6">eLeapConnectionStatus</link>.eLeapConnectionStatus_Connected,&#32;info.status,&#32;<emphasis role="stringliteral">&quot;Connection&#32;info&#32;says&#32;we&#32;are&#32;connected&quot;</emphasis>);
00123 
00124 &#32;&#32;&#32;&#32;}
00125 
00126 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00127"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a483200483d91981206d162ccc312fc3b">00127</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a483200483d91981206d162ccc312fc3b">TestPollConnection</link>()&#32;{
00128 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>&#32;config&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>();
00129 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00130 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(ref&#32;config,&#32;out&#32;connHandle);
00131 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Created&#32;connection&quot;</emphasis>);
00132 
00133 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00134 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00135 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection&quot;</emphasis>);
00136 
00137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;polls&#32;=&#32;10;
00138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;polls;&#32;i++)&#32;{
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;1;
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;Poll&#32;#&quot;</emphasis>&#32;+&#32;i&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;Msg&#32;type:&#32;&quot;</emphasis>&#32;+&#32;msg.type&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;result&#32;type:&#32;&quot;</emphasis>&#32;+&#32;result);
00143 
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.True(result&#32;==&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success&#32;||&#32;result&#32;==&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Timeout,&#32;<emphasis role="stringliteral">&quot;Poll&#32;#&quot;</emphasis>&#32;+&#32;i&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;of&#32;&quot;</emphasis>&#32;+&#32;polls);
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Thread.Sleep&#32;(54);</emphasis>
00146 &#32;&#32;&#32;&#32;&#32;&#32;}
00147 &#32;&#32;&#32;&#32;}
00148 
00149 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00150"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a8c4b2c7e793ea7adba0c47c005006433">00150</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a8c4b2c7e793ea7adba0c47c005006433">TestInterpolateFrames</link>()&#32;{
00151 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>&#32;config&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>();
00152 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00153 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(ref&#32;config,&#32;out&#32;connHandle);
00154 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Created&#32;connection&quot;</emphasis>);
00155 
00156 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00157 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00158 
00159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Get&#32;6&#32;frames</emphasis>
00160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;polls&#32;=&#32;100;
00161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameCount&#32;=&#32;0;
00162 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t">LEAP_TRACKING_EVENT</link>&#32;firstBefore&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t">LEAP_TRACKING_EVENT</link>();&#32;<emphasis role="comment">//&#32;Prevent</emphasis>
00163 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t">LEAP_TRACKING_EVENT</link>&#32;first&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t">LEAP_TRACKING_EVENT</link>();&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;unassigned&apos;</emphasis>
00164 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t">LEAP_TRACKING_EVENT</link>&#32;firstAfter&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t">LEAP_TRACKING_EVENT</link>();&#32;&#32;<emphasis role="comment">//&#32;errors.</emphasis>
00165 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t">LEAP_TRACKING_EVENT</link>&#32;tenthBefore;
00166 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t">LEAP_TRACKING_EVENT</link>&#32;tenth;
00167 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t">LEAP_TRACKING_EVENT</link>&#32;tenthAfter;
00168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;selected&#32;=&#32;5;
00169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;polls;&#32;i++)&#32;{
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Tracking)&#32;{
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frameCount&#32;==&#32;selected&#32;-&#32;1)
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_TRACKING_EVENT&gt;.PtrToStruct(msg.eventStructPtr,&#32;out&#32;firstBefore);
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frameCount&#32;==&#32;selected)
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_TRACKING_EVENT&gt;.PtrToStruct(msg.eventStructPtr,&#32;out&#32;first);
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frameCount&#32;==&#32;selected&#32;+&#32;1)
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_TRACKING_EVENT&gt;.PtrToStruct(msg.eventStructPtr,&#32;out&#32;firstAfter);
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frameCount&#32;==&#32;selected&#32;+&#32;2)
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_TRACKING_EVENT&gt;.PtrToStruct(msg.eventStructPtr,&#32;out&#32;tenthBefore);
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frameCount&#32;==&#32;selected&#32;+&#32;3)
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_TRACKING_EVENT&gt;.PtrToStruct(msg.eventStructPtr,&#32;out&#32;tenth);
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frameCount&#32;==&#32;selected&#32;+&#32;4)&#32;{
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_TRACKING_EVENT&gt;.PtrToStruct(msg.eventStructPtr,&#32;out&#32;tenthAfter);
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frameCount++;
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00190 &#32;&#32;&#32;&#32;&#32;&#32;}
00191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Int64&#32;halfTime&#32;=&#32;(first.info.timestamp&#32;-&#32;firstBefore.info.timestamp)/2;</emphasis>
00192 &#32;&#32;&#32;&#32;&#32;&#32;Int64&#32;testTime&#32;=&#32;first.<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t_1a05e4cb8a43cac50fbe03886fa71fec99">info</link>.<link linkend="_struct_leap_internal_1_1_l_e_a_p___f_r_a_m_e___h_e_a_d_e_r_1a5d251bc27fa45a5da9b9a31f92d2835e">timestamp</link>;<emphasis role="comment">//&#32;+&#32;halfTime;</emphasis>
00193 &#32;&#32;&#32;&#32;&#32;&#32;UInt64&#32;size;
00194 &#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;PrevF&#32;:&#32;&quot;</emphasis>&#32;+&#32;firstBefore.<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t_1a05e4cb8a43cac50fbe03886fa71fec99">info</link>.<link linkend="_struct_leap_internal_1_1_l_e_a_p___f_r_a_m_e___h_e_a_d_e_r_1a5d251bc27fa45a5da9b9a31f92d2835e">timestamp</link>);
00195 &#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Test&#32;&#32;:&#32;&quot;</emphasis>&#32;+&#32;testTime);
00196 &#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;NextF&#32;:&#32;&quot;</emphasis>&#32;+&#32;firstAfter.<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t_1a05e4cb8a43cac50fbe03886fa71fec99">info</link>.<link linkend="_struct_leap_internal_1_1_l_e_a_p___f_r_a_m_e___h_e_a_d_e_r_1a5d251bc27fa45a5da9b9a31f92d2835e">timestamp</link>);
00197 
00198 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1af4b7756a3307a082b6160d6e06d7f187">GetFrameSize</link>(connHandle,&#32;testTime,&#32;out&#32;size);
00199 &#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Size:&#32;&quot;</emphasis>&#32;+&#32;size);
00200 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Frame&#32;size&#32;call&#32;succeeded&#32;&quot;</emphasis>&#32;+&#32;result.indexOf());
00201 
00202 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;trackingBuffer&#32;=&#32;Marshal.AllocHGlobal((Int32)size);
00203 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a37b93d6d332a4fb88714b1a7583c3ce8">InterpolateFrame</link>(connHandle,&#32;testTime,&#32;trackingBuffer,&#32;size);
00204 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Frame&#32;interpolation&#32;succeeded.&quot;</emphasis>);
00205 
00206 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t">LEAP_TRACKING_EVENT</link>&#32;tracking_evt;
00207 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_TRACKING_EVENT&gt;.PtrToStruct(trackingBuffer,&#32;out&#32;tracking_evt);
00208 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(first.<link linkend="_struct_leap_internal_1_1_l_e_a_p___t_r_a_c_k_i_n_g___e_v_e_n_t_1a05e4cb8a43cac50fbe03886fa71fec99">info</link>.<link linkend="_struct_leap_internal_1_1_l_e_a_p___f_r_a_m_e___h_e_a_d_e_r_1a505537dcff6f66c04c5d62a571785312">frame_id</link>,&#32;tracking_evt.info.frame_id,&#32;<emphasis role="stringliteral">&quot;Interpolated&#32;frame&#32;has&#32;ID&quot;</emphasis>);
00209 &#32;&#32;&#32;&#32;&#32;&#32;Marshal.FreeHGlobal(trackingBuffer);
00210 
00211 &#32;&#32;&#32;&#32;}
00212 
00213 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00214"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a231dd2df6f6166828c0ee88b63ee54ef">00214</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a231dd2df6f6166828c0ee88b63ee54ef">TestGetDeviceList</link>()&#32;{
00215 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00216 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00217 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00218 
00219 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00220 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00221 
00222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00223 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00224 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00230 &#32;&#32;&#32;&#32;&#32;&#32;}
00231 
00232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Get&#32;device&#32;count</emphasis>
00233 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;deviceCount&#32;=&#32;0;
00234 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1ab705081937bf1a4cf7f69f3298991c5a">GetDeviceCount</link>(connHandle,&#32;out&#32;deviceCount);
00235 &#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;DC:&#32;&quot;</emphasis>&#32;+&#32;deviceCount);
00236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.AreEqual(eLeapRS.eLeapRS_Success,&#32;result,&#32;&quot;Device&#32;count&#32;call&#32;successful&quot;);</emphasis>
00237 &#32;&#32;&#32;&#32;&#32;&#32;Assert.Greater(deviceCount,&#32;0,&#32;deviceCount&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;devices&#32;exist&quot;</emphasis>);
00238 
00239 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;validDeviceHandles&#32;=&#32;deviceCount;
00240 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>[]&#32;deviceList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>[deviceCount];
00241 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4e3fe78202056e73c092818ecce8ee6f">GetDeviceList</link>(connHandle,&#32;deviceList,&#32;out&#32;validDeviceHandles);
00242 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(deviceCount,&#32;validDeviceHandles,&#32;validDeviceHandles&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;existing&#32;devices&#32;are&#32;valid&quot;</emphasis>);
00243 &#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;VDHC:&#32;&quot;</emphasis>&#32;+&#32;validDeviceHandles);
00244 
00245 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Device&#32;list&#32;call&#32;successful&quot;</emphasis>);
00246 &#32;&#32;&#32;&#32;}
00247 
00248 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00249"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a7ba7f407a11ff24657e35d5f026fc0f5">00249</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a7ba7f407a11ff24657e35d5f026fc0f5">TestOpenDevice</link>()&#32;{
00250 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00251 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00252 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00253 
00254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00255 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00256 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00257 
00258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00259 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00260 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00266 &#32;&#32;&#32;&#32;&#32;&#32;}
00267 
00268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Get&#32;device&#32;count</emphasis>
00269 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;deviceCount&#32;=&#32;0;
00270 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1ab705081937bf1a4cf7f69f3298991c5a">GetDeviceCount</link>(connHandle,&#32;out&#32;deviceCount);
00271 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success&#32;==&#32;result&#32;||&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_InsufficientBuffer&#32;==&#32;result,&#32;<emphasis role="stringliteral">&quot;Device&#32;count&#32;call&#32;successful&#32;&quot;</emphasis>);
00272 &#32;&#32;&#32;&#32;&#32;&#32;Assert.Greater(deviceCount,&#32;0,&#32;<emphasis role="stringliteral">&quot;Devices&#32;exist&quot;</emphasis>);
00273 
00274 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;validDeviceHandles&#32;=&#32;deviceCount;
00275 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>[]&#32;deviceList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>[deviceCount];
00276 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4e3fe78202056e73c092818ecce8ee6f">GetDeviceList</link>(connHandle,&#32;deviceList,&#32;out&#32;validDeviceHandles);
00277 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(deviceCount,&#32;validDeviceHandles,&#32;<emphasis role="stringliteral">&quot;Existing&#32;devices&#32;are&#32;valid&quot;</emphasis>);
00278 
00279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>&#32;deviceRef&#32;<emphasis role="keywordflow">in</emphasis>&#32;deviceList)&#32;{
00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;device;
00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(deviceRef);
00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1abde768c9d9266c586861d3e123ee2f8f">OpenDevice</link>(deviceRef,&#32;out&#32;device);
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Call&#32;successful&quot;</emphasis>);
00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreNotEqual(IntPtr.Zero,&#32;device,&#32;<emphasis role="stringliteral">&quot;Device&#32;handle&#32;not&#32;zero&quot;</emphasis>);
00285 &#32;&#32;&#32;&#32;&#32;&#32;}
00286 &#32;&#32;&#32;&#32;}
00287 
00288 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00289"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a0520368ee5402a8d1bfebd0724a81b38">00289</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a0520368ee5402a8d1bfebd0724a81b38">TestGetDeviceInfo</link>()&#32;{
00290 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00291 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00292 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00293 
00294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00295 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00296 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00297 
00298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00299 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00300 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00306 &#32;&#32;&#32;&#32;&#32;&#32;}
00307 
00308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Get&#32;device&#32;count</emphasis>
00309 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;deviceCount&#32;=&#32;0;
00310 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1ab705081937bf1a4cf7f69f3298991c5a">GetDeviceCount</link>(connHandle,&#32;out&#32;deviceCount);
00311 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success&#32;==&#32;result&#32;||&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_InsufficientBuffer&#32;==&#32;result,&#32;<emphasis role="stringliteral">&quot;Device&#32;count&#32;call&#32;successful&#32;&quot;</emphasis>);
00312 &#32;&#32;&#32;&#32;&#32;&#32;Assert.Greater(deviceCount,&#32;0,&#32;<emphasis role="stringliteral">&quot;Devices&#32;exist&quot;</emphasis>);
00313 
00314 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;validDeviceHandles&#32;=&#32;deviceCount;
00315 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>[]&#32;deviceList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>[deviceCount];
00316 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4e3fe78202056e73c092818ecce8ee6f">GetDeviceList</link>(connHandle,&#32;deviceList,&#32;out&#32;validDeviceHandles);
00317 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(deviceCount,&#32;validDeviceHandles,&#32;<emphasis role="stringliteral">&quot;Existing&#32;devices&#32;are&#32;valid&quot;</emphasis>);
00318 
00319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>&#32;deviceRef&#32;<emphasis role="keywordflow">in</emphasis>&#32;deviceList)&#32;{
00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;device;
00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(deviceRef);
00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1abde768c9d9266c586861d3e123ee2f8f">OpenDevice</link>(deviceRef,&#32;out&#32;device);
00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Call&#32;successful&quot;</emphasis>);
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o">LEAP_DEVICE_INFO</link>&#32;deviceInfo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o">LEAP_DEVICE_INFO</link>();
00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;defaultLength&#32;=&#32;1;
00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deviceInfo.<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o_1a60db596918d7743e92b731bffab6ed83">serial</link>&#32;=&#32;Marshal.AllocCoTaskMem(defaultLength);
00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deviceInfo.<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o_1a6a8670a1df9cdc6ff7f488db60b89d42">size</link>&#32;=&#32;(uint)Marshal.SizeOf(deviceInfo);
00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;DeviceInfo&#32;size:&#32;&quot;</emphasis>&#32;+&#32;deviceInfo.<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o_1a6a8670a1df9cdc6ff7f488db60b89d42">size</link>);
00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deviceInfo.<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o_1ae86ff790599c8a97d23abfc932ec6f66">serial_length</link>&#32;=&#32;(uint)defaultLength;
00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(deviceInfo,&#32;<emphasis role="stringliteral">&quot;Before:&#32;&quot;</emphasis>);
00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2dc6de06ea26d56d00ab08f738eff9ef">GetDeviceInfo</link>(device,&#32;ref&#32;deviceInfo);
00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_InsufficientBuffer,&#32;result,&#32;<emphasis role="stringliteral">&quot;not&#32;enough&#32;buffer&quot;</emphasis>);
00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(deviceInfo.serial_length&#32;!=&#32;(uint)defaultLength)&#32;{
00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deviceInfo.serial&#32;=&#32;Marshal.AllocCoTaskMem((<emphasis role="keywordtype">int</emphasis>)deviceInfo.serial_length);
00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deviceInfo.size&#32;=&#32;(uint)Marshal.SizeOf(deviceInfo);
00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2dc6de06ea26d56d00ab08f738eff9ef">GetDeviceInfo</link>(device,&#32;ref&#32;deviceInfo);
00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;2nd&#32;Call&#32;successful&quot;</emphasis>);
00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(deviceInfo,&#32;<emphasis role="stringliteral">&quot;After:&#32;&quot;</emphasis>);
00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;serialnumber&#32;=&#32;Marshal.PtrToStringAnsi(deviceInfo.serial);
00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(serialnumber);
00342 &#32;&#32;&#32;&#32;&#32;&#32;}
00343 &#32;&#32;&#32;&#32;}
00344 
00345 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00346"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1af42fcf33b5e08ca63cf812c8ecd6107e">00346</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1af42fcf33b5e08ca63cf812c8ecd6107e">TestGetOneDeviceInfo</link>()&#32;{
00347 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00348 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00349 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00350 
00351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00352 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00353 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00354 
00355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00356 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00357 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00363 &#32;&#32;&#32;&#32;&#32;&#32;}
00364 
00365 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___e_v_e_n_t">LEAP_DEVICE_EVENT</link>&#32;device_evt;
00366 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_DEVICE_EVENT&gt;.PtrToStruct(msg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;device_evt);
00367 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;device;
00368 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1abde768c9d9266c586861d3e123ee2f8f">OpenDevice</link>(device_evt.device,&#32;out&#32;device);
00369 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Call&#32;successful&quot;</emphasis>);
00370 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o">LEAP_DEVICE_INFO</link>&#32;deviceInfo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o">LEAP_DEVICE_INFO</link>();
00371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;defaultLength&#32;=&#32;1;
00372 &#32;&#32;&#32;&#32;&#32;&#32;deviceInfo.<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o_1a60db596918d7743e92b731bffab6ed83">serial</link>&#32;=&#32;Marshal.AllocCoTaskMem(defaultLength);
00373 &#32;&#32;&#32;&#32;&#32;&#32;deviceInfo.<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o_1a6a8670a1df9cdc6ff7f488db60b89d42">size</link>&#32;=&#32;(uint)Marshal.SizeOf(deviceInfo);
00374 &#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;DeviceInfo&#32;size:&#32;&quot;</emphasis>&#32;+&#32;deviceInfo.<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o_1a6a8670a1df9cdc6ff7f488db60b89d42">size</link>);
00375 &#32;&#32;&#32;&#32;&#32;&#32;deviceInfo.<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___i_n_f_o_1ae86ff790599c8a97d23abfc932ec6f66">serial_length</link>&#32;=&#32;(uint)defaultLength;
00376 &#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(deviceInfo,&#32;<emphasis role="stringliteral">&quot;Before:&#32;&quot;</emphasis>);
00377 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2dc6de06ea26d56d00ab08f738eff9ef">GetDeviceInfo</link>(device,&#32;ref&#32;deviceInfo);
00378 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_InsufficientBuffer,&#32;result,&#32;<emphasis role="stringliteral">&quot;not&#32;enough&#32;buffer&quot;</emphasis>);
00379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(deviceInfo.serial_length&#32;!=&#32;(uint)defaultLength)&#32;{
00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marshal.FreeCoTaskMem(deviceInfo.serial);
00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deviceInfo.serial&#32;=&#32;Marshal.AllocCoTaskMem((<emphasis role="keywordtype">int</emphasis>)deviceInfo.serial_length);
00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deviceInfo.size&#32;=&#32;(uint)Marshal.SizeOf(deviceInfo);
00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2dc6de06ea26d56d00ab08f738eff9ef">GetDeviceInfo</link>(device,&#32;ref&#32;deviceInfo);
00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;2nd&#32;Call&#32;successful&quot;</emphasis>);
00385 &#32;&#32;&#32;&#32;&#32;&#32;}
00386 &#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(deviceInfo,&#32;<emphasis role="stringliteral">&quot;After:&#32;&quot;</emphasis>);
00387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;serialnumber&#32;=&#32;Marshal.PtrToStringAnsi(deviceInfo.serial);
00388 &#32;&#32;&#32;&#32;&#32;&#32;Marshal.FreeCoTaskMem(deviceInfo.serial);
00389 &#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(serialnumber);
00390 &#32;&#32;&#32;&#32;}
00391 
00392 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00393"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a12b95b37a88a37e7b5c12df660ec8fcd">00393</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a12b95b37a88a37e7b5c12df660ec8fcd">TestSetPolicyFlags</link>()&#32;{
00394 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00395 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00396 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00397 
00398 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00399 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00400 
00401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00402 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00403 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00409 &#32;&#32;&#32;&#32;&#32;&#32;}
00410 
00411 &#32;&#32;&#32;&#32;&#32;&#32;UInt64&#32;setFlags&#32;=&#32;0;
00412 &#32;&#32;&#32;&#32;&#32;&#32;UInt64&#32;clearFlags&#32;=&#32;0;
00413 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1aeba99ff7b5740de9709a1535ca6d8ae4">SetPolicyFlags</link>(connHandle,&#32;setFlags,&#32;clearFlags);
00414 &#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(result);
00415 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;SetDevicePolicyFlags&#32;Call&quot;</emphasis>);
00416 &#32;&#32;&#32;&#32;}
00417 
00418 &#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;&#32;static&#32;extern&#32;eLeapRS&#32;&#32;LeapSetDeviceFlags&#32;(LEAP_DEVICE&#32;hDevice,&#32;UInt64&#32;set,&#32;UInt64&#32;clear,&#32;out&#32;UInt64*&#32;prior);</emphasis>
00419 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00420"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a8811c998921b7ed219bf18267e614482">00420</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a8811c998921b7ed219bf18267e614482">TestSetDeviceFlags</link>()&#32;{
00421 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>&#32;config&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>();
00422 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00423 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(ref&#32;config,&#32;out&#32;connHandle);
00424 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00425 
00426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00427 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00428 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00429 
00430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00431 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00432 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00438 &#32;&#32;&#32;&#32;&#32;&#32;}
00439 
00440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Get&#32;device&#32;count</emphasis>
00441 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;deviceCount&#32;=&#32;0;
00442 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1ab705081937bf1a4cf7f69f3298991c5a">GetDeviceCount</link>(connHandle,&#32;out&#32;deviceCount);
00443 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_InsufficientBuffer,&#32;result,&#32;<emphasis role="stringliteral">&quot;GetDeviceCount&#32;Call&#32;&quot;</emphasis>);
00444 &#32;&#32;&#32;&#32;&#32;&#32;Assert.Greater(deviceCount,&#32;0,&#32;<emphasis role="stringliteral">&quot;Devices&#32;exist&quot;</emphasis>);
00445 
00446 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;validDeviceHandles&#32;=&#32;deviceCount;
00447 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>[]&#32;deviceList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>[deviceCount];
00448 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4e3fe78202056e73c092818ecce8ee6f">GetDeviceList</link>(connHandle,&#32;deviceList,&#32;out&#32;validDeviceHandles);
00449 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(deviceCount,&#32;validDeviceHandles,&#32;<emphasis role="stringliteral">&quot;Existing&#32;devices&#32;are&#32;valid&quot;</emphasis>);
00450 
00451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>&#32;deviceRef&#32;<emphasis role="keywordflow">in</emphasis>&#32;deviceList)&#32;{
00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;device;
00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1abde768c9d9266c586861d3e123ee2f8f">OpenDevice</link>(deviceRef,&#32;out&#32;device);
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;OpenDevice&#32;Call&#32;successful&quot;</emphasis>);
00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UInt64&#32;setFlags&#32;=&#32;0;
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UInt64&#32;clearFlags&#32;=&#32;0;
00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UInt64&#32;priorFlags&#32;=&#32;0;
00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a903a82df9979ed709e4d6a05f6a2c1fc">SetDeviceFlags</link>(device,&#32;setFlags,&#32;clearFlags,&#32;out&#32;priorFlags);
00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;SetDeviceFlags&#32;Call&#32;successful&quot;</emphasis>);
00460 &#32;&#32;&#32;&#32;&#32;&#32;}
00461 &#32;&#32;&#32;&#32;}
00462 
00463 &#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;static&#32;extern&#32;void&#32;LeapCloseDevice&#32;(LEAP_DEVICE&#32;pDevice);</emphasis>
00464 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00465"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1abd6e8c308243d73ea8a0155ff7a149c8">00465</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1abd6e8c308243d73ea8a0155ff7a149c8">TestCloseDevice</link>()&#32;{
00466 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00467 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00468 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00469 
00470 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00471 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00472 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00473 
00474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00475 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00476 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00482 &#32;&#32;&#32;&#32;&#32;&#32;}
00483 
00484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Get&#32;device&#32;count</emphasis>
00485 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;deviceCount&#32;=&#32;0;
00486 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1ab705081937bf1a4cf7f69f3298991c5a">GetDeviceCount</link>(connHandle,&#32;out&#32;deviceCount);
00487 &#32;&#32;&#32;&#32;&#32;&#32;Assert.Greater(deviceCount,&#32;0,&#32;<emphasis role="stringliteral">&quot;Devices&#32;exist:&#32;&quot;</emphasis>&#32;+&#32;deviceCount);
00488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(eLeapRS.eLeapRS_Success,&#32;result,&#32;&quot;GetDeviceCount&#32;Call&#32;successful&quot;);</emphasis>
00489 
00490 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;validDeviceHandles&#32;=&#32;deviceCount;
00491 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>[]&#32;deviceList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>[deviceCount];
00492 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4e3fe78202056e73c092818ecce8ee6f">GetDeviceList</link>(connHandle,&#32;deviceList,&#32;out&#32;validDeviceHandles);
00493 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(deviceCount,&#32;validDeviceHandles,&#32;<emphasis role="stringliteral">&quot;Existing&#32;devices&#32;are&#32;valid&quot;</emphasis>);
00494 
00495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_struct_leap_internal_1_1_l_e_a_p___d_e_v_i_c_e___r_e_f">LEAP_DEVICE_REF</link>&#32;deviceRef&#32;<emphasis role="keywordflow">in</emphasis>&#32;deviceList)&#32;{
00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;device;
00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.True&#32;(false,&#32;&quot;This&#32;test&#32;is&#32;blocked&#32;by&#32;a&#32;bug&#32;--&#32;device&#32;handle&#32;always&#32;0&quot;);</emphasis>
00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1abde768c9d9266c586861d3e123ee2f8f">OpenDevice</link>(deviceRef,&#32;out&#32;device);
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;OpenDevice&#32;Call&#32;successful&quot;</emphasis>);
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a15c3ea074e98611c0bebb18d4c9fbea1">CloseDevice</link>(device);&#32;<emphasis role="comment">//TODO&#32;How&#32;to&#32;verify?</emphasis>
00501 &#32;&#32;&#32;&#32;&#32;&#32;}
00502 &#32;&#32;&#32;&#32;}
00503 
00504 &#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;static&#32;extern&#32;void&#32;LeapDestroyConnection&#32;(LEAP_CONNECTION&#32;connection);</emphasis>
00505 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00506"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a34eb0854ca584dca96bc4e06c3eb7b36">00506</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a34eb0854ca584dca96bc4e06c3eb7b36">TestDestroyConnection</link>()&#32;{
00507 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>&#32;config&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___c_o_n_f_i_g">LEAP_CONNECTION_CONFIG</link>();
00508 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00509 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(ref&#32;config,&#32;out&#32;connHandle);
00510 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result);
00511 &#32;&#32;&#32;&#32;&#32;&#32;Assert.False(connHandle&#32;==&#32;IntPtr.Zero,&#32;<emphasis role="stringliteral">&quot;configured&#32;connection&#32;failed.&quot;</emphasis>);
00512 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1aa8924a99915ab03a814c211b9a9536c3">DestroyConnection</link>(connHandle);&#32;<emphasis role="comment">//TODO&#32;How&#32;to&#32;verify?</emphasis>
00513 &#32;&#32;&#32;&#32;}
00514 
00515 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00516"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1aa01479ceba9659a80f925a8fe6b8353a">00516</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1aa01479ceba9659a80f925a8fe6b8353a">TestBoolConfigReadWrite</link>()&#32;{
00517 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00518 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00519 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00520 
00521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00522 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00523 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00524 
00525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00526 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00527 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00528 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00533 &#32;&#32;&#32;&#32;&#32;&#32;}
00534 
00535 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;requestId&#32;=&#32;1;
00536 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.SaveConfigValue(connHandle,&#32;<emphasis role="stringliteral">&quot;image_processing_auto_flip&quot;</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;out&#32;requestId);
00537 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;save&#32;requested&quot;</emphasis>);
00538 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00539 
00540 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;100;
00541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;attempts&#32;=&#32;1000;
00542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange)
00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00546 &#32;&#32;&#32;&#32;&#32;&#32;}
00547 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange,&#32;configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ab87d60121e7d5cc24b3ac9a072b20e8d">type</link>);
00548 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___c_h_a_n_g_e___e_v_e_n_t">LEAP_CONFIG_CHANGE_EVENT</link>&#32;response;
00549 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_CHANGE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;response);
00550 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;ReturnedRequestID&#32;=&#32;response.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___c_h_a_n_g_e___e_v_e_n_t_1aa40d14841ec918c7594c27b7d2943790">requestId</link>;
00551 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestId,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00552 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_unity_engine">UnityEngine</link>.Debug.Log(<emphasis role="stringliteral">&quot;Response&#32;status:&#32;&quot;</emphasis>&#32;+&#32;response.status);
00553 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(response.status&#32;==&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="stringliteral">&quot;Save&#32;successful&quot;</emphasis>);
00554 
00555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//read&#32;the&#32;value&#32;back</emphasis>
00556 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;requestID&#32;=&#32;1;
00557 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a9dd1b57cd651b609b45e8e476802f86b">RequestConfigValue</link>(connHandle,&#32;<emphasis role="stringliteral">&quot;image_processing_auto_flip&quot;</emphasis>,&#32;out&#32;requestID);
00558 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;value&#32;requested&quot;</emphasis>);
00559 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00560 
00561 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;100;
00562 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;1000;
00563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Logger.Log&#32;(&quot;Msg&#32;type:&#32;&quot;&#32;+&#32;configMsg.type);</emphasis>
00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse)
00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00568 &#32;&#32;&#32;&#32;&#32;&#32;}
00569 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse,&#32;configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ab87d60121e7d5cc24b3ac9a072b20e8d">type</link>);
00570 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t">LEAP_CONFIG_RESPONSE_EVENT</link>&#32;set_response;
00571 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_RESPONSE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;set_response);
00572 &#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(configMsg);
00573 &#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(set_response);
00574 &#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(set_response.value);
00575 &#32;&#32;&#32;&#32;&#32;&#32;ReturnedRequestID&#32;=&#32;set_response.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t_1a199913488104b8861fb23bed170302e9">requestId</link>;
00576 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00577 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a9c15e305893cd05c1ec6d65cea48737c">eLeapValueType</link>.eLeapValueType_Boolean,&#32;set_response.value.type,&#32;<emphasis role="stringliteral">&quot;Got&#32;a&#32;Boolean&#32;value&quot;</emphasis>);
00578 &#32;&#32;&#32;&#32;&#32;&#32;Assert.False(set_response.value.boolValue&#32;==&#32;0,&#32;<emphasis role="stringliteral">&quot;Auto-flip&#32;is&#32;disabled&quot;</emphasis>);
00579 
00580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Set&#32;to&#32;opposite&#32;boolean</emphasis>
00581 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.SaveConfigValue(connHandle,&#32;<emphasis role="stringliteral">&quot;image_processing_auto_flip&quot;</emphasis>,&#32;(set_response.value.boolValue&#32;==&#32;0&#32;?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>),&#32;out&#32;requestId);
00582 
00583 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//read&#32;the&#32;value&#32;back&#32;again</emphasis>
00584 &#32;&#32;&#32;&#32;&#32;&#32;requestID&#32;=&#32;2;
00585 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a9dd1b57cd651b609b45e8e476802f86b">RequestConfigValue</link>(connHandle,&#32;<emphasis role="stringliteral">&quot;image_processing_auto_flip&quot;</emphasis>,&#32;out&#32;requestID);
00586 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;value&#32;requested&quot;</emphasis>);
00587 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00588 
00589 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;100;
00590 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;1000;
00591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Logger.Log&#32;(&quot;Msg&#32;type:&#32;&quot;&#32;+&#32;configMsg.type);</emphasis>
00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse)
00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00596 &#32;&#32;&#32;&#32;&#32;&#32;}
00597 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_RESPONSE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;set_response);
00598 &#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(configMsg);
00599 &#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(set_response);
00600 &#32;&#32;&#32;&#32;&#32;&#32;Logger.LogStruct(set_response.value);
00601 &#32;&#32;&#32;&#32;&#32;&#32;ReturnedRequestID&#32;=&#32;set_response.requestId;
00602 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00603 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a9c15e305893cd05c1ec6d65cea48737c">eLeapValueType</link>.eLeapValueType_Boolean,&#32;set_response.value.type,&#32;<emphasis role="stringliteral">&quot;Got&#32;a&#32;Boolean&#32;value&quot;</emphasis>);
00604 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(set_response.value.boolValue&#32;==&#32;1,&#32;<emphasis role="stringliteral">&quot;Auto-flip&#32;is&#32;enabled&#32;again&quot;</emphasis>);
00605 &#32;&#32;&#32;&#32;}
00606 
00607 &#32;&#32;&#32;&#32;[Ignore(<emphasis role="stringliteral">&quot;There&#32;are&#32;no&#32;public-facing&#32;float&#32;config&#32;settings.&#32;(The&#32;LeapC&#32;gestures&#32;API&#32;is&#32;&quot;</emphasis>
00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;deprecated.&quot;</emphasis>)]
00609 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00610"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1accf1499cc14bcc1ced1847bc9117efb8">00610</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1accf1499cc14bcc1ced1847bc9117efb8">TestReadFloatConfig</link>()&#32;{
00611 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00612 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00613 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00614 
00615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00616 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00617 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00618 
00619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00620 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00621 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00622 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00627 &#32;&#32;&#32;&#32;&#32;&#32;}
00628 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;requestID&#32;=&#32;1;
00629 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a9dd1b57cd651b609b45e8e476802f86b">RequestConfigValue</link>(connHandle,&#32;<emphasis role="stringliteral">&quot;Gesture.Swipe.MinVelocity&quot;</emphasis>,&#32;out&#32;requestID);
00630 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;value&#32;requested&quot;</emphasis>);
00631 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00632 
00633 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;10;
00634 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;attempts&#32;=&#32;100;
00635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Msg&#32;type:&#32;&quot;</emphasis>&#32;+&#32;configMsg.type);
00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse)
00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00640 &#32;&#32;&#32;&#32;&#32;&#32;}
00641 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t">LEAP_CONFIG_RESPONSE_EVENT</link>&#32;response;
00642 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_RESPONSE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;response);
00643 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;ReturnedRequestID&#32;=&#32;response.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t_1a199913488104b8861fb23bed170302e9">requestId</link>;
00644 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00645 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a9c15e305893cd05c1ec6d65cea48737c">eLeapValueType</link>.eLeapValueType_Float,&#32;response.value.type,&#32;<emphasis role="stringliteral">&quot;Got&#32;a&#32;Float&#32;value&quot;</emphasis>);
00646 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(response.value.floatValue&#32;!=&#32;<emphasis role="keywordtype">float</emphasis>.NaN,&#32;<emphasis role="stringliteral">&quot;Is&#32;a&#32;float&quot;</emphasis>);
00647 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1000,&#32;response.value.floatValue,&#32;<emphasis role="stringliteral">&quot;Swipe&#32;min&#32;velocity&#32;is&#32;3mm,&#32;the&#32;default&#32;value&quot;</emphasis>);
00648 &#32;&#32;&#32;&#32;}
00649 
00650 &#32;&#32;&#32;&#32;[Ignore(<emphasis role="stringliteral">&quot;LeapC&#32;does&#32;not&#32;document&#32;any&#32;float&#32;config&#32;settings&#32;to&#32;test&#32;this&#32;with.&quot;</emphasis>)]
00651 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00652"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a2fa791a01bb6eab31427eed6d885e5d7">00652</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a2fa791a01bb6eab31427eed6d885e5d7">TestFloatConfigReadWrite</link>()&#32;{
00653 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00654 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00655 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00656 
00657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00658 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00659 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00660 
00661 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00662 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00663 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00669 &#32;&#32;&#32;&#32;&#32;&#32;}
00670 
00671 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Set&#32;to&#32;something</emphasis>
00672 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;requestID&#32;=&#32;5;
00673 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.SaveConfigValue(connHandle,&#32;<emphasis role="stringliteral">&quot;tool_radius_filtering&quot;</emphasis>,&#32;3.0f,&#32;out&#32;requestID);
00674 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;save&#32;requested&quot;</emphasis>);
00675 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00676 
00677 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;100;
00678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;attempts&#32;=&#32;1000;
00679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange)
00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00683 &#32;&#32;&#32;&#32;&#32;&#32;}
00684 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange,&#32;configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ab87d60121e7d5cc24b3ac9a072b20e8d">type</link>);
00685 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___c_h_a_n_g_e___e_v_e_n_t">LEAP_CONFIG_CHANGE_EVENT</link>&#32;change;
00686 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_CHANGE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;change);
00687 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;change.requestId,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00688 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(change.status&#32;==&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="stringliteral">&quot;Save&#32;successful&quot;</emphasis>);
00689 
00690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Read&#32;first</emphasis>
00691 &#32;&#32;&#32;&#32;&#32;&#32;requestID&#32;=&#32;1;
00692 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a9dd1b57cd651b609b45e8e476802f86b">RequestConfigValue</link>(connHandle,&#32;<emphasis role="stringliteral">&quot;tool_radius_filtering&quot;</emphasis>,&#32;out&#32;requestID);
00693 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;value&#32;requested&quot;</emphasis>);
00694 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00695 
00696 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;10;
00697 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;100;
00698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Msg&#32;type:&#32;&quot;</emphasis>&#32;+&#32;configMsg.type);
00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse)
00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00703 &#32;&#32;&#32;&#32;&#32;&#32;}
00704 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t">LEAP_CONFIG_RESPONSE_EVENT</link>&#32;response;
00705 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_RESPONSE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;response);
00706 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;ReturnedRequestID&#32;=&#32;response.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t_1a199913488104b8861fb23bed170302e9">requestId</link>;
00707 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00708 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a9c15e305893cd05c1ec6d65cea48737c">eLeapValueType</link>.eLeapValueType_Float,&#32;response.value.type,&#32;<emphasis role="stringliteral">&quot;Got&#32;a&#32;Float&#32;value&quot;</emphasis>);
00709 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(response.value.floatValue&#32;!=&#32;<emphasis role="keywordtype">float</emphasis>.NaN,&#32;<emphasis role="stringliteral">&quot;Is&#32;a&#32;float&quot;</emphasis>);
00710 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(3,&#32;response.value.floatValue,&#32;<emphasis role="stringliteral">&quot;Keytap&#32;min&#32;distance&#32;is&#32;3mm,&#32;the&#32;default&#32;value&quot;</emphasis>);
00711 
00712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Set&#32;to&#32;something&#32;else</emphasis>
00713 &#32;&#32;&#32;&#32;&#32;&#32;requestID&#32;=&#32;5;
00714 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.SaveConfigValue(connHandle,&#32;<emphasis role="stringliteral">&quot;tool_radius_filtering&quot;</emphasis>,&#32;6.0f,&#32;out&#32;requestID);
00715 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;save&#32;requested&quot;</emphasis>);
00716 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00717 
00718 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;100;
00719 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;1000;
00720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange)
00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00724 &#32;&#32;&#32;&#32;&#32;&#32;}
00725 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange,&#32;configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ab87d60121e7d5cc24b3ac9a072b20e8d">type</link>);
00726 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_CHANGE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;change);
00727 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;change.requestId,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00728 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(change.status&#32;==&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="stringliteral">&quot;Save&#32;successful&quot;</emphasis>);
00729 
00730 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Read&#32;again&#32;to&#32;verify&#32;write</emphasis>
00731 &#32;&#32;&#32;&#32;&#32;&#32;requestID&#32;=&#32;2;
00732 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a9dd1b57cd651b609b45e8e476802f86b">RequestConfigValue</link>(connHandle,&#32;<emphasis role="stringliteral">&quot;tool_radius_filtering&quot;</emphasis>,&#32;out&#32;requestID);
00733 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;value&#32;requested&quot;</emphasis>);
00734 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00735 
00736 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;10;
00737 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;100;
00738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Msg&#32;type:&#32;&quot;</emphasis>&#32;+&#32;configMsg.type);
00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse)
00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00743 &#32;&#32;&#32;&#32;&#32;&#32;}
00744 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_RESPONSE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;response);
00745 &#32;&#32;&#32;&#32;&#32;&#32;ReturnedRequestID&#32;=&#32;response.requestId;
00746 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Third&#32;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00747 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a9c15e305893cd05c1ec6d65cea48737c">eLeapValueType</link>.eLeapValueType_Float,&#32;response.value.type,&#32;<emphasis role="stringliteral">&quot;Got&#32;a&#32;Float&#32;value&#32;2nd&#32;time,&#32;too&quot;</emphasis>);
00748 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(response.value.floatValue&#32;!=&#32;<emphasis role="keywordtype">float</emphasis>.NaN,&#32;<emphasis role="stringliteral">&quot;Is&#32;a&#32;float&quot;</emphasis>);
00749 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(6.0f,&#32;response.value.floatValue,&#32;<emphasis role="stringliteral">&quot;Keytap&#32;min&#32;distance&#32;is&#32;6mm,&#32;the&#32;changed&#32;value&quot;</emphasis>);
00750 
00751 &#32;&#32;&#32;&#32;}
00752 
00753 &#32;&#32;&#32;&#32;[Ignore(<emphasis role="stringliteral">&quot;LeapC&#32;appears&#32;to&#32;have&#32;a&#32;problem&#32;returning&#32;status:&#32;true&#32;for&#32;a&#32;successful&#32;&quot;</emphasis>
00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;config&#32;change&#32;event&#32;for&#32;images_mode.&quot;</emphasis>)]
00755 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00756"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1abf861db3c801ee6093aeadd83fcaf034">00756</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1abf861db3c801ee6093aeadd83fcaf034">TestInt32ConfigReadWrite</link>()&#32;{
00757 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00758 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00759 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00760 
00761 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00762 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00763 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00764 
00765 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00766 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00767 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00768 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00769 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00773 &#32;&#32;&#32;&#32;&#32;&#32;}
00774 
00775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Set&#32;to&#32;something</emphasis>
00776 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;requestID&#32;=&#32;5;
00777 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.SaveConfigValue(connHandle,&#32;<emphasis role="stringliteral">&quot;images_mode&quot;</emphasis>,&#32;1,&#32;out&#32;requestID);
00778 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;save&#32;requested&quot;</emphasis>);
00779 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00780 
00781 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;100;
00782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;attempts&#32;=&#32;1000;
00783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange)
00786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00787 &#32;&#32;&#32;&#32;&#32;&#32;}
00788 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange,&#32;configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ab87d60121e7d5cc24b3ac9a072b20e8d">type</link>);
00789 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___c_h_a_n_g_e___e_v_e_n_t">LEAP_CONFIG_CHANGE_EVENT</link>&#32;change;
00790 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_CHANGE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;change);
00791 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;change.requestId,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00792 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(change.status&#32;==&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="stringliteral">&quot;Save&#32;successful&quot;</emphasis>);
00793 
00794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Read&#32;first</emphasis>
00795 &#32;&#32;&#32;&#32;&#32;&#32;requestID&#32;=&#32;1;
00796 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a9dd1b57cd651b609b45e8e476802f86b">RequestConfigValue</link>(connHandle,&#32;<emphasis role="stringliteral">&quot;images_mode&quot;</emphasis>,&#32;out&#32;requestID);
00797 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;value&#32;requested&quot;</emphasis>);
00798 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00799 
00800 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;10;
00801 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;100;
00802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Msg&#32;type:&#32;&quot;</emphasis>&#32;+&#32;configMsg.type);
00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse)
00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00807 &#32;&#32;&#32;&#32;&#32;&#32;}
00808 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t">LEAP_CONFIG_RESPONSE_EVENT</link>&#32;response;
00809 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_RESPONSE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;response);
00810 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;ReturnedRequestID&#32;=&#32;response.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t_1a199913488104b8861fb23bed170302e9">requestId</link>;
00811 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00812 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a9c15e305893cd05c1ec6d65cea48737c">eLeapValueType</link>.eLeapValueType_Int32,&#32;response.value.type,&#32;<emphasis role="stringliteral">&quot;Got&#32;an&#32;Int32&#32;value&quot;</emphasis>);
00813 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;response.value.intValue,&#32;<emphasis role="stringliteral">&quot;images_mode&#32;should&#32;be&#32;1&quot;</emphasis>);
00814 
00815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;to&#32;something&#32;else.</emphasis>
00816 &#32;&#32;&#32;&#32;&#32;&#32;requestID&#32;=&#32;5;
00817 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.SaveConfigValue(connHandle,&#32;<emphasis role="stringliteral">&quot;images_mode&quot;</emphasis>,&#32;2,&#32;out&#32;requestID);
00818 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;save&#32;requested&quot;</emphasis>);
00819 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00820 
00821 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;100;
00822 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;1000;
00823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange)
00826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00827 &#32;&#32;&#32;&#32;&#32;&#32;}
00828 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange,&#32;configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ab87d60121e7d5cc24b3ac9a072b20e8d">type</link>);
00829 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_CHANGE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;change);
00830 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;change.requestId,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00831 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(change.status&#32;==&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="stringliteral">&quot;Save&#32;successful&quot;</emphasis>);
00832 
00833 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Read&#32;again&#32;to&#32;verify&#32;write</emphasis>
00834 &#32;&#32;&#32;&#32;&#32;&#32;requestID&#32;=&#32;2;
00835 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a9dd1b57cd651b609b45e8e476802f86b">RequestConfigValue</link>(connHandle,&#32;<emphasis role="stringliteral">&quot;images_mode&quot;</emphasis>,&#32;out&#32;requestID);
00836 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;value&#32;requested&quot;</emphasis>);
00837 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00838 
00839 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;10;
00840 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;100;
00841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Msg&#32;type:&#32;&quot;</emphasis>&#32;+&#32;configMsg.type);
00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse)
00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00846 &#32;&#32;&#32;&#32;&#32;&#32;}
00847 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_RESPONSE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;response);
00848 &#32;&#32;&#32;&#32;&#32;&#32;ReturnedRequestID&#32;=&#32;response.requestId;
00849 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00850 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a9c15e305893cd05c1ec6d65cea48737c">eLeapValueType</link>.eLeapValueType_Int32,&#32;response.value.type,&#32;<emphasis role="stringliteral">&quot;Got&#32;a&#32;Int32&#32;value&#32;the&#32;second&#32;time,&#32;too&quot;</emphasis>);
00851 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(2,&#32;response.value.intValue,&#32;<emphasis role="stringliteral">&quot;images_mode&#32;is&#32;2,&#32;the&#32;changed&#32;value&quot;</emphasis>);
00852 &#32;&#32;&#32;&#32;}
00853 
00854 &#32;&#32;&#32;&#32;[Ignore(<emphasis role="stringliteral">&quot;No&#32;known&#32;public&#32;settings&#32;return&#32;a&#32;string.&quot;</emphasis>)]
00855 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00856"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a71310966231add3d3e472008c4ec263e">00856</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1a71310966231add3d3e472008c4ec263e">TestGetStringConfigValue</link>()&#32;{
00857 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00858 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00859 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00860 
00861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00862 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00863 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00864 
00865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00866 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00867 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00868 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00873 &#32;&#32;&#32;&#32;&#32;&#32;}
00874 
00875 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;requestID&#32;=&#32;1;
00876 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a9dd1b57cd651b609b45e8e476802f86b">RequestConfigValue</link>(connHandle,&#32;<emphasis role="stringliteral">&quot;tracking_version&quot;</emphasis>,&#32;out&#32;requestID);
00877 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;value&#32;requested&quot;</emphasis>);
00878 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00879 
00880 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;10;
00881 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;attempts&#32;=&#32;100;
00882 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Msg&#32;type:&#32;&quot;</emphasis>&#32;+&#32;configMsg.type);
00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse)
00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00887 &#32;&#32;&#32;&#32;&#32;&#32;}
00888 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t___w_i_t_h___r_e_f___t_y_p_e">LEAP_CONFIG_RESPONSE_EVENT_WITH_REF_TYPE</link>&#32;response;
00889 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_RESPONSE_EVENT_WITH_REF_TYPE&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;response);
00890 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;ReturnedRequestID&#32;=&#32;response.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t___w_i_t_h___r_e_f___t_y_p_e_1a88e9acc56f20cfc18f551b96a1601209">requestId</link>;
00891 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00892 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a9c15e305893cd05c1ec6d65cea48737c">eLeapValueType</link>.eLeapValueType_String,&#32;response.value.type,&#32;<emphasis role="stringliteral">&quot;Got&#32;a&#32;String&#32;value&quot;</emphasis>);
00893 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<emphasis role="stringliteral">&quot;v2&quot;</emphasis>,&#32;response.value.stringValue,&#32;<emphasis role="stringliteral">&quot;Got&#32;expected&#32;string&quot;</emphasis>);
00894 
00895 &#32;&#32;&#32;&#32;}
00896 
00897 &#32;&#32;&#32;&#32;[Ignore(<emphasis role="stringliteral">&quot;No&#32;public&#32;config&#32;settings&#32;exist&#32;for&#32;strings.&quot;</emphasis>)]
00898 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__leap_c_tests_8cs_source_1l00899"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1aec37424aa98f2862249fa54797b69b70">00899</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_leap_c_tests_1aec37424aa98f2862249fa54797b69b70">TestStringConfigReadWrite</link>()&#32;{
00900 &#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;connHandle&#32;=&#32;IntPtr.Zero;
00901 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a2a35287387889d78359ce9d0965fa706">CreateConnection</link>(out&#32;connHandle);
00902 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Connection&#32;created&quot;</emphasis>);
00903 
00904 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Open&#32;connection</emphasis>
00905 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a18543f45477c803f6858299f5b942f5a">OpenConnection</link>(connHandle);
00906 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Opened&#32;connection.&quot;</emphasis>);
00907 
00908 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Wait&#32;for&#32;device&#32;event</emphasis>
00909 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;msg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00910 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;timeout&#32;=&#32;100;
00911 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tries&#32;=&#32;100;
00912 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;tries;&#32;t++)&#32;{
00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;msg);
00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_Device)
00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00916 &#32;&#32;&#32;&#32;&#32;&#32;}
00917 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreNotEqual(tries,&#32;100,&#32;<emphasis role="stringliteral">&quot;PollConnection&#32;timed&#32;out&#32;trying&#32;to&#32;get&#32;&quot;</emphasis>
00918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;a&#32;ConfigChange&#32;event.&quot;</emphasis>);
00919 
00920 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Set&#32;to&#32;something</emphasis>
00921 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;requestID&#32;=&#32;5;
00922 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.SaveConfigValue(connHandle,&#32;<emphasis role="stringliteral">&quot;tilt_axis&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>,&#32;out&#32;requestID);
00923 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;save&#32;requested&quot;</emphasis>);
00924 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00925 
00926 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;100;
00927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;attempts&#32;=&#32;1000;
00928 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange)
00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00932 &#32;&#32;&#32;&#32;&#32;&#32;}
00933 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreNotEqual(attempts,&#32;1000,&#32;<emphasis role="stringliteral">&quot;PollConnection&#32;timed&#32;out&#32;trying&#32;to&#32;get&#32;&quot;</emphasis>
00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;a&#32;ConfigChange&#32;event.&quot;</emphasis>);
00935 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange,&#32;configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ab87d60121e7d5cc24b3ac9a072b20e8d">type</link>);
00936 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___c_h_a_n_g_e___e_v_e_n_t">LEAP_CONFIG_CHANGE_EVENT</link>&#32;change;
00937 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_CHANGE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;change);
00938 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;change.requestId,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00939 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(change.status&#32;==&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="stringliteral">&quot;Save&#32;successful&quot;</emphasis>);
00940 
00941 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Read&#32;first</emphasis>
00942 &#32;&#32;&#32;&#32;&#32;&#32;requestID&#32;=&#32;1;
00943 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a9dd1b57cd651b609b45e8e476802f86b">RequestConfigValue</link>(connHandle,&#32;<emphasis role="stringliteral">&quot;tilt_axis&quot;</emphasis>,&#32;out&#32;requestID);
00944 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;value&#32;requested&quot;</emphasis>);
00945 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00946 
00947 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;10;
00948 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;100;
00949 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Msg&#32;type:&#32;&quot;</emphasis>&#32;+&#32;configMsg.type);
00952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse)
00953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00954 &#32;&#32;&#32;&#32;&#32;&#32;}
00955 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreNotEqual(attempts,&#32;100,&#32;<emphasis role="stringliteral">&quot;PollConnection&#32;timed&#32;out&#32;trying&#32;to&#32;get&#32;&quot;</emphasis>
00956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;a&#32;ConfigResponse&#32;event.&quot;</emphasis>);
00957 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t___w_i_t_h___r_e_f___t_y_p_e">LEAP_CONFIG_RESPONSE_EVENT_WITH_REF_TYPE</link>&#32;response;
00958 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_RESPONSE_EVENT_WITH_REF_TYPE&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;response);
00959 &#32;&#32;&#32;&#32;&#32;&#32;UInt32&#32;ReturnedRequestID&#32;=&#32;response.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_f_i_g___r_e_s_p_o_n_s_e___e_v_e_n_t___w_i_t_h___r_e_f___t_y_p_e_1a88e9acc56f20cfc18f551b96a1601209">requestId</link>;
00960 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00961 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a9c15e305893cd05c1ec6d65cea48737c">eLeapValueType</link>.eLeapValueType_String,&#32;response.value.type,&#32;<emphasis role="stringliteral">&quot;Got&#32;an&#32;String&#32;value&quot;</emphasis>);
00962 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<emphasis role="stringliteral">&quot;y&quot;</emphasis>,&#32;response.value.stringValue,&#32;<emphasis role="stringliteral">&quot;Got&#32;y.&quot;</emphasis>);
00963 
00964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Set&#32;to&#32;something&#32;else</emphasis>
00965 &#32;&#32;&#32;&#32;&#32;&#32;requestID&#32;=&#32;5;
00966 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.SaveConfigValue(connHandle,&#32;<emphasis role="stringliteral">&quot;tilt_axis&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>,&#32;out&#32;requestID);
00967 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;save&#32;requested&quot;</emphasis>);
00968 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00969 
00970 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;100;
00971 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;1000;
00972 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange)
00975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00976 &#32;&#32;&#32;&#32;&#32;&#32;}
00977 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreNotEqual(attempts,&#32;1000,&#32;<emphasis role="stringliteral">&quot;PollConnection&#32;timed&#32;out&#32;trying&#32;to&#32;get&#32;&quot;</emphasis>
00978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;a&#32;ConfigChange&#32;event.&quot;</emphasis>);
00979 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigChange,&#32;configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ab87d60121e7d5cc24b3ac9a072b20e8d">type</link>);
00980 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_CHANGE_EVENT&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;change);
00981 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;change.requestId,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
00982 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(change.status&#32;==&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="stringliteral">&quot;Save&#32;successful&quot;</emphasis>);
00983 
00984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Read&#32;again&#32;to&#32;verify&#32;write</emphasis>
00985 &#32;&#32;&#32;&#32;&#32;&#32;requestID&#32;=&#32;2;
00986 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a9dd1b57cd651b609b45e8e476802f86b">RequestConfigValue</link>(connHandle,&#32;<emphasis role="stringliteral">&quot;tilt_axis&quot;</emphasis>,&#32;out&#32;requestID);
00987 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1ae50b07d24c508b84273392b6dcbea1d9">eLeapRS</link>.eLeapRS_Success,&#32;result,&#32;<emphasis role="stringliteral">&quot;Config&#32;value&#32;requested&quot;</emphasis>);
00988 &#32;&#32;&#32;&#32;&#32;&#32;configMsg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e">LEAP_CONNECTION_MESSAGE</link>();
00989 
00990 &#32;&#32;&#32;&#32;&#32;&#32;timeout&#32;=&#32;10;
00991 &#32;&#32;&#32;&#32;&#32;&#32;attempts&#32;=&#32;100;
00992 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;attempts;&#32;t++)&#32;{
00993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_class_leap_internal_1_1_leap_c">LeapC</link>.<link linkend="_class_leap_internal_1_1_leap_c_1a4250f3129c57450a2f2b9e718dd6bb11">PollConnection</link>(connHandle,&#32;timeout,&#32;ref&#32;configMsg);
00994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Logger.Log(<emphasis role="stringliteral">&quot;Msg&#32;type:&#32;&quot;</emphasis>&#32;+&#32;configMsg.type);
00995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(configMsg.type&#32;==&#32;<link linkend="_namespace_leap_internal_1aa0ca3ef781ee69ce6a3cee33d6067d1a">eLeapEventType</link>.eLeapEventType_ConfigResponse)
00996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00997 &#32;&#32;&#32;&#32;&#32;&#32;}
00998 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreNotEqual(attempts,&#32;100,&#32;<emphasis role="stringliteral">&quot;PollConnection&#32;timed&#32;out&#32;trying&#32;to&#32;get&#32;&quot;</emphasis>
00999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;a&#32;ConfigResponse&#32;event.&quot;</emphasis>);
01000 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;LEAP_CONFIG_RESPONSE_EVENT_WITH_REF_TYPE&gt;.PtrToStruct(configMsg.<link linkend="_struct_leap_internal_1_1_l_e_a_p___c_o_n_n_e_c_t_i_o_n___m_e_s_s_a_g_e_1ac00200c558d42511cd50600bba71bdc3">eventStructPtr</link>,&#32;out&#32;response);
01001 &#32;&#32;&#32;&#32;&#32;&#32;ReturnedRequestID&#32;=&#32;response.requestId;
01002 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(requestID,&#32;ReturnedRequestID,&#32;<emphasis role="stringliteral">&quot;Request&#32;ID&#32;is&#32;the&#32;same&quot;</emphasis>);
01003 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<link linkend="_namespace_leap_internal_1a9c15e305893cd05c1ec6d65cea48737c">eLeapValueType</link>.eLeapValueType_String,&#32;response.value.type,&#32;<emphasis role="stringliteral">&quot;Got&#32;a&#32;String&#32;value&#32;the&#32;second&#32;time,&#32;too&quot;</emphasis>);
01004 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<emphasis role="stringliteral">&quot;x&quot;</emphasis>,&#32;response.value.stringValue,&#32;<emphasis role="stringliteral">&quot;Got&#32;x&quot;</emphasis>);
01005 &#32;&#32;&#32;&#32;}
01006 
01007 &#32;&#32;}
01008 }
</programlisting></section>
