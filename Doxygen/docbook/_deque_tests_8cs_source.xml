<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__deque_tests_8cs_source">
<title>DequeTests.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Editor/Tests/DequeTests.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_tests">Leap.Unity.Tests</link>&#32;{
00014 
<anchor xml:id="__deque_tests_8cs_source_1l00015"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests">00015</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests">DequeTests</link>&#32;{
00016 
00017 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque">Deque&lt;int&gt;</link>&#32;_buffer;
00018 
00019 &#32;&#32;&#32;&#32;[SetUp]
<anchor xml:id="__deque_tests_8cs_source_1l00020"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1aff27587bf5cb6601d2dfb785bc5028cf">00020</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1aff27587bf5cb6601d2dfb785bc5028cf">Setup</link>()&#32;{
00021 &#32;&#32;&#32;&#32;&#32;&#32;_buffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque">Deque&lt;int&gt;</link>();
00022 &#32;&#32;&#32;&#32;}
00023 
00024 &#32;&#32;&#32;&#32;[TearDown]
<anchor xml:id="__deque_tests_8cs_source_1l00025"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1a341ea1a3c0670c343a608938a45892c0">00025</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1a341ea1a3c0670c343a608938a45892c0">Teardown</link>()&#32;{
00026 &#32;&#32;&#32;&#32;&#32;&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1aaefa3c4fb909affdb5a8eee5affbe603">Clear</link>();
00027 &#32;&#32;&#32;&#32;&#32;&#32;_buffer&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00028 &#32;&#32;&#32;&#32;}
00029 
00030 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__deque_tests_8cs_source_1l00031"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1af64bfa74314ea49820b42c74a3fdfe75">00031</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1af64bfa74314ea49820b42c74a3fdfe75">InvalidCapacity</link>([Values(<emphasis role="keywordtype">int</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;-1,&#32;0)]&#32;<emphasis role="keywordtype">int</emphasis>&#32;minCapacity)&#32;{
00032 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;{
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque">Deque&lt;int&gt;</link>(minCapacity);
00034 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;Throws.ArgumentException);
00035 &#32;&#32;&#32;&#32;}
00036 
00037 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__deque_tests_8cs_source_1l00038"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1ab69c3cd77db87189d116ef56a1287fab">00038</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1ab69c3cd77db87189d116ef56a1287fab">Clear</link>()&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a4ee63cee34a27e19b6631b07b918103f">PushBack</link>(1);
00040 &#32;&#32;&#32;&#32;&#32;&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1ad138b4500ea49069cf1ca653124b42ec">PushFront</link>(1);
00041 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a045ee07203842538f5ba78cccd758e04">Count</link>,&#32;Is.EqualTo(2));
00042 &#32;&#32;&#32;&#32;&#32;&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1aaefa3c4fb909affdb5a8eee5affbe603">Clear</link>();
00043 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a045ee07203842538f5ba78cccd758e04">Count</link>,&#32;Is.EqualTo(0));
00044 &#32;&#32;&#32;&#32;}
00045 
00046 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__deque_tests_8cs_source_1l00047"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1acfe07726cdcd5e9c4385ef35d91ef7a3">00047</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1acfe07726cdcd5e9c4385ef35d91ef7a3">AccessEmptyBack</link>()&#32;{
00048 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;{
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;value&#32;=&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a11098175933b4b40fe5304b6f3cf3f67">Front</link>;
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(value);&#32;&#32;<emphasis role="comment">//Just&#32;to&#32;remove&#32;unused&#32;value&#32;warning</emphasis>
00051 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;Throws.InstanceOf&lt;InvalidOperationException&gt;());
00052 
00053 &#32;&#32;&#32;&#32;}
00054 
00055 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__deque_tests_8cs_source_1l00056"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1ab3732969f94bcf4e018b1c18334fe621">00056</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1ab3732969f94bcf4e018b1c18334fe621">AccessEmptyFront</link>()&#32;{
00057 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;{
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;value&#32;=&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a11098175933b4b40fe5304b6f3cf3f67">Front</link>;
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(value);&#32;&#32;<emphasis role="comment">//Just&#32;to&#32;remove&#32;unused&#32;value&#32;warning</emphasis>
00060 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;Throws.InstanceOf&lt;InvalidOperationException&gt;());
00061 &#32;&#32;&#32;&#32;}
00062 
00063 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__deque_tests_8cs_source_1l00064"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1ade72d19588768201ee7f1d4a73946884">00064</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1ade72d19588768201ee7f1d4a73946884">InvalidIndex</link>([Values(<emphasis role="keywordtype">int</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;-1,&#32;5,&#32;<emphasis role="keywordtype">int</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>)]&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
00065 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;5;&#32;i++)&#32;{
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a4ee63cee34a27e19b6631b07b918103f">PushBack</link>(0);
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00069 
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;value&#32;=&#32;_buffer[index];
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.NotNull(value);&#32;<emphasis role="comment">//Just&#32;to&#32;remove&#32;unused&#32;value&#32;warning</emphasis>
00072 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;Throws.InstanceOf&lt;IndexOutOfRangeException&gt;());
00073 &#32;&#32;&#32;&#32;}
00074 
00075 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__deque_tests_8cs_source_1l00076"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1a19bf9d5ed291919f2acf03ecb03aadf0">00076</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1a19bf9d5ed291919f2acf03ecb03aadf0">PushFront</link>()&#32;{
00077 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;100;&#32;i++)&#32;{
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a4ee63cee34a27e19b6631b07b918103f">PushBack</link>(i);
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1ad0f1295eca862d9e37d3a49fccf4ea72">Back</link>,&#32;Is.EqualTo(i));
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a045ee07203842538f5ba78cccd758e04">Count</link>,&#32;Is.EqualTo(i&#32;+&#32;1));
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;=&#32;i;&#32;j++)&#32;{
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(j,&#32;Is.EqualTo(_buffer[j]));
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00084 &#32;&#32;&#32;&#32;&#32;&#32;}
00085 
00086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;100;&#32;i++)&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;value;
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a11098175933b4b40fe5304b6f3cf3f67">Front</link>,&#32;Is.EqualTo(i));
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a3a469f3d2a550481a770ab90824c2ab5">PopFront</link>(out&#32;value);
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(i,&#32;Is.EqualTo(value));
00091 &#32;&#32;&#32;&#32;&#32;&#32;}
00092 &#32;&#32;&#32;&#32;}
00093 
00094 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__deque_tests_8cs_source_1l00095"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1a173e70273f9b28eb7694d2195885d198">00095</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_deque_tests_1a173e70273f9b28eb7694d2195885d198">PushBack</link>()&#32;{
00096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;100;&#32;i++)&#32;{
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1ad138b4500ea49069cf1ca653124b42ec">PushFront</link>(i);
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a11098175933b4b40fe5304b6f3cf3f67">Front</link>,&#32;Is.EqualTo(i));
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a045ee07203842538f5ba78cccd758e04">Count</link>,&#32;Is.EqualTo(i&#32;+&#32;1));
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;=&#32;i;&#32;j++)&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(i&#32;-&#32;j,&#32;Is.EqualTo(_buffer[j]));
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00103 &#32;&#32;&#32;&#32;&#32;&#32;}
00104 
00105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;100;&#32;i++)&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;value;
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1ad0f1295eca862d9e37d3a49fccf4ea72">Back</link>,&#32;Is.EqualTo(i));
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_buffer.<link linkend="_class_leap_1_1_unity_1_1_deque_1a88278111a5e6310bdcef74f0f7306260">PopBack</link>(out&#32;value);
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(i,&#32;Is.EqualTo(value));
00110 &#32;&#32;&#32;&#32;&#32;&#32;}
00111 &#32;&#32;&#32;&#32;}
00112 &#32;&#32;}
00113 
00114 }
</programlisting></section>
