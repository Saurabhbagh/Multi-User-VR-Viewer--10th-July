<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__hash_8cs_source">
<title>Hash.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Hash.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00012 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00013 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00014 
00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00016 
00017 &#32;&#32;[Serializable]
<anchor xml:id="__hash_8cs_source_1l00018"/><link linkend="_struct_leap_1_1_unity_1_1_hash">00018</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_leap_1_1_unity_1_1_hash">Hash</link>&#32;:&#32;IEnumerable,&#32;IEquatable&lt;Hash&gt;&#32;{
00019 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_hash;
00020 
<anchor xml:id="__hash_8cs_source_1l00021"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1afaa1c83436400dc4f74450e95d278689">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1afaa1c83436400dc4f74450e95d278689">Hash</link>(<emphasis role="keywordtype">int</emphasis>&#32;hash)&#32;{
00022 &#32;&#32;&#32;&#32;&#32;&#32;_hash&#32;=&#32;hash;
00023 &#32;&#32;&#32;&#32;}
00024 
<anchor xml:id="__hash_8cs_source_1l00025"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1a0bfae32cff62bebe9947c6aabea3d04f">00025</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1a0bfae32cff62bebe9947c6aabea3d04f">Add&lt;T&gt;</link>(T&#32;t)&#32;{
00026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;code&#32;=&#32;t&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;?&#32;0x2692d0f9&#32;:&#32;t.GetHashCode();
00027 &#32;&#32;&#32;&#32;&#32;&#32;_hash&#32;^=&#32;code&#32;+&#32;0x3e3779b9&#32;+&#32;(_hash&#32;&lt;&lt;&#32;6)&#32;+&#32;(_hash&#32;&gt;&gt;&#32;2);
00028 &#32;&#32;&#32;&#32;}
00029 
<anchor xml:id="__hash_8cs_source_1l00030"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1a3858e9f1fe271cbde1c5d223409187bb">00030</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1a3858e9f1fe271cbde1c5d223409187bb">AddRange&lt;T&gt;</link>(List&lt;T&gt;&#32;sequence)&#32;{
00031 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;sequence.Count;&#32;i++)&#32;{
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add(sequence[i]);
00033 &#32;&#32;&#32;&#32;&#32;&#32;}
00034 &#32;&#32;&#32;&#32;}
00035 
00044 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;Behaviour&gt;&#32;_behaviourCache&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Behaviour&gt;();
<anchor xml:id="__hash_8cs_source_1l00045"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1a02e356e1c90fafe7904d699cb197552d">00045</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash">Hash</link>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1a02e356e1c90fafe7904d699cb197552d">GetHierarchyHash</link>(Transform&#32;root)&#32;{
00046 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;hash&#32;=&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash">Hash</link>.<link linkend="_struct_leap_1_1_unity_1_1_hash_1a041d41aae91527057d3731f07c41a29b">GetDataHash</link>(root);
00047 
00048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;childCount&#32;=&#32;root.childCount;
00049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;childCount;&#32;i++)&#32;{
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash.Add(<link linkend="_struct_leap_1_1_unity_1_1_hash_1a02e356e1c90fafe7904d699cb197552d">GetHierarchyHash</link>(root.GetChild(i)));
00051 &#32;&#32;&#32;&#32;&#32;&#32;}
00052 
00053 &#32;&#32;&#32;&#32;&#32;&#32;root.GetComponents(_behaviourCache);
00054 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;_behaviourCache.Count;&#32;i++)&#32;{
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;behaviour&#32;=&#32;_behaviourCache[i];
00056 
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//A&#32;behaviour&#32;returned&#32;from&#32;GetComponents&#32;can&#32;be&#32;null&#32;if&#32;it&#32;is&#32;an&#32;invalid</emphasis>
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//script&#32;object&#32;or&#32;due&#32;to&#32;a&#32;compile&#32;error&#32;&gt;.&gt;</emphasis>
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(behaviour&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash.Add(behaviour.enabled);
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00062 &#32;&#32;&#32;&#32;&#32;&#32;}
00063 
00064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash;
00065 &#32;&#32;&#32;&#32;}
00066 
<anchor xml:id="__hash_8cs_source_1l00074"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1a041d41aae91527057d3731f07c41a29b">00074</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash">Hash</link>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1a041d41aae91527057d3731f07c41a29b">GetDataHash</link>(Transform&#32;transform)&#32;{
00075 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;hash&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1afaa1c83436400dc4f74450e95d278689">Hash</link>()&#32;{
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transform,
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transform.gameObject.activeSelf,
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transform.localPosition,
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transform.localRotation,
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transform.localScale
00081 &#32;&#32;&#32;&#32;&#32;&#32;};
00082 
00083 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(transform&#32;is&#32;RectTransform)&#32;{
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RectTransform&#32;rectTransform&#32;=&#32;transform&#32;as&#32;RectTransform;
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash.Add(rectTransform.rect);
00086 &#32;&#32;&#32;&#32;&#32;&#32;}
00087 
00088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash;
00089 &#32;&#32;&#32;&#32;}
00090 
<anchor xml:id="__hash_8cs_source_1l00091"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1acbae9a5f2f31c33d8f0bc770a3bc60a1">00091</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;IEnumerator&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1acbae9a5f2f31c33d8f0bc770a3bc60a1">GetEnumerator</link>()&#32;{
00092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
00093 &#32;&#32;&#32;&#32;}
00094 
<anchor xml:id="__hash_8cs_source_1l00095"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1aefa4c7403803016313cd689201ee35e1">00095</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1aefa4c7403803016313cd689201ee35e1">GetHashCode</link>()&#32;{
00096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_hash;
00097 &#32;&#32;&#32;&#32;}
00098 
<anchor xml:id="__hash_8cs_source_1l00099"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1ab0efc09e8430daada3c57955b9d8a6da">00099</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1ab0efc09e8430daada3c57955b9d8a6da">Equals</link>(<emphasis role="keywordtype">object</emphasis>&#32;obj)&#32;{
00100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(obj&#32;is&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash">Hash</link>))&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00102 &#32;&#32;&#32;&#32;&#32;&#32;}
00103 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash">Hash</link>&#32;hash&#32;=&#32;(<link linkend="_struct_leap_1_1_unity_1_1_hash_1afaa1c83436400dc4f74450e95d278689">Hash</link>)obj;
00104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash._hash&#32;==&#32;_hash;
00105 &#32;&#32;&#32;&#32;}
00106 
<anchor xml:id="__hash_8cs_source_1l00107"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1a1e99f703a48e5e4087b2b284abd2a887">00107</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1a1e99f703a48e5e4087b2b284abd2a887">Equals</link>(<link linkend="_struct_leap_1_1_unity_1_1_hash">Hash</link>&#32;other)&#32;{
00108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_hash&#32;==&#32;other._hash;
00109 &#32;&#32;&#32;&#32;}
00110 
<anchor xml:id="__hash_8cs_source_1l00111"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1a038bce1286e011a879e995b1e094d138">00111</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;implicit&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1afaa1c83436400dc4f74450e95d278689">Hash</link>(<emphasis role="keywordtype">int</emphasis>&#32;hash)&#32;{
00112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash_1afaa1c83436400dc4f74450e95d278689">Hash</link>(hash);
00113 &#32;&#32;&#32;&#32;}
00114 
<anchor xml:id="__hash_8cs_source_1l00115"/><link linkend="_struct_leap_1_1_unity_1_1_hash_1a85fa52543cbef6d3ee6e5cbd58e05da9">00115</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;implicit&#32;<emphasis role="keyword">operator</emphasis>&#32;int(<link linkend="_struct_leap_1_1_unity_1_1_hash">Hash</link>&#32;hash)&#32;{
00116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash._hash;
00117 &#32;&#32;&#32;&#32;}
00118 &#32;&#32;}
00119 }
</programlisting></section>
