<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__query_tests_8cs_source">
<title>QueryTests.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Editor/QueryTests.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System.Linq;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00012 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00013 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00014 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00015 
00016 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_tests">Leap.Unity.Tests</link>&#32;{
00017 &#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Query;
00018 &#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System;
00019 
<anchor xml:id="__query_tests_8cs_source_1l00020"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests">00020</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests">QueryTests</link>&#32;{
00021 
00022 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00023"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1c19b93c5718249f0a53a473c6180fb9">00023</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1c19b93c5718249f0a53a473c6180fb9">AllTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00024 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().All(i&#32;=&gt;&#32;i&#32;&lt;&#32;5),&#32;Is.EqualTo(
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().All(i&#32;=&gt;&#32;i&#32;&lt;&#32;5)));
00026 
00027 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().All(i&#32;=&gt;&#32;i&#32;!=&#32;8),&#32;Is.EqualTo(
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().All(i&#32;=&gt;&#32;i&#32;!=&#32;8)));
00029 &#32;&#32;&#32;&#32;}
00030 
00031 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00032"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1abc698ee6c3cf73420bcc9d98f4ea35d5">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1abc698ee6c3cf73420bcc9d98f4ea35d5">AnyTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00033 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Any(i&#32;=&gt;&#32;i&#32;==&#32;4),&#32;Is.EqualTo(
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Query().Any(i&#32;=&gt;&#32;i&#32;==&#32;4)));
00035 &#32;&#32;&#32;&#32;}
00036 
00037 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00038"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6447332ac378b460ab1384afdb151f26">00038</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6447332ac378b460ab1384afdb151f26">Array2DTest</link>()&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;WIDTH&#32;=&#32;23;
00040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;HEIGHT&#32;=&#32;17;
00041 
00042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>[,]&#32;array&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[WIDTH,&#32;HEIGHT];
00043 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;counter&#32;=&#32;0;
00044 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;WIDTH;&#32;i++)&#32;{
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;HEIGHT;&#32;j++)&#32;{
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array[i,&#32;j]&#32;=&#32;counter++;
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00048 &#32;&#32;&#32;&#32;&#32;&#32;}
00049 
00050 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(array.Query().Count(),&#32;Is.EqualTo(WIDTH&#32;*&#32;HEIGHT));
00051 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;value&#32;<emphasis role="keywordflow">in</emphasis>&#32;Enumerable.Range(0,&#32;WIDTH&#32;*&#32;HEIGHT))&#32;{
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(array.Query().Contains(value));
00053 &#32;&#32;&#32;&#32;&#32;&#32;}
00054 &#32;&#32;&#32;&#32;}
00055 
00056 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00057"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a839082e5ff9fd18472ac343612a53e33">00057</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a839082e5ff9fd18472ac343612a53e33">AverageTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg0)&#32;{
00058 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Count&#32;==&#32;0)&#32;{
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Ignore(<emphasis role="stringliteral">&quot;Ignore&#32;empty&#32;queries&#32;for&#32;average&#32;test.&quot;</emphasis>);
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00061 &#32;&#32;&#32;&#32;&#32;&#32;}
00062 
00063 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Select(t&#32;=&gt;&#32;(<emphasis role="keywordtype">double</emphasis>)t).Average(),&#32;Is.EqualTo(
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Average()).Within(0.001).Percent);
00065 &#32;&#32;&#32;&#32;}
00066 
00067 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00068"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ac249029ca844b0885fd8488b2d35c0b0">00068</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ac249029ca844b0885fd8488b2d35c0b0">CastTest</link>()&#32;{
00069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;objs&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;{&#32;<emphasis role="stringliteral">&quot;Hello&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;World&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;These&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Are&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;All&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Strings&quot;</emphasis>&#32;};
00070 
00071 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs.Cast&lt;<emphasis role="keywordtype">string</emphasis>&gt;().SequenceEqual(
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;objs.Query().Cast&lt;<emphasis role="keywordtype">string</emphasis>&gt;().ToList()));
00073 &#32;&#32;&#32;&#32;}
00074 
00075 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00076"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aba795b21c7c5b21ce0e665dd3e0a1e70">00076</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aba795b21c7c5b21ce0e665dd3e0a1e70">ConcatTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg0,&#32;[ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg1)&#32;{
00077 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Concat(arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>()).ToList(),&#32;Is.EquivalentTo(
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Concat(arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>()).ToList()));
00079 
00080 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Concat(arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>()).ToList(),&#32;Is.EquivalentTo(
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Concat(arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>()).ToList()));
00082 &#32;&#32;&#32;&#32;}
00083 
00084 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00085"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4d763e6e0917742da84fce7bd5a9d008">00085</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4d763e6e0917742da84fce7bd5a9d008">ContainsTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Contains(3),&#32;Is.EqualTo(
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Contains(3)));
00088 
00089 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Contains(9),&#32;Is.EqualTo(
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Contains(9)));
00091 &#32;&#32;&#32;&#32;}
00092 
00093 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00094"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ae07891711ed2aba14f29f0769dee281f">00094</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ae07891711ed2aba14f29f0769dee281f">CountTests</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00095 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Count(),&#32;Is.EqualTo(
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Count()));
00097 
00098 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Count(i&#32;=&gt;&#32;i&#32;%&#32;2&#32;==&#32;0),&#32;Is.EqualTo(
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Count(i&#32;=&gt;&#32;i&#32;%&#32;2&#32;==&#32;0)));
00100 &#32;&#32;&#32;&#32;}
00101 
00102 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00103"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a7f6724647f757d5d2d62f3e4b2d3ccc8">00103</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a7f6724647f757d5d2d62f3e4b2d3ccc8">DistinctTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Distinct().OrderBy(t&#32;=&gt;&#32;t).ToList(),&#32;Is.EquivalentTo(
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Distinct().OrderBy(t&#32;=&gt;&#32;t).ToList()));
00106 &#32;&#32;&#32;&#32;}
00107 
00108 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00109"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad54707c01c325e5af9184a40da2f19d0">00109</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad54707c01c325e5af9184a40da2f19d0">ElementAtTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg,&#32;[Values(0,&#32;3,&#32;100)]&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
00110 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;list&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00111 
00112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&gt;=&#32;list.Count)&#32;{
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().ElementAt(index),&#32;Throws.InstanceOf&lt;IndexOutOfRangeException&gt;());
00114 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().ElementAt(index),&#32;Is.EqualTo(
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().ElementAt(index)));
00117 &#32;&#32;&#32;&#32;&#32;&#32;}
00118 &#32;&#32;&#32;&#32;}
00119 
00120 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00121"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a71d64345aedbf5a5556dcc154af06218">00121</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a71d64345aedbf5a5556dcc154af06218">EnumeratorTest</link>()&#32;{
00122 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator">TestEnumerator</link>().<link linkend="_struct_leap_1_1_unity_1_1_query_1_1_query">Query</link>().IndexOf(3),&#32;3);
00123 &#32;&#32;&#32;&#32;}
00124 
00125 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00126"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a0573ebf5ac67a01f925590baa34c96d6">00126</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a0573ebf5ac67a01f925590baa34c96d6">FirstTests</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00127 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;list&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00128 
00129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list.Count&#32;==&#32;0)&#32;{
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().First(),&#32;Throws.InvalidOperationException);
00131 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().First(),&#32;Is.EqualTo(
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().First()));
00134 &#32;&#32;&#32;&#32;&#32;&#32;}
00135 
00136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list.Where(i&#32;=&gt;&#32;i&#32;%&#32;2&#32;==&#32;0).Count()&#32;==&#32;0)&#32;{
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Where(i&#32;=&gt;&#32;i&#32;%&#32;2&#32;==&#32;0).First(),&#32;Throws.InvalidOperationException);
00138 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().First(i&#32;=&gt;&#32;i&#32;%&#32;2&#32;==&#32;0),&#32;Is.EqualTo(
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().First(i&#32;=&gt;&#32;i&#32;%&#32;2&#32;==&#32;0)));
00141 &#32;&#32;&#32;&#32;&#32;&#32;}
00142 &#32;&#32;&#32;&#32;}
00143 
00144 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00145"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a2140f1aa85ae7639e9919aaa2fdc7d4b">00145</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a2140f1aa85ae7639e9919aaa2fdc7d4b">FirstOrDefaultTests</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00146 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().FirstOrDefault(),&#32;Is.EqualTo(
00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().FirstOrDefault()));
00148 
00149 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().FirstOrDefault(i&#32;=&gt;&#32;i&#32;%&#32;2&#32;==&#32;0),&#32;Is.EqualTo(
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().FirstOrDefault(i&#32;=&gt;&#32;i&#32;%&#32;2&#32;==&#32;0)));
00151 
00152 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().FirstOrDefault(i&#32;=&gt;&#32;i&#32;&gt;&#32;10),&#32;Is.EqualTo(
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().FirstOrDefault(i&#32;=&gt;&#32;i&#32;&gt;&#32;10)));
00154 &#32;&#32;&#32;&#32;}
00155 
00156 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00157"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa95430f50d25682e20764f3b131a299d">00157</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa95430f50d25682e20764f3b131a299d">FoldTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00158 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;list&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00159 
00160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list.Count&#32;==&#32;0)&#32;{
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Fold((a,&#32;b)&#32;=&gt;&#32;a&#32;+&#32;b),&#32;Throws.InvalidOperationException);
00162 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Fold((a,&#32;b)&#32;=&gt;&#32;a&#32;+&#32;b),&#32;Is.EqualTo(
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Sum()));
00165 &#32;&#32;&#32;&#32;&#32;&#32;}
00166 &#32;&#32;&#32;&#32;}
00167 
00168 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00169"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6d5935d2f07cd029f690bbbf146553a8">00169</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6d5935d2f07cd029f690bbbf146553a8">ForeachTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg0,&#32;[ValueSource(<emphasis role="stringliteral">&quot;list1&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg1)&#32;{
00170 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;actual&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;();
00171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;item&#32;<emphasis role="keywordflow">in</emphasis>&#32;arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Concat(arg1.ToQuery()))&#32;{
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actual.Add(item);
00173 &#32;&#32;&#32;&#32;&#32;&#32;}
00174 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(actual,&#32;Is.EquivalentTo(
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Concat(arg1.ToList()).ToList()));
00176 &#32;&#32;&#32;&#32;}
00177 
00178 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00179"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a74bff637aa940161e7781b930cc12e54">00179</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a74bff637aa940161e7781b930cc12e54">IndexOfTests</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00180 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().IndexOf(3),&#32;Is.EqualTo(
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().IndexOf(3)));
00182 
00183 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().IndexOf(100),&#32;Is.EqualTo(
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().IndexOf(100)));
00185 &#32;&#32;&#32;&#32;}
00186 
00187 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00188"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa4a662a8acf5c66e247b4f02b3430739">00188</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa4a662a8acf5c66e247b4f02b3430739">LastTests</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00189 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;list&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00190 
00191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list.Count&#32;==&#32;0)&#32;{
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Last(),&#32;Throws.InvalidOperationException);
00193 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Last(),&#32;Is.EqualTo(
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Last()));
00196 &#32;&#32;&#32;&#32;&#32;&#32;}
00197 
00198 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().LastOrDefault(),&#32;Is.EqualTo(
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().LastOrDefault()));
00200 &#32;&#32;&#32;&#32;}
00201 
00202 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00203"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aef878cd4eb6220f4a0596cf796ffcd78">00203</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aef878cd4eb6220f4a0596cf796ffcd78">MaxTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Count&#32;==&#32;0)&#32;{
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Ignore(<emphasis role="stringliteral">&quot;Ignore&#32;empty&#32;queries&#32;for&#32;max&#32;tests.&quot;</emphasis>);
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00207 &#32;&#32;&#32;&#32;&#32;&#32;}
00208 
00209 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Max(),&#32;Is.EqualTo(
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Max()));
00211 &#32;&#32;&#32;&#32;}
00212 
00213 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00214"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a669814dda36f3656ccb56a00c19f632c">00214</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a669814dda36f3656ccb56a00c19f632c">MinTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Count&#32;==&#32;0)&#32;{
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Ignore(<emphasis role="stringliteral">&quot;Ignore&#32;empty&#32;queries&#32;for&#32;min&#32;tests.&quot;</emphasis>);
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00218 &#32;&#32;&#32;&#32;&#32;&#32;}
00219 
00220 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Min(),&#32;Is.EqualTo(
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Min()));
00222 &#32;&#32;&#32;&#32;}
00223 
00224 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00225"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1e678d24f8674a66cbf7d3f94e112d58">00225</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1e678d24f8674a66cbf7d3f94e112d58">MultiFirstTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00226 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;q&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>();
00227 
00228 &#32;&#32;&#32;&#32;&#32;&#32;q.FirstOrDefault();
00229 
00230 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;q.FirstOrDefault(),&#32;Throws.InvalidOperationException);
00231 &#32;&#32;&#32;&#32;}
00232 
00233 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00234"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a918d08deb5b680f74921bcffb6a3fb9d">00234</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a918d08deb5b680f74921bcffb6a3fb9d">MultiForeachTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00235 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;a&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;();
00236 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;b&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;();
00237 
00238 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;q&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>();
00239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;item&#32;<emphasis role="keywordflow">in</emphasis>&#32;q)&#32;{
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a.Add(item);
00241 &#32;&#32;&#32;&#32;&#32;&#32;}
00242 
00243 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;{
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;item&#32;<emphasis role="keywordflow">in</emphasis>&#32;q)&#32;{
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b.Add(item);
00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00247 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;Throws.InvalidOperationException);
00248 &#32;&#32;&#32;&#32;}
00249 
00250 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00251"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ac5467e4132f5be56dc162ffdcba0d085">00251</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ac5467e4132f5be56dc162ffdcba0d085">OfTypeTest</link>()&#32;{
00252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;objs&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;{&#32;0,&#32;0.4f,&#32;<emphasis role="stringliteral">&quot;Hello&quot;</emphasis>,&#32;7u,&#32;0.4,&#32;<emphasis role="stringliteral">&quot;World&quot;</emphasis>,&#32;<emphasis role="keyword">null</emphasis>&#32;};
00253 
00254 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs.OfType&lt;<emphasis role="keywordtype">string</emphasis>&gt;().ToList(),&#32;Is.EquivalentTo(
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;objs.Query().OfType&lt;<emphasis role="keywordtype">string</emphasis>&gt;().ToList()));
00256 
00257 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs.OfType&lt;<emphasis role="keywordtype">string</emphasis>&gt;(),&#32;Is.EquivalentTo(
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;objs.Query().OfType(typeof(<emphasis role="keywordtype">string</emphasis>)).Cast&lt;<emphasis role="keywordtype">string</emphasis>&gt;().ToList()));
00259 &#32;&#32;&#32;&#32;}
00260 
00261 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00262"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a7ea493534f3b6a7dc1d376d5c6cd4d70">00262</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a7ea493534f3b6a7dc1d376d5c6cd4d70">OrderByTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00263 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().OrderBy(i&#32;=&gt;&#32;i).ToList(),&#32;Is.EquivalentTo(
00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().OrderBy(i&#32;=&gt;&#32;i).ToList()));
00265 &#32;&#32;&#32;&#32;}
00266 
00267 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00268"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a2bbb69deffc98452e8b387438485c01f">00268</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a2bbb69deffc98452e8b387438485c01f">OrderByDescendingTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00269 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().OrderByDescending(i&#32;=&gt;&#32;i).ToList(),&#32;Is.EquivalentTo(
00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().OrderByDescending(i&#32;=&gt;&#32;i).ToList()));
00271 &#32;&#32;&#32;&#32;}
00272 
00273 &#32;&#32;&#32;&#32;[Test]
00274 &#32;&#32;&#32;&#32;[Pairwise]
<anchor xml:id="__query_tests_8cs_source_1l00275"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ae009f348590b2db73ccbeb78f7b642cb">00275</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ae009f348590b2db73ccbeb78f7b642cb">RangeFromTo</link>([Values(0,&#32;1,&#32;100,&#32;-1,&#32;-100)]&#32;<emphasis role="keywordtype">int</emphasis>&#32;startValue,
00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[Values(0,&#32;1,&#32;100,&#32;-1,&#32;-100)]&#32;<emphasis role="keywordtype">int</emphasis>&#32;endValue,
00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[Values(1,&#32;2,&#32;10)]&#32;<emphasis role="keywordtype">int</emphasis>&#32;step,
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[Values(<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>)]&#32;<emphasis role="keywordtype">bool</emphasis>&#32;endIsExclusive)&#32;{
00279 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;expected&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;();
00280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;value&#32;=&#32;startValue;
00281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;signStep&#32;=&#32;endValue&#32;&gt;&#32;startValue&#32;?&#32;step&#32;:&#32;-step;
00282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Mathf.Abs(startValue&#32;-&#32;endValue)&#32;+&#32;1;&#32;i++)&#32;{
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected.Add(value);
00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;+=&#32;signStep;
00285 &#32;&#32;&#32;&#32;&#32;&#32;}
00286 
00287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(endIsExclusive)&#32;{
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected.Remove(endValue);
00289 &#32;&#32;&#32;&#32;&#32;&#32;}
00290 
00291 &#32;&#32;&#32;&#32;&#32;&#32;expected&#32;=&#32;expected.Where(i&#32;=&gt;&#32;i&#32;&gt;=&#32;Mathf.Min(startValue,&#32;endValue)).
00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Where(i&#32;=&gt;&#32;i&#32;&lt;=&#32;Mathf.Max(startValue,&#32;endValue)).
00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ToList();
00294 
00295 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(Values.Range(startValue,&#32;endValue,&#32;step,&#32;endIsExclusive).ToList(),&#32;Is.EquivalentTo(expected));
00296 &#32;&#32;&#32;&#32;}
00297 
00298 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00299"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad81f80eef768928fe3ce68cad67ec93f">00299</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad81f80eef768928fe3ce68cad67ec93f">Repeat</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg,&#32;[Values(0,&#32;1,&#32;2,&#32;3,&#32;100)]&#32;<emphasis role="keywordtype">int</emphasis>&#32;repetitions)&#32;{
00300 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;list&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;();
00301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;repetitions;&#32;i++)&#32;{
00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.AddRange(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>());
00303 &#32;&#32;&#32;&#32;&#32;&#32;}
00304 
00305 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Repeat(repetitions).ToList(),&#32;Is.EquivalentTo(
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list));
00307 &#32;&#32;&#32;&#32;}
00308 
00309 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00310"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a86da088c148763716146ec948dcbbd9d">00310</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a86da088c148763716146ec948dcbbd9d">ReverseTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00311 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;expected&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00312 &#32;&#32;&#32;&#32;&#32;&#32;expected.Reverse();
00313 
00314 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Reverse().ToList(),&#32;Is.EquivalentTo(
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected));
00316 &#32;&#32;&#32;&#32;}
00317 
00318 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00319"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad3e9e03a9711e7d6d1e1400b1f69c3b9">00319</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad3e9e03a9711e7d6d1e1400b1f69c3b9">SelectTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00320 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Select(i&#32;=&gt;&#32;i&#32;*&#32;23).ToList(),&#32;Is.EquivalentTo(
00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Select(i&#32;=&gt;&#32;i&#32;*&#32;23).ToList()));
00322 &#32;&#32;&#32;&#32;}
00323 
00324 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00325"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad189d8d7213ac96c7f8bf5eb26b608e0">00325</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad189d8d7213ac96c7f8bf5eb26b608e0">SelectManyTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg0,&#32;[ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg1)&#32;{
00326 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().SelectMany(i&#32;=&gt;&#32;arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Select(j&#32;=&gt;&#32;j&#32;*&#32;i)).ToList(),&#32;Is.EquivalentTo(
00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().SelectMany(i&#32;=&gt;&#32;arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Select(j&#32;=&gt;&#32;j&#32;*&#32;i)).ToList()));
00328 
00329 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().SelectMany(i&#32;=&gt;&#32;arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Select(j&#32;=&gt;&#32;j&#32;*&#32;i).ToList()).ToList(),&#32;Is.EquivalentTo(
00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().SelectMany(i&#32;=&gt;&#32;arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Select(j&#32;=&gt;&#32;j&#32;*&#32;i)).ToList()));
00331 &#32;&#32;&#32;&#32;}
00332 
00333 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00334"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4c0a09f667832d9f452ce5a4e484eee0">00334</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4c0a09f667832d9f452ce5a4e484eee0">SelectManyEmptyTest</link>()&#32;{
00335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;}.Query().SelectMany(i&#32;=&gt;&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;}.Query()).ToList();
00336 &#32;&#32;&#32;&#32;}
00337 
00338 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00339"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a3b596b7da3d74c138b4dcffcab921840">00339</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a3b596b7da3d74c138b4dcffcab921840">SingleTest</link>()&#32;{
00340 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;array&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;5&#32;};
00341 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(array.Single(),&#32;Is.EqualTo(array.Query().Single()));
00342 
00343 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;{
00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;}.Query().Single();
00345 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;Throws.InvalidOperationException);
00346 
00347 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;{
00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;0,&#32;1&#32;}.Query().Single();
00349 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;Throws.InvalidOperationException);
00350 &#32;&#32;&#32;&#32;}
00351 
00352 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00353"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a8c78407cd4d023a664b06cdbc90fb36d">00353</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a8c78407cd4d023a664b06cdbc90fb36d">SkipTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00354 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Skip(3).ToList(),&#32;Is.EquivalentTo(
00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Skip(3).ToList()));
00356 &#32;&#32;&#32;&#32;}
00357 
00358 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00359"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1004cfd5e1d18bb4ff27c370eae01ec8">00359</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1004cfd5e1d18bb4ff27c370eae01ec8">SkipWhileTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00360 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().SkipWhile(i&#32;=&gt;&#32;i&#32;&lt;&#32;4).ToList(),&#32;Is.EquivalentTo(
00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().SkipWhile(i&#32;=&gt;&#32;i&#32;&lt;&#32;4).ToList()));
00362 &#32;&#32;&#32;&#32;}
00363 
00364 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00365"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ab85c5fe055b651124deddaa512648c8d">00365</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ab85c5fe055b651124deddaa512648c8d">SortTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00366 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;expected&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00367 &#32;&#32;&#32;&#32;&#32;&#32;expected.Sort();
00368 
00369 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Sort().ToList(),&#32;Is.EquivalentTo(
00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected));
00371 &#32;&#32;&#32;&#32;}
00372 
00373 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00374"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4aee7357957aabbb0585cafeff7df189">00374</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4aee7357957aabbb0585cafeff7df189">SortDescendingTests</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00375 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;expected&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00376 &#32;&#32;&#32;&#32;&#32;&#32;expected.Sort();
00377 &#32;&#32;&#32;&#32;&#32;&#32;expected.Reverse();
00378 
00379 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().SortDescending().ToList(),&#32;Is.EquivalentTo(
00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected));
00381 &#32;&#32;&#32;&#32;}
00382 
00383 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00384"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad29d20b0c9c0262b198dbc55e9c83237">00384</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad29d20b0c9c0262b198dbc55e9c83237">SumTests</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Count&#32;==&#32;0)&#32;{
00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Ignore(<emphasis role="stringliteral">&quot;Ignore&#32;empty&#32;queries&#32;for&#32;sum&#32;tests.&quot;</emphasis>);
00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00388 &#32;&#32;&#32;&#32;&#32;&#32;}
00389 
00390 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Sum(),&#32;Is.EqualTo(
00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Sum()));
00392 &#32;&#32;&#32;&#32;}
00393 
00394 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00395"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1afb330f57ceaa257a37d3e5fdde110e68">00395</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1afb330f57ceaa257a37d3e5fdde110e68">TakeTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00396 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Take(4).ToList(),&#32;Is.EquivalentTo(
00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Take(4).ToList()));
00398 &#32;&#32;&#32;&#32;}
00399 
00400 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00401"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a8ed6ce829e8eaee9939300d6da3ead4e">00401</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a8ed6ce829e8eaee9939300d6da3ead4e">TakeWhileTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00402 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().TakeWhile(i&#32;=&gt;&#32;i&#32;&lt;&#32;4).ToList(),&#32;Is.EquivalentTo(
00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().TakeWhile(i&#32;=&gt;&#32;i&#32;&lt;&#32;4).ToList()));
00404 &#32;&#32;&#32;&#32;}
00405 
00406 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00407"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6dbf45b48855e817e5ed3c71d522507a">00407</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6dbf45b48855e817e5ed3c71d522507a">WithPreviousTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00408 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;list&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list.Count&#32;==&#32;0)&#32;{
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious().Count(),&#32;Is.EqualTo(0));
00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(includeStart:&#32;<emphasis role="keyword">true</emphasis>).Count(),&#32;Is.EqualTo(0));
00412 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list.Count&#32;==&#32;1)&#32;{
00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious().Count(),&#32;Is.EqualTo(0));
00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(includeStart:&#32;<emphasis role="keyword">true</emphasis>).Count(),&#32;Is.EqualTo(1));
00415 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious().Count(p&#32;=&gt;&#32;p.hasPrev),&#32;Is.EqualTo(list.Count&#32;-&#32;1));
00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(includeStart:&#32;<emphasis role="keyword">true</emphasis>).Count(p&#32;=&gt;&#32;!p.hasPrev),&#32;Is.EqualTo(1));
00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(includeStart:&#32;<emphasis role="keyword">true</emphasis>).Count(p&#32;=&gt;&#32;p.hasPrev),&#32;Is.EqualTo(list.Count&#32;-&#32;1));
00419 &#32;&#32;&#32;&#32;&#32;&#32;}
00420 
00421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;
00422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;pair&#32;<emphasis role="keywordflow">in</emphasis>&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious())&#32;{
00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(pair.prev,&#32;Is.EqualTo(list[index]));
00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index++;
00425 &#32;&#32;&#32;&#32;&#32;&#32;}
00426 &#32;&#32;&#32;&#32;}
00427 
00428 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00429"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a88b251c46c9a85ea40c3eb67d50c70e5">00429</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a88b251c46c9a85ea40c3eb67d50c70e5">WithPreviousOffsetTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00430 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;list&#32;=&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list.Count&#32;==&#32;0)&#32;{
00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(offset:&#32;4).Count(),&#32;Is.EqualTo(0));
00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(offset:&#32;4,&#32;includeStart:&#32;<emphasis role="keyword">true</emphasis>).Count(),&#32;Is.EqualTo(0));
00434 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list.Count&#32;==&#32;1)&#32;{
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(offset:&#32;4).Count(),&#32;Is.EqualTo(0));
00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(offset:&#32;4,&#32;includeStart:&#32;<emphasis role="keyword">true</emphasis>).Count(),&#32;Is.EqualTo(1));
00437 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(offset:&#32;4).Count(),&#32;Is.EqualTo(Mathf.Max(0,&#32;list.Count&#32;-&#32;4)));
00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(offset:&#32;list.Count&#32;+&#32;1).Count(),&#32;Is.EqualTo(0));
00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithPrevious(offset:&#32;<emphasis role="keywordtype">int</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>).Count(),&#32;Is.EqualTo(0));
00441 &#32;&#32;&#32;&#32;&#32;&#32;}
00442 
00443 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(Values.Range(0,&#32;10).WithPrevious(offset:&#32;2).All(i&#32;=&gt;&#32;i.value&#32;-&#32;i.prev&#32;==&#32;2));
00444 &#32;&#32;&#32;&#32;}
00445 
00446 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00447"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa39732c88269e10d894ab1233a252215">00447</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa39732c88269e10d894ab1233a252215">WhereTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00448 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Where(i&#32;=&gt;&#32;i&#32;%&#32;2&#32;==&#32;0).ToList(),&#32;Is.EquivalentTo(
00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>().Where(i&#32;=&gt;&#32;i&#32;%&#32;2&#32;==&#32;0).ToList()));
00450 &#32;&#32;&#32;&#32;}
00451 
00452 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00453"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a786f6275e4a09958d102bdf47bcf5cd7">00453</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a786f6275e4a09958d102bdf47bcf5cd7">WithIndicesTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg)&#32;{
00454 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;
00455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;item&#32;<emphasis role="keywordflow">in</emphasis>&#32;arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().WithIndices())&#32;{
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(item.index,&#32;Is.EqualTo(index));
00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(item.value,&#32;Is.EqualTo(arg.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>()[index]));
00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index++;
00459 &#32;&#32;&#32;&#32;&#32;&#32;}
00460 &#32;&#32;&#32;&#32;}
00461 
00462 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__query_tests_8cs_source_1l00463"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a533a30e78ecc23326b974002ffda3b87">00463</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a533a30e78ecc23326b974002ffda3b87">ZipTest</link>([ValueSource(<emphasis role="stringliteral">&quot;list0&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg0,&#32;[ValueSource(<emphasis role="stringliteral">&quot;list1&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;arg1)&#32;{
00464 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;list0&#32;=&#32;arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00465 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;list1&#32;=&#32;arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>();
00466 
00467 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;expected&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;();
00468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Mathf.Min(list0.Count,&#32;list1.Count);&#32;i++)&#32;{
00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected.Add(list0[i].ToString()&#32;+&#32;list1[i].ToString());
00470 &#32;&#32;&#32;&#32;&#32;&#32;}
00471 
00472 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Zip(arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>(),&#32;(a,&#32;b)&#32;=&gt;&#32;a.ToString()&#32;+&#32;b.ToString()).ToList(),&#32;Is.EquivalentTo(
00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected));
00474 
00475 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(arg0.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>().Zip(arg1.<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>(),&#32;(a,&#32;b)&#32;=&gt;&#32;a.ToString()&#32;+&#32;b.ToString()).ToList(),&#32;Is.EquivalentTo(
00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected));
00477 &#32;&#32;&#32;&#32;}
00478 
00479 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;IEnumerable&lt;QueryArg&gt;&#32;list0&#32;{
00480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;values&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;()&#32;{&#32;1,&#32;2,&#32;3,&#32;4,&#32;5,&#32;1,&#32;2,&#32;3,&#32;4,&#32;5,&#32;9,&#32;1,&#32;900,&#32;<emphasis role="keywordtype">int</emphasis>.MinValue,&#32;<emphasis role="keywordtype">int</emphasis>.MaxValue&#32;};
00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;lengths&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;()&#32;{
00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,
00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2,
00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>.MaxValue
00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
00488 
00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;length&#32;<emphasis role="keywordflow">in</emphasis>&#32;lengths)&#32;{
00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;list&#32;=&#32;values.Take(length).ToList();
00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;QueryArg(list,&#32;list.Count);
00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;QueryArg(list,&#32;list.Count&#32;*&#32;10&#32;+&#32;10);
00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00494 &#32;&#32;&#32;&#32;&#32;&#32;}
00495 &#32;&#32;&#32;&#32;}
00496 
00497 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;IEnumerable&lt;QueryArg&gt;&#32;list1&#32;{
00498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;values&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;()&#32;{&#32;6,&#32;7,&#32;8,&#32;9,&#32;10,&#32;1,&#32;1,&#32;9,&#32;300,&#32;6,&#32;900,&#32;<emphasis role="keywordtype">int</emphasis>.MaxValue&#32;};
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;lengths&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;()&#32;{
00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,
00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2,
00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>.MaxValue
00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
00506 
00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;length&#32;<emphasis role="keywordflow">in</emphasis>&#32;lengths)&#32;{
00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;list&#32;=&#32;values.Take(length).ToList();
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;QueryArg(list,&#32;list.Count);
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;QueryArg(list,&#32;list.Count&#32;*&#32;10&#32;+&#32;10);
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00512 &#32;&#32;&#32;&#32;&#32;&#32;}
00513 &#32;&#32;&#32;&#32;}
00514 
<anchor xml:id="__query_tests_8cs_source_1l00515"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">00515</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg">QueryArg</link>&#32;{
00516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;_array;
00517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_count;
00518 
<anchor xml:id="__query_tests_8cs_source_1l00519"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1a54345172c89f2fe8e331c487fde69f67">00519</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1a54345172c89f2fe8e331c487fde69f67">QueryArg</link>(List&lt;int&gt;&#32;values,&#32;<emphasis role="keywordtype">int</emphasis>&#32;capacity)&#32;{
00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_array&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[capacity];
00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.CopyTo(_array);
00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_count&#32;=&#32;values.Count;
00523 &#32;&#32;&#32;&#32;&#32;&#32;}
00524 
<anchor xml:id="__query_tests_8cs_source_1l00525"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">00525</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_query_1_1_query">Query&lt;int&gt;</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a">ToQuery</link>()&#32;{
00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;copy&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[_array.Length];
00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_array.CopyTo(copy,&#32;0);
00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_query_1_1_query">Query&lt;int&gt;</link>(copy,&#32;_count);
00529 &#32;&#32;&#32;&#32;&#32;&#32;}
00530 
<anchor xml:id="__query_tests_8cs_source_1l00531"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">00531</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;int&gt;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965">ToList</link>()&#32;{
00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;(_array.Take(_count));
00533 &#32;&#32;&#32;&#32;&#32;&#32;}
00534 
<anchor xml:id="__query_tests_8cs_source_1l00535"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1a2570909fa1bdd4d951f8b470e7542015">00535</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1a2570909fa1bdd4d951f8b470e7542015">ToString</link>()&#32;{
00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_array.Length&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;&quot;</emphasis>&#32;+&#32;Utils.ToArrayString(_array.Take(_count));
00537 &#32;&#32;&#32;&#32;&#32;&#32;}
00538 &#32;&#32;&#32;&#32;}
00539 
00540 
<anchor xml:id="__query_tests_8cs_source_1l00541"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator">00541</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator">TestEnumerator</link>&#32;:&#32;IEnumerator&lt;int&gt;&#32;{
00542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_curr&#32;=&#32;-1;
00543 
<anchor xml:id="__query_tests_8cs_source_1l00544"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1a34d69ed8f0700eaa4fed75af9f45f331">00544</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1a34d69ed8f0700eaa4fed75af9f45f331">Current</link>&#32;{
00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_curr;
00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00548 &#32;&#32;&#32;&#32;&#32;&#32;}
00549 
<anchor xml:id="__query_tests_8cs_source_1l00550"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1aeb5e63de66e4a20bc5dc3fae66458096">00550</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1aeb5e63de66e4a20bc5dc3fae66458096">MoveNext</link>()&#32;{
00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_curr++;
00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_curr&#32;!=&#32;10);
00553 &#32;&#32;&#32;&#32;&#32;&#32;}
00554 
00555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;IEnumerator.Current&#32;{&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;&#32;}&#32;}
<anchor xml:id="__query_tests_8cs_source_1l00556"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1a9e00375db31ee7eb1ab65b72a9b84f5a">00556</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1a9e00375db31ee7eb1ab65b72a9b84f5a">Dispose</link>()&#32;{&#32;}
<anchor xml:id="__query_tests_8cs_source_1l00557"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1ac9dc19068f6d4f49439216f4cdbe7834">00557</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1ac9dc19068f6d4f49439216f4cdbe7834">Reset</link>()&#32;{&#32;}
00558 &#32;&#32;&#32;&#32;}
00559 &#32;&#32;}
00560 }
</programlisting></section>
