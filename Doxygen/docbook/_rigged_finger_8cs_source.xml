<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__rigged_finger_8cs_source">
<title>RiggedFinger.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/RiggedFinger.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00012 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>;
00013 
00014 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00015 
<anchor xml:id="__rigged_finger_8cs_source_1l00023"/><link linkend="_class_leap_1_1_unity_1_1_rigged_finger">00023</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model">FingerModel</link>&#32;{
00024 
00029 &#32;&#32;&#32;&#32;[HideInInspector]
<anchor xml:id="__rigged_finger_8cs_source_1l00030"/><link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a50f0aac12192993f685d07c551e40151">00030</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a50f0aac12192993f685d07c551e40151">deformPosition</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00031 
00032 &#32;&#32;&#32;&#32;[HideInInspector]
<anchor xml:id="__rigged_finger_8cs_source_1l00033"/><link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1af154c9566ec146520ae5ec79b949c0d0">00033</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1af154c9566ec146520ae5ec79b949c0d0">scaleLastFingerBone</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00034 
<anchor xml:id="__rigged_finger_8cs_source_1l00035"/><link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a43e360635499f70bc13722e363599c91">00035</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a43e360635499f70bc13722e363599c91">modelFingerPointing</link>&#32;=&#32;Vector3.forward;
<anchor xml:id="__rigged_finger_8cs_source_1l00036"/><link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1ab8d09b7fb7d2390e19d7f44505dd8dec">00036</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1ab8d09b7fb7d2390e19d7f44505dd8dec">modelPalmFacing</link>&#32;=&#32;-Vector3.up;
00037 
<anchor xml:id="__rigged_finger_8cs_source_1l00038"/><link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a559b350e305e18fc0c8cdcbc652a4ec7">00038</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Quaternion&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a559b350e305e18fc0c8cdcbc652a4ec7">Reorientation</link>()&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.Inverse(Quaternion.LookRotation(<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a43e360635499f70bc13722e363599c91">modelFingerPointing</link>,&#32;-<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1ab8d09b7fb7d2390e19d7f44505dd8dec">modelPalmFacing</link>));
00040 &#32;&#32;&#32;&#32;}
00041 
00042 
00046 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>[]&#32;s_standardFingertipLengths&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00047 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>()&#32;{
00048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;standard&#32;fingertip&#32;lengths.</emphasis>
00049 &#32;&#32;&#32;&#32;&#32;&#32;s_standardFingertipLengths&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>[5];
00050 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;testHand&#32;=&#32;TestHandFactory.MakeTestHand(isLeft:&#32;<emphasis role="keyword">true</emphasis>,
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unitType:&#32;TestHandFactory.UnitType.UnityUnits);
00052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;5;&#32;i++)&#32;{
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;fingertipBone&#32;=&#32;testHand.Fingers[i].<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[3];
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s_standardFingertipLengths[i]&#32;=&#32;fingertipBone.Length;
00055 &#32;&#32;&#32;&#32;&#32;&#32;}
00056 &#32;&#32;&#32;&#32;}
00057 
<anchor xml:id="__rigged_finger_8cs_source_1l00061"/><link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1affc59ee8e673ae2c2cf8c4222749f602">00061</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1affc59ee8e673ae2c2cf8c4222749f602">UpdateFinger</link>()&#32;{
00062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>.Length;&#32;++i)&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[i]&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[i].rotation&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a1d84c11cb9e8a1096225718bcd759ceb">GetBoneRotation</link>(i)&#32;*&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a559b350e305e18fc0c8cdcbc652a4ec7">Reorientation</link>();
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a50f0aac12192993f685d07c551e40151">deformPosition</link>)&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;boneRootPos&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1acc14a2149a5a1c8d7277f64db41af544">GetJointPosition</link>(i);
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[i].position&#32;=&#32;boneRootPos;
00068 
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;3&#32;&amp;&amp;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1af154c9566ec146520ae5ec79b949c0d0">scaleLastFingerBone</link>)&#32;{
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;fingertip&#32;base&#32;bone&#32;scale&#32;to&#32;match&#32;the&#32;bone&#32;length&#32;to&#32;the&#32;fingertip.</emphasis>
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;will&#32;only&#32;scale&#32;correctly&#32;if&#32;the&#32;model&#32;was&#32;constructed&#32;to&#32;match</emphasis>
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;standard&#32;&quot;test&quot;&#32;edit-time&#32;hand&#32;model&#32;from&#32;the&#32;TestHandFactory.</emphasis>
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;boneTipPos&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1acc14a2149a5a1c8d7277f64db41af544">GetJointPosition</link>(i&#32;+&#32;1);
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;boneVec&#32;=&#32;boneTipPos&#32;-&#32;boneRootPos;
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;boneLen&#32;=&#32;boneVec.magnitude;
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;standardLen&#32;=&#32;s_standardFingertipLengths[(int)this.<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a21c5f56f4dd6fba09212d1738811eecb">fingerType</link>];
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;newScale&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[i].transform.localScale;
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;lengthComponentIdx&#32;=&#32;getLargestComponentIndex(<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a43e360635499f70bc13722e363599c91">modelFingerPointing</link>);
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newScale[lengthComponentIdx]&#32;=&#32;boneLen&#32;/&#32;standardLen;
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[i].transform.localScale&#32;=&#32;newScale;
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00084 &#32;&#32;&#32;&#32;&#32;&#32;}
00085 &#32;&#32;&#32;&#32;}
00086 
00087 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;getLargestComponentIndex(Vector3&#32;pointingVector)&#32;{
00088 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;largestValue&#32;=&#32;0f;
00089 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;largestIdx&#32;=&#32;0;
00090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;testValue&#32;=&#32;pointingVector[i];
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Mathf.Abs(testValue)&#32;&gt;&#32;largestValue)&#32;{
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;largestIdx&#32;=&#32;i;
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;largestValue&#32;=&#32;Mathf.Abs(testValue);
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00096 &#32;&#32;&#32;&#32;&#32;&#32;}
00097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;largestIdx;
00098 &#32;&#32;&#32;&#32;}
00099 
<anchor xml:id="__rigged_finger_8cs_source_1l00100"/><link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1aaea2955085d8c4ec4d97a709ee8732e7">00100</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1aaea2955085d8c4ec4d97a709ee8732e7">SetupRiggedFinger</link>&#32;(<emphasis role="keywordtype">bool</emphasis>&#32;useMetaCarpals)&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;findBoneTransforms(useMetaCarpals);
00102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1a43e360635499f70bc13722e363599c91">modelFingerPointing</link>&#32;=&#32;calulateModelFingerPointing();
00103 &#32;&#32;&#32;&#32;}
00104 
00105 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;findBoneTransforms(<emphasis role="keywordtype">bool</emphasis>&#32;useMetaCarpals)&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!useMetaCarpals&#32;||&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a21c5f56f4dd6fba09212d1738811eecb">fingerType</link>&#32;==&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_THUMB)&#32;{
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[1]&#32;=&#32;transform;
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[2]&#32;=&#32;transform.GetChild(0).transform;
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[3]&#32;=&#32;transform.GetChild(0).transform.GetChild(0).transform;
00110 &#32;&#32;&#32;&#32;&#32;&#32;}
00111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[0]&#32;=&#32;transform;
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[1]&#32;=&#32;transform.GetChild(0).transform;
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[2]&#32;=&#32;transform.GetChild(0).transform.GetChild(0).transform;
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9dc2230af982027edd82f9952a1267a6">bones</link>[3]&#32;=&#32;transform.GetChild(0).transform.GetChild(0).transform.GetChild(0).transform;
00116 
00117 &#32;&#32;&#32;&#32;&#32;&#32;}
00118 &#32;&#32;&#32;&#32;}
00119 
00120 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;calulateModelFingerPointing()&#32;{
00121 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;distance&#32;=&#32;transform.InverseTransformPoint(transform.position)&#32;-&#32;transform.InverseTransformPoint(transform.GetChild(0).transform.position);
00122 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;zeroed&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand">RiggedHand</link>.<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a67e0012de184ea7ea1e76cec5a21589b">CalculateZeroedVector</link>(distance);
00123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zeroed;
00124 &#32;&#32;&#32;&#32;}
00125 
00126 &#32;&#32;}&#32;
00127 }
</programlisting></section>
