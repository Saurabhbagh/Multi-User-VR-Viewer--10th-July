<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__query_collapse_extensions_8cs_source">
<title>QueryCollapseExtensions.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryCollapseExtensions.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_query">Leap.Unity.Query</link>&#32;{
00014 
00015 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>QueryCollapseExtensions&#32;{
00016 
00020 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;All&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00021 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00022 
00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!predicate(slice[i]))&#32;{
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00029 
00030 &#32;&#32;&#32;&#32;&#32;&#32;}
00031 &#32;&#32;&#32;&#32;}
00032 
00037 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AllEqual&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;&lt;=&#32;1)&#32;{
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00042 
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;comparer&#32;=&#32;EqualityComparer&lt;T&gt;.Default;
00044 
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;first&#32;=&#32;slice[0];
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!comparer.Equals(first,&#32;slice[i]))&#32;{
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00051 
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00053 &#32;&#32;&#32;&#32;&#32;&#32;}
00054 &#32;&#32;&#32;&#32;}
00055 
00059 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Any&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Count()&#32;&gt;&#32;0;
00061 &#32;&#32;&#32;&#32;}
00062 
00066 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Any&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00067 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(predicate(slice[i]))&#32;{
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00073 
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00075 &#32;&#32;&#32;&#32;&#32;&#32;}
00076 &#32;&#32;&#32;&#32;}
00077 
00081 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;Average(<emphasis role="keyword">this</emphasis>&#32;Query&lt;float&gt;&#32;query)&#32;{
00082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;sum&#32;=&#32;0;
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;+=&#32;slice[i];
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum&#32;/&#32;slice.Count;
00088 &#32;&#32;&#32;&#32;&#32;&#32;}
00089 &#32;&#32;&#32;&#32;}
00090 
00094 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;Average(<emphasis role="keyword">this</emphasis>&#32;Query&lt;double&gt;&#32;query)&#32;{
00095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sum&#32;=&#32;0;
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;+=&#32;slice[i];
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum&#32;/&#32;slice.Count;
00101 &#32;&#32;&#32;&#32;&#32;&#32;}
00102 &#32;&#32;&#32;&#32;}
00103 
00107 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Contains&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;T&#32;item)&#32;{
00108 &#32;&#32;&#32;&#32;&#32;&#32;T[]&#32;array;
00109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count;
00110 &#32;&#32;&#32;&#32;&#32;&#32;query.Deconstruct(out&#32;array,&#32;out&#32;count);
00111 
00112 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;comparer&#32;=&#32;EqualityComparer&lt;T&gt;.Default;
00113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(comparer.Equals(item,&#32;array[i]))&#32;{
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ArrayPool&lt;T&gt;.Recycle(array);
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00118 &#32;&#32;&#32;&#32;&#32;&#32;}
00119 
00120 &#32;&#32;&#32;&#32;&#32;&#32;ArrayPool&lt;T&gt;.Recycle(array);
00121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00122 &#32;&#32;&#32;&#32;}
00123 
00127 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Count&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;slice.Count;
00130 &#32;&#32;&#32;&#32;&#32;&#32;}
00131 &#32;&#32;&#32;&#32;}
00132 
00136 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Count&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Where(predicate).Count();
00138 &#32;&#32;&#32;&#32;}
00139 
00143 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;CountUnique&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00144 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;slice&#32;=&#32;query.Deconstruct();
00145 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;<emphasis role="keyword">set</emphasis>&#32;=&#32;Pool&lt;HashSet&lt;T&gt;&gt;.Spawn();
00146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
00147 
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>.Add(slice[i]);
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">set</emphasis>.Count;
00152 
00153 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">finally</emphasis>&#32;{
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;slice.Dispose();
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>.Clear();
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pool&lt;HashSet&lt;T&gt;&gt;.Recycle(<emphasis role="keyword">set</emphasis>);
00157 &#32;&#32;&#32;&#32;&#32;&#32;}
00158 &#32;&#32;&#32;&#32;}
00159 
00164 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;CountUnique&lt;T,&#32;K&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;K&gt;&#32;selector)&#32;{
00165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Select(selector).CountUnique();
00166 &#32;&#32;&#32;&#32;}
00167 
00172 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;ElementAt&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
00173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&lt;&#32;0&#32;||&#32;index&#32;&gt;=&#32;slice.Count)&#32;{
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;IndexOutOfRangeException(<emphasis role="stringliteral">&quot;The&#32;index&#32;&quot;</emphasis>&#32;+&#32;index&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;was&#32;out&#32;of&#32;range.&#32;&#32;Query&#32;only&#32;has&#32;length&#32;of&#32;&quot;</emphasis>&#32;+&#32;slice.Count);
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;slice[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>];
00178 &#32;&#32;&#32;&#32;&#32;&#32;}
00179 &#32;&#32;&#32;&#32;}
00180 
00185 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;ElementAtOrDefault&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
00186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&lt;&#32;0&#32;||&#32;index&#32;&gt;=&#32;slice.Count)&#32;{
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordflow">default</emphasis>(T);
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;slice[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>];
00191 &#32;&#32;&#32;&#32;&#32;&#32;}
00192 &#32;&#32;&#32;&#32;}
00193 
00198 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;First&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;==&#32;0)&#32;{
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;InvalidOperationException(<emphasis role="stringliteral">&quot;The&#32;source&#32;Query&#32;was&#32;empty.&quot;</emphasis>);
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;slice[0];
00204 &#32;&#32;&#32;&#32;&#32;&#32;}
00205 &#32;&#32;&#32;&#32;}
00206 
00211 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;First&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Where(predicate).First();
00213 &#32;&#32;&#32;&#32;}
00214 
00219 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;FirstOrDefault&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;==&#32;0)&#32;{
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordflow">default</emphasis>(T);
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;slice[0];
00225 &#32;&#32;&#32;&#32;&#32;&#32;}
00226 &#32;&#32;&#32;&#32;}
00227 
00232 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;FirstOrDefault&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Where(predicate).FirstOrDefault();
00234 &#32;&#32;&#32;&#32;}
00235 
00240 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Maybe&lt;T&gt;&#32;FirstOrNone&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;==&#32;0)&#32;{
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Maybe.None;
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Maybe.Some(slice[0]);
00246 &#32;&#32;&#32;&#32;&#32;&#32;}
00247 &#32;&#32;&#32;&#32;}
00248 
00253 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Maybe&lt;T&gt;&#32;FirstOrNone&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Where(predicate).FirstOrNone();
00255 &#32;&#32;&#32;&#32;}
00256 
00267 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;Fold&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;T,&#32;T&gt;&#32;foldFunc)&#32;{
00268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;==&#32;0)&#32;{
00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;InvalidOperationException(<emphasis role="stringliteral">&quot;The&#32;source&#32;Query&#32;was&#32;empty.&quot;</emphasis>);
00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00272 
00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;result&#32;=&#32;slice[0];
00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;foldFunc(result,&#32;slice[i]);
00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00277 
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
00279 &#32;&#32;&#32;&#32;&#32;&#32;}
00280 &#32;&#32;&#32;&#32;}
00281 
00286 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;IndexOf&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;T&#32;t)&#32;{
00287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;comparer&#32;=&#32;EqualityComparer&lt;T&gt;.Default;
00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(comparer.Equals(t,&#32;slice[i]))&#32;{
00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00294 
00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00296 &#32;&#32;&#32;&#32;&#32;&#32;}
00297 &#32;&#32;&#32;&#32;}
00298 
00303 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;IndexOf&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(predicate(slice[i]))&#32;{
00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00311 &#32;&#32;&#32;&#32;&#32;&#32;}
00312 &#32;&#32;&#32;&#32;}
00313 
00317 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;Last&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;==&#32;0)&#32;{
00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;InvalidOperationException(<emphasis role="stringliteral">&quot;The&#32;source&#32;Query&#32;was&#32;empty.&quot;</emphasis>);
00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;slice[slice.Count&#32;-&#32;1];
00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00324 &#32;&#32;&#32;&#32;&#32;&#32;}
00325 &#32;&#32;&#32;&#32;}
00326 
00331 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;Last&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Where(predicate).Last();
00333 &#32;&#32;&#32;&#32;}
00334 
00338 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;LastOrDefault&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;==&#32;0)&#32;{
00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordflow">default</emphasis>(T);
00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;slice[slice.Count&#32;-&#32;1];
00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00345 &#32;&#32;&#32;&#32;&#32;&#32;}
00346 &#32;&#32;&#32;&#32;}
00347 
00352 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;LastOrDefault&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Where(predicate).LastOrDefault();
00354 &#32;&#32;&#32;&#32;}
00355 
00360 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Maybe&lt;T&gt;&#32;LastOrNone&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;==&#32;0)&#32;{
00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Maybe.None;
00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Maybe.Some(slice[slice.Count&#32;-&#32;1]);
00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00367 &#32;&#32;&#32;&#32;&#32;&#32;}
00368 &#32;&#32;&#32;&#32;}
00369 
00374 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Maybe&lt;T&gt;&#32;LastOrNone&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Where(predicate).LastOrNone();
00376 &#32;&#32;&#32;&#32;}
00377 
00381 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;Max&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;where&#32;T&#32;:&#32;IComparable&lt;T&gt;&#32;{
00382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Fold(FoldDelegate&lt;T&gt;.max);
00383 &#32;&#32;&#32;&#32;}
00384 
00388 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;K&#32;Max&lt;T,&#32;K&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;K&gt;&#32;selector)&#32;where&#32;K&#32;:&#32;IComparable&lt;K&gt;&#32;{
00389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Select(selector).Max();
00390 &#32;&#32;&#32;&#32;}
00391 
00395 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;Min&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;where&#32;T&#32;:&#32;IComparable&lt;T&gt;&#32;{
00396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Fold(FoldDelegate&lt;T&gt;.min);
00397 &#32;&#32;&#32;&#32;}
00398 
00402 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;K&#32;Min&lt;T,&#32;K&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;K&gt;&#32;selector)&#32;where&#32;K&#32;:&#32;IComparable&lt;K&gt;&#32;{
00403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Select(selector).Min();
00404 &#32;&#32;&#32;&#32;}
00405 
00410 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;Single&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;!=&#32;1)&#32;{
00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;InvalidOperationException(<emphasis role="stringliteral">&quot;The&#32;Query&#32;had&#32;a&#32;count&#32;of&#32;&quot;</emphasis>&#32;+&#32;slice.Count&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;instead&#32;of&#32;a&#32;count&#32;of&#32;1.&quot;</emphasis>);
00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;slice[0];
00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00417 &#32;&#32;&#32;&#32;&#32;&#32;}
00418 &#32;&#32;&#32;&#32;}
00419 
00424 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;Single&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Where(predicate).Single();
00426 &#32;&#32;&#32;&#32;}
00427 
00432 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;SingleOrDefault&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;!=&#32;1)&#32;{
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordflow">default</emphasis>(T);
00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;slice[0];
00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00439 &#32;&#32;&#32;&#32;&#32;&#32;}
00440 &#32;&#32;&#32;&#32;}
00441 
00446 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;SingleOrDefault&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Where(predicate).SingleOrDefault();
00448 &#32;&#32;&#32;&#32;}
00449 
00454 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Maybe&lt;T&gt;&#32;SingleOrNone&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;!=&#32;1)&#32;{
00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Maybe.None;
00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Maybe.Some(slice[0]);
00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00461 &#32;&#32;&#32;&#32;&#32;&#32;}
00462 &#32;&#32;&#32;&#32;}
00463 
00468 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Maybe&lt;T&gt;&#32;SingleOrNone&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;bool&gt;&#32;predicate)&#32;{
00469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Where(predicate).SingleOrNone();
00470 &#32;&#32;&#32;&#32;}
00471 
00475 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Sum(<emphasis role="keyword">this</emphasis>&#32;Query&lt;int&gt;&#32;query)&#32;{
00476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Fold((a,&#32;b)&#32;=&gt;&#32;a&#32;+&#32;b);
00477 &#32;&#32;&#32;&#32;}
00478 
00482 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;Sum(<emphasis role="keyword">this</emphasis>&#32;Query&lt;float&gt;&#32;query)&#32;{
00483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Fold((a,&#32;b)&#32;=&gt;&#32;a&#32;+&#32;b);
00484 &#32;&#32;&#32;&#32;}
00485 
00489 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;Sum(<emphasis role="keyword">this</emphasis>&#32;Query&lt;double&gt;&#32;query)&#32;{
00490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.Fold((a,&#32;b)&#32;=&gt;&#32;a&#32;+&#32;b);
00491 &#32;&#32;&#32;&#32;}
00492 
00498 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;UniformOrDefault&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.UniformOrNone().valueOrDefault;
00500 &#32;&#32;&#32;&#32;}
00501 
00507 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Maybe&lt;T&gt;&#32;UniformOrNone&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slice.Count&#32;==&#32;0)&#32;{
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Maybe.None;
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00512 
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;array&#32;=&#32;slice;
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;reference&#32;=&#32;array[0];
00515 
00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;comparer&#32;=&#32;EqualityComparer&lt;T&gt;.Default;
00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!comparer.Equals(reference,&#32;slice[i]))&#32;{
00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Maybe.None;
00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00522 
00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Maybe.Some(reference);
00524 &#32;&#32;&#32;&#32;&#32;&#32;}
00525 &#32;&#32;&#32;&#32;}
00526 
00530 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T[]&#32;ToArray&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T[]&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;T[slice.Count];
00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Array.Copy(slice.BackingArray,&#32;result,&#32;slice.Count);
00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
00535 &#32;&#32;&#32;&#32;&#32;&#32;}
00536 &#32;&#32;&#32;&#32;}
00537 
00542 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;FillArray&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;T[]&#32;array,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00543 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Array.Copy(slice.BackingArray,&#32;0,&#32;array,&#32;offset,&#32;slice.Count);
00545 &#32;&#32;&#32;&#32;&#32;&#32;}
00546 &#32;&#32;&#32;&#32;}
00547 
00551 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;T&gt;&#32;ToList&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00552 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;T&gt;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;T&gt;(slice.Count);
00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.Add(slice[i]);
00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
00558 &#32;&#32;&#32;&#32;&#32;&#32;}
00559 &#32;&#32;&#32;&#32;}
00560 
00564 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;FillList&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;List&lt;T&gt;&#32;list)&#32;{
00565 &#32;&#32;&#32;&#32;&#32;&#32;list.Clear();
00566 &#32;&#32;&#32;&#32;&#32;&#32;query.AppendList(list);
00567 &#32;&#32;&#32;&#32;}
00568 
00572 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AppendList&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;List&lt;T&gt;&#32;list)&#32;{
00573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.Add(slice[i]);
00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00577 &#32;&#32;&#32;&#32;&#32;&#32;}
00578 &#32;&#32;&#32;&#32;}
00579 
00583 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;HashSet&lt;T&gt;&#32;ToHashSet&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query)&#32;{
00584 &#32;&#32;&#32;&#32;&#32;&#32;HashSet&lt;T&gt;&#32;<emphasis role="keyword">set</emphasis>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HashSet&lt;T&gt;();
00585 &#32;&#32;&#32;&#32;&#32;&#32;query.AppendHashSet(<emphasis role="keyword">set</emphasis>);
00586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">set</emphasis>;
00587 &#32;&#32;&#32;&#32;}
00588 
00592 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;FillHashSet&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;HashSet&lt;T&gt;&#32;<emphasis role="keyword">set</emphasis>)&#32;{
00593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>.Clear();
00594 &#32;&#32;&#32;&#32;&#32;&#32;query.AppendHashSet(<emphasis role="keyword">set</emphasis>);
00595 &#32;&#32;&#32;&#32;}
00596 
00600 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AppendHashSet&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;HashSet&lt;T&gt;&#32;<emphasis role="keyword">set</emphasis>)&#32;{
00601 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>.Add(slice[i]);
00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00605 &#32;&#32;&#32;&#32;&#32;&#32;}
00606 &#32;&#32;&#32;&#32;}
00607 
00611 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Dictionary&lt;K,&#32;V&gt;&#32;ToDictionary&lt;T,&#32;K,&#32;V&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;K&gt;&#32;keySelector,&#32;Func&lt;T,&#32;V&gt;&#32;valueSelector)&#32;{
00612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(var&#32;slice&#32;=&#32;query.Deconstruct())&#32;{
00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Dictionary&lt;K,&#32;V&gt;&#32;dictionary&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;K,&#32;V&gt;();
00614 
00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;slice.Count;&#32;i++)&#32;{
00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dictionary[keySelector(slice[i])]&#32;=&#32;valueSelector(slice[i]);
00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00618 
00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dictionary;
00620 &#32;&#32;&#32;&#32;&#32;&#32;}
00621 &#32;&#32;&#32;&#32;}
00622 
00627 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Dictionary&lt;T,&#32;V&gt;&#32;ToDictionary&lt;T,&#32;V&gt;(<emphasis role="keyword">this</emphasis>&#32;Query&lt;T&gt;&#32;query,&#32;Func&lt;T,&#32;V&gt;&#32;valueSelector)&#32;{
00628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;query.ToDictionary(t&#32;=&gt;&#32;t,&#32;valueSelector);
00629 &#32;&#32;&#32;&#32;}
00630 
00631 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>FoldDelegate&lt;T&gt;&#32;where&#32;T&#32;:&#32;IComparable&lt;T&gt;&#32;{
00632 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;<emphasis role="keyword">static</emphasis>&#32;Func&lt;T,&#32;T,&#32;T&gt;&#32;max&#32;=&#32;(a,&#32;b)&#32;=&gt;&#32;a.CompareTo(b)&#32;&gt;&#32;0&#32;?&#32;a&#32;:&#32;b;
00633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;<emphasis role="keyword">static</emphasis>&#32;Func&lt;T,&#32;T,&#32;T&gt;&#32;min&#32;=&#32;(a,&#32;b)&#32;=&gt;&#32;a.CompareTo(b)&#32;&lt;&#32;0&#32;?&#32;a&#32;:&#32;b;
00634 &#32;&#32;&#32;&#32;}
00635 &#32;&#32;}
00636 }
</programlisting></section>
