<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__transform_copy_test_8cs_source">
<title>TransformCopyTest.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Editor/Tests/TransformCopyTest.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Linq;
00012 <emphasis role="keyword">using</emphasis>&#32;System.Reflection;
00013 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00014 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00015 
00016 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_tests">Leap.Unity.Tests</link>&#32;{
00017 
<anchor xml:id="__transform_copy_test_8cs_source_1l00018"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity">00018</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity">TransformCopyIdentity</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>&#32;{
<anchor xml:id="__transform_copy_test_8cs_source_1l00019"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f">00019</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<link linkend="_class_leap_1_1_frame">Frame</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f">_originalFrame</link>;
00020 
<anchor xml:id="__transform_copy_test_8cs_source_1l00021"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1aaad557351863e9bcb612237c4a47821f">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<link linkend="_class_leap_1_1_frame">Frame</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1aaad557351863e9bcb612237c4a47821f">createFrame</link>()&#32;{
00022 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f">_originalFrame</link>&#32;=&#32;TestHandFactory.MakeTestFrame(0,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
00023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f">_originalFrame</link>.TransformedCopy(<link linkend="_struct_leap_1_1_leap_transform">LeapTransform</link>.<link linkend="_struct_leap_1_1_leap_transform_1a10de68df5cf1afa89c273a33d0629f16">Identity</link>);
00024 &#32;&#32;&#32;&#32;}
00025 
00026 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__transform_copy_test_8cs_source_1l00027"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1a62950c0fc6bd366858f269534f082c75">00027</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1a62950c0fc6bd366858f269534f082c75">IdsAreSame</link>()&#32;{
00028 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>.Count,&#32;Is.EqualTo(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f">_originalFrame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>.Count));
00029 
00030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>.Count;&#32;i++)&#32;{
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_hand">Hand</link>&#32;oldHand&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f">_originalFrame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>[i];
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_hand">Hand</link>&#32;newHand&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>[i];
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(oldHand.<link linkend="_class_leap_1_1_hand_1ac7bfb32524382f4c9e4fb830437fe72b">Id</link>,&#32;Is.EqualTo(newHand.<link linkend="_class_leap_1_1_hand_1ac7bfb32524382f4c9e4fb830437fe72b">Id</link>));
00034 
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;5;&#32;j++)&#32;{
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_finger">Finger</link>&#32;oldFinger&#32;=&#32;oldHand.<link linkend="_class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6">Fingers</link>[j];
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_finger">Finger</link>&#32;newFinger&#32;=&#32;newHand.<link linkend="_class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6">Fingers</link>[j];
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(oldFinger.<link linkend="_class_leap_1_1_finger_1a84df992a5e1b895acdc3b4c3da000950">Id</link>,&#32;Is.EqualTo(newFinger.<link linkend="_class_leap_1_1_finger_1a84df992a5e1b895acdc3b4c3da000950">Id</link>));
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00040 &#32;&#32;&#32;&#32;&#32;&#32;}
00041 &#32;&#32;&#32;&#32;}
00042 
00043 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__transform_copy_test_8cs_source_1l00044"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1ab91a7a3434ce825ec1f68f7bd36df0a5">00044</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1ab91a7a3434ce825ec1f68f7bd36df0a5">AreBinaryEqual</link>()&#32;{
00045 &#32;&#32;&#32;&#32;&#32;&#32;assertObjectsEqual(<emphasis role="stringliteral">&quot;Frame&quot;</emphasis>,&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f">_originalFrame</link>,&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>);
00046 &#32;&#32;&#32;&#32;}
00047 
00048 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;assertObjectsEqual(<emphasis role="keywordtype">string</emphasis>&#32;objectName,&#32;<emphasis role="keywordtype">object</emphasis>&#32;a,&#32;<emphasis role="keywordtype">object</emphasis>&#32;b)&#32;{
00049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((a&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;!=&#32;(b&#32;==&#32;<emphasis role="keyword">null</emphasis>))&#32;{
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Fail(<emphasis role="stringliteral">&quot;For&#32;&quot;</emphasis>&#32;+&#32;objectName&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;one&#32;object&#32;was&#32;null&#32;an&#32;the&#32;other&#32;was&#32;not.&quot;</emphasis>);
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00052 &#32;&#32;&#32;&#32;&#32;&#32;}
00053 
00054 &#32;&#32;&#32;&#32;&#32;&#32;Type&#32;typeA&#32;=&#32;a.GetType();
00055 &#32;&#32;&#32;&#32;&#32;&#32;Type&#32;typeB&#32;=&#32;b.GetType();
00056 
00057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(typeA&#32;!=&#32;typeB)&#32;{
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Fail(<emphasis role="stringliteral">&quot;For&#32;&quot;</emphasis>&#32;+&#32;objectName&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;object&#32;Type&#32;&quot;</emphasis>&#32;+&#32;typeA&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;is&#32;not&#32;equal&#32;to&#32;type&#32;&quot;</emphasis>&#32;+&#32;typeB&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>);
00059 &#32;&#32;&#32;&#32;&#32;&#32;}
00060 
00061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(typeA.IsValueType)&#32;{
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(a,&#32;Is.EqualTo(b),&#32;objectName);
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00064 &#32;&#32;&#32;&#32;&#32;&#32;}
00065 
00066 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;is&#32;IList)&#32;{
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IList&#32;aList&#32;=&#32;a&#32;as&#32;IList;
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IList&#32;bList&#32;=&#32;b&#32;as&#32;IList;
00069 
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(aList.Count,&#32;Is.EqualTo(bList.Count),&#32;objectName&#32;+&#32;<emphasis role="stringliteral">&quot;.Count&quot;</emphasis>);
00071 
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;aList.Count;&#32;i++)&#32;{
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertObjectsEqual(objectName&#32;+&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;+&#32;i&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>,&#32;aList[i],&#32;bList[i]);
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00075 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FieldInfo[]&#32;fields&#32;=&#32;typeA.GetFields(BindingFlags.Public&#32;|&#32;BindingFlags.Instance);
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(FieldInfo&#32;field&#32;<emphasis role="keywordflow">in</emphasis>&#32;fields)&#32;{
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertObjectsEqual(objectName&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;+&#32;field.Name,&#32;field.GetValue(a),&#32;field.GetValue(b));
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00080 
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PropertyInfo[]&#32;properties&#32;=&#32;typeA.GetProperties(BindingFlags.Public&#32;|&#32;BindingFlags.Instance);
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(PropertyInfo&#32;property&#32;<emphasis role="keywordflow">in</emphasis>&#32;properties)&#32;{
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(property.GetIndexParameters().Length&#32;==&#32;0)&#32;{
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;propA;
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;propA&#32;=&#32;<emphasis role="keyword">property</emphasis>.GetValue(a,&#32;<emphasis role="keyword">null</emphasis>);
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;exceptionA)&#32;{
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.GetValue(b,&#32;<emphasis role="keyword">null</emphasis>);
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Fail(<emphasis role="stringliteral">&quot;For&#32;&quot;</emphasis>&#32;+&#32;objectName&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;one&#32;property&#32;threw&#32;an&#32;exception&#32;where&#32;the&#32;other&#32;did&#32;not.&quot;</emphasis>);
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;exceptionB)&#32;{
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(exceptionA.GetType(),&#32;Is.EqualTo(exceptionB.GetType()),&#32;<emphasis role="stringliteral">&quot;For&#32;&quot;</emphasis>&#32;+&#32;objectName&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;both&#32;properties&#32;threw&#32;exceptions&#32;but&#32;their&#32;types&#32;were&#32;different.&quot;</emphasis>);
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00097 
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;propB&#32;=&#32;<emphasis role="keyword">property</emphasis>.GetValue(b,&#32;<emphasis role="keyword">null</emphasis>);
00099 
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertObjectsEqual(objectName&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;+&#32;property.Name,&#32;propA,&#32;propB);
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00103 &#32;&#32;&#32;&#32;&#32;&#32;}
00104 &#32;&#32;&#32;&#32;}
00105 &#32;&#32;}
00106 
<anchor xml:id="__transform_copy_test_8cs_source_1l00107"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation">00107</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation">TransformCopyTranslation</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>&#32;{
<anchor xml:id="__transform_copy_test_8cs_source_1l00108"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1ada7696181bd158597d8bd4818f81c470">00108</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1ada7696181bd158597d8bd4818f81c470">translation</link>&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>;
<anchor xml:id="__transform_copy_test_8cs_source_1l00109"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a0b65a9ec9a4d6c68e7023712b4eb4b11">00109</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<link linkend="_class_leap_1_1_frame">Frame</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a0b65a9ec9a4d6c68e7023712b4eb4b11">_originalFrame</link>;
00110 
<anchor xml:id="__transform_copy_test_8cs_source_1l00111"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1abaa9e440cd40e50c4d4e46ab6eb3fbc4">00111</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<link linkend="_class_leap_1_1_frame">Frame</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1abaa9e440cd40e50c4d4e46ab6eb3fbc4">createFrame</link>()&#32;{
00112 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a0b65a9ec9a4d6c68e7023712b4eb4b11">_originalFrame</link>&#32;=&#32;TestHandFactory.MakeTestFrame(0,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
00113 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_leap_transform">LeapTransform</link>&#32;forwardTransform&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_leap_transform">LeapTransform</link>(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1ada7696181bd158597d8bd4818f81c470">translation</link>,&#32;<link linkend="_struct_leap_1_1_leap_quaternion">LeapQuaternion</link>.<link linkend="_struct_leap_1_1_leap_quaternion_1aa69693c6f2fd5545034b9c1c0af286b6">Identity</link>);
00114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a0b65a9ec9a4d6c68e7023712b4eb4b11">_originalFrame</link>.TransformedCopy(forwardTransform);
00115 &#32;&#32;&#32;&#32;}
00116 
00117 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__transform_copy_test_8cs_source_1l00118"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a054ff9a6408b4c0cce4bce27620ce67e">00118</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a054ff9a6408b4c0cce4bce27620ce67e">IsTranslated</link>()&#32;{
00119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>.Count;&#32;i++)&#32;{
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_hand">Hand</link>&#32;oldHand&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a0b65a9ec9a4d6c68e7023712b4eb4b11">_originalFrame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>[i];
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_hand">Hand</link>&#32;newHand&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>[i];
00122 
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82">assertVectorsEqual</link>(oldHand.<link linkend="_class_leap_1_1_hand_1aaf0940b9108e92c22e33b9c6cd32921a">PalmPosition</link>&#32;+&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1ada7696181bd158597d8bd4818f81c470">translation</link>,&#32;newHand.<link linkend="_class_leap_1_1_hand_1aaf0940b9108e92c22e33b9c6cd32921a">PalmPosition</link>,&#32;<emphasis role="stringliteral">&quot;Palm&#32;Position&quot;</emphasis>);
00124 
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;5;&#32;j++)&#32;{
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_finger">Finger</link>&#32;oldFinger&#32;=&#32;oldHand.<link linkend="_class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6">Fingers</link>[j];
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_finger">Finger</link>&#32;newFinger&#32;=&#32;newHand.<link linkend="_class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6">Fingers</link>[j];
00128 
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82">assertVectorsEqual</link>(oldFinger.<link linkend="_class_leap_1_1_finger_1aae573cee6c1bdefd293838f133235b2d">TipPosition</link>&#32;+&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1ada7696181bd158597d8bd4818f81c470">translation</link>,&#32;newFinger.<link linkend="_class_leap_1_1_finger_1aae573cee6c1bdefd293838f133235b2d">TipPosition</link>,&#32;oldFinger.<link linkend="_class_leap_1_1_finger_1a86fc4ed5138e26ac07ec0885f3627126">Type</link>.<link linkend="_class_leap_1_1_finger_1a35cbefd8df3c7bc8a1f0d45a45105fa0">ToString</link>());
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00131 &#32;&#32;&#32;&#32;&#32;&#32;}
00132 &#32;&#32;&#32;&#32;}
00133 &#32;&#32;}
00134 }
</programlisting></section>
