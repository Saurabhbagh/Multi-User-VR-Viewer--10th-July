<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__multi_typed_reference_tests_8cs_source">
<title>MultiTypedReferenceTests.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Editor/Tests/MultiTypedReferenceTests.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00011 
00012 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_tests">Leap.Unity.Tests</link>&#32;{
00013 
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00014"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests">00014</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests">MultiTypedReferenceTests</link>&#32;{
00015 
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00016"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class">00016</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00017"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00018"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b">00018</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b">B</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00019"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_c">00019</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_c">C</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00020"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_d">00020</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_d">D</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
00021 
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00022"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_invalid_class">00022</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_invalid_class">InvalidClass</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
00023 
00024 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>ReferenceClass&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_multi_typed_reference">MultiTypedReference</link>&lt;BaseClass,&#32;A,&#32;B,&#32;C,&#32;D&gt;&#32;{&#32;}
00025 
00026 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;ReferenceClass&#32;_ref;
00027 
00028 &#32;&#32;&#32;&#32;[SetUp]
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00029"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a521a157d884252bc41c6d83250641e2e">00029</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a521a157d884252bc41c6d83250641e2e">Setup</link>()&#32;{
00030 &#32;&#32;&#32;&#32;&#32;&#32;_ref&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ReferenceClass();
00031 &#32;&#32;&#32;&#32;}
00032 
00033 &#32;&#32;&#32;&#32;[TearDown]
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00034"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1aa080a2a3bc977eaf3b40964fae60860c">00034</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1aa080a2a3bc977eaf3b40964fae60860c">Teardown</link>()&#32;{
00035 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Clear();
00036 &#32;&#32;&#32;&#32;&#32;&#32;_ref&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00037 &#32;&#32;&#32;&#32;}
00038 
00039 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00040"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a3cecddcc8983dc022fe31872dff40af3">00040</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a3cecddcc8983dc022fe31872dff40af3">SetTest</link>()&#32;{
00041 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>();
00042 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>&gt;());
00043 &#32;&#32;&#32;&#32;}
00044 
00045 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00046"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a1463a97bc1f1fe51ae14089727566a10">00046</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a1463a97bc1f1fe51ae14089727566a10">SetNullTest</link>()&#32;{
00047 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>();
00048 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>&gt;());
00049 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00050 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.Null);
00051 &#32;&#32;&#32;&#32;}
00052 
00053 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00054"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a8f04e00a4092e378462b39dd15b735c6">00054</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a8f04e00a4092e378462b39dd15b735c6">SwitchTypeTest</link>()&#32;{
00055 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>();
00056 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>&gt;());
00057 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b">B</link>();
00058 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b">B</link>&gt;());
00059 &#32;&#32;&#32;&#32;}
00060 
00061 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00062"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a96db2691ce3ea40dacc1e7074b34be46">00062</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a96db2691ce3ea40dacc1e7074b34be46">ClearTest</link>()&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>();
00064 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>&gt;());
00065 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Clear();
00066 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.Null);
00067 &#32;&#32;&#32;&#32;}
00068 
00069 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00070"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1ac9875ba9bfdb9832143b3fabf832d3d1">00070</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1ac9875ba9bfdb9832143b3fabf832d3d1">AddInvalidTest</link>()&#32;{
00071 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;{
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_invalid_class">InvalidClass</link>();
00073 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;Throws.ArgumentException);
00074 &#32;&#32;&#32;&#32;}
00075 
00076 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_reference_tests_8cs_source_1l00077"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a2d87c654b7b44ad14bd65fea7b0a9f1c">00077</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a2d87c654b7b44ad14bd65fea7b0a9f1c">CanAddAllTest</link>()&#32;{
00078 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>();
00079 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a">A</link>&gt;());
00080 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b">B</link>();
00081 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b">B</link>&gt;());
00082 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_c">C</link>();
00083 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_c">C</link>&gt;());
00084 &#32;&#32;&#32;&#32;&#32;&#32;_ref.Value&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_d">D</link>();
00085 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_ref.Value,&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_d">D</link>&gt;());
00086 &#32;&#32;&#32;&#32;}
00087 &#32;&#32;}
00088 }
</programlisting></section>
