<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__utils_8cs_source">
<title>Utils.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Utils/Utils.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_engine">UnityEngine</link>.Assertions;
00012 <emphasis role="keyword">using</emphasis>&#32;System;
00013 <emphasis role="keyword">using</emphasis>&#32;System.IO;
00014 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00015 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_namespace_leap_1_1_unity">Unity</link>.<link linkend="_namespace_leap_1_1_unity_1_1_query">Query</link>;
00016 
00017 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00018 
00019 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>Utils&#32;{
00020 
00021 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;C#&#32;Utilities</emphasis>
00022 
00023 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Generic&#32;Utils</emphasis>
00024 
00029 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Swap&lt;T&gt;(ref&#32;T&#32;a,&#32;ref&#32;T&#32;b)&#32;{
00030 &#32;&#32;&#32;&#32;&#32;&#32;T&#32;temp&#32;=&#32;a;
00031 &#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;b;
00032 &#32;&#32;&#32;&#32;&#32;&#32;b&#32;=&#32;temp;
00033 &#32;&#32;&#32;&#32;}
00034 
00038 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Swap&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;IList&lt;T&gt;&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;b)&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;T&#32;temp&#32;=&#32;list[a];
00040 &#32;&#32;&#32;&#32;&#32;&#32;list[a]&#32;=&#32;list[b];
00041 &#32;&#32;&#32;&#32;&#32;&#32;list[b]&#32;=&#32;temp;
00042 &#32;&#32;&#32;&#32;}
00043 
00047 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Swap&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;T[]&#32;array,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;b)&#32;{
00048 &#32;&#32;&#32;&#32;&#32;&#32;Swap(ref&#32;array[a],&#32;ref&#32;array[b]);
00049 &#32;&#32;&#32;&#32;}
00050 
00055 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Reverse&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;T[]&#32;array)&#32;{
00056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mid&#32;=&#32;array.Length&#32;/&#32;2;
00057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
00058 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;array.Length;
00059 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;mid)&#32;{
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array.Swap(i++,&#32;--j);
00061 &#32;&#32;&#32;&#32;&#32;&#32;}
00062 &#32;&#32;&#32;&#32;}
00063 
00068 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Reverse&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;T[]&#32;array,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start,&#32;<emphasis role="keywordtype">int</emphasis>&#32;length)&#32;{
00069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mid&#32;=&#32;start&#32;+&#32;length&#32;/&#32;2;
00070 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;start;
00071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;start&#32;+&#32;length;
00072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;mid)&#32;{
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array.Swap(i++,&#32;--j);
00074 &#32;&#32;&#32;&#32;&#32;&#32;}
00075 &#32;&#32;&#32;&#32;}
00076 
00080 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Shuffle&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;IList&lt;T&gt;&#32;list)&#32;{
00081 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;list.Count;&#32;i++)&#32;{
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Utils.Swap(list,&#32;i,&#32;<link linkend="_namespace_unity_engine">UnityEngine</link>.Random.Range(i,&#32;list.Count));
00083 &#32;&#32;&#32;&#32;&#32;&#32;}
00084 &#32;&#32;&#32;&#32;}
00085 
00086 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DoubleCapacity&lt;T&gt;(ref&#32;T[]&#32;array)&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;T[]&#32;newArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;T[array.Length&#32;*&#32;2];
00088 &#32;&#32;&#32;&#32;&#32;&#32;Array.Copy(array,&#32;newArray,&#32;array.Length);
00089 &#32;&#32;&#32;&#32;&#32;&#32;array&#32;=&#32;newArray;
00090 &#32;&#32;&#32;&#32;}
00091 
00095 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AreEqualUnordered&lt;T&gt;(IList&lt;T&gt;&#32;a,&#32;IList&lt;T&gt;&#32;b)&#32;{
00096 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;_count&#32;=&#32;Pool&lt;Dictionary&lt;T,&#32;int&gt;&gt;.Spawn();
00097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_nullCount&#32;=&#32;0;
00099 
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;a)&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_nullCount++;
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count;
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_count.TryGetValue(i,&#32;out&#32;count))&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count&#32;=&#32;0;
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_count[i]&#32;=&#32;count&#32;+&#32;1;
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00111 
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;b)&#32;{
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_nullCount--;
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count;
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_count.TryGetValue(i,&#32;out&#32;count))&#32;{
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_count[i]&#32;=&#32;count&#32;-&#32;1;
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00123 
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_nullCount&#32;!=&#32;0)&#32;{
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00127 
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;pair&#32;<emphasis role="keywordflow">in</emphasis>&#32;_count)&#32;{
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pair.Value&#32;!=&#32;0)&#32;{
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00133 
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00135 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">finally</emphasis>&#32;{
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_count.Clear();
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pool&lt;Dictionary&lt;T,&#32;int&gt;&gt;.Recycle(_count);
00138 &#32;&#32;&#32;&#32;&#32;&#32;}
00139 &#32;&#32;&#32;&#32;}
00140 
00141 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;http://stackoverflow.com/a/19317229/2471635</emphasis>
00146 <emphasis role="comment"></emphasis>&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ImplementsInterface(<emphasis role="keyword">this</emphasis>&#32;Type&#32;type,&#32;Type&#32;ifaceType)&#32;{
00147 &#32;&#32;&#32;&#32;&#32;&#32;Type[]&#32;intf&#32;=&#32;type.GetInterfaces();
00148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;intf.Length;&#32;i++)&#32;{
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(intf[i]&#32;==&#32;ifaceType)&#32;{
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00152 &#32;&#32;&#32;&#32;&#32;&#32;}
00153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00154 &#32;&#32;&#32;&#32;}
00155 
00156 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsActiveRelativeToParent(<emphasis role="keyword">this</emphasis>&#32;Transform&#32;obj,&#32;Transform&#32;parent)&#32;{
00157 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(obj.IsChildOf(parent));
00158 
00159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!obj.gameObject.activeSelf)&#32;{
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00161 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(obj.parent&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;obj.parent&#32;==&#32;parent)&#32;{
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;obj.parent.IsActiveRelativeToParent(parent);
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00167 &#32;&#32;&#32;&#32;&#32;&#32;}
00168 &#32;&#32;&#32;&#32;}
00169 
00175 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;int&gt;&#32;GetSortedOrder&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;IList&lt;T&gt;&#32;list)&#32;where&#32;T&#32;:&#32;IComparable&lt;T&gt;&#32;{
00176 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsNotNull(list);
00177 
00178 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;ordering&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;();
00179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;list.Count;&#32;i++)&#32;{
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ordering.Add(i);
00181 &#32;&#32;&#32;&#32;&#32;&#32;}
00182 
00183 &#32;&#32;&#32;&#32;&#32;&#32;ordering.Sort((a,&#32;b)&#32;=&gt;&#32;list[a].CompareTo(list[b]));
00184 
00185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ordering;
00186 &#32;&#32;&#32;&#32;}
00187 
00192 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ApplyOrdering&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;IList&lt;T&gt;&#32;list,&#32;List&lt;int&gt;&#32;ordering)&#32;{
00193 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsNotNull(list);
00194 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsNotNull(ordering);
00195 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(list.Count,&#32;ordering.Count,&#32;<emphasis role="stringliteral">&quot;List&#32;must&#32;be&#32;the&#32;same&#32;length&#32;as&#32;the&#32;ordering.&quot;</emphasis>);
00196 
00197 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;T&gt;&#32;copy&#32;=&#32;Pool&lt;List&lt;T&gt;&gt;.Spawn();
00198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy.AddRange(list);
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;list.Count;&#32;i++)&#32;{
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list[i]&#32;=&#32;copy[ordering[i]];
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00203 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">finally</emphasis>&#32;{
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy.Clear();
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pool&lt;List&lt;T&gt;&gt;.Recycle(copy);
00206 &#32;&#32;&#32;&#32;&#32;&#32;}
00207 &#32;&#32;&#32;&#32;}
00208 
00209 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;MakeRelativePath(<emphasis role="keywordtype">string</emphasis>&#32;relativeTo,&#32;<emphasis role="keywordtype">string</emphasis>&#32;path)&#32;{
00210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>.IsNullOrEmpty(relativeTo))&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;ArgumentNullException(<emphasis role="stringliteral">&quot;relativeTo&quot;</emphasis>);
00211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>.IsNullOrEmpty(path))&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;ArgumentNullException(<emphasis role="stringliteral">&quot;path&quot;</emphasis>);
00212 
00213 &#32;&#32;&#32;&#32;&#32;&#32;Uri&#32;relativeToUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Uri(relativeTo);
00214 &#32;&#32;&#32;&#32;&#32;&#32;Uri&#32;pathUri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Uri(path);
00215 
00216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(relativeToUri.Scheme&#32;!=&#32;pathUri.Scheme)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;path;&#32;}&#32;<emphasis role="comment">//&#32;path&#32;can&apos;t&#32;be&#32;made&#32;relative.</emphasis>
00217 
00218 &#32;&#32;&#32;&#32;&#32;&#32;Uri&#32;relativeUri&#32;=&#32;relativeToUri.MakeRelativeUri(pathUri);
00219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;relativePath&#32;=&#32;Uri.UnescapeDataString(relativeUri.ToString());
00220 
00221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pathUri.Scheme.Equals(<emphasis role="stringliteral">&quot;file&quot;</emphasis>,&#32;StringComparison.InvariantCultureIgnoreCase))&#32;{
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;relativePath&#32;=&#32;relativePath.Replace(Path.AltDirectorySeparatorChar,&#32;Path.DirectorySeparatorChar);
00223 &#32;&#32;&#32;&#32;&#32;&#32;}
00224 
00225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;relativePath;
00226 &#32;&#32;&#32;&#32;}
00227 
00228 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00229 
00230 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;String&#32;Utils</emphasis>
00231 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;TrimEnd(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;str,&#32;<emphasis role="keywordtype">int</emphasis>&#32;characters)&#32;{
00238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str.Substring(0,&#32;Mathf.Max(0,&#32;str.Length&#32;-&#32;characters));
00239 &#32;&#32;&#32;&#32;}
00240 
00247 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;TrimStart(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;str,&#32;<emphasis role="keywordtype">int</emphasis>&#32;characters)&#32;{
00248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str.Substring(Mathf.Min(str.Length,&#32;characters));
00249 &#32;&#32;&#32;&#32;}
00250 
00256 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;Capitalize(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;str)&#32;{
00257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;=&#32;str[0];
00258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>.IsLetter(c))&#32;{
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>.ToUpper(c)&#32;+&#32;str.Substring(1);
00260 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
00262 &#32;&#32;&#32;&#32;&#32;&#32;}
00263 &#32;&#32;&#32;&#32;}
00264 
00278 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;GenerateNiceName(<emphasis role="keywordtype">string</emphasis>&#32;value)&#32;{
00279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;result&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;curr&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00281 
00282 &#32;&#32;&#32;&#32;&#32;&#32;Func&lt;char,&#32;bool&gt;&#32;wordFunc&#32;=&#32;c&#32;=&gt;&#32;{
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Can&apos;t&#32;build&#32;any&#32;further&#32;if&#32;it&apos;s&#32;already&#32;capitalized</emphasis>
00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(curr.Length&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<emphasis role="keywordtype">char</emphasis>.IsUpper(curr[0]))&#32;{
00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00287 
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Can&apos;t&#32;add&#32;non-letters&#32;to&#32;words</emphasis>
00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<emphasis role="keywordtype">char</emphasis>.IsLetter(c))&#32;{
00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00292 
00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curr&#32;=&#32;c&#32;+&#32;curr;
00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00295 &#32;&#32;&#32;&#32;&#32;&#32;};
00296 
00297 &#32;&#32;&#32;&#32;&#32;&#32;Func&lt;char,&#32;bool&gt;&#32;acronymFunc&#32;=&#32;c&#32;=&gt;&#32;{
00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Can&apos;t&#32;add&#32;non-letters&#32;to&#32;acronyms</emphasis>
00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<emphasis role="keywordtype">char</emphasis>.IsLetter(c))&#32;{
00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00302 
00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Can&apos;t&#32;add&#32;lowercase&#32;letters&#32;to&#32;acronyms</emphasis>
00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>.IsLower(c))&#32;{
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00307 
00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curr&#32;=&#32;c&#32;+&#32;curr;
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00310 &#32;&#32;&#32;&#32;&#32;&#32;};
00311 
00312 &#32;&#32;&#32;&#32;&#32;&#32;Func&lt;char,&#32;bool&gt;&#32;numberFunc&#32;=&#32;c&#32;=&gt;&#32;{
00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Can&apos;t&#32;add&#32;non-digits&#32;to&#32;a&#32;number</emphasis>
00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<emphasis role="keywordtype">char</emphasis>.IsDigit(c))&#32;{
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00317 
00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curr&#32;=&#32;c&#32;+&#32;curr;
00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00320 &#32;&#32;&#32;&#32;&#32;&#32;};
00321 
00322 &#32;&#32;&#32;&#32;&#32;&#32;Func&lt;char,&#32;bool&gt;&#32;fluffFunc&#32;=&#32;c&#32;=&gt;&#32;{
00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Can&apos;t&#32;add&#32;digits&#32;or&#32;numbers&#32;to&#32;&apos;fluff&apos;</emphasis>
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>.IsDigit(c)&#32;||&#32;<emphasis role="keywordtype">char</emphasis>.IsLetter(c))&#32;{
00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00327 
00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00329 &#32;&#32;&#32;&#32;&#32;&#32;};
00330 
00331 
00332 &#32;&#32;&#32;&#32;&#32;&#32;Func&lt;char,&#32;bool&gt;&#32;currFunc&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;currIndex&#32;=&#32;value.Length;
00334 
00335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(currIndex&#32;!=&#32;0)&#32;{
00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currIndex--;
00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;=&#32;value[currIndex];
00338 
00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currFunc&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;currFunc(c))&#32;{
00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00342 
00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(curr&#32;!=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;curr.Capitalize()&#32;+&#32;result;
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curr&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00347 
00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(acronymFunc(c))&#32;{
00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currFunc&#32;=&#32;acronymFunc;
00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wordFunc(c))&#32;{
00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currFunc&#32;=&#32;wordFunc;
00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numberFunc(c))&#32;{
00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currFunc&#32;=&#32;numberFunc;
00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fluffFunc(c))&#32;{
00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currFunc&#32;=&#32;fluffFunc;
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Exception(<emphasis role="stringliteral">&quot;Unexpected&#32;state,&#32;no&#32;function&#32;matched&#32;character&#32;&quot;</emphasis>&#32;+&#32;c);
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00359 &#32;&#32;&#32;&#32;&#32;&#32;}
00360 
00361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(curr&#32;!=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;curr.Capitalize()&#32;+&#32;result;
00363 &#32;&#32;&#32;&#32;&#32;&#32;}
00364 
00365 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;result.Trim();
00366 
00367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.StartsWith(<emphasis role="stringliteral">&quot;M&#32;&quot;</emphasis>)&#32;||&#32;result.StartsWith(<emphasis role="stringliteral">&quot;K&#32;&quot;</emphasis>))&#32;{
00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;result.Substring(2);
00369 &#32;&#32;&#32;&#32;&#32;&#32;}
00370 
00371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.Trim();
00372 &#32;&#32;&#32;&#32;}
00373 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00374 
00375 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Print&#32;Utils</emphasis>
00376 
00381 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;ToArrayString&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;IEnumerable&lt;T&gt;&#32;enumerable)&#32;{
00382 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;+&#32;typeof(T).Name&#32;+&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>;
00383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;addedFirstElement&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;t&#32;<emphasis role="keywordflow">in</emphasis>&#32;enumerable)&#32;{
00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(addedFirstElement)&#32;{
00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;t.ToString();
00389 
00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addedFirstElement&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00391 &#32;&#32;&#32;&#32;&#32;&#32;}
00392 &#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
00393 
00394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
00395 &#32;&#32;&#32;&#32;}
00396 
00397 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00398 
00399 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Math&#32;Utils</emphasis>
00400 
00401 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Repeat(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;m)&#32;{
00402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r&#32;=&#32;x&#32;%&#32;m;
00403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r&#32;&lt;&#32;0&#32;?&#32;r&#32;+&#32;m&#32;:&#32;r;
00404 &#32;&#32;&#32;&#32;}
00405 
00406 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Sign(<emphasis role="keywordtype">int</emphasis>&#32;value)&#32;{
00407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;0)&#32;{
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00409 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;&gt;&#32;0)&#32;{
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00411 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00413 &#32;&#32;&#32;&#32;&#32;&#32;}
00414 &#32;&#32;&#32;&#32;}
00415 
00421 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector2&#32;Perpendicular(<emphasis role="keyword">this</emphasis>&#32;Vector2&#32;vector)&#32;{
00422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(vector.y,&#32;-vector.x);
00423 &#32;&#32;&#32;&#32;}
00424 
00431 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;Perpendicular(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;vector)&#32;{
00432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;x2&#32;=&#32;vector.x&#32;*&#32;vector.x;
00433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;y2&#32;=&#32;vector.y&#32;*&#32;vector.y;
00434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;z2&#32;=&#32;vector.z&#32;*&#32;vector.z;
00435 
00436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;mag0&#32;=&#32;z2&#32;+&#32;x2;
00437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;mag1&#32;=&#32;y2&#32;+&#32;x2;
00438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;mag2&#32;=&#32;z2&#32;+&#32;y2;
00439 
00440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mag0&#32;&gt;&#32;mag1)&#32;{
00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mag0&#32;&gt;&#32;mag2)&#32;{
00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(-vector.z,&#32;0,&#32;vector.x);
00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;vector.z,&#32;-vector.y);
00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00446 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mag1&#32;&gt;&#32;mag2)&#32;{
00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(vector.y,&#32;-vector.x,&#32;0);
00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;vector.z,&#32;-vector.y);
00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00452 &#32;&#32;&#32;&#32;&#32;&#32;}
00453 &#32;&#32;&#32;&#32;}
00454 
00455 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ContainsNaN(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;v)&#32;{
00456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>.IsNaN(v.x)
00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="keywordtype">float</emphasis>.IsNaN(v.y)
00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="keywordtype">float</emphasis>.IsNaN(v.z);
00459 &#32;&#32;&#32;&#32;}
00460 
00461 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsBetween(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;f,&#32;<emphasis role="keywordtype">float</emphasis>&#32;f0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;f1)&#32;{
00462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(f0&#32;&gt;&#32;f1)&#32;Utils.Swap(ref&#32;f0,&#32;ref&#32;f1);
00463 
00464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;f0&#32;&lt;=&#32;f&#32;&amp;&amp;&#32;f&#32;&lt;=&#32;f1;
00465 &#32;&#32;&#32;&#32;}
00466 
00467 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsBetween(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;d,&#32;<emphasis role="keywordtype">double</emphasis>&#32;d0,&#32;<emphasis role="keywordtype">double</emphasis>&#32;d1)&#32;{
00468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(d0&#32;&gt;&#32;d1)&#32;Utils.Swap(ref&#32;d0,&#32;ref&#32;d1);
00469 
00470 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d0&#32;&lt;=&#32;d&#32;&amp;&amp;&#32;d&#32;&lt;=&#32;d1;
00471 &#32;&#32;&#32;&#32;}
00472 
00476 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;TimedExtrapolate(Vector3&#32;a,&#32;<emphasis role="keywordtype">float</emphasis>&#32;aTime,
00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;b,&#32;<emphasis role="keywordtype">float</emphasis>&#32;bTime,
00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;extrapolatedTime)&#32;{
00479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector3.LerpUnclamped(a,&#32;b,&#32;extrapolatedTime.MapUnclamped(aTime,&#32;bTime,&#32;0f,&#32;1f));
00480 &#32;&#32;&#32;&#32;}
00481 
00485 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;TimedExtrapolate(Quaternion&#32;a,&#32;<emphasis role="keywordtype">float</emphasis>&#32;aTime,
00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;b,&#32;<emphasis role="keywordtype">float</emphasis>&#32;bTime,
00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;extrapolatedTime)&#32;{
00488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.SlerpUnclamped(a,&#32;b,&#32;extrapolatedTime.MapUnclamped(aTime,&#32;bTime,&#32;0f,&#32;1f));
00489 &#32;&#32;&#32;&#32;}
00490 
00495 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;NextTuple(IList&lt;int&gt;&#32;tuple,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxValue)&#32;{
00496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NextTuple(tuple,&#32;i&#32;=&gt;&#32;(i&#32;+&#32;1)&#32;%&#32;maxValue);
00497 &#32;&#32;&#32;&#32;}
00498 
00510 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;NextTuple&lt;T&gt;(IList&lt;T&gt;&#32;tuple,&#32;Func&lt;T,&#32;T&gt;&#32;nextItem)&#32;where&#32;T&#32;:&#32;IComparable&lt;T&gt;&#32;{
00511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>&#32;=&#32;tuple.Count&#32;-&#32;1;
00512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(index&#32;&gt;=&#32;0)&#32;{
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;value&#32;=&#32;tuple[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>];
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;newValue&#32;=&#32;nextItem(value);
00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tuple[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>]&#32;=&#32;newValue;
00516 
00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newValue.CompareTo(value)&#32;&gt;&#32;0)&#32;{
00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00520 
00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>--;
00522 &#32;&#32;&#32;&#32;&#32;&#32;}
00523 
00524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00525 &#32;&#32;&#32;&#32;}
00526 
00527 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00528 
00529 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Array&#32;Utils</emphasis>
00530 
00534 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T[]&#32;ClearWithDefaults&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;T[]&#32;arr)&#32;{
00535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;arr.Length;&#32;i++)&#32;{
00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arr[i]&#32;=&#32;<emphasis role="keywordflow">default</emphasis>(T);
00537 &#32;&#32;&#32;&#32;&#32;&#32;}
00538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;arr;
00539 &#32;&#32;&#32;&#32;}
00540 
00544 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T[]&#32;ClearWith&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;T[]&#32;arr,&#32;T&#32;value)&#32;{
00545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;arr.Length;&#32;i++)&#32;{
00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arr[i]&#32;=&#32;value;
00547 &#32;&#32;&#32;&#32;&#32;&#32;}
00548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;arr;
00549 &#32;&#32;&#32;&#32;}
00550 
00551 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00552 
00553 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;List&#32;Utils</emphasis>
00554 
00555 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;EnsureListExists&lt;T&gt;(ref&#32;List&lt;T&gt;&#32;list)&#32;{
00556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;T&gt;();
00558 &#32;&#32;&#32;&#32;&#32;&#32;}
00559 &#32;&#32;&#32;&#32;}
00560 
00561 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;EnsureListCount&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count)&#32;{
00562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list.Count&#32;==&#32;count)&#32;<emphasis role="keywordflow">return</emphasis>;
00563 
00564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(list.Count&#32;&lt;&#32;count)&#32;{
00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.Add(<emphasis role="keywordflow">default</emphasis>(T));
00566 &#32;&#32;&#32;&#32;&#32;&#32;}
00567 
00568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(list.Count&#32;&gt;&#32;count)&#32;{
00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.RemoveAt(list.Count&#32;-&#32;1);
00570 &#32;&#32;&#32;&#32;&#32;&#32;}
00571 &#32;&#32;&#32;&#32;}
00572 
00573 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;EnsureListCount&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count,&#32;Func&lt;T&gt;&#32;createT,&#32;Action&lt;T&gt;&#32;deleteT&#32;=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(list.Count&#32;&lt;&#32;count)&#32;{
00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.Add(createT());
00576 &#32;&#32;&#32;&#32;&#32;&#32;}
00577 
00578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(list.Count&#32;&gt;&#32;count)&#32;{
00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;tempT&#32;=&#32;list[list.Count&#32;-&#32;1];
00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.RemoveAt(list.Count&#32;-&#32;1);
00581 
00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(deleteT&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deleteT(tempT);
00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00585 &#32;&#32;&#32;&#32;&#32;&#32;}
00586 &#32;&#32;&#32;&#32;}
00587 
00591 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Add&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;T&#32;t0,&#32;T&#32;t1)&#32;{
00592 &#32;&#32;&#32;&#32;&#32;&#32;list.Add(t0);
00593 &#32;&#32;&#32;&#32;&#32;&#32;list.Add(t1);
00594 &#32;&#32;&#32;&#32;}
00595 
00599 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Add&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;T&#32;t0,&#32;T&#32;t1,&#32;T&#32;t2)&#32;{
00600 &#32;&#32;&#32;&#32;&#32;&#32;list.Add(t0);
00601 &#32;&#32;&#32;&#32;&#32;&#32;list.Add(t1);
00602 &#32;&#32;&#32;&#32;&#32;&#32;list.Add(t2);
00603 &#32;&#32;&#32;&#32;}
00604 
00608 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Add&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;T&#32;t0,&#32;T&#32;t1,&#32;T&#32;t2,&#32;T&#32;t3)&#32;{
00609 &#32;&#32;&#32;&#32;&#32;&#32;list.Add(t0);
00610 &#32;&#32;&#32;&#32;&#32;&#32;list.Add(t1);
00611 &#32;&#32;&#32;&#32;&#32;&#32;list.Add(t2);
00612 &#32;&#32;&#32;&#32;&#32;&#32;list.Add(t3);
00613 &#32;&#32;&#32;&#32;}
00614 
00615 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00616 
00617 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00618 
00619 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Unity&#32;Utilities</emphasis>
00620 
00621 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Unity&#32;Object&#32;Utils</emphasis>
00622 
00630 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;FindObjectInHierarchy&lt;T&gt;()&#32;where&#32;T&#32;:&#32;<link linkend="_namespace_unity_engine">UnityEngine</link>.<link linkend="__t_m_pro___font_asset_creator_window_8cs_1aef19bab18b9814edeef255c43e4f6bbc">Object</link>&#32;{
00631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Resources.FindObjectsOfTypeAll&lt;T&gt;().<link linkend="_struct_leap_1_1_unity_1_1_query_1_1_query">Query</link>()
00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Where(o&#32;=&gt;&#32;{
00633 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Exclude&#32;prefabs.</emphasis>
00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;prefabType&#32;=&#32;<link linkend="_namespace_unity_editor">UnityEditor</link>.PrefabUtility.GetPrefabType(o);
00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prefabType&#32;==&#32;<link linkend="_namespace_unity_editor">UnityEditor</link>.PrefabType.ModelPrefab
00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;prefabType&#32;==&#32;<link linkend="_namespace_unity_editor">UnityEditor</link>.PrefabType.Prefab)&#32;{
00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00640 <emphasis role="preprocessor">#endif</emphasis>
00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;})
00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.FirstOrDefault();
00644 &#32;&#32;&#32;&#32;}
00645 
00646 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00647 
00648 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Transform&#32;Utils</emphasis>
00649 
00653 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ChildrenEnumerator&#32;GetChildren(<emphasis role="keyword">this</emphasis>&#32;Transform&#32;t)&#32;{
00654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;ChildrenEnumerator(t);
00655 &#32;&#32;&#32;&#32;}
00656 
<anchor xml:id="__utils_8cs_source_1l00657"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator">00657</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator">ChildrenEnumerator</link>&#32;:&#32;IEnumerator&lt;Transform&gt;&#32;{
00658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Transform&#32;_t;
00659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_idx;
00660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_count;
00661 
<anchor xml:id="__utils_8cs_source_1l00662"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1ad3bf2e5f6ba1faf2762a1a109cc44d0a">00662</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1ad3bf2e5f6ba1faf2762a1a109cc44d0a">ChildrenEnumerator</link>(Transform&#32;t)&#32;{
00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_t&#32;=&#32;t;
00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_idx&#32;=&#32;-1;
00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_count&#32;=&#32;t.childCount;
00666 &#32;&#32;&#32;&#32;&#32;&#32;}
00667 
<anchor xml:id="__utils_8cs_source_1l00668"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a3f4ece6621b38b625ca87fc7f19f6c8d">00668</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator">ChildrenEnumerator</link>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a3f4ece6621b38b625ca87fc7f19f6c8d">GetEnumerator</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;&#32;}
00669 
<anchor xml:id="__utils_8cs_source_1l00670"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a12e2f65f8c2cd04df418fcd7d05b9758">00670</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a12e2f65f8c2cd04df418fcd7d05b9758">MoveNext</link>()&#32;{
00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_idx&#32;&lt;&#32;_count)&#32;_idx&#32;+=&#32;1;
00672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_idx&#32;==&#32;_count)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
00673 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__utils_8cs_source_1l00674"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a68c62e8621daa51abec5138c359c2534">00674</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Transform&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a68c62e8621daa51abec5138c359c2534">Current</link>&#32;{
00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_t&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;?&#32;null&#32;:&#32;_t.GetChild(_idx);&#32;}
00676 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__utils_8cs_source_1l00677"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a831a35b2ce2e021c05df7af0d66cac80">00677</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;System.Collections.IEnumerator.Current&#32;{&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a831a35b2ce2e021c05df7af0d66cac80">Current</link>;&#32;}&#32;}
<anchor xml:id="__utils_8cs_source_1l00678"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a4ba9a25338b9c3611cb6a4480f2d1073">00678</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a4ba9a25338b9c3611cb6a4480f2d1073">Reset</link>()&#32;{
00679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_idx&#32;=&#32;-1;
00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_count&#32;=&#32;_t.childCount;
00681 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__utils_8cs_source_1l00682"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a52710b9027e8afc53f63b3f0302303a8">00682</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_children_enumerator_1a52710b9027e8afc53f63b3f0302303a8">Dispose</link>()&#32;{&#32;}
00683 &#32;&#32;&#32;&#32;}
00684 
00689 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ResetLocalTransform(<emphasis role="keyword">this</emphasis>&#32;Transform&#32;t)&#32;{
00690 &#32;&#32;&#32;&#32;&#32;&#32;t.localPosition&#32;=&#32;Vector3.zero;
00691 &#32;&#32;&#32;&#32;&#32;&#32;t.localRotation&#32;=&#32;Quaternion.identity;
00692 &#32;&#32;&#32;&#32;&#32;&#32;t.localScale&#32;=&#32;Vector3.one;
00693 &#32;&#32;&#32;&#32;}
00694 
00699 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ResetLocalPose(<emphasis role="keyword">this</emphasis>&#32;Transform&#32;t)&#32;{
00700 &#32;&#32;&#32;&#32;&#32;&#32;t.localPosition&#32;=&#32;Vector3.zero;
00701 &#32;&#32;&#32;&#32;&#32;&#32;t.localRotation&#32;=&#32;Quaternion.identity;
00702 &#32;&#32;&#32;&#32;}
00703 
00704 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00705 
00706 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Component&#32;Utils</emphasis>
00707 
00737 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;FindOwnedChildComponents&lt;ComponentType,&#32;OwnerType&gt;
00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(OwnerType&#32;rootObj,
00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;ComponentType&gt;&#32;ownedComponents,
00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;includeInactiveObjects&#32;=&#32;<emphasis role="keyword">false</emphasis>)
00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where&#32;OwnerType&#32;:&#32;Component&#32;{
00742 &#32;&#32;&#32;&#32;&#32;&#32;ownedComponents.Clear();
00743 &#32;&#32;&#32;&#32;&#32;&#32;Stack&lt;Transform&gt;&#32;toVisit&#32;=&#32;Pool&lt;Stack&lt;Transform&gt;&gt;.Spawn();
00744 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;ComponentType&gt;&#32;componentsBuffer&#32;=&#32;Pool&lt;List&lt;ComponentType&gt;&gt;.Spawn();
00745 
00746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toVisit.Push(rootObj.transform);
00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Transform&#32;curTransform;
00749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(toVisit.Count&#32;&gt;&#32;0)&#32;{
00750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curTransform&#32;=&#32;toVisit.Pop();
00751 
00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Recursively&#32;search&#32;children&#32;and&#32;children&apos;s&#32;children.</emphasis>
00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;curTransform.GetChildren())&#32;{
00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ignore&#32;children&#32;with&#32;OwnerType&#32;components&#32;of&#32;their&#32;own;&#32;its&#32;own&#32;OwnerType</emphasis>
00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;component&#32;owns&#32;its&#32;own&#32;ComponentType&#32;components&#32;and&#32;the&#32;ComponentType</emphasis>
00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;components&#32;of&#32;its&#32;children.</emphasis>
00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(child.GetComponent&lt;OwnerType&gt;()&#32;==&#32;<emphasis role="keyword">null</emphasis>
00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(includeInactiveObjects&#32;||&#32;child.gameObject.activeInHierarchy))&#32;{
00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toVisit.Push(child);
00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00762 
00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;we&apos;ll&#32;visit&#32;every&#32;valid&#32;child,&#32;all&#32;we&#32;need&#32;to&#32;do&#32;is&#32;add&#32;the</emphasis>
00764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ComponentType&#32;components&#32;of&#32;every&#32;transform&#32;we&#32;visit.</emphasis>
00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;componentsBuffer.Clear();
00766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curTransform.GetComponents&lt;ComponentType&gt;(componentsBuffer);
00767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;component&#32;<emphasis role="keywordflow">in</emphasis>&#32;componentsBuffer)&#32;{
00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ownedComponents.Add(component);
00769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00771 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">finally</emphasis>&#32;{
00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toVisit.Clear();
00773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pool&lt;Stack&lt;Transform&gt;&gt;.Recycle(toVisit);
00774 
00775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;componentsBuffer.Clear();
00776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pool&lt;List&lt;ComponentType&gt;&gt;.Recycle(componentsBuffer);
00777 &#32;&#32;&#32;&#32;&#32;&#32;}
00778 &#32;&#32;&#32;&#32;}
00779 
00780 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00781 
00782 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Orientation&#32;Utils</emphasis>
00783 
00794 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;LookAwayFrom(<emphasis role="keyword">this</emphasis>&#32;Transform&#32;thisTransform,&#32;Transform&#32;transform)&#32;{
00795 &#32;&#32;&#32;&#32;&#32;&#32;thisTransform.rotation&#32;=&#32;Quaternion.LookRotation(thisTransform.position&#32;-&#32;transform.position,&#32;Vector3.up);
00796 &#32;&#32;&#32;&#32;}
00797 
00806 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;LookAwayFrom(<emphasis role="keyword">this</emphasis>&#32;Transform&#32;thisTransform,&#32;Transform&#32;transform,&#32;Vector3&#32;upwards)&#32;{
00807 &#32;&#32;&#32;&#32;&#32;&#32;thisTransform.rotation&#32;=&#32;Quaternion.LookRotation(thisTransform.position&#32;-&#32;transform.position,&#32;upwards);
00808 &#32;&#32;&#32;&#32;}
00809 
00810 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00811 
00812 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Vector3&#32;Utils</emphasis>
00813 
00819 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;ToVector3(<emphasis role="keyword">this</emphasis>&#32;Vector4&#32;v4)&#32;{
00820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(v4.x,&#32;v4.y,&#32;v4.z);
00821 &#32;&#32;&#32;&#32;}
00822 
00827 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;InLocalSpace(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;v,&#32;Transform&#32;t)&#32;{
00828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;t.InverseTransformPoint(v);
00829 &#32;&#32;&#32;&#32;}
00830 
00831 &#32;&#32;&#32;&#32;
00832 
00833 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00834 
00835 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Quaternion&#32;Utils</emphasis>
00836 
00843 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;ToAngleAxisVector(<emphasis role="keyword">this</emphasis>&#32;Quaternion&#32;q)&#32;{
00844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;angle;
00845 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;axis;
00846 &#32;&#32;&#32;&#32;&#32;&#32;q.ToAngleAxis(out&#32;angle,&#32;out&#32;axis);
00847 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;axis&#32;*&#32;angle;
00848 &#32;&#32;&#32;&#32;}
00849 
00854 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;QuaternionFromAngleAxisVector(Vector3&#32;angleAxisVector)&#32;{
00855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(angleAxisVector&#32;==&#32;Vector3.zero)&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.identity;
00856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.AngleAxis(angleAxisVector.magnitude,&#32;angleAxisVector);
00857 &#32;&#32;&#32;&#32;}
00858 
00864 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;ToNormalized(<emphasis role="keyword">this</emphasis>&#32;Quaternion&#32;quaternion)&#32;{
00865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;x&#32;=&#32;quaternion.x,&#32;y&#32;=&#32;quaternion.y,&#32;z&#32;=&#32;quaternion.z,&#32;w&#32;=&#32;quaternion.w;
00866 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;magnitude&#32;=&#32;Mathf.Sqrt(x&#32;*&#32;x&#32;+&#32;y&#32;*&#32;y&#32;+&#32;z&#32;*&#32;z&#32;+&#32;w&#32;*&#32;w);
00867 
00868 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Mathf.Approximately(magnitude,&#32;0f))&#32;{
00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.identity;
00870 &#32;&#32;&#32;&#32;&#32;&#32;}
00871 
00872 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Quaternion(x&#32;/&#32;magnitude,&#32;y&#32;/&#32;magnitude,&#32;z&#32;/&#32;magnitude,&#32;w&#32;/&#32;magnitude);
00873 &#32;&#32;&#32;&#32;}
00874 
00884 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;FaceTargetWithoutTwist(Vector3&#32;fromPosition,
00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;targetPosition,
00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;flip180&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;{
00887 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FaceTargetWithoutTwist(fromPosition,&#32;targetPosition,&#32;Vector3.up,&#32;flip180);
00888 &#32;&#32;&#32;&#32;}
00889 
00898 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;FaceTargetWithoutTwist(Vector3&#32;fromPosition,
00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;targetPosition,
00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;upwardDirection,
00901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;flip180&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;{
00902 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;objToTarget&#32;=&#32;targetPosition&#32;-&#32;fromPosition;
00903 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.LookRotation((flip180&#32;?&#32;-1&#32;:&#32;1)&#32;*&#32;objToTarget,
00904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;upwardDirection);
00905 &#32;&#32;&#32;&#32;}
00906 
00907 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;Flipped(<emphasis role="keyword">this</emphasis>&#32;Quaternion&#32;q)&#32;{
00908 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Quaternion(-q.x,&#32;-q.y,&#32;-q.z,&#32;-q.w);
00909 &#32;&#32;&#32;&#32;}
00910 
00911 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Compression</emphasis>
00912 
00927 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;CompressQuatToBytes(Quaternion&#32;quat,
00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,
00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00930 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;largest&#32;=&#32;0;
00931 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;a,&#32;b,&#32;c;
00932 
00933 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;abs_w&#32;=&#32;Mathf.Abs(quat.w);
00934 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;abs_x&#32;=&#32;Mathf.Abs(quat.x);
00935 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;abs_y&#32;=&#32;Mathf.Abs(quat.y);
00936 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;abs_z&#32;=&#32;Mathf.Abs(quat.z);
00937 
00938 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;largest_value&#32;=&#32;abs_x;
00939 
00940 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(abs_y&#32;&gt;&#32;largest_value)&#32;{
00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;largest&#32;=&#32;1;
00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;largest_value&#32;=&#32;abs_y;
00943 &#32;&#32;&#32;&#32;&#32;&#32;}
00944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(abs_z&#32;&gt;&#32;largest_value)&#32;{
00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;largest&#32;=&#32;2;
00946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;largest_value&#32;=&#32;abs_z;
00947 &#32;&#32;&#32;&#32;&#32;&#32;}
00948 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(abs_w&#32;&gt;&#32;largest_value)&#32;{
00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;largest&#32;=&#32;3;
00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;largest_value&#32;=&#32;abs_w;
00951 &#32;&#32;&#32;&#32;&#32;&#32;}
00952 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(quat[largest]&#32;&gt;=&#32;0f)&#32;{
00953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;quat[(largest&#32;+&#32;1)&#32;%&#32;4];
00954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b&#32;=&#32;quat[(largest&#32;+&#32;2)&#32;%&#32;4];
00955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;quat[(largest&#32;+&#32;3)&#32;%&#32;4];
00956 &#32;&#32;&#32;&#32;&#32;&#32;}
00957 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;-quat[(largest&#32;+&#32;1)&#32;%&#32;4];
00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b&#32;=&#32;-quat[(largest&#32;+&#32;2)&#32;%&#32;4];
00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;-quat[(largest&#32;+&#32;3)&#32;%&#32;4];
00961 &#32;&#32;&#32;&#32;&#32;&#32;}
00962 
00963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;serialize</emphasis>
00964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;minimum&#32;=&#32;-1.0f&#32;/&#32;1.414214f;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;note:&#32;1.0f&#32;/&#32;sqrt(2)</emphasis>
00965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;maximum&#32;=&#32;+1.0f&#32;/&#32;1.414214f;
00966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;delta&#32;=&#32;maximum&#32;-&#32;minimum;
00967 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint&#32;maxIntegerValue&#32;=&#32;(1&#32;&lt;&lt;&#32;10)&#32;-&#32;1;&#32;<emphasis role="comment">//&#32;10&#32;bits</emphasis>
00968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxIntegerValueF&#32;=&#32;(float)maxIntegerValue;
00969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;normalizedValue;
00970 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;integerValue;
00971 
00972 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;sentData&#32;=&#32;((uint)largest)&#32;&lt;&lt;&#32;30;
00973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a</emphasis>
00974 &#32;&#32;&#32;&#32;&#32;&#32;normalizedValue&#32;=&#32;Mathf.Clamp01((a&#32;-&#32;minimum)&#32;/&#32;delta);
00975 &#32;&#32;&#32;&#32;&#32;&#32;integerValue&#32;=&#32;(uint)Mathf.Floor(normalizedValue&#32;*&#32;maxIntegerValueF&#32;+&#32;0.5f);
00976 &#32;&#32;&#32;&#32;&#32;&#32;sentData&#32;=&#32;sentData&#32;|&#32;((integerValue&#32;&amp;&#32;maxIntegerValue)&#32;&lt;&lt;&#32;20);
00977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;b</emphasis>
00978 &#32;&#32;&#32;&#32;&#32;&#32;normalizedValue&#32;=&#32;Mathf.Clamp01((b&#32;-&#32;minimum)&#32;/&#32;delta);
00979 &#32;&#32;&#32;&#32;&#32;&#32;integerValue&#32;=&#32;(uint)Mathf.Floor(normalizedValue&#32;*&#32;maxIntegerValueF&#32;+&#32;0.5f);
00980 &#32;&#32;&#32;&#32;&#32;&#32;sentData&#32;=&#32;sentData&#32;|&#32;((integerValue&#32;&amp;&#32;maxIntegerValue)&#32;&lt;&lt;&#32;10);
00981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;c</emphasis>
00982 &#32;&#32;&#32;&#32;&#32;&#32;normalizedValue&#32;=&#32;Mathf.Clamp01((c&#32;-&#32;minimum)&#32;/&#32;delta);
00983 &#32;&#32;&#32;&#32;&#32;&#32;integerValue&#32;=&#32;(uint)Mathf.Floor(normalizedValue&#32;*&#32;maxIntegerValueF&#32;+&#32;0.5f);
00984 &#32;&#32;&#32;&#32;&#32;&#32;sentData&#32;=&#32;sentData&#32;|&#32;(integerValue&#32;&amp;&#32;maxIntegerValue);
00985 
00986 &#32;&#32;&#32;&#32;&#32;&#32;BitConverterNonAlloc.GetBytes(sentData,&#32;buffer,&#32;ref&#32;offset);
00987 &#32;&#32;&#32;&#32;}
00988 
01002 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;DecompressBytesToQuat(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
01003 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;readData&#32;=&#32;BitConverterNonAlloc.ToUInt32(bytes,&#32;ref&#32;offset);
01004 
01005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;largest&#32;=&#32;(int)(readData&#32;&gt;&gt;&#32;30);
01006 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;a,&#32;b,&#32;c;
01007 
01008 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;minimum&#32;=&#32;-1.0f&#32;/&#32;1.414214f;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;note:&#32;1.0f&#32;/&#32;sqrt(2)</emphasis>
01009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;maximum&#32;=&#32;+1.0f&#32;/&#32;1.414214f;
01010 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;delta&#32;=&#32;maximum&#32;-&#32;minimum;
01011 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint&#32;maxIntegerValue&#32;=&#32;(1&#32;&lt;&lt;&#32;10)&#32;-&#32;1;&#32;<emphasis role="comment">//&#32;10&#32;bits</emphasis>
01012 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxIntegerValueF&#32;=&#32;(float)maxIntegerValue;
01013 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;integerValue;
01014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;normalizedValue;
01015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a</emphasis>
01016 &#32;&#32;&#32;&#32;&#32;&#32;integerValue&#32;=&#32;(readData&#32;&gt;&gt;&#32;20)&#32;&amp;&#32;maxIntegerValue;
01017 &#32;&#32;&#32;&#32;&#32;&#32;normalizedValue&#32;=&#32;(float)integerValue&#32;/&#32;maxIntegerValueF;
01018 &#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;(normalizedValue&#32;*&#32;delta)&#32;+&#32;minimum;
01019 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;b</emphasis>
01020 &#32;&#32;&#32;&#32;&#32;&#32;integerValue&#32;=&#32;(readData&#32;&gt;&gt;&#32;10)&#32;&amp;&#32;maxIntegerValue;
01021 &#32;&#32;&#32;&#32;&#32;&#32;normalizedValue&#32;=&#32;(float)integerValue&#32;/&#32;maxIntegerValueF;
01022 &#32;&#32;&#32;&#32;&#32;&#32;b&#32;=&#32;(normalizedValue&#32;*&#32;delta)&#32;+&#32;minimum;
01023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;c</emphasis>
01024 &#32;&#32;&#32;&#32;&#32;&#32;integerValue&#32;=&#32;readData&#32;&amp;&#32;maxIntegerValue;
01025 &#32;&#32;&#32;&#32;&#32;&#32;normalizedValue&#32;=&#32;(float)integerValue&#32;/&#32;maxIntegerValueF;
01026 &#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;(normalizedValue&#32;*&#32;delta)&#32;+&#32;minimum;
01027 
01028 &#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;value&#32;=&#32;Quaternion.identity;
01029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;d&#32;=&#32;Mathf.Sqrt(1f&#32;-&#32;a&#32;*&#32;a&#32;-&#32;b&#32;*&#32;b&#32;-&#32;c&#32;*&#32;c);
01030 &#32;&#32;&#32;&#32;&#32;&#32;value[largest]&#32;=&#32;d;
01031 &#32;&#32;&#32;&#32;&#32;&#32;value[(largest&#32;+&#32;1)&#32;%&#32;4]&#32;=&#32;a;
01032 &#32;&#32;&#32;&#32;&#32;&#32;value[(largest&#32;+&#32;2)&#32;%&#32;4]&#32;=&#32;b;
01033 &#32;&#32;&#32;&#32;&#32;&#32;value[(largest&#32;+&#32;3)&#32;%&#32;4]&#32;=&#32;c;
01034 
01035 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;
01036 &#32;&#32;&#32;&#32;}
01037 
01038 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01039 
01040 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01041 
01042 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Matrix4x4&#32;Utils</emphasis>
01043 
01044 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Matrix4x4&#32;CompMul(Matrix4x4&#32;m,&#32;<emphasis role="keywordtype">float</emphasis>&#32;f)&#32;{
01045 <emphasis role="preprocessor">#if&#32;UNITY_2017_1_OR_NEWER</emphasis>
01046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Matrix4x4(m.GetColumn(0)&#32;*&#32;f,
01047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m.GetColumn(1)&#32;*&#32;f,
01048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m.GetColumn(2)&#32;*&#32;f,
01049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m.GetColumn(3)&#32;*&#32;f);
01050 <emphasis role="preprocessor">#else</emphasis>
01051 &#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4&#32;toReturn&#32;=&#32;m;
01052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;4;&#32;i++)&#32;{
01053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toReturn.SetColumn(i,&#32;toReturn.GetColumn(i)&#32;*&#32;f);
01054 &#32;&#32;&#32;&#32;&#32;&#32;}
01055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toReturn;
01056 <emphasis role="preprocessor">#endif</emphasis>
01057 
01058 &#32;&#32;&#32;&#32;}
01059 
01060 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01061 
01062 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Physics&#32;Utils</emphasis>
01063 
01071 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;IgnoreCollisions(GameObject&#32;first,&#32;GameObject&#32;second,
01072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;{
01073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;second&#32;==&#32;<emphasis role="keyword">null</emphasis>)
01074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01075 
01076 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;firstColliders&#32;=&#32;Pool&lt;List&lt;Collider&gt;&gt;.Spawn();&#32;firstColliders.Clear();
01077 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;secondColliders&#32;=&#32;Pool&lt;List&lt;Collider&gt;&gt;.Spawn();&#32;secondColliders.Clear();
01078 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
01079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first.GetComponentsInChildren(firstColliders);
01080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second.GetComponentsInChildren(secondColliders);
01081 
01082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;firstColliders.Count;&#32;++i)&#32;{
01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;secondColliders.Count;&#32;++j)&#32;{
01084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(firstColliders[i]&#32;!=&#32;secondColliders[j]&#32;&amp;&amp;
01085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstColliders[i].enabled&#32;&amp;&amp;&#32;secondColliders[j].enabled)&#32;{
01086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_1_1_unity_1a186e5eb0a2b743f1f6b79346f0ab8ad0a50ae99e9c35446c2580e4b540b0fd104">Physics</link>.IgnoreCollision(firstColliders[i],&#32;secondColliders[j],&#32;ignore);
01087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01090 &#32;&#32;&#32;&#32;&#32;&#32;}
01091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">finally</emphasis>&#32;{
01092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;firstColliders.Clear();&#32;Pool&lt;List&lt;Collider&gt;&gt;.Recycle(firstColliders);
01093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;secondColliders.Clear();&#32;Pool&lt;List&lt;Collider&gt;&gt;.Recycle(secondColliders);
01094 &#32;&#32;&#32;&#32;&#32;&#32;}
01095 &#32;&#32;&#32;&#32;}
01096 
01097 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01098 
01099 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Collider&#32;Utils</emphasis>
01100 
01101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Capsule&#32;Collider&#32;Utils</emphasis>
01102 
01103 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;GetDirection(<emphasis role="keyword">this</emphasis>&#32;CapsuleCollider&#32;capsule)&#32;{
01104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(capsule.direction)&#32;{
01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector3.right;
01106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector3.up;
01107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector3.forward;
01108 &#32;&#32;&#32;&#32;&#32;&#32;}
01109 &#32;&#32;&#32;&#32;}
01110 
01111 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;GetEffectiveRadius(<emphasis role="keyword">this</emphasis>&#32;CapsuleCollider&#32;capsule)&#32;{
01112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;capsule.radius&#32;*&#32;capsule.GetEffectiveRadiusMultiplier();
01113 &#32;&#32;&#32;&#32;}
01114 
01115 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;GetEffectiveRadiusMultiplier(<emphasis role="keyword">this</emphasis>&#32;CapsuleCollider&#32;capsule)&#32;{
01116 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;effRadiusMult&#32;=&#32;0f;
01117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(capsule.direction)&#32;{
01118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:
01119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;effRadiusMult&#32;=&#32;Swizzle.Swizzle.yz(capsule.transform.lossyScale).CompMax();
01120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
01122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;effRadiusMult&#32;=&#32;Swizzle.Swizzle.xz(capsule.transform.lossyScale).CompMax();
01123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
01125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
01126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;effRadiusMult&#32;=&#32;Swizzle.Swizzle.xy(capsule.transform.lossyScale).CompMax();
01127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01128 &#32;&#32;&#32;&#32;&#32;&#32;}
01129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;effRadiusMult;
01130 &#32;&#32;&#32;&#32;}
01131 
01132 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetCapsulePoints(<emphasis role="keyword">this</emphasis>&#32;CapsuleCollider&#32;capsule,&#32;out&#32;Vector3&#32;a,
01133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;Vector3&#32;b)&#32;{
01134 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;effRadiusMult&#32;=&#32;capsule.GetEffectiveRadiusMultiplier();
01135 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;capsuleDir&#32;=&#32;capsule.GetDirection();
01136 
01137 &#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;capsuleDir&#32;*&#32;(capsule.height&#32;/&#32;2f);
01138 &#32;&#32;&#32;&#32;&#32;&#32;b&#32;=&#32;-a;
01139 
01140 &#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;capsule.transform.TransformPoint(a);
01141 &#32;&#32;&#32;&#32;&#32;&#32;b&#32;=&#32;capsule.transform.TransformPoint(b);
01142 
01143 &#32;&#32;&#32;&#32;&#32;&#32;a&#32;-=&#32;capsuleDir&#32;*&#32;effRadiusMult&#32;*&#32;capsule.radius;
01144 &#32;&#32;&#32;&#32;&#32;&#32;b&#32;+=&#32;capsuleDir&#32;*&#32;effRadiusMult&#32;*&#32;capsule.radius;
01145 &#32;&#32;&#32;&#32;}
01146 
01151 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetCapsulePoints(<emphasis role="keyword">this</emphasis>&#32;CapsuleCollider&#32;capsule,&#32;Vector3&#32;a,&#32;Vector3&#32;b)&#32;{
01152 &#32;&#32;&#32;&#32;&#32;&#32;capsule.center&#32;=&#32;Vector3.zero;
01153 
01154 &#32;&#32;&#32;&#32;&#32;&#32;capsule.transform.position&#32;=&#32;(a&#32;+&#32;b)&#32;/&#32;2F;
01155 
01156 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;capsuleDirection&#32;=&#32;capsule.GetDirection();
01157 
01158 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;capsuleDirWorldSpace&#32;=&#32;capsule.transform.TransformDirection(capsuleDirection);
01159 &#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;necessaryRotation&#32;=&#32;Quaternion.FromToRotation(capsuleDirWorldSpace,&#32;a&#32;-&#32;capsule.transform.position);
01160 &#32;&#32;&#32;&#32;&#32;&#32;capsule.transform.rotation&#32;=&#32;necessaryRotation&#32;*&#32;capsule.transform.rotation;
01161 
01162 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;aCapsuleSpace&#32;=&#32;capsule.transform.InverseTransformPoint(a);
01163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;capsuleSpaceDistToA&#32;=&#32;aCapsuleSpace.magnitude;
01164 &#32;&#32;&#32;&#32;&#32;&#32;capsule.height&#32;=&#32;(capsuleSpaceDistToA&#32;+&#32;capsule.radius)&#32;*&#32;2;
01165 &#32;&#32;&#32;&#32;}
01166 
01167 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01168 
01180 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;FindColliders&lt;T&gt;(GameObject&#32;obj,&#32;List&lt;T&gt;&#32;colliders,
01181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;includeInactiveObjects&#32;=&#32;<emphasis role="keyword">false</emphasis>)
01182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where&#32;T&#32;:&#32;Collider&#32;{
01183 &#32;&#32;&#32;&#32;&#32;&#32;colliders.Clear();
01184 &#32;&#32;&#32;&#32;&#32;&#32;Stack&lt;Transform&gt;&#32;toVisit&#32;=&#32;Pool&lt;Stack&lt;Transform&gt;&gt;.Spawn();
01185 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;T&gt;&#32;collidersBuffer&#32;=&#32;Pool&lt;List&lt;T&gt;&gt;.Spawn();
01186 
01187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
01188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Traverse&#32;the&#32;hierarchy&#32;of&#32;this&#32;object&apos;s&#32;transform&#32;to&#32;find</emphasis>
01189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;of&#32;its&#32;Colliders.</emphasis>
01190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toVisit.Push(obj.transform);
01191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Transform&#32;curTransform;
01192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(toVisit.Count&#32;&gt;&#32;0)&#32;{
01193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curTransform&#32;=&#32;toVisit.Pop();
01194 
01195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Recursively&#32;search&#32;children&#32;and&#32;children&apos;s&#32;children</emphasis>
01196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;curTransform.GetChildren())&#32;{
01197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ignore&#32;children&#32;with&#32;Rigidbodies&#32;of&#32;their&#32;own;&#32;its&#32;own&#32;Rigidbody</emphasis>
01198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;owns&#32;its&#32;own&#32;colliders&#32;and&#32;the&#32;colliders&#32;of&#32;its&#32;children</emphasis>
01199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(child.GetComponent&lt;Rigidbody&gt;()&#32;==&#32;<emphasis role="keyword">null</emphasis>
01200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(includeInactiveObjects&#32;||&#32;child.gameObject.activeSelf))&#32;{
01201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toVisit.Push(child);
01202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01204 
01205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;we&apos;ll&#32;visit&#32;every&#32;valid&#32;child,&#32;all&#32;we&#32;need&#32;to&#32;do&#32;is&#32;add&#32;the&#32;colliders</emphasis>
01206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;of&#32;every&#32;transform&#32;we&#32;visit.</emphasis>
01207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;collidersBuffer.Clear();
01208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curTransform.GetComponents&lt;T&gt;(collidersBuffer);
01209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;collider&#32;<emphasis role="keywordflow">in</emphasis>&#32;collidersBuffer)&#32;{
01210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colliders.Add(collider);
01211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01213 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">finally</emphasis>&#32;{
01214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toVisit.Clear();
01215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pool&lt;Stack&lt;Transform&gt;&gt;.Recycle(toVisit);
01216 
01217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;collidersBuffer.Clear();
01218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pool&lt;List&lt;T&gt;&gt;.Recycle(collidersBuffer);
01219 &#32;&#32;&#32;&#32;&#32;&#32;}
01220 &#32;&#32;&#32;&#32;}
01221 
01222 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01223 
01224 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Color&#32;Utils</emphasis>
01225 
01226 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Color&#32;WithAlpha(<emphasis role="keyword">this</emphasis>&#32;Color&#32;color,&#32;<emphasis role="keywordtype">float</emphasis>&#32;alpha)&#32;{
01227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Color(color.r,&#32;color.g,&#32;color.b,&#32;alpha);
01228 &#32;&#32;&#32;&#32;}
01229 
01234 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Color&#32;ParseHtmlColorString(<emphasis role="keywordtype">string</emphasis>&#32;htmlString)&#32;{
01235 &#32;&#32;&#32;&#32;&#32;&#32;Color&#32;color;
01236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ColorUtility.TryParseHtmlString(htmlString,&#32;out&#32;color))&#32;{
01237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;ArgumentException(<emphasis role="stringliteral">&quot;The&#32;string&#32;[&quot;</emphasis>&#32;+&#32;htmlString&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;is&#32;not&#32;a&#32;valid&#32;color&#32;code.&#32;&#32;Valid&#32;color&#32;codes&#32;include:\n&quot;</emphasis>&#32;+
01238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;#RGB\n&quot;</emphasis>&#32;+
01239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;#RGBA\n&quot;</emphasis>&#32;+
01240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;#RRGGBB\n&quot;</emphasis>&#32;+
01241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;#RRGGBBAA\n&quot;</emphasis>&#32;+
01242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;For&#32;more&#32;information,&#32;see&#32;the&#32;documentation&#32;for&#32;ColorUtility.TryParseHtmlString.&quot;</emphasis>);
01243 &#32;&#32;&#32;&#32;&#32;&#32;}
01244 
01245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;color;
01246 &#32;&#32;&#32;&#32;}
01247 
01252 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Color&#32;LerpHSV(<emphasis role="keyword">this</emphasis>&#32;Color&#32;color,&#32;Color&#32;towardsColor,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
01253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;h0,&#32;s0,&#32;v0;
01254 &#32;&#32;&#32;&#32;&#32;&#32;Color.RGBToHSV(color,&#32;out&#32;h0,&#32;out&#32;s0,&#32;out&#32;v0);
01255 
01256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;h1,&#32;s1,&#32;v1;
01257 &#32;&#32;&#32;&#32;&#32;&#32;Color.RGBToHSV(towardsColor,&#32;out&#32;h1,&#32;out&#32;s1,&#32;out&#32;v1);
01258 
01259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Cyclically&#32;lerp&#32;hue.&#32;(Input&#32;hues&#32;are&#32;always&#32;between&#32;0&#32;and&#32;1.)</emphasis>
01260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h0&#32;-&#32;h1&#32;&lt;&#32;-0.5f)&#32;h0&#32;+=&#32;1f;
01261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h0&#32;-&#32;h1&#32;&gt;&#32;0.5f)&#32;h1&#32;+=&#32;1f;
01262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;hL&#32;=&#32;Mathf.Lerp(h0,&#32;h1,&#32;t)&#32;%&#32;1f;
01263 
01264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;sL&#32;=&#32;Mathf.Lerp(s0,&#32;s1,&#32;t);
01265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;vL&#32;=&#32;Mathf.Lerp(v0,&#32;v1,&#32;t);
01266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Color.HSVToRGB(hL,&#32;sL,&#32;vL);
01267 &#32;&#32;&#32;&#32;}
01268 
01272 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;LerpHue(<emphasis role="keywordtype">float</emphasis>&#32;h0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;h1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
01273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enforce&#32;hue&#32;values&#32;between&#32;0f&#32;and&#32;1f.</emphasis>
01274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h0&#32;&lt;&#32;0f)&#32;h0&#32;=&#32;1f&#32;-&#32;(-h0&#32;%&#32;1f);
01275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h1&#32;&lt;&#32;0f)&#32;h1&#32;=&#32;1f&#32;-&#32;(-h1&#32;%&#32;1f);
01276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h0&#32;&gt;&#32;1f)&#32;h0&#32;=&#32;h0&#32;%&#32;1f;
01277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h1&#32;&gt;&#32;1f)&#32;h1&#32;=&#32;h1&#32;%&#32;1f;
01278 
01279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h0&#32;-&#32;h1&#32;&lt;&#32;-0.5f)&#32;h0&#32;+=&#32;1f;
01280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h0&#32;-&#32;h1&#32;&gt;&#32;0.5f)&#32;h1&#32;+=&#32;1f;
01281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Lerp(h0,&#32;h1,&#32;t)&#32;%&#32;1f;
01282 &#32;&#32;&#32;&#32;}
01283 
01284 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01285 
01286 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Gizmo&#32;Utils</emphasis>
01287 
01288 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DrawCircle(Vector3&#32;center,
01289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;normal,
01290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;radius,
01291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Color&#32;color,
01292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;quality&#32;=&#32;32,
01293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;duration&#32;=&#32;0,
01294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;depthTest&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;{
01295 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;planeA&#32;=&#32;Vector3.Slerp(normal,&#32;-normal,&#32;0.5f);
01296 &#32;&#32;&#32;&#32;&#32;&#32;DrawArc(360,&#32;center,&#32;planeA,&#32;normal,&#32;radius,&#32;color,&#32;quality);
01297 &#32;&#32;&#32;&#32;}
01298 
01299 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Adapted&#32;from:&#32;Zarrax&#32;(http://math.stackexchange.com/users/3035/zarrax),&#32;Parametric&#32;Equation&#32;of&#32;a&#32;Circle&#32;in&#32;3D&#32;Space?,&#32;</emphasis>
01300 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;URL&#32;(version:&#32;2014-09-09):&#32;http://math.stackexchange.com/q/73242&#32;*/</emphasis>
01301 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DrawArc(<emphasis role="keywordtype">float</emphasis>&#32;arc,
01302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;center,
01303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;forward,
01304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;normal,
01305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;radius,
01306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Color&#32;color,
01307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;quality&#32;=&#32;32)&#32;{
01308 
01309 &#32;&#32;&#32;&#32;&#32;&#32;Gizmos.color&#32;=&#32;color;
01310 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;right&#32;=&#32;Vector3.Cross(normal,&#32;forward).normalized;
01311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;deltaAngle&#32;=&#32;arc&#32;/&#32;quality;
01312 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;thisPoint&#32;=&#32;center&#32;+&#32;forward&#32;*&#32;radius;
01313 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;nextPoint&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3();
01314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;angle&#32;=&#32;0;&#32;Mathf.Abs(angle)&#32;&lt;=&#32;Mathf.Abs(arc);&#32;angle&#32;+=&#32;deltaAngle)&#32;{
01315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;cosAngle&#32;=&#32;Mathf.Cos(angle&#32;*&#32;Constants.DEG_TO_RAD);
01316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;sinAngle&#32;=&#32;Mathf.Sin(angle&#32;*&#32;Constants.DEG_TO_RAD);
01317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextPoint.x&#32;=&#32;center.x&#32;+&#32;radius&#32;*&#32;(cosAngle&#32;*&#32;forward.x&#32;+&#32;sinAngle&#32;*&#32;right.x);
01318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextPoint.y&#32;=&#32;center.y&#32;+&#32;radius&#32;*&#32;(cosAngle&#32;*&#32;forward.y&#32;+&#32;sinAngle&#32;*&#32;right.y);
01319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextPoint.z&#32;=&#32;center.z&#32;+&#32;radius&#32;*&#32;(cosAngle&#32;*&#32;forward.z&#32;+&#32;sinAngle&#32;*&#32;right.z);
01320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Gizmos.DrawLine(thisPoint,&#32;nextPoint);
01321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thisPoint&#32;=&#32;nextPoint;
01322 &#32;&#32;&#32;&#32;&#32;&#32;}
01323 &#32;&#32;&#32;&#32;}
01324 
01325 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DrawCone(Vector3&#32;origin,
01326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;direction,
01327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;angle,
01328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;height,
01329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Color&#32;color,
01330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;quality&#32;=&#32;4,
01331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;duration&#32;=&#32;0,
01332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;depthTest&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;{
01333 
01334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;step&#32;=&#32;height&#32;/&#32;quality;
01335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;q&#32;=&#32;step;&#32;q&#32;&lt;=&#32;height;&#32;q&#32;+=&#32;step)&#32;{
01336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DrawCircle(origin&#32;+&#32;direction&#32;*&#32;q,&#32;direction,&#32;Mathf.Tan(angle&#32;*&#32;Constants.DEG_TO_RAD)&#32;*&#32;q,&#32;color,&#32;quality&#32;*&#32;8,&#32;duration,&#32;depthTest);
01337 &#32;&#32;&#32;&#32;&#32;&#32;}
01338 &#32;&#32;&#32;&#32;}
01339 
01340 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01341 
01342 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Texture&#32;Utils</emphasis>
01343 
01344 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;TextureFormat[]&#32;_incompressibleFormats&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TextureFormat[]&#32;{
01345 &#32;&#32;&#32;&#32;&#32;&#32;TextureFormat.R16,
01346 &#32;&#32;&#32;&#32;&#32;&#32;TextureFormat.EAC_R,
01347 &#32;&#32;&#32;&#32;&#32;&#32;TextureFormat.EAC_R_SIGNED,
01348 &#32;&#32;&#32;&#32;&#32;&#32;TextureFormat.EAC_RG,
01349 &#32;&#32;&#32;&#32;&#32;&#32;TextureFormat.EAC_RG_SIGNED,
01350 &#32;&#32;&#32;&#32;&#32;&#32;TextureFormat.ETC_RGB4_3DS,
01351 &#32;&#32;&#32;&#32;&#32;&#32;TextureFormat.ETC_RGBA8_3DS
01352 &#32;&#32;&#32;&#32;};
01353 
01357 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsCompressible(TextureFormat&#32;format)&#32;{
01358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(format&#32;&lt;&#32;0)&#32;{
01359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01360 &#32;&#32;&#32;&#32;&#32;&#32;}
01361 
01362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Array.IndexOf(_incompressibleFormats,&#32;format)&#32;&lt;&#32;0;
01363 &#32;&#32;&#32;&#32;}
01364 
01365 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01366 
01367 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Rect&#32;Utils</emphasis>
01368 
01372 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;Area(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;rect)&#32;{
01373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rect.width&#32;*&#32;rect.height;
01374 &#32;&#32;&#32;&#32;}
01375 
01380 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;Extrude(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;margin)&#32;{
01381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r.x&#32;-&#32;margin,&#32;r.y&#32;-&#32;margin,
01382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.width&#32;+&#32;(margin&#32;*&#32;2f),&#32;r.height&#32;+&#32;(margin&#32;*&#32;2f));
01383 &#32;&#32;&#32;&#32;}
01384 
01389 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadInner(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding)&#32;{
01390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadInner(r,&#32;padding,&#32;padding,&#32;padding,&#32;padding);
01391 &#32;&#32;&#32;&#32;}
01392 
01399 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadInner(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padTop,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padBottom,
01400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;padLeft,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padRight)&#32;{
01401 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;r.x&#32;+&#32;padLeft;
01402 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;y&#32;=&#32;r.y&#32;+&#32;padBottom;
01403 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;w&#32;=&#32;r.width&#32;-&#32;padRight&#32;-&#32;padLeft;
01404 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;h&#32;=&#32;r.height&#32;-&#32;padTop&#32;-&#32;padBottom;
01405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(w&#32;&lt;&#32;0f)&#32;{
01406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;r.x&#32;+&#32;(padLeft&#32;/&#32;(padLeft&#32;+&#32;padRight))&#32;*&#32;r.width;
01407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;=&#32;0;
01408 &#32;&#32;&#32;&#32;&#32;&#32;}
01409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h&#32;&lt;&#32;0f)&#32;{
01410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;r.y&#32;+&#32;(padBottom&#32;/&#32;(padBottom&#32;+&#32;padTop))&#32;*&#32;r.height;
01411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h&#32;=&#32;0;
01412 &#32;&#32;&#32;&#32;&#32;&#32;}
01413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(x,&#32;y,&#32;w,&#32;h);
01414 &#32;&#32;&#32;&#32;}
01415 
01416 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Pad,&#32;No&#32;Out</emphasis>
01417 
01418 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadTop(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding)&#32;{
01419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadInner(r,&#32;padding,&#32;0f,&#32;0f,&#32;0f);
01420 &#32;&#32;&#32;&#32;}
01421 
01422 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadBottom(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding)&#32;{
01423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadInner(r,&#32;0f,&#32;padding,&#32;0f,&#32;0f);
01424 &#32;&#32;&#32;&#32;}
01425 
01426 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadLeft(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding)&#32;{
01427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadInner(r,&#32;0f,&#32;0f,&#32;padding,&#32;0f);
01428 &#32;&#32;&#32;&#32;}
01429 
01430 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadRight(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding)&#32;{
01431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadInner(r,&#32;0f,&#32;0f,&#32;0f,&#32;padding);
01432 &#32;&#32;&#32;&#32;}
01433 
01434 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01435 
01436 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Pad,&#32;With&#32;Out</emphasis>
01437 
01442 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadTop(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding,&#32;out&#32;Rect&#32;marginRect)&#32;{
01443 &#32;&#32;&#32;&#32;&#32;&#32;marginRect&#32;=&#32;r.TakeTop(padding);
01444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadTop(r,&#32;padding);
01445 &#32;&#32;&#32;&#32;}
01446 
01451 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadBottom(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding,&#32;out&#32;Rect&#32;marginRect)&#32;{
01452 &#32;&#32;&#32;&#32;&#32;&#32;marginRect&#32;=&#32;r.TakeBottom(padding);
01453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadBottom(r,&#32;padding);
01454 &#32;&#32;&#32;&#32;}
01455 
01460 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadLeft(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding,&#32;out&#32;Rect&#32;marginRect)&#32;{
01461 &#32;&#32;&#32;&#32;&#32;&#32;marginRect&#32;=&#32;r.TakeLeft(padding);
01462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadLeft(r,&#32;padding);
01463 &#32;&#32;&#32;&#32;}
01464 
01469 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadRight(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding,&#32;out&#32;Rect&#32;marginRect)&#32;{
01470 &#32;&#32;&#32;&#32;&#32;&#32;marginRect&#32;=&#32;r.TakeRight(padding);
01471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadRight(r,&#32;padding);
01472 &#32;&#32;&#32;&#32;}
01473 
01474 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01475 
01476 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Pad&#32;Percent,&#32;Two&#32;Sides</emphasis>
01477 
01478 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadTopBottomPercent(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padPercent)&#32;{
01479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;padHeight&#32;=&#32;r.height&#32;*&#32;padPercent;
01480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r.PadInner(padHeight,&#32;padHeight,&#32;0f,&#32;0f);
01481 &#32;&#32;&#32;&#32;}
01482 
01483 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadLeftRightPercent(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padPercent)&#32;{
01484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;padWidth&#32;=&#32;r.width&#32;*&#32;padPercent;
01485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r.PadInner(0f,&#32;0f,&#32;padWidth,&#32;padWidth);
01486 &#32;&#32;&#32;&#32;}
01487 
01488 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01489 
01490 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Pad&#32;Percent</emphasis>
01491 
01492 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadTopPercent(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padPercent)&#32;{
01493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;padHeight&#32;=&#32;r.height&#32;*&#32;padPercent;
01494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadTop(r,&#32;padHeight);
01495 &#32;&#32;&#32;&#32;}
01496 
01497 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadBottomPercent(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padPercent)&#32;{
01498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;padHeight&#32;=&#32;r.height&#32;*&#32;padPercent;
01499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadBottom(r,&#32;padHeight);
01500 &#32;&#32;&#32;&#32;}
01501 
01502 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadLeftPercent(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padPercent)&#32;{
01503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadLeft(r,&#32;r.width&#32;*&#32;padPercent);
01504 &#32;&#32;&#32;&#32;}
01505 
01506 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;PadRightPercent(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padPercent)&#32;{
01507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PadRight(r,&#32;r.width&#32;*&#32;padPercent);
01508 &#32;&#32;&#32;&#32;}
01509 
01510 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01511 
01512 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Take,&#32;No&#32;Out</emphasis>
01513 
01518 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;TakeTop(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;heightFromTop)&#32;{
01519 &#32;&#32;&#32;&#32;&#32;&#32;heightFromTop&#32;=&#32;Mathf.Clamp(heightFromTop,&#32;0f,&#32;r.height);
01520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r.x,&#32;r.y&#32;+&#32;r.height&#32;-&#32;heightFromTop,&#32;r.width,&#32;heightFromTop);
01521 &#32;&#32;&#32;&#32;}
01522 
01527 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;TakeBottom(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;heightFromBottom)&#32;{
01528 &#32;&#32;&#32;&#32;&#32;&#32;heightFromBottom&#32;=&#32;Mathf.Clamp(heightFromBottom,&#32;0f,&#32;r.height);
01529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r.x,&#32;r.y,&#32;r.width,&#32;heightFromBottom);
01530 &#32;&#32;&#32;&#32;}
01531 
01536 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;TakeLeft(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;widthFromLeft)&#32;{
01537 &#32;&#32;&#32;&#32;&#32;&#32;widthFromLeft&#32;=&#32;Mathf.Clamp(widthFromLeft,&#32;0f,&#32;r.width);
01538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r.x,&#32;r.y,&#32;widthFromLeft,&#32;r.height);
01539 &#32;&#32;&#32;&#32;}
01540 
01545 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;TakeRight(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;widthFromRight)&#32;{
01546 &#32;&#32;&#32;&#32;&#32;&#32;widthFromRight&#32;=&#32;Mathf.Clamp(widthFromRight,&#32;0f,&#32;r.width);
01547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r.x&#32;+&#32;r.width&#32;-&#32;widthFromRight,&#32;r.y,&#32;r.height,&#32;widthFromRight);
01548 &#32;&#32;&#32;&#32;}
01549 
01550 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01551 
01552 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Take,&#32;With&#32;Out</emphasis>
01553 
01558 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;TakeTop(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding,&#32;out&#32;Rect&#32;theRest)&#32;{
01559 &#32;&#32;&#32;&#32;&#32;&#32;theRest&#32;=&#32;r.PadTop(padding);
01560 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r.TakeTop(padding);
01561 &#32;&#32;&#32;&#32;}
01562 
01567 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;TakeBottom(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding,&#32;out&#32;Rect&#32;theRest)&#32;{
01568 &#32;&#32;&#32;&#32;&#32;&#32;theRest&#32;=&#32;r.PadBottom(padding);
01569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r.TakeBottom(padding);
01570 &#32;&#32;&#32;&#32;}
01571 
01576 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;TakeLeft(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding,&#32;out&#32;Rect&#32;theRest)&#32;{
01577 &#32;&#32;&#32;&#32;&#32;&#32;theRest&#32;=&#32;r.PadLeft(padding);
01578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r.TakeLeft(padding);
01579 &#32;&#32;&#32;&#32;}
01580 
01585 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;TakeRight(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;padding,&#32;out&#32;Rect&#32;theRest)&#32;{
01586 &#32;&#32;&#32;&#32;&#32;&#32;theRest&#32;=&#32;r.PadRight(padding);
01587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r.TakeRight(padding);
01588 &#32;&#32;&#32;&#32;}
01589 
01590 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01591 
01596 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Rect&#32;TakeHorizontal(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">float</emphasis>&#32;lineHeight,
01597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;Rect&#32;theRest,
01598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;fromTop&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;{
01599 &#32;&#32;&#32;&#32;&#32;&#32;theRest&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r.x,&#32;(fromTop&#32;?&#32;r.y&#32;+&#32;lineHeight&#32;:&#32;r.y),&#32;r.width,&#32;r.height&#32;-&#32;lineHeight);
01600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r.x,&#32;(fromTop&#32;?&#32;r.y&#32;:&#32;r.y&#32;+&#32;r.height&#32;-&#32;lineHeight),&#32;r.width,&#32;lineHeight);
01601 &#32;&#32;&#32;&#32;}
01602 
01603 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SplitHorizontallyWithLeft(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;rect,&#32;out&#32;Rect&#32;left,&#32;out&#32;Rect&#32;right,&#32;<emphasis role="keywordtype">float</emphasis>&#32;leftWidth)&#32;{
01604 &#32;&#32;&#32;&#32;&#32;&#32;left&#32;=&#32;rect;
01605 &#32;&#32;&#32;&#32;&#32;&#32;left.width&#32;=&#32;leftWidth;
01606 &#32;&#32;&#32;&#32;&#32;&#32;right&#32;=&#32;rect;
01607 &#32;&#32;&#32;&#32;&#32;&#32;right.x&#32;+=&#32;left.width;
01608 &#32;&#32;&#32;&#32;&#32;&#32;right.width&#32;=&#32;rect.width&#32;-&#32;leftWidth;
01609 &#32;&#32;&#32;&#32;}
01610 
01611 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Enumerators</emphasis>
01612 
01620 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;HorizontalLineRectEnumerator&#32;TakeAllLines(<emphasis role="keyword">this</emphasis>&#32;Rect&#32;r,&#32;<emphasis role="keywordtype">int</emphasis>&#32;numLines)&#32;{
01621 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;HorizontalLineRectEnumerator(r,&#32;numLines);
01622 &#32;&#32;&#32;&#32;}
01623 
<anchor xml:id="__utils_8cs_source_1l01624"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator">01624</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator">HorizontalLineRectEnumerator</link>&#32;{
<anchor xml:id="__utils_8cs_source_1l01625"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a98c4b7eeff45bb3158f534e5f63b99c5">01625</link> &#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a98c4b7eeff45bb3158f534e5f63b99c5">rect</link>;
<anchor xml:id="__utils_8cs_source_1l01626"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1aa1cc32f586fd49f720ae788a52f95f1e">01626</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1aa1cc32f586fd49f720ae788a52f95f1e">numLines</link>;
<anchor xml:id="__utils_8cs_source_1l01627"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1af1b8cd1077d7b1f2e496fcf244c5102a">01627</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1af1b8cd1077d7b1f2e496fcf244c5102a">index</link>;
01628 
<anchor xml:id="__utils_8cs_source_1l01629"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1ac145ae10d58eccdf92e6e0c1acb1e1dc">01629</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1ac145ae10d58eccdf92e6e0c1acb1e1dc">HorizontalLineRectEnumerator</link>(Rect&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a98c4b7eeff45bb3158f534e5f63b99c5">rect</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1aa1cc32f586fd49f720ae788a52f95f1e">numLines</link>)&#32;{
01630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.rect&#32;=&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a98c4b7eeff45bb3158f534e5f63b99c5">rect</link>;
01631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.numLines&#32;=&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1aa1cc32f586fd49f720ae788a52f95f1e">numLines</link>;
01632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.index&#32;=&#32;-1;
01633 &#32;&#32;&#32;&#32;&#32;&#32;}
01634 
<anchor xml:id="__utils_8cs_source_1l01635"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1aaa16d5668db6d91b3138a02f5141c50a">01635</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1aaa16d5668db6d91b3138a02f5141c50a">eachHeight</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this.rect.height&#32;/&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1aa1cc32f586fd49f720ae788a52f95f1e">numLines</link>;&#32;}&#32;}
01636 
<anchor xml:id="__utils_8cs_source_1l01637"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a6d9d80615e7c64ebc190cd27988ee577">01637</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Rect&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a6d9d80615e7c64ebc190cd27988ee577">Current</link>&#32;{
01638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a98c4b7eeff45bb3158f534e5f63b99c5">rect</link>.x,&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a98c4b7eeff45bb3158f534e5f63b99c5">rect</link>.y&#32;+&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1aaa16d5668db6d91b3138a02f5141c50a">eachHeight</link>&#32;*&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1af1b8cd1077d7b1f2e496fcf244c5102a">index</link>,&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a98c4b7eeff45bb3158f534e5f63b99c5">rect</link>.width,&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1aaa16d5668db6d91b3138a02f5141c50a">eachHeight</link>);&#32;}
01639 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__utils_8cs_source_1l01640"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1abf4035ccf21b27f98d37bbd7911f4222">01640</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1abf4035ccf21b27f98d37bbd7911f4222">MoveNext</link>()&#32;{
01641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1af1b8cd1077d7b1f2e496fcf244c5102a">index</link>&#32;+=&#32;1;
01642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1af1b8cd1077d7b1f2e496fcf244c5102a">index</link>&#32;&lt;&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1aa1cc32f586fd49f720ae788a52f95f1e">numLines</link>;
01643 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__utils_8cs_source_1l01644"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1ad6281ec8a5551d7fb26ae1c25eba4682">01644</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator">HorizontalLineRectEnumerator</link>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1ad6281ec8a5551d7fb26ae1c25eba4682">GetEnumerator</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;&#32;}
01645 
<anchor xml:id="__utils_8cs_source_1l01646"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a8db0b31549dcaa4e5ffee6843aaa4bb5">01646</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a8db0b31549dcaa4e5ffee6843aaa4bb5">Reset</link>()&#32;{
01647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1af1b8cd1077d7b1f2e496fcf244c5102a">index</link>&#32;=&#32;-1;
01648 &#32;&#32;&#32;&#32;&#32;&#32;}
01649 
<anchor xml:id="__utils_8cs_source_1l01650"/><link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a2f2af1155fbf3ce0125acd7b0896975e">01650</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_query_1_1_query">Query&lt;Rect&gt;</link>&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a2f2af1155fbf3ce0125acd7b0896975e">Query</link>()&#32;{
01651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;Rect&gt;&#32;rects&#32;=&#32;Pool&lt;List&lt;Rect&gt;&gt;.Spawn();
01652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
01653 
01654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a98c4b7eeff45bb3158f534e5f63b99c5">rect</link>&#32;<emphasis role="keywordflow">in</emphasis>&#32;<emphasis role="keyword">this</emphasis>)&#32;{
01655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rects.Add(<link linkend="_struct_leap_1_1_unity_1_1_utils_1_1_horizontal_line_rect_enumerator_1a98c4b7eeff45bb3158f534e5f63b99c5">rect</link>);
01656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_query_1_1_query">Query&lt;Rect&gt;</link>(rects);
01658 
01659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">finally</emphasis>&#32;{
01660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rects.Clear();
01661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pool&lt;List&lt;Rect&gt;&gt;.Recycle(rects);
01662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01663 &#32;&#32;&#32;&#32;&#32;&#32;}
01664 &#32;&#32;&#32;&#32;}
01665 
01666 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01667 
01668 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01669 
01670 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01671 
01672 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Leap&#32;Utilities</emphasis>
01673 
01674 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Pose&#32;Utils</emphasis>
01675 
01680 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>&#32;From(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;position,&#32;<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>&#32;fromPose)&#32;{
01681 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>(position,&#32;fromPose.<link linkend="_struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad">rotation</link>).From(fromPose);
01682 &#32;&#32;&#32;&#32;}
01683 
01684 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>&#32;GetPose(<emphasis role="keyword">this</emphasis>&#32;Rigidbody&#32;rigidbody)&#32;{
01685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>(rigidbody.position,&#32;rigidbody.rotation);
01686 &#32;&#32;&#32;&#32;}
01687 
01691 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Pose&#32;MirroredX(<emphasis role="keyword">this</emphasis>&#32;Pose&#32;pose)&#32;{
01692 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;v&#32;=&#32;pose.position;
01693 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;q&#32;=&#32;pose.rotation;
01694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Pose(<emphasis role="keyword">new</emphasis>&#32;Vector3(-v.x,&#32;v.y,&#32;v.z),
01695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;Quaternion(-q.x,&#32;q.y,&#32;q.z,&#32;-q.w).Flipped());
01696 &#32;&#32;&#32;&#32;}
01697 
01701 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Pose&#32;Negated(<emphasis role="keyword">this</emphasis>&#32;Pose&#32;pose)&#32;{
01702 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;v&#32;=&#32;pose.position;
01703 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;q&#32;=&#32;pose.rotation;
01704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Pose(<emphasis role="keyword">new</emphasis>&#32;Vector3(-v.x,&#32;-v.y,&#32;-v.z),
01705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;Quaternion(-q.z,&#32;-q.y,&#32;-q.z,&#32;q.w));
01706 &#32;&#32;&#32;&#32;}
01707 
01708 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01709 
01710 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01711 
01712 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Value&#32;Mapping&#32;Utils&#32;(&quot;Map&quot;)</emphasis>
01713 
01718 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;Map(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;value,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMax)&#32;{
01719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(valueMin&#32;==&#32;valueMax)&#32;<emphasis role="keywordflow">return</emphasis>&#32;resultMin;
01720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Lerp(resultMin,&#32;resultMax,&#32;((value&#32;-&#32;valueMin)&#32;/&#32;(valueMax&#32;-&#32;valueMin)));
01721 &#32;&#32;&#32;&#32;}
01722 
01727 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;MapUnclamped(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;value,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMax)&#32;{
01728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(valueMin&#32;==&#32;valueMax)&#32;<emphasis role="keywordflow">return</emphasis>&#32;resultMin;
01729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.LerpUnclamped(resultMin,&#32;resultMax,&#32;((value&#32;-&#32;valueMin)&#32;/&#32;(valueMax&#32;-&#32;valueMin)));
01730 &#32;&#32;&#32;&#32;}
01731 
01736 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector2&#32;Map(<emphasis role="keyword">this</emphasis>&#32;Vector2&#32;value,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMax)&#32;{
01737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(value.x.Map(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.y.Map(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax));
01739 &#32;&#32;&#32;&#32;}
01740 
01745 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector2&#32;MapUnclamped(<emphasis role="keyword">this</emphasis>&#32;Vector2&#32;value,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMax)&#32;{
01746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(value.x.MapUnclamped(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.y.MapUnclamped(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax));
01748 &#32;&#32;&#32;&#32;}
01749 
01754 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;Map(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;value,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMax)&#32;{
01755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(value.x.Map(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.y.Map(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.z.Map(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax));
01758 &#32;&#32;&#32;&#32;}
01759 
01764 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;MapUnclamped(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;value,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMax)&#32;{
01765 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(value.x.MapUnclamped(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.y.MapUnclamped(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.z.MapUnclamped(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax));
01768 &#32;&#32;&#32;&#32;}
01769 
01774 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector4&#32;Map(<emphasis role="keyword">this</emphasis>&#32;Vector4&#32;value,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMax)&#32;{
01775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector4(value.x.Map(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.y.Map(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.z.Map(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.w.Map(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax));
01779 &#32;&#32;&#32;&#32;}
01780 
01785 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector4&#32;MapUnclamped(<emphasis role="keyword">this</emphasis>&#32;Vector4&#32;value,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;resultMax)&#32;{
01786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector4(value.x.MapUnclamped(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.y.MapUnclamped(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.z.MapUnclamped(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax),
01789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.w.MapUnclamped(valueMin,&#32;valueMax,&#32;resultMin,&#32;resultMax));
01790 &#32;&#32;&#32;&#32;}
01791 
01797 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector2&#32;Map(<emphasis role="keywordtype">float</emphasis>&#32;input,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;Vector2&#32;resultMin,&#32;Vector2&#32;resultMax)&#32;{
01798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector2.Lerp(resultMin,&#32;resultMax,&#32;Mathf.InverseLerp(valueMin,&#32;valueMax,&#32;input));
01799 &#32;&#32;&#32;&#32;}
01800 
01806 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;Map(<emphasis role="keywordtype">float</emphasis>&#32;input,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;Vector3&#32;resultMin,&#32;Vector3&#32;resultMax)&#32;{
01807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector3.Lerp(resultMin,&#32;resultMax,&#32;Mathf.InverseLerp(valueMin,&#32;valueMax,&#32;input));
01808 &#32;&#32;&#32;&#32;}
01809 
01815 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector4&#32;Map(<emphasis role="keywordtype">float</emphasis>&#32;input,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;valueMax,&#32;Vector4&#32;resultMin,&#32;Vector4&#32;resultMax)&#32;{
01816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector4.Lerp(resultMin,&#32;resultMax,&#32;Mathf.InverseLerp(valueMin,&#32;valueMax,&#32;input));
01817 &#32;&#32;&#32;&#32;}
01818 
01823 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector2&#32;CompMul(<emphasis role="keyword">this</emphasis>&#32;Vector2&#32;A,&#32;Vector2&#32;B)&#32;{
01824 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(A.x&#32;*&#32;B.x,&#32;A.y&#32;*&#32;B.y);
01825 &#32;&#32;&#32;&#32;}
01826 
01831 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;CompMul(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;A,&#32;Vector3&#32;B)&#32;{
01832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(A.x&#32;*&#32;B.x,&#32;A.y&#32;*&#32;B.y,&#32;A.z&#32;*&#32;B.z);
01833 &#32;&#32;&#32;&#32;}
01834 
01839 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector4&#32;CompMul(<emphasis role="keyword">this</emphasis>&#32;Vector4&#32;A,&#32;Vector4&#32;B)&#32;{
01840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector4(A.x&#32;*&#32;B.x,&#32;A.y&#32;*&#32;B.y,&#32;A.z&#32;*&#32;B.z,&#32;A.w&#32;*&#32;B.w);
01841 &#32;&#32;&#32;&#32;}
01842 
01847 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector2&#32;CompDiv(<emphasis role="keyword">this</emphasis>&#32;Vector2&#32;A,&#32;Vector2&#32;B)&#32;{
01848 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(A.x&#32;/&#32;B.x,&#32;A.y&#32;/&#32;B.y);
01849 &#32;&#32;&#32;&#32;}
01850 
01855 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;CompDiv(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;A,&#32;Vector3&#32;B)&#32;{
01856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(A.x&#32;/&#32;B.x,&#32;A.y&#32;/&#32;B.y,&#32;A.z&#32;/&#32;B.z);
01857 &#32;&#32;&#32;&#32;}
01858 
01863 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector4&#32;CompDiv(<emphasis role="keyword">this</emphasis>&#32;Vector4&#32;A,&#32;Vector4&#32;B)&#32;{
01864 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector4(A.x&#32;/&#32;B.x,&#32;A.y&#32;/&#32;B.y,&#32;A.z&#32;/&#32;B.z,&#32;A.w&#32;/&#32;B.w);
01865 &#32;&#32;&#32;&#32;}
01866 
01870 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;CompSum(<emphasis role="keyword">this</emphasis>&#32;Vector2&#32;v)&#32;{
01871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;v.x&#32;+&#32;v.y;
01872 &#32;&#32;&#32;&#32;}
01873 
01877 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;CompSum(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;v)&#32;{
01878 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;v.x&#32;+&#32;v.y&#32;+&#32;v.z;
01879 &#32;&#32;&#32;&#32;}
01880 
01884 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;CompSum(<emphasis role="keyword">this</emphasis>&#32;Vector4&#32;v)&#32;{
01885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;v.x&#32;+&#32;v.y&#32;+&#32;v.z&#32;+&#32;v.w;
01886 &#32;&#32;&#32;&#32;}
01887 
01891 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;CompMax(<emphasis role="keyword">this</emphasis>&#32;Vector2&#32;v)&#32;{
01892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Max(v.x,&#32;v.y);
01893 &#32;&#32;&#32;&#32;}
01894 
01898 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;CompMax(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;v)&#32;{
01899 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Max(Mathf.Max(v.x,&#32;v.y),&#32;v.z);
01900 &#32;&#32;&#32;&#32;}
01901 
01905 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;CompMax(<emphasis role="keyword">this</emphasis>&#32;Vector4&#32;v)&#32;{
01906 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Max(Mathf.Max(Mathf.Max(v.x,&#32;v.y),&#32;v.z),&#32;v.w);
01907 &#32;&#32;&#32;&#32;}
01908 
01912 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;CompMin(<emphasis role="keyword">this</emphasis>&#32;Vector2&#32;v)&#32;{
01913 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Min(v.x,&#32;v.y);
01914 &#32;&#32;&#32;&#32;}
01915 
01919 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;CompMin(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;v)&#32;{
01920 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Min(Mathf.Min(v.x,&#32;v.y),&#32;v.z);
01921 &#32;&#32;&#32;&#32;}
01922 
01926 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;CompMin(<emphasis role="keyword">this</emphasis>&#32;Vector4&#32;v)&#32;{
01927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Min(Mathf.Min(Mathf.Min(v.x,&#32;v.y),&#32;v.z),&#32;v.w);
01928 &#32;&#32;&#32;&#32;}
01929 
01930 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01931 
01932 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;From/Then&#32;Utilities</emphasis>
01933 
01934 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Float</emphasis>
01935 
01943 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;From(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;thisFloat,&#32;<emphasis role="keywordtype">float</emphasis>&#32;otherFloat)&#32;{
01944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thisFloat&#32;-&#32;otherFloat;
01945 &#32;&#32;&#32;&#32;}
01946 
01954 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;To(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;thisFloat,&#32;<emphasis role="keywordtype">float</emphasis>&#32;otherFloat)&#32;{
01955 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;otherFloat&#32;-&#32;thisFloat;
01956 &#32;&#32;&#32;&#32;}
01957 
01961 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;Then(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;thisFloat,&#32;<emphasis role="keywordtype">float</emphasis>&#32;otherFloat)&#32;{
01962 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thisFloat&#32;+&#32;otherFloat;
01963 &#32;&#32;&#32;&#32;}
01964 
01965 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01966 
01967 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Vector3</emphasis>
01968 
01972 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;From(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;thisVector,&#32;Vector3&#32;otherVector)&#32;{
01973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thisVector&#32;-&#32;otherVector;
01974 &#32;&#32;&#32;&#32;}
01975 
01979 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;To(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;thisVector,&#32;Vector3&#32;otherVector)&#32;{
01980 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;otherVector&#32;-&#32;thisVector;
01981 &#32;&#32;&#32;&#32;}
01982 
01987 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;Then(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;thisVector,&#32;Vector3&#32;otherVector)&#32;{
01988 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thisVector&#32;+&#32;otherVector;
01989 &#32;&#32;&#32;&#32;}
01990 
01991 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
01992 
01993 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Quaternion</emphasis>
01994 
02000 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;From(<emphasis role="keyword">this</emphasis>&#32;Quaternion&#32;thisQuaternion,&#32;Quaternion&#32;otherQuaternion)&#32;{
02001 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.Inverse(otherQuaternion)&#32;*&#32;thisQuaternion;
02002 &#32;&#32;&#32;&#32;}
02003 
02009 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;To(<emphasis role="keyword">this</emphasis>&#32;Quaternion&#32;thisQuaternion,&#32;Quaternion&#32;otherQuaternion)&#32;{
02010 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.Inverse(thisQuaternion)&#32;*&#32;otherQuaternion;
02011 &#32;&#32;&#32;&#32;}
02012 
02017 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;Then(<emphasis role="keyword">this</emphasis>&#32;Quaternion&#32;thisQuaternion,&#32;Quaternion&#32;otherQuaternion)&#32;{
02018 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thisQuaternion&#32;*&#32;otherQuaternion;
02019 &#32;&#32;&#32;&#32;}
02020 
02021 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
02022 
02023 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Pose</emphasis>
02024 
02031 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Pose&#32;From(<emphasis role="keyword">this</emphasis>&#32;Pose&#32;thisPose,&#32;Pose&#32;otherPose)&#32;{
02032 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;otherPose.inverse&#32;*&#32;thisPose;
02033 &#32;&#32;&#32;&#32;}
02034 
02041 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Pose&#32;To(<emphasis role="keyword">this</emphasis>&#32;Pose&#32;thisPose,&#32;Pose&#32;otherPose)&#32;{
02042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thisPose.inverse&#32;*&#32;otherPose;
02043 &#32;&#32;&#32;&#32;}
02044 
02053 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Pose&#32;Then(<emphasis role="keyword">this</emphasis>&#32;Pose&#32;thisPose,&#32;Pose&#32;otherPose)&#32;{
02054 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thisPose&#32;*&#32;otherPose;
02055 &#32;&#32;&#32;&#32;}
02056 
02057 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
02058 
02059 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Matrix4x4</emphasis>
02060 
02068 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Matrix4x4&#32;From(<emphasis role="keyword">this</emphasis>&#32;Matrix4x4&#32;thisMatrix,&#32;Matrix4x4&#32;otherMatrix)&#32;{
02069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thisMatrix&#32;*&#32;otherMatrix.inverse;
02070 &#32;&#32;&#32;&#32;}
02071 
02079 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Matrix4x4&#32;To(<emphasis role="keyword">this</emphasis>&#32;Matrix4x4&#32;thisMatrix,&#32;Matrix4x4&#32;otherMatrix)&#32;{
02080 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;otherMatrix&#32;*&#32;thisMatrix.inverse;
02081 &#32;&#32;&#32;&#32;}
02082 
02087 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Matrix4x4&#32;Then(<emphasis role="keyword">this</emphasis>&#32;Matrix4x4&#32;thisMatrix,&#32;Matrix4x4&#32;otherMatrix)&#32;{
02088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;otherMatrix&#32;*&#32;thisMatrix;
02089 &#32;&#32;&#32;&#32;}
02090 
02091 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
02092 
02093 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
02094 
02095 &#32;&#32;}
02096 
02097 }
</programlisting></section>
