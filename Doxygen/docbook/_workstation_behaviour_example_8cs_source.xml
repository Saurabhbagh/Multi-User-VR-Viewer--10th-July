<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__workstation_behaviour_example_8cs_source">
<title>WorkstationBehaviourExample.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Modules/InteractionEngine/Examples/6. Dynamic UI/Scripts/WorkstationBehaviourExample.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_namespace_leap_1_1_unity">Unity</link>.<link linkend="_namespace_leap_1_1_unity_1_1_animation">Animation</link>;
00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_namespace_leap_1_1_unity">Unity</link>.<link linkend="_namespace_leap_1_1_unity_1_1_interaction">Interaction</link>;
00012 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00013 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00014 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00015 
00016 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_examples">Leap.Unity.Examples</link>&#32;{
00017 
00035 &#32;&#32;[RequireComponent(typeof(<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour">InteractionBehaviour</link>))]
00036 &#32;&#32;[RequireComponent(typeof(<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour">AnchorableBehaviour</link>))]
00037 &#32;&#32;[AddComponentMenu(<emphasis role="stringliteral">&quot;&quot;</emphasis>)]
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00038"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example">00038</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example">WorkstationBehaviourExample</link>&#32;:&#32;MonoBehaviour&#32;{
00039 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00044"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af6897cc2e4142a3b82cddbc2b599c6e7">00044</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af6897cc2e4142a3b82cddbc2b599c6e7">MAX_SPEED_AS_WORKSTATION</link>&#32;=&#32;0.005F;
00045 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00051"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a4643c3dd568f8e77904018de48eb4318">00051</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a4643c3dd568f8e77904018de48eb4318">MIN_SPEED_TO_ACTIVATE_TRAVELING</link>&#32;=&#32;0.5F;
00052 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00053"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75">00053</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour">TransformTweenBehaviour</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75">workstationModeTween</link>;
00054 
00055 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour">InteractionBehaviour</link>&#32;_intObj;
00056 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour">AnchorableBehaviour</link>&#32;_anchObj;
00057 
00058 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_wasKinematicBeforeActivation&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00059 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00065"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af8dc40bc97d0162d01fdcb5a446da67a">00065</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af8dc40bc97d0162d01fdcb5a446da67a">isTraveling</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_travelTween.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1a9a3bab65cf734fb04f4c7c7525719891">isValid</link>&#32;&amp;&amp;&#32;_travelTween.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1a0af0e03e8197661737ace80ef03636c6">isRunning</link>;&#32;}&#32;}
00066 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00067"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">00067</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>&#32;{&#32;Closed,&#32;Traveling,&#32;Opening,&#32;Open,&#32;Closing&#32;}
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00068"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a84dc1a1d33dd9fbba06cc75fb3577323">00068</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a84dc1a1d33dd9fbba06cc75fb3577323">workstationState</link>&#32;{
00069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75">workstationModeTween</link>&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>.Closed;
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75">workstationModeTween</link>.<link linkend="_class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1ad285758e0b274c88f5371930ff965dc8">tween</link>.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1ae0123854170a23519792c97c8620645c">progress</link>&#32;==&#32;0F&#32;&amp;&amp;&#32;!<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af8dc40bc97d0162d01fdcb5a446da67a">isTraveling</link>)&#32;{
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>.Closed;
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af8dc40bc97d0162d01fdcb5a446da67a">isTraveling</link>)&#32;{
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>.Traveling;
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75">workstationModeTween</link>.<link linkend="_class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1ad285758e0b274c88f5371930ff965dc8">tween</link>.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1ae0123854170a23519792c97c8620645c">progress</link>&#32;!=&#32;1F
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75">workstationModeTween</link>.<link linkend="_class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1ad285758e0b274c88f5371930ff965dc8">tween</link>.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1ae88d2317428932c7de52a00298005696">direction</link>&#32;==&#32;<link linkend="_namespace_leap_1_1_unity_1_1_animation_1ab080d4756e4d3d6a2fc9cd9a7f4e695a">Direction</link>.Forward)&#32;{
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>.Opening;
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75">workstationModeTween</link>.<link linkend="_class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1ad285758e0b274c88f5371930ff965dc8">tween</link>.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1ae0123854170a23519792c97c8620645c">progress</link>&#32;==&#32;1F)&#32;{
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>.Open;
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>.Closing;
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00089 &#32;&#32;&#32;&#32;&#32;&#32;}
00090 &#32;&#32;&#32;&#32;}
00091 
00092 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnValidate()&#32;{
00093 &#32;&#32;&#32;&#32;&#32;&#32;refreshRequiredComponents();
00094 &#32;&#32;&#32;&#32;}
00095 
00096 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Awake()&#32;{
00097 &#32;&#32;&#32;&#32;&#32;&#32;initWorkstationPoseFunctions();
00098 &#32;&#32;&#32;&#32;}
00099 
00100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Start()&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;refreshRequiredComponents();
00102 
00103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_anchObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour_1aaa63f2fc2253c8a559150fb0127730f5">tryAnchorNearestOnGraspEnd</link>)&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogWarning(<emphasis role="stringliteral">&quot;WorkstationBehaviour&#32;expects&#32;its&#32;AnchorableBehaviour&apos;s&#32;tryAnchorNearestOnGraspEnd&#32;property&#32;to&#32;be&#32;enabled.&quot;</emphasis>,&#32;this.gameObject);
00105 &#32;&#32;&#32;&#32;&#32;&#32;}
00106 &#32;&#32;&#32;&#32;}
00107 
00108 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnDestroy()&#32;{
00109 &#32;&#32;&#32;&#32;&#32;&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1aac5b0f2f21a26369d70314363e18af3f">OnGraspedMovement</link>&#32;-=&#32;onGraspedMovement;
00110 
00111 &#32;&#32;&#32;&#32;&#32;&#32;_anchObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour_1a29a27e344ab1105d4fa8657de3fe5dab">OnPostTryAnchorOnGraspEnd</link>&#32;-=&#32;onPostObjectGraspEnd;
00112 &#32;&#32;&#32;&#32;}
00113 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00114"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a03eb8612fb58f2bf1b79798ebe7a443c">00114</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a03eb8612fb58f2bf1b79798ebe7a443c">ActivateWorkstation</link>()&#32;{
00115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a84dc1a1d33dd9fbba06cc75fb3577323">workstationState</link>&#32;!=&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>.Open)&#32;{
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_wasKinematicBeforeActivation&#32;=&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.isKinematic;
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.isKinematic&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00118 &#32;&#32;&#32;&#32;&#32;&#32;}
00119 
00120 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75">workstationModeTween</link>.<link linkend="_class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1a3c59a5aa9be4cdbd0bd087400d8e3921">PlayForward</link>();
00121 &#32;&#32;&#32;&#32;}
00122 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00123"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ada103d493d83340b94fbfaf377ff91ee">00123</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ada103d493d83340b94fbfaf377ff91ee">DeactivateWorkstation</link>()&#32;{
00124 &#32;&#32;&#32;&#32;&#32;&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.isKinematic&#32;=&#32;_wasKinematicBeforeActivation;
00125 
00126 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75">workstationModeTween</link>.<link linkend="_class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1aff7a741293c6403f3b383703c0828684">PlayBackward</link>();
00127 &#32;&#32;&#32;&#32;}
00128 
00129 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;refreshRequiredComponents()&#32;{
00130 &#32;&#32;&#32;&#32;&#32;&#32;_intObj&#32;=&#32;GetComponent&lt;InteractionBehaviour&gt;();
00131 &#32;&#32;&#32;&#32;&#32;&#32;_anchObj&#32;=&#32;GetComponent&lt;AnchorableBehaviour&gt;();
00132 
00133 &#32;&#32;&#32;&#32;&#32;&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1aac5b0f2f21a26369d70314363e18af3f">OnGraspedMovement</link>&#32;+=&#32;onGraspedMovement;
00134 
00135 &#32;&#32;&#32;&#32;&#32;&#32;_anchObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour_1a29a27e344ab1105d4fa8657de3fe5dab">OnPostTryAnchorOnGraspEnd</link>&#32;+=&#32;onPostObjectGraspEnd;
00136 &#32;&#32;&#32;&#32;}
00137 
00138 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;onGraspedMovement(Vector3&#32;preSolvePos,&#32;Quaternion&#32;preSolveRot,
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;curPos,&#32;Quaternion&#32;curRot,
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;InteractionController&gt;&#32;controllers)&#32;{
00141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;workstation&#32;is&#32;not&#32;fully&#32;open&#32;when&#32;grasped,&#32;close&#32;it.</emphasis>
00142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a84dc1a1d33dd9fbba06cc75fb3577323">workstationState</link>&#32;==&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>.Opening)&#32;{
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ada103d493d83340b94fbfaf377ff91ee">DeactivateWorkstation</link>();
00144 &#32;&#32;&#32;&#32;&#32;&#32;}
00145 
00146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;velocity&#32;of&#32;the&#32;object&#32;while&#32;grasped&#32;is&#32;too&#32;large,&#32;exit&#32;workstation&#32;mode.</emphasis>
00147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.velocity.magnitude&#32;&gt;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af6897cc2e4142a3b82cddbc2b599c6e7">MAX_SPEED_AS_WORKSTATION</link>
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.isKinematic&#32;&amp;&amp;&#32;((preSolvePos&#32;-&#32;curPos).magnitude&#32;/&#32;Time.fixedDeltaTime)&#32;&gt;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af6897cc2e4142a3b82cddbc2b599c6e7">MAX_SPEED_AS_WORKSTATION</link>))&#32;{
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ada103d493d83340b94fbfaf377ff91ee">DeactivateWorkstation</link>();
00150 &#32;&#32;&#32;&#32;&#32;&#32;}
00151 
00152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Lock&#32;our&#32;upward&#32;axis&#32;while&#32;workstation&#32;mode&#32;is&#32;open.</emphasis>
00153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a84dc1a1d33dd9fbba06cc75fb3577323">workstationState</link>&#32;==&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc">WorkstationState</link>.Open)&#32;{
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.rotation&#32;=&#32;(Quaternion.FromToRotation(_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.rotation&#32;*&#32;Vector3.up,&#32;Vector3.up))&#32;*&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.rotation;
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_intObj.<link linkend="_interface_leap_1_1_unity_1_1_interaction_1_1_i_interaction_behaviour_1a2ff1423c8145ae05a1cc8506d6932136">transform</link>.rotation&#32;=&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.rotation;
00156 &#32;&#32;&#32;&#32;&#32;&#32;}
00157 &#32;&#32;&#32;&#32;}
00158 
00159 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;onPostObjectGraspEnd()&#32;{
00160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_anchObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour_1ab82e05ed50e6b2de8cad02a53efec6d4">preferredAnchor</link>&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Choose&#32;a&#32;good&#32;position&#32;and&#32;rotation&#32;for&#32;workstation&#32;mode&#32;and&#32;begin&#32;traveling&#32;there.</emphasis>
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;targetPosition;
00163 
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Choose&#32;the&#32;current&#32;position&#32;if&#32;our&#32;velocity&#32;is&#32;small.</emphasis>
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.velocity.magnitude&#32;&lt;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a4643c3dd568f8e77904018de48eb4318">MIN_SPEED_TO_ACTIVATE_TRAVELING</link>)&#32;{
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;targetPosition&#32;=&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.position;
00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;targetPosition&#32;=&#32;determineWorkstationPosition();
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00171 
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;targetRotation&#32;=&#32;determineWorkstationRotation(targetPosition);
00173 
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;beginTraveling(_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.position,&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.velocity,
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.rotation,&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.angularVelocity,
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;targetPosition,&#32;targetRotation);
00177 &#32;&#32;&#32;&#32;&#32;&#32;}
00178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;the&#32;workstation&#32;is&#32;not&#32;active&#32;or&#32;being&#32;deactivated&#32;if</emphasis>
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;are&#32;attaching&#32;to&#32;an&#32;anchor.</emphasis>
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ada103d493d83340b94fbfaf377ff91ee">DeactivateWorkstation</link>();
00182 &#32;&#32;&#32;&#32;&#32;&#32;}
00183 &#32;&#32;&#32;&#32;}
00184 
00185 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Traveling</emphasis>
00186 
00187 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;MAX_TRAVEL_SPEED&#32;=&#32;4.00F;
00188 
00189 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween">Tween</link>&#32;_travelTween;
00190 
00191 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_initTravelTime&#32;=&#32;0F;
00192 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;&#32;&#32;&#32;_initTravelPosition&#32;=&#32;Vector3.zero;
00193 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;&#32;&#32;&#32;_initTravelVelocity&#32;=&#32;Vector3.zero;
00194 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Quaternion&#32;_initTravelRotation&#32;=&#32;Quaternion.identity;
00195 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;&#32;&#32;&#32;_initTravelAngVelocity&#32;=&#32;Vector3.zero;
00196 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;&#32;&#32;&#32;_effGravity&#32;=&#32;Vector3.zero;
00197 
00198 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;&#32;&#32;&#32;_travelTargetPosition;
00199 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Quaternion&#32;_travelTargetRotation;
00200 
00201 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector2&#32;_minMaxWorkstationTravelTime&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(0.05F,&#32;1.00F);
00202 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector2&#32;_minMaxTravelTimeFromThrowSpeed&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(0.30F,&#32;8.00F);
00203 
00204 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;beginTraveling(Vector3&#32;initPosition,&#32;Vector3&#32;initVelocity,
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;initRotation,&#32;Vector3&#32;initAngVelocity,
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;targetPosition,&#32;Quaternion&#32;targetRotation)&#32;{
00207 &#32;&#32;&#32;&#32;&#32;&#32;_initTravelTime&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;Time.time;
00208 &#32;&#32;&#32;&#32;&#32;&#32;_initTravelPosition&#32;&#32;&#32;&#32;=&#32;initPosition;
00209 &#32;&#32;&#32;&#32;&#32;&#32;_initTravelVelocity&#32;&#32;&#32;&#32;=&#32;initVelocity;
00210 &#32;&#32;&#32;&#32;&#32;&#32;_initTravelRotation&#32;&#32;&#32;&#32;=&#32;initRotation;
00211 &#32;&#32;&#32;&#32;&#32;&#32;_initTravelAngVelocity&#32;=&#32;initAngVelocity;
00212 
00213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;velMagnitude&#32;=&#32;_initTravelVelocity.magnitude;
00214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(velMagnitude&#32;&gt;&#32;MAX_TRAVEL_SPEED)&#32;{
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;capSpeedMultiplier&#32;=&#32;MAX_TRAVEL_SPEED&#32;/&#32;velMagnitude;
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_initTravelVelocity&#32;*=&#32;capSpeedMultiplier;
00217 &#32;&#32;&#32;&#32;&#32;&#32;}
00218 
00219 &#32;&#32;&#32;&#32;&#32;&#32;_effGravity&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;Vector3.Lerp(Vector3.zero,&#32;<link linkend="_namespace_leap_1_1_unity_1a186e5eb0a2b743f1f6b79346f0ab8ad0a50ae99e9c35446c2580e4b540b0fd104">Physics</link>.gravity,&#32;initVelocity.magnitude.Map(0.80F,&#32;3F,&#32;0F,&#32;0.70F));
00220 
00221 
00222 
00223 &#32;&#32;&#32;&#32;&#32;&#32;_travelTargetPosition&#32;=&#32;targetPosition;
00224 &#32;&#32;&#32;&#32;&#32;&#32;_travelTargetRotation&#32;=&#32;targetRotation;
00225 
00226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Construct&#32;a&#32;single-use&#32;Tween&#32;that&#32;will&#32;last&#32;a&#32;specific&#32;duration</emphasis>
00227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;specify&#32;a&#32;custom&#32;callback&#32;as&#32;it&#32;progresses&#32;to&#32;update&#32;the</emphasis>
00228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;object&apos;s&#32;position&#32;and&#32;rotation.</emphasis>
00229 &#32;&#32;&#32;&#32;&#32;&#32;_travelTween&#32;=&#32;<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween">Tween</link>.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1a7238365f2fb16c95082dc5d71b8f5139">Single</link>()
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1a233ad9426dc52f71fd5ac36500946d76">OverTime</link>(_initTravelVelocity.magnitude.Map(_minMaxTravelTimeFromThrowSpeed.x,&#32;_minMaxTravelTimeFromThrowSpeed.y,
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_minMaxWorkstationTravelTime.x,&#32;_minMaxWorkstationTravelTime.y))
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.OnProgress(onTravelTweenProgress)
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1a6444cd8ffe0160d1431e091f3c4d8649">OnReachEnd</link>(<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a03eb8612fb58f2bf1b79798ebe7a443c">ActivateWorkstation</link>)&#32;<emphasis role="comment">//&#32;When&#32;the&#32;tween&#32;is&#32;finished,&#32;open&#32;workstation&#32;mode.</emphasis>
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1a00ec83a05cb0637fc0bcc24e8703c572">Play</link>();
00235 &#32;&#32;&#32;&#32;}
00236 
00237 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;onTravelTweenProgress(<emphasis role="keywordtype">float</emphasis>&#32;progress)&#32;{
00238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;curTime&#32;=&#32;Time.time;
00239 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;&#32;&#32;&#32;extrapolatedPosition&#32;=&#32;evaluatePosition(_initTravelPosition,&#32;_initTravelVelocity,&#32;_effGravity,&#32;_initTravelTime,&#32;curTime);
00240 &#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;extrapolatedRotation&#32;=&#32;evaluateRotation(_initTravelRotation,&#32;_initTravelAngVelocity,&#32;_initTravelTime,&#32;curTime);
00241 &#32;&#32;&#32;&#32;&#32;&#32;
00242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Interpolate&#32;from&#32;the&#32;position&#32;and&#32;rotation&#32;that&#32;the&#32;object&#32;would&#32;naturally&#32;have&#32;over&#32;time</emphasis>
00243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(by&#32;movement&#32;due&#32;to&#32;inertia&#32;and&#32;by&#32;acceleration&#32;due&#32;to&#32;gravity)</emphasis>
00244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;the&#32;target&#32;position&#32;and&#32;rotation&#32;over&#32;the&#32;lifetime&#32;of&#32;the&#32;tween.</emphasis>
00245 &#32;&#32;&#32;&#32;&#32;&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.position&#32;=&#32;&#32;&#32;&#32;&#32;Vector3.Lerp(extrapolatedPosition,&#32;_travelTargetPosition,&#32;progress);
00246 &#32;&#32;&#32;&#32;&#32;&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.rotation&#32;=&#32;Quaternion.Slerp(extrapolatedRotation,&#32;_travelTargetRotation,&#32;progress);
00247 &#32;&#32;&#32;&#32;}
00248 
00249 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;cancelTraveling()&#32;{
00250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;case&#32;traveling&#32;was&#32;halted&#32;mid-travel-tween,&#32;halt&#32;the&#32;tween.</emphasis>
00251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_travelTween.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1a9a3bab65cf734fb04f4c7c7525719891">isValid</link>)&#32;{&#32;_travelTween.<link linkend="_struct_leap_1_1_unity_1_1_animation_1_1_tween_1ad5f8092aec0bf5f7f301b9dbeef5a666">Stop</link>();&#32;}
00252 &#32;&#32;&#32;&#32;}
00253 
00257 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;evaluatePosition(Vector3&#32;initialPosition,&#32;Vector3&#32;initialVelocity,&#32;Vector3&#32;gravity,&#32;<emphasis role="keywordtype">float</emphasis>&#32;initialTime,&#32;<emphasis role="keywordtype">float</emphasis>&#32;timeToEvaluate)&#32;{
00258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;timeToEvaluate&#32;-&#32;initialTime;
00259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;initialPosition&#32;+&#32;(initialVelocity&#32;*&#32;t)&#32;+&#32;(0.5f&#32;*&#32;gravity&#32;*&#32;t&#32;*&#32;t);
00260 &#32;&#32;&#32;&#32;}
00261 
00265 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Quaternion&#32;evaluateRotation(Quaternion&#32;initialRotation,&#32;Vector3&#32;angularVelocity,&#32;<emphasis role="keywordtype">float</emphasis>&#32;initialTime,&#32;<emphasis role="keywordtype">float</emphasis>&#32;timeToEvaluate)&#32;{
00266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;timeToEvaluate&#32;-&#32;initialTime;
00267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.Euler(angularVelocity&#32;*&#32;t)&#32;*&#32;initialRotation;
00268 &#32;&#32;&#32;&#32;}
00269 
00270 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00271 
00272 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Workstation&#32;Pose</emphasis>
00273 
00274 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;delegate&#32;Vector3&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa1eb03a23e58150cbb75aee152bb4d33">WorkstationPositionFunc</link>(Vector3&#32;userEyePosition,&#32;Quaternion&#32;userEyeRotation,
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;workstationObjInitPosition,&#32;Vector3&#32;workstationObjInitVelocity,&#32;<emphasis role="keywordtype">float</emphasis>&#32;workstationObjRadius,
00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;Vector3&gt;&#32;otherWorkstationPositions,&#32;List&lt;float&gt;&#32;otherWorkstationRadii);
00277 
00278 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;delegate&#32;Quaternion&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a96412e8fc922be4561a1017293783c9a">WorkstationRotationFunc</link>(Vector3&#32;userEyePosition,&#32;Vector3&#32;targetWorkstationPosition);
00279 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00286"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1acaf79ab190ba66fba74bb2eba58998ca">00286</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa1eb03a23e58150cbb75aee152bb4d33">WorkstationPositionFunc</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1acaf79ab190ba66fba74bb2eba58998ca">workstationPositionFunc</link>;
00287 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00292"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa4075ce7f97ba3a7c7184940e0add199">00292</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a96412e8fc922be4561a1017293783c9a">WorkstationRotationFunc</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa4075ce7f97ba3a7c7184940e0add199">workstationRotationFunc</link>;
00293 
00294 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;Vector3&gt;&#32;_otherStationObjPositions&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Vector3&gt;();
00295 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;float&gt;&#32;_otherStationObjRadii&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;float&gt;();
00296 
00297 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;on&#32;Awake();&#32;possible&#32;to&#32;override&#32;the&#32;default&#32;functions&#32;in&#32;a&#32;MonoBehaviour&apos;s&#32;Start().</emphasis>
00298 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;initWorkstationPoseFunctions()&#32;{
00299 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1acaf79ab190ba66fba74bb2eba58998ca">workstationPositionFunc</link>&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a45e1d9a2aff57e76f3f41de59aa40a35">DefaultDetermineWorkstationPosition</link>;
00300 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa4075ce7f97ba3a7c7184940e0add199">workstationRotationFunc</link>&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a608204dd046521635b6b3fa83b63d734">DefaultDetermineWorkstationRotation</link>;
00301 &#32;&#32;&#32;&#32;}
00302 
00303 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;determineWorkstationPosition()&#32;{
00304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1acaf79ab190ba66fba74bb2eba58998ca">workstationPositionFunc</link>(Camera.main.transform.position,&#32;Camera.main.transform.rotation,
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.position,&#32;_intObj.<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c">rigidbody</link>.velocity,&#32;0.30F,
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_otherStationObjPositions,&#32;_otherStationObjRadii);
00307 &#32;&#32;&#32;&#32;}
00308 
00309 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Quaternion&#32;determineWorkstationRotation(Vector3&#32;workstationPosition)&#32;{
00310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa4075ce7f97ba3a7c7184940e0add199">workstationRotationFunc</link>(Camera.main.transform.position,&#32;workstationPosition);
00311 &#32;&#32;&#32;&#32;}
00312 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00313"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a45e1d9a2aff57e76f3f41de59aa40a35">00313</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a45e1d9a2aff57e76f3f41de59aa40a35">DefaultDetermineWorkstationPosition</link>(Vector3&#32;userEyePosition,&#32;Quaternion&#32;userEyeRotation,
00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;workstationObjInitPosition,&#32;Vector3&#32;workstationObjInitVelocity,&#32;<emphasis role="keywordtype">float</emphasis>&#32;workstationObjRadius,
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;Vector3&gt;&#32;otherWorkstationPositions,&#32;List&lt;float&gt;&#32;otherWorkstationRadii)&#32;{
00316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Push&#32;velocity&#32;away&#32;from&#32;the&#32;camera&#32;if&#32;necessary.</emphasis>
00317 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;towardsCamera&#32;=&#32;(userEyePosition&#32;-&#32;workstationObjInitPosition).normalized;
00318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;towardsCameraness&#32;=&#32;Mathf.Clamp01(Vector3.Dot(towardsCamera,&#32;workstationObjInitVelocity.normalized));
00319 &#32;&#32;&#32;&#32;&#32;&#32;workstationObjInitVelocity&#32;=&#32;workstationObjInitVelocity&#32;+&#32;Vector3.Lerp(Vector3.zero,&#32;-towardsCamera&#32;*&#32;2.00F,&#32;towardsCameraness);
00320 
00321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;velocity&#32;direction&#32;on&#32;the&#32;XZ&#32;plane.</emphasis>
00322 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;groundPlaneVelocity&#32;=&#32;Vector3.ProjectOnPlane(workstationObjInitVelocity,&#32;Vector3.up);
00323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;groundPlaneDirectedness&#32;=&#32;groundPlaneVelocity.magnitude.Map(0.003F,&#32;0.40F,&#32;0F,&#32;1F);
00324 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;groundPlaneDirection&#32;=&#32;groundPlaneVelocity.normalized;
00325 
00326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;camera&#32;&quot;forward&quot;&#32;direction&#32;on&#32;the&#32;XZ&#32;plane.</emphasis>
00327 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;cameraGroundPlaneForward&#32;=&#32;Vector3.ProjectOnPlane(userEyeRotation&#32;*&#32;Vector3.forward,&#32;Vector3.up);
00328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;cameraGroundPlaneDirectedness&#32;=&#32;cameraGroundPlaneForward.magnitude.Map(0.001F,&#32;0.01F,&#32;0F,&#32;1F);
00329 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;alternateCameraDirection&#32;=&#32;(userEyeRotation&#32;*&#32;Vector3.forward).y&#32;&gt;&#32;0F&#32;?&#32;userEyeRotation&#32;*&#32;Vector3.down&#32;:&#32;userEyeRotation&#32;*&#32;Vector3.up;
00330 &#32;&#32;&#32;&#32;&#32;&#32;cameraGroundPlaneForward&#32;=&#32;Vector3.Slerp(alternateCameraDirection,&#32;cameraGroundPlaneForward,&#32;cameraGroundPlaneDirectedness);
00331 &#32;&#32;&#32;&#32;&#32;&#32;cameraGroundPlaneForward&#32;=&#32;cameraGroundPlaneForward.normalized;
00332 
00333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;a&#32;placement&#32;direction&#32;based&#32;on&#32;the&#32;camera&#32;and&#32;throw&#32;directions&#32;on&#32;the&#32;XZ&#32;plane.</emphasis>
00334 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;placementDirection&#32;=&#32;Vector3.Slerp(cameraGroundPlaneForward,&#32;groundPlaneDirection,&#32;groundPlaneDirectedness);
00335 
00336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;a&#32;placement&#32;position&#32;along&#32;the&#32;placement&#32;direction&#32;between&#32;min&#32;and&#32;max&#32;placement&#32;distances.</emphasis>
00337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;minPlacementDistance&#32;=&#32;0.25F;
00338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxPlacementDistance&#32;=&#32;0.51F;
00339 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;placementPosition&#32;=&#32;userEyePosition&#32;+&#32;placementDirection&#32;*&#32;Mathf.Lerp(minPlacementDistance,&#32;maxPlacementDistance,
00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(groundPlaneDirectedness&#32;*&#32;workstationObjInitVelocity.magnitude)
00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Map(0F,&#32;1.50F,&#32;0F,&#32;1F));
00342 
00343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;move&#32;far&#32;if&#32;the&#32;initial&#32;velocity&#32;is&#32;small.</emphasis>
00344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;overallDirectedness&#32;=&#32;workstationObjInitVelocity.magnitude.Map(0.00F,&#32;3.00F,&#32;0F,&#32;1F);
00345 &#32;&#32;&#32;&#32;&#32;&#32;placementPosition&#32;=&#32;Vector3.Lerp(workstationObjInitPosition,&#32;placementPosition,&#32;overallDirectedness&#32;*&#32;overallDirectedness);
00346 &#32;&#32;&#32;&#32;&#32;&#32;
00347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enforce&#32;placement&#32;height.</emphasis>
00348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;placementHeightFromCamera&#32;=&#32;-0.30F;
00349 &#32;&#32;&#32;&#32;&#32;&#32;placementPosition.y&#32;=&#32;userEyePosition.y&#32;+&#32;placementHeightFromCamera;
00350 
00351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enforce&#32;minimum&#32;placement&#32;away&#32;from&#32;user.</emphasis>
00352 &#32;&#32;&#32;&#32;&#32;&#32;Vector2&#32;cameraXZ&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(userEyePosition.x,&#32;userEyePosition.z);
00353 &#32;&#32;&#32;&#32;&#32;&#32;Vector2&#32;stationXZ&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(placementPosition.x,&#32;placementPosition.z);
00354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;placementDist&#32;=&#32;Vector2.Distance(cameraXZ,&#32;stationXZ);
00355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(placementDist&#32;&lt;&#32;minPlacementDistance)&#32;{
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;distanceLeft&#32;=&#32;(minPlacementDistance&#32;-&#32;placementDist)&#32;+&#32;workstationObjRadius;
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector2&#32;xzDisplacement&#32;=&#32;(stationXZ&#32;-&#32;cameraXZ).normalized&#32;*&#32;distanceLeft;
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;placementPosition&#32;+=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(xzDisplacement[0],&#32;0F,&#32;xzDisplacement[1]);
00359 &#32;&#32;&#32;&#32;&#32;&#32;}
00360 
00361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;placementPosition;
00362 &#32;&#32;&#32;&#32;}
00363 
<anchor xml:id="__workstation_behaviour_example_8cs_source_1l00364"/><link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a608204dd046521635b6b3fa83b63d734">00364</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;<link linkend="_class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a608204dd046521635b6b3fa83b63d734">DefaultDetermineWorkstationRotation</link>(Vector3&#32;userEyePos,&#32;Vector3&#32;workstationPosition)&#32;{
00365 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;toCamera&#32;=&#32;userEyePos&#32;-&#32;workstationPosition;
00366 &#32;&#32;&#32;&#32;&#32;&#32;toCamera.y&#32;=&#32;0F;
00367 &#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;placementRotation&#32;=&#32;Quaternion.LookRotation(toCamera.normalized,&#32;Vector3.up);
00368 
00369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;placementRotation;
00370 &#32;&#32;&#32;&#32;}
00371 
00372 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00373 
00374 &#32;&#32;}
00375 
00376 }
</programlisting></section>
