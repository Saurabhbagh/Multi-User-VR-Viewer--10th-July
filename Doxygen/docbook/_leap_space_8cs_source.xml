<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__leap_space_8cs_source">
<title>LeapSpace.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Space/LeapSpace.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00012 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_engine">UnityEngine</link>.Assertions;
00013 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_namespace_leap_1_1_unity">Unity</link>.<link linkend="_namespace_leap_1_1_unity_1_1_query">Query</link>;
00014 
00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_space">Leap.Unity.Space</link>&#32;{
00016 
<anchor xml:id="__leap_space_8cs_source_1l00017"/><link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space">00017</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">abstract</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space">LeapSpace</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor">LeapSpaceAnchor</link>&#32;{
00018 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;LeapSpace&gt;&#32;_enabledSpaces&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;LeapSpace&gt;();
<anchor xml:id="__leap_space_8cs_source_1l00019"/><link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1abb31d6bf34c02c7b40fe0e34efad87cb">00019</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;LeapSpace&gt;&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1abb31d6bf34c02c7b40fe0e34efad87cb">allEnabled</link>&#32;{
00020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00021 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;we&#32;are&#32;in&#32;the&#32;editor,&#32;don&apos;t&#32;bother&#32;with&#32;enable/disable&#32;lifecycle</emphasis>
00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//just&#32;use&#32;FindObjectsOfType!</emphasis>
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Application.isPlaying)&#32;{
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FindObjectsOfType&lt;LeapSpace&gt;().Query().Where(c&#32;=&gt;&#32;c.enabled).FillList(_enabledSpaces);
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00027 <emphasis role="preprocessor">#endif</emphasis>
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_enabledSpaces;
00029 &#32;&#32;&#32;&#32;&#32;&#32;}
00030 &#32;&#32;&#32;&#32;}
00031 
00032 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;LeapSpaceAnchor&gt;&#32;_anchors&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;LeapSpaceAnchor&gt;();
00033 
<anchor xml:id="__leap_space_8cs_source_1l00034"/><link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1ad15999d46ce8be0203f2a5b67ced8a8e">00034</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1ad15999d46ce8be0203f2a5b67ced8a8e">OnEnable</link>()&#32;{
00035 &#32;&#32;&#32;&#32;&#32;&#32;base.OnEnable();
00036 
00037 &#32;&#32;&#32;&#32;&#32;&#32;_enabledSpaces.Add(<emphasis role="keyword">this</emphasis>);
00038 
00039 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1ae41c6fa919d7fe3f52cb1917e8874cd3">RebuildHierarchy</link>();
00040 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1ad576147f05921e27d31504aca66a4e06">RecalculateTransformers</link>();
00041 &#32;&#32;&#32;&#32;}
00042 
<anchor xml:id="__leap_space_8cs_source_1l00043"/><link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1abc3c50579682cc467e55f2f857f18321">00043</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1abc3c50579682cc467e55f2f857f18321">OnDisable</link>()&#32;{
00044 &#32;&#32;&#32;&#32;&#32;&#32;base.OnDisable();
00045 
00046 &#32;&#32;&#32;&#32;&#32;&#32;_enabledSpaces.Remove(<emphasis role="keyword">this</emphasis>);
00047 
00048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;_anchors.Count;&#32;i++)&#32;{
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_anchors[i].space&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_anchors[i].transformer&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00051 &#32;&#32;&#32;&#32;&#32;&#32;}
00052 &#32;&#32;&#32;&#32;}
00053 
<anchor xml:id="__leap_space_8cs_source_1l00057"/><link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1a2fe263fdf2f99d707d36c8797cf9f4e4">00057</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;LeapSpaceAnchor&gt;&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1a2fe263fdf2f99d707d36c8797cf9f4e4">anchors</link>&#32;{
00058 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_anchors;
00060 &#32;&#32;&#32;&#32;&#32;&#32;}
00061 &#32;&#32;&#32;&#32;}
00062 
<anchor xml:id="__leap_space_8cs_source_1l00071"/><link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1ae41c6fa919d7fe3f52cb1917e8874cd3">00071</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1ae41c6fa919d7fe3f52cb1917e8874cd3">RebuildHierarchy</link>()&#32;{
00072 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(enabled,&#32;<emphasis role="stringliteral">&quot;Should&#32;never&#32;call&#32;RebuildHierarchy&#32;on&#32;a&#32;disabled&#32;space.&quot;</emphasis>);
00073 
00074 &#32;&#32;&#32;&#32;&#32;&#32;_anchors.Clear();
00075 &#32;&#32;&#32;&#32;&#32;&#32;rebuildHierarchyRecursively(transform);
00076 
00077 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(_anchors.Count&#32;&gt;&#32;0,&#32;<emphasis role="stringliteral">&quot;There&#32;should&#32;always&#32;be&#32;at&#32;least&#32;a&#32;single&#32;anchor&#32;(this&#32;one).&quot;</emphasis>);
00078 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(_anchors[0],&#32;<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;A&#32;space&#32;should&#32;always&#32;be&#32;the&#32;first&#32;element&#32;in&#32;the&#32;anchor&#32;list.&quot;</emphasis>);
00079 &#32;&#32;&#32;&#32;}
00080 
<anchor xml:id="__leap_space_8cs_source_1l00085"/><link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1ad576147f05921e27d31504aca66a4e06">00085</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1ad576147f05921e27d31504aca66a4e06">RecalculateTransformers</link>()&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(enabled,&#32;<emphasis role="stringliteral">&quot;Should&#32;never&#32;call&#32;RecalculateTransformers&#32;on&#32;a&#32;disabled&#32;space.&quot;</emphasis>);
00087 
00088 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor_1a6f98d35d75f83e2ff2c978715520c836">transformer</link>&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1a344e65e7be98cd41ba6c6804b283f681">CosntructBaseTransformer</link>();
00089 
00090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Depth-first&#32;pre-order&#32;ensures&#32;that&#32;a&#32;parent&#32;already&#32;has&#32;it&apos;s&#32;transformer&#32;up-to-date</emphasis>
00091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//by&#32;the&#32;time&#32;a&#32;direct&#32;child&#32;needs&#32;to&#32;be&#32;updated.</emphasis>
00092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;_anchors.Count;&#32;i++)&#32;{
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;anchor&#32;=&#32;_anchors[i];
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor_1a8df76f5c9ba6a0f169880fec6bca557b">parent</link>&#32;=&#32;anchor.<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor_1a8df76f5c9ba6a0f169880fec6bca557b">parent</link>;
00095 
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.IsNotNull(anchor,&#32;<emphasis role="stringliteral">&quot;Make&#32;sure&#32;to&#32;call&#32;RebuildHierarchy&#32;before&#32;RecalculateTransformers&#32;if&#32;you&#32;delete&#32;an&#32;anchor.&quot;</emphasis>);
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(anchor.enabled,&#32;<emphasis role="stringliteral">&quot;Make&#32;sure&#32;to&#32;all&#32;RebuildHierarchy&#32;before&#32;RecalculateTransformers&#32;if&#32;you&#32;disable&#32;an&#32;anchor.&quot;</emphasis>);
00098 
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1a37ecec9c078832e89a9b71b8455df62f">UpdateTransformer</link>(anchor.transformer,&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor_1a8df76f5c9ba6a0f169880fec6bca557b">parent</link>.<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor_1a6f98d35d75f83e2ff2c978715520c836">transformer</link>);
00100 &#32;&#32;&#32;&#32;&#32;&#32;}
00101 &#32;&#32;&#32;&#32;}
00102 
00107 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">abstract</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_hash">Hash</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1a42752b3c5be3fadbca02e0060a8cc7ea">GetSettingHash</link>();
00108 
00109 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">abstract</emphasis>&#32;<link linkend="_interface_leap_1_1_unity_1_1_space_1_1_i_transformer">ITransformer</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1a344e65e7be98cd41ba6c6804b283f681">CosntructBaseTransformer</link>();
00110 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">abstract</emphasis>&#32;<link linkend="_interface_leap_1_1_unity_1_1_space_1_1_i_transformer">ITransformer</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1af6ff18ae47b473989e65d321da089948">ConstructTransformer</link>(<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor">LeapSpaceAnchor</link>&#32;anchor);
00111 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">abstract</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1a37ecec9c078832e89a9b71b8455df62f">UpdateTransformer</link>(<link linkend="_interface_leap_1_1_unity_1_1_space_1_1_i_transformer">ITransformer</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor_1a6f98d35d75f83e2ff2c978715520c836">transformer</link>,&#32;<link linkend="_interface_leap_1_1_unity_1_1_space_1_1_i_transformer">ITransformer</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor_1a8df76f5c9ba6a0f169880fec6bca557b">parent</link>);
00112 
00113 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;rebuildHierarchyRecursively(Transform&#32;root)&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;anchor&#32;=&#32;root.GetComponent&lt;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor">LeapSpaceAnchor</link>&gt;();
00115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(anchor&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;anchor.enabled)&#32;{
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;anchor.<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor_1a77daae8f1a9f57ef4dc3e75fe5801bcd">space</link>&#32;=&#32;<emphasis role="keyword">this</emphasis>;
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;anchor.<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_anchor_1a1af147f4c4a59aec2552652d7eb6a0f1">RecalculateParentAnchor</link>();
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;anchor.transformer&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_space_1_1_leap_space_1af6ff18ae47b473989e65d321da089948">ConstructTransformer</link>(anchor);
00119 
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_anchors.Add(anchor);
00121 &#32;&#32;&#32;&#32;&#32;&#32;}
00122 
00123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;childCount&#32;=&#32;root.childCount;
00124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;childCount;&#32;i++)&#32;{
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rebuildHierarchyRecursively(root.GetChild(i));
00126 &#32;&#32;&#32;&#32;&#32;&#32;}
00127 &#32;&#32;&#32;&#32;}
00128 &#32;&#32;}
00129 }
</programlisting></section>
