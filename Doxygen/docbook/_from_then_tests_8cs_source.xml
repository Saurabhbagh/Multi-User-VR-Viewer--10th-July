<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__from_then_tests_8cs_source">
<title>FromThenTests.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Editor/Tests/FromThenTests.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System.Linq;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00012 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00013 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00014 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00015 
00016 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_tests">Leap.Unity.Tests</link>&#32;{
00017 
<anchor xml:id="__from_then_tests_8cs_source_1l00025"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests">00025</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests">FromThenTests</link>&#32;{
00026 
<anchor xml:id="__from_then_tests_8cs_source_1l00027"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1acd954e7e0d9b9f0f093ad937b37977bb">00027</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1acd954e7e0d9b9f0f093ad937b37977bb">EPSILON</link>&#32;=&#32;0.0006f;
00028 
00029 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Vector3</emphasis>
00030 
00031 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;VEC_A&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0.5f,&#32;&#32;0.2f,&#32;&#32;0.8f);
00032 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;VEC_B&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0.13f,&#32;0.98f,&#32;3000f);
00033 
00034 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00035"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a7cdf13e129d1e3721a6d66047162a040">00035</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a7cdf13e129d1e3721a6d66047162a040">FromVecAToVecB</link>()&#32;{
00036 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreVector3sEqual(VEC_A.Then(VEC_B.From(VEC_A)),&#32;VEC_B));
00037 &#32;&#32;&#32;&#32;}
00038 
00039 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00040"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a7c4872b9db928bb3a7ef3f3fb44b5965">00040</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a7c4872b9db928bb3a7ef3f3fb44b5965">ToVecBFromVecA</link>()&#32;{
00041 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreVector3sEqual(VEC_A.Then(VEC_A.To(VEC_B)),&#32;VEC_B));
00042 &#32;&#32;&#32;&#32;}
00043 
00044 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00045"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ab3937e24eca9eef96c0bfb6fb8453ac7">00045</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ab3937e24eca9eef96c0bfb6fb8453ac7">FromVecBToVecA</link>()&#32;{
00046 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreVector3sEqual(VEC_B.Then(VEC_A.From(VEC_B)),&#32;VEC_A));
00047 &#32;&#32;&#32;&#32;}
00048 
00049 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00050"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5e8fb810e064bbf2bf636fb0e6bd883d">00050</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5e8fb810e064bbf2bf636fb0e6bd883d">ToVecAFromVecB</link>()&#32;{
00051 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreVector3sEqual(VEC_B.Then(VEC_B.To(VEC_A)),&#32;VEC_A));
00052 &#32;&#32;&#32;&#32;}
00053 
00054 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AreVector3sEqual(Vector3&#32;a,&#32;Vector3&#32;b)&#32;{
00055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(a&#32;-&#32;b).magnitude&#32;&lt;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1acd954e7e0d9b9f0f093ad937b37977bb">EPSILON</link>;
00056 &#32;&#32;&#32;&#32;}
00057 
00058 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00059 
00060 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Quaternion</emphasis>
00061 
00062 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;QUAT_A&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.AngleAxis(90f,&#32;Vector3.up);&#32;}
00064 &#32;&#32;&#32;&#32;}
00065 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;QUAT_B&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.AngleAxis(43f,&#32;Vector3.one.normalized);&#32;}
00067 &#32;&#32;&#32;&#32;}
00068 
00069 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00070"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1aa961d130b906ffede0c2ddc6dda9ea23">00070</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1aa961d130b906ffede0c2ddc6dda9ea23">FromQuatAToQuatB</link>()&#32;{
00071 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreQuaternionsEqual(QUAT_A.Then(QUAT_B.From(QUAT_A)),&#32;QUAT_B));
00072 &#32;&#32;&#32;&#32;}
00073 
00074 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00075"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5e156d5526c6eac53248cf13b6d4af58">00075</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5e156d5526c6eac53248cf13b6d4af58">ToQuatAFromQuatB</link>()&#32;{
00076 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreQuaternionsEqual(QUAT_A.Then(QUAT_A.To(QUAT_B)),&#32;QUAT_B));
00077 &#32;&#32;&#32;&#32;}
00078 
00079 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00080"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a341af363c80bd833e3f3db5f65e3eb6d">00080</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a341af363c80bd833e3f3db5f65e3eb6d">FromQuatBToQuatA</link>()&#32;{
00081 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreQuaternionsEqual(QUAT_B.Then(QUAT_A.From(QUAT_B)),&#32;QUAT_A));
00082 &#32;&#32;&#32;&#32;}
00083 
00084 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00085"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ad06f16219a12cd095c0477548a01cfd4">00085</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ad06f16219a12cd095c0477548a01cfd4">ToQuatBFromQuatA</link>()&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreQuaternionsEqual(QUAT_B.Then(QUAT_B.To(QUAT_A)),&#32;QUAT_A));
00087 &#32;&#32;&#32;&#32;}
00088 
00089 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AreQuaternionsEqual(Quaternion&#32;a,&#32;Quaternion&#32;b)&#32;{
00090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(a.ToAngleAxisVector()&#32;-&#32;b.ToAngleAxisVector()).magnitude&#32;&lt;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1acd954e7e0d9b9f0f093ad937b37977bb">EPSILON</link>;
00091 &#32;&#32;&#32;&#32;}
00092 
00093 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00094 
00095 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Pose</emphasis>
00096 
<anchor xml:id="__from_then_tests_8cs_source_1l00097"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368">00097</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368">POSE_A</link>&#32;{
00098 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>(VEC_A,&#32;QUAT_A);&#32;}
00099 &#32;&#32;&#32;&#32;}
<anchor xml:id="__from_then_tests_8cs_source_1l00100"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998">00100</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998">POSE_B</link>&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>(VEC_B,&#32;QUAT_B);&#32;}
00102 &#32;&#32;&#32;&#32;}
00103 
00104 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00105"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a318538bbbf16d193449f22667dd06c02">00105</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a318538bbbf16d193449f22667dd06c02">FromPoseAToPoseB</link>()&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(ArePosesEqual(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998">POSE_B</link>.Then(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368">POSE_A</link>.From(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998">POSE_B</link>)),&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368">POSE_A</link>));
00107 &#32;&#32;&#32;&#32;}
00108 
00109 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00110"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a23fce4ff8ac27a902bb42f67d03b06ec">00110</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a23fce4ff8ac27a902bb42f67d03b06ec">ToPoseAFromPoseB</link>()&#32;{
00111 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(ArePosesEqual(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998">POSE_B</link>.Then(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998">POSE_B</link>.To(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368">POSE_A</link>)),&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368">POSE_A</link>));
00112 &#32;&#32;&#32;&#32;}
00113 
00114 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00115"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1aa52a61764a2e5538ffc20672fbd525b3">00115</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1aa52a61764a2e5538ffc20672fbd525b3">FromPoseBToPoseA</link>()&#32;{
00116 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(ArePosesEqual(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368">POSE_A</link>.Then(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998">POSE_B</link>.From(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368">POSE_A</link>)),&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998">POSE_B</link>));
00117 &#32;&#32;&#32;&#32;}
00118 
00119 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00120"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a509f04a79a3457852d987aeac2c5e3ed">00120</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a509f04a79a3457852d987aeac2c5e3ed">ToPoseBFromPoseA</link>()&#32;{
00121 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(ArePosesEqual(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368">POSE_A</link>.Then(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368">POSE_A</link>.To(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998">POSE_B</link>)),&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998">POSE_B</link>));
00122 &#32;&#32;&#32;&#32;}
00123 
00124 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ArePosesEqual(<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>&#32;a,&#32;<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>&#32;b)&#32;{
00125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AreVector3sEqual(a.<link linkend="_struct_leap_1_1_unity_1_1_pose_1ad90ba514c97484e10d747d9bdf9b81a9">position</link>,&#32;b.<link linkend="_struct_leap_1_1_unity_1_1_pose_1ad90ba514c97484e10d747d9bdf9b81a9">position</link>)
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;AreQuaternionsEqual(a.<link linkend="_struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad">rotation</link>,&#32;b.<link linkend="_struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad">rotation</link>);
00127 &#32;&#32;&#32;&#32;}
00128 
00129 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00130 
00131 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Matrix4x4</emphasis>
00132 
00133 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Matrix4x4&#32;MAT_A&#32;{
00134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Matrix4x4.TRS(Vector3.right&#32;*&#32;100f,
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion.AngleAxis(77f,&#32;Vector3.one),
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3.one&#32;*&#32;35f);
00138 &#32;&#32;&#32;&#32;&#32;&#32;}
00139 &#32;&#32;&#32;&#32;}
00140 
00141 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Matrix4x4&#32;MAT_B&#32;{
00142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Matrix4x4.TRS(Vector3.one&#32;*&#32;20f,
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion.AngleAxis(24f,&#32;Vector3.up),
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3.one&#32;*&#32;2f);
00146 &#32;&#32;&#32;&#32;&#32;&#32;}
00147 &#32;&#32;&#32;&#32;}
00148 
00149 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00150"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a1777b74b2ac9383c7dbd57a398731c8b">00150</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a1777b74b2ac9383c7dbd57a398731c8b">FromMatrixBToMatrixA</link>()&#32;{
00151 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreMatricesEqual(MAT_B.Then(MAT_A.From(MAT_B)),&#32;MAT_A));
00152 &#32;&#32;&#32;&#32;}
00153 
00154 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00155"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a4668cdb3c7583cb15e85f6195c887353">00155</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a4668cdb3c7583cb15e85f6195c887353">ToMatrixAFromMatrixB</link>()&#32;{
00156 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreMatricesEqual(MAT_B.Then(MAT_B.To(MAT_A)),&#32;MAT_A));
00157 &#32;&#32;&#32;&#32;}
00158 
00159 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__from_then_tests_8cs_source_1l00160"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ab7340c746f1644dd306c8c2bd0fb8494">00160</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ab7340c746f1644dd306c8c2bd0fb8494">FromMatrixAToMatrixB</link>()&#32;{
00161 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(AreMatricesEqual(MAT_A.Then(MAT_B.From(MAT_A)),&#32;MAT_B));
00162 &#32;&#32;&#32;&#32;}
00163 
00164 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AreMatricesEqual(Matrix4x4&#32;a,&#32;Matrix4x4&#32;b)&#32;{
00165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AreVector3sEqual(a.GetVector3(),&#32;b.GetVector3())
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;AreQuaternionsEqual(a.GetQuaternion(),&#32;b.GetQuaternion());
00167 &#32;&#32;&#32;&#32;}
00168 
00169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00170 
00171 &#32;&#32;}
00172 }
</programlisting></section>
