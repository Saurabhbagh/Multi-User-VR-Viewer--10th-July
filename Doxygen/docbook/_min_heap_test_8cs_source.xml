<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__min_heap_test_8cs_source">
<title>MinHeapTest.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Editor/Tests/MinHeapTest.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_tests">Leap.Unity.Tests</link>&#32;{
00014 
<anchor xml:id="__min_heap_test_8cs_source_1l00015"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_min_heap_test">00015</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_min_heap_test">MinHeapTest</link>&#32;{
00016 
00017 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>HeapElement&#32;:&#32;<link linkend="_interface_leap_1_1_unity_1_1_i_min_heap_node">IMinHeapNode</link>,&#32;IComparable&lt;HeapElement&gt;&#32;{
00018 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;heapIndex&#32;{&#32;<emphasis role="keyword">get</emphasis>;&#32;<emphasis role="keyword">set</emphasis>;&#32;}
00019 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;value;
00020 
00021 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;HeapElement(<emphasis role="keywordtype">float</emphasis>&#32;value)&#32;{
00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.value&#32;=&#32;value;
00023 &#32;&#32;&#32;&#32;&#32;&#32;}
00024 
00025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;CompareTo(HeapElement&#32;other)&#32;{
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value.CompareTo(other.value);
00027 &#32;&#32;&#32;&#32;&#32;&#32;}
00028 &#32;&#32;&#32;&#32;}
00029 
00030 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_min_heap">MinHeap&lt;HeapElement&gt;</link>&#32;_heap;
00031 
00032 &#32;&#32;&#32;&#32;[SetUp]
<anchor xml:id="__min_heap_test_8cs_source_1l00033"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_min_heap_test_1ab0fdc557c659de1134fbb10b18b884a4">00033</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_min_heap_test_1ab0fdc557c659de1134fbb10b18b884a4">Setup</link>()&#32;{
00034 &#32;&#32;&#32;&#32;&#32;&#32;_heap&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_min_heap">MinHeap&lt;HeapElement&gt;</link>();
00035 &#32;&#32;&#32;&#32;}
00036 
00037 &#32;&#32;&#32;&#32;[TearDown]
<anchor xml:id="__min_heap_test_8cs_source_1l00038"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_min_heap_test_1a2999b9ca314a777ce8711cfd2104d209">00038</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_min_heap_test_1a2999b9ca314a777ce8711cfd2104d209">Teardown</link>()&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a8496d10f15870cb9a6929db24e95622e">Clear</link>();
00040 &#32;&#32;&#32;&#32;&#32;&#32;_heap&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00041 &#32;&#32;&#32;&#32;}
00042 
00043 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__min_heap_test_8cs_source_1l00044"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_min_heap_test_1ae5610ac72a1afc8832b8dcc886381000">00044</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_min_heap_test_1ae5610ac72a1afc8832b8dcc886381000">HeapTest</link>()&#32;{
00045 &#32;&#32;&#32;&#32;&#32;&#32;_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a5be89c0c6f35537ce75c92d6b0d80255">Insert</link>(<emphasis role="keyword">new</emphasis>&#32;HeapElement(0));
00046 &#32;&#32;&#32;&#32;&#32;&#32;_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a5be89c0c6f35537ce75c92d6b0d80255">Insert</link>(<emphasis role="keyword">new</emphasis>&#32;HeapElement(2));
00047 &#32;&#32;&#32;&#32;&#32;&#32;_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a5be89c0c6f35537ce75c92d6b0d80255">Insert</link>(<emphasis role="keyword">new</emphasis>&#32;HeapElement(1));
00048 &#32;&#32;&#32;&#32;&#32;&#32;_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a5be89c0c6f35537ce75c92d6b0d80255">Insert</link>(<emphasis role="keyword">new</emphasis>&#32;HeapElement(-5));
00049 &#32;&#32;&#32;&#32;&#32;&#32;_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a5be89c0c6f35537ce75c92d6b0d80255">Insert</link>(<emphasis role="keyword">new</emphasis>&#32;HeapElement(10));
00050 
00051 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1aab63796b0e8d31cc957fd9e6ccfe6775">Validate</link>(),&#32;Is.EqualTo(<emphasis role="keyword">true</emphasis>));
00052 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a5bb42731474ab0432008386e3941ea8a">PeekMin</link>().value,&#32;Is.EqualTo(-5));
00053 
00054 &#32;&#32;&#32;&#32;&#32;&#32;_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a23bfa5babc3a4e4827675b4e935663d7">RemoveMin</link>();
00055 
00056 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1aab63796b0e8d31cc957fd9e6ccfe6775">Validate</link>(),&#32;Is.EqualTo(<emphasis role="keyword">true</emphasis>));
00057 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a5bb42731474ab0432008386e3941ea8a">PeekMin</link>().value,&#32;Is.EqualTo(0));
00058 
00059 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;element4&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HeapElement(4);
00060 &#32;&#32;&#32;&#32;&#32;&#32;_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a5be89c0c6f35537ce75c92d6b0d80255">Insert</link>(element4);
00061 
00062 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1aab63796b0e8d31cc957fd9e6ccfe6775">Validate</link>(),&#32;Is.EqualTo(<emphasis role="keyword">true</emphasis>));
00063 
00064 &#32;&#32;&#32;&#32;&#32;&#32;_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1ad383b9e47ce6d0324edcc9eda5b089de">Remove</link>(element4);
00065 
00066 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1aab63796b0e8d31cc957fd9e6ccfe6775">Validate</link>(),&#32;Is.EqualTo(<emphasis role="keyword">true</emphasis>));
00067 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_heap.<link linkend="_class_leap_1_1_unity_1_1_min_heap_1a61f29a6626cf9ff04ec8a066dd39d1c1">Count</link>,&#32;Is.EqualTo(4));
00068 &#32;&#32;&#32;&#32;}
00069 &#32;&#32;}
00070 }
</programlisting></section>
