<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__multi_typed_list_tests_8cs_source">
<title>MultiTypedListTests.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Editor/Tests/MultiTypedListTests.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00011 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_tests">Leap.Unity.Tests</link>&#32;{
00014 
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00015"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests">00015</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests">MultiTypedListTests</link>&#32;{
00016 
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00017"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00018"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a">00018</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a">A</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00019"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b">00019</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b">B</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00020"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c">00020</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c">C</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00021"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d">D</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00022"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e">00022</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e">E</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00023"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f">00023</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f">F</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00024"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g">00024</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g">G</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00025"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h">00025</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h">H</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
00026 
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00027"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_invalid_class">00027</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_invalid_class">InvalidClass</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class">BaseClass</link>&#32;{&#32;}
00028 
00029 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>ListClass&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_multi_typed_list">MultiTypedList</link>&lt;BaseClass,&#32;A,&#32;B,&#32;C,&#32;D,&#32;E,&#32;F,&#32;G,&#32;H&gt;&#32;{&#32;}
00030 
00031 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;ListClass&#32;_list;
00032 
00033 &#32;&#32;&#32;&#32;[SetUp]
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00034"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a27a72c13752661f9add82375dcc06830">00034</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a27a72c13752661f9add82375dcc06830">Setup</link>()&#32;{
00035 &#32;&#32;&#32;&#32;&#32;&#32;_list&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ListClass();
00036 &#32;&#32;&#32;&#32;}
00037 
00038 &#32;&#32;&#32;&#32;[TearDown]
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00039"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1abb37d7aef9813348c4dc7a8628570e44">00039</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1abb37d7aef9813348c4dc7a8628570e44">Teardown</link>()&#32;{
00040 &#32;&#32;&#32;&#32;&#32;&#32;_list&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00041 &#32;&#32;&#32;&#32;}
00042 
00043 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00044"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1af604b90f1b0aa0ad1a091604f65a197c">00044</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1af604b90f1b0aa0ad1a091604f65a197c">InsertTests</link>()&#32;{
00045 &#32;&#32;&#32;&#32;&#32;&#32;addOneOfEach();
00046 
00047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;countBefore&#32;=&#32;_list.Count;
00048 
00049 &#32;&#32;&#32;&#32;&#32;&#32;_list.Insert(0,&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a">A</link>());
00050 
00051 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;countAfter&#32;=&#32;_list.Count;
00052 
00053 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(countAfter,&#32;Is.EqualTo(countBefore&#32;+&#32;1));
00054 
00055 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[0],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a">A</link>&gt;());
00056 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[1],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a">A</link>&gt;());
00057 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[2],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b">B</link>&gt;());
00058 &#32;&#32;&#32;&#32;}
00059 
00060 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00061"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a57f2fc72968e11d119b250d4294c836f">00061</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a57f2fc72968e11d119b250d4294c836f">EnumerableTest</link>()&#32;{
00062 &#32;&#32;&#32;&#32;&#32;&#32;addOneOfEach();
00063 
00064 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;BaseClass&gt;&#32;objs&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;BaseClass&gt;();
00065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;obj&#32;<emphasis role="keywordflow">in</emphasis>&#32;_list)&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;objs.Add(obj);
00067 &#32;&#32;&#32;&#32;&#32;&#32;}
00068 
00069 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs[0],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a">A</link>&gt;());
00070 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs[1],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b">B</link>&gt;());
00071 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs[2],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c">C</link>&gt;());
00072 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs[3],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d">D</link>&gt;());
00073 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs[4],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e">E</link>&gt;());
00074 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs[5],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f">F</link>&gt;());
00075 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs[6],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g">G</link>&gt;());
00076 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(objs[7],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h">H</link>&gt;());
00077 &#32;&#32;&#32;&#32;}
00078 
00079 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00080"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a127d0c279c27fac41ad8e95811f0ba84">00080</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a127d0c279c27fac41ad8e95811f0ba84">RemoveAtTest1</link>()&#32;{
00081 &#32;&#32;&#32;&#32;&#32;&#32;addOneOfEach();
00082 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list.Count,&#32;Is.EqualTo(8));
00083 
00084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;8;&#32;i++)&#32;{
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_list.RemoveAt(0);
00086 &#32;&#32;&#32;&#32;&#32;&#32;}
00087 
00088 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list.Count,&#32;Is.EqualTo(0));
00089 &#32;&#32;&#32;&#32;}
00090 
00091 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00092"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a6c2b2ebcdc9e5b0adf49e28f3896d1fb">00092</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a6c2b2ebcdc9e5b0adf49e28f3896d1fb">RemoveAtTest2</link>()&#32;{
00093 &#32;&#32;&#32;&#32;&#32;&#32;addOneOfEach();
00094 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list.Count,&#32;Is.EqualTo(8));
00095 
00096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;8;&#32;i--&#32;!=&#32;0;)&#32;{
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_list.RemoveAt(i);
00098 &#32;&#32;&#32;&#32;&#32;&#32;}
00099 
00100 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list.Count,&#32;Is.EqualTo(0));
00101 &#32;&#32;&#32;&#32;}
00102 
00103 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00104"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a7d43113a447580147d5d7ec9550e017f">00104</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a7d43113a447580147d5d7ec9550e017f">IndexTest1</link>()&#32;{
00105 &#32;&#32;&#32;&#32;&#32;&#32;addOneOfEach();
00106 
00107 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[0],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a">A</link>&gt;());
00108 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[1],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b">B</link>&gt;());
00109 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[2],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c">C</link>&gt;());
00110 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[3],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d">D</link>&gt;());
00111 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[4],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e">E</link>&gt;());
00112 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[5],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f">F</link>&gt;());
00113 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[6],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g">G</link>&gt;());
00114 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[7],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h">H</link>&gt;());
00115 &#32;&#32;&#32;&#32;}
00116 
00117 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00118"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1ac796b65a0af06247f3525947b58f2e4f">00118</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1ac796b65a0af06247f3525947b58f2e4f">IndexTest2</link>()&#32;{
00119 &#32;&#32;&#32;&#32;&#32;&#32;addOneOfEach();
00120 
00121 &#32;&#32;&#32;&#32;&#32;&#32;_list.RemoveAt(0);
00122 &#32;&#32;&#32;&#32;&#32;&#32;_list.RemoveAt(0);
00123 &#32;&#32;&#32;&#32;&#32;&#32;_list.RemoveAt(0);
00124 &#32;&#32;&#32;&#32;&#32;&#32;_list.RemoveAt(0);
00125 
00126 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[0],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e">E</link>&gt;());
00127 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[1],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f">F</link>&gt;());
00128 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[2],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g">G</link>&gt;());
00129 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[3],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h">H</link>&gt;());
00130 &#32;&#32;&#32;&#32;}
00131 
00132 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00133"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a5e1c771c9f6a127947ded55b42e4101c">00133</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a5e1c771c9f6a127947ded55b42e4101c">AssignTest</link>()&#32;{
00134 &#32;&#32;&#32;&#32;&#32;&#32;addOneOfEach();
00135 
00136 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a">A</link>&#32;a&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a">A</link>();
00137 &#32;&#32;&#32;&#32;&#32;&#32;_list[5]&#32;=&#32;a;
00138 
00139 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[0],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a">A</link>&gt;());
00140 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[1],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b">B</link>&gt;());
00141 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[2],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c">C</link>&gt;());
00142 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[3],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d">D</link>&gt;());
00143 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[4],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e">E</link>&gt;());
00144 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[5],&#32;Is.EqualTo(a));
00145 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[6],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g">G</link>&gt;());
00146 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_list[7],&#32;Is.TypeOf&lt;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h">H</link>&gt;());
00147 &#32;&#32;&#32;&#32;}
00148 
00149 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__multi_typed_list_tests_8cs_source_1l00150"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a7ccf200faac9c14d44c01f7eac410778">00150</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a7ccf200faac9c14d44c01f7eac410778">AddInvalidObjectTest</link>()&#32;{
00151 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(()&#32;=&gt;&#32;{
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_list.Add(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_invalid_class">InvalidClass</link>());
00153 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;Throws.ArgumentException);
00154 &#32;&#32;&#32;&#32;}
00155 
00156 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;addOneOfEach()&#32;{
00157 &#32;&#32;&#32;&#32;&#32;&#32;_list.Add(<emphasis role="keyword">new</emphasis>&#32;A());
00158 &#32;&#32;&#32;&#32;&#32;&#32;_list.Add(<emphasis role="keyword">new</emphasis>&#32;B());
00159 &#32;&#32;&#32;&#32;&#32;&#32;_list.Add(<emphasis role="keyword">new</emphasis>&#32;C());
00160 &#32;&#32;&#32;&#32;&#32;&#32;_list.Add(<emphasis role="keyword">new</emphasis>&#32;D());
00161 &#32;&#32;&#32;&#32;&#32;&#32;_list.Add(<emphasis role="keyword">new</emphasis>&#32;E());
00162 &#32;&#32;&#32;&#32;&#32;&#32;_list.Add(<emphasis role="keyword">new</emphasis>&#32;F());
00163 &#32;&#32;&#32;&#32;&#32;&#32;_list.Add(<emphasis role="keyword">new</emphasis>&#32;G());
00164 &#32;&#32;&#32;&#32;&#32;&#32;_list.Add(<emphasis role="keyword">new</emphasis>&#32;H());
00165 &#32;&#32;&#32;&#32;}
00166 
00167 &#32;&#32;}
00168 }
</programlisting></section>
