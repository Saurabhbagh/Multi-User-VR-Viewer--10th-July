<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__serializable_dictionary_editor_8cs_source">
<title>SerializableDictionaryEditor.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Editor/SerializableDictionaryEditor.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_editor">UnityEditor</link>;
00012 <emphasis role="keyword">using</emphasis>&#32;UnityEditorInternal;
00013 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00014 
00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00016 
00017 &#32;&#32;[CustomPropertyDrawer(typeof(SerializableDictionaryBase),&#32;useForChildren:&#32;<emphasis role="keyword">true</emphasis>)]
<anchor xml:id="__serializable_dictionary_editor_8cs_source_1l00018"/><link linkend="_class_leap_1_1_unity_1_1_serializable_dictionary_editor">00018</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_serializable_dictionary_editor">SerializableDictionaryEditor</link>&#32;:&#32;PropertyDrawer&#32;{
00019 
00020 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;ReorderableList&#32;_list;
00021 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;SerializedProperty&#32;_currProperty;
00022 
00023 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;Pair&gt;&#32;_pairs&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Pair&gt;();
00024 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>Pair&#32;{
00025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index;
00026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDuplicate;
00027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;SerializedProperty&#32;a;
00028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;SerializedProperty&#32;b;
00029 
00030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Pair(<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDuplicate,&#32;SerializedProperty&#32;a,&#32;SerializedProperty&#32;b)&#32;{
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.index&#32;=&#32;index;
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.isDuplicate&#32;=&#32;isDuplicate;
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.a&#32;=&#32;a;
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.b&#32;=&#32;b;
00035 &#32;&#32;&#32;&#32;&#32;&#32;}
00036 &#32;&#32;&#32;&#32;}
00037 
<anchor xml:id="__serializable_dictionary_editor_8cs_source_1l00038"/><link linkend="_class_leap_1_1_unity_1_1_serializable_dictionary_editor_1adb1f96f5edce4d91a0ed55a4a25712a1">00038</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_serializable_dictionary_editor_1adb1f96f5edce4d91a0ed55a4a25712a1">SerializableDictionaryEditor</link>()&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;_list&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ReorderableList(_pairs,&#32;typeof(Pair),
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;draggable:&#32;<emphasis role="keyword">true</emphasis>,
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;displayHeader:&#32;<emphasis role="keyword">true</emphasis>,
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;displayAddButton:&#32;<emphasis role="keyword">true</emphasis>,
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;displayRemoveButton:&#32;<emphasis role="keyword">true</emphasis>);
00044 
00045 &#32;&#32;&#32;&#32;&#32;&#32;_list.drawElementCallback&#32;=&#32;drawElementCallback;
00046 &#32;&#32;&#32;&#32;&#32;&#32;_list.elementHeightCallback&#32;=&#32;elementHeightCallback;
00047 &#32;&#32;&#32;&#32;&#32;&#32;_list.drawHeaderCallback&#32;=&#32;drawHeader;
00048 &#32;&#32;&#32;&#32;&#32;&#32;_list.onAddCallback&#32;=&#32;onAddCallback;
00049 &#32;&#32;&#32;&#32;&#32;&#32;_list.onRemoveCallback&#32;=&#32;onRemoveCallback;
00050 &#32;&#32;&#32;&#32;&#32;&#32;_list.onReorderCallback&#32;=&#32;onReorderCallback;
00051 &#32;&#32;&#32;&#32;}
00052 
00053 
<anchor xml:id="__serializable_dictionary_editor_8cs_source_1l00054"/><link linkend="_class_leap_1_1_unity_1_1_serializable_dictionary_editor_1ad60f559bff4eb2c058a9a356ded02bb7">00054</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_serializable_dictionary_editor_1ad60f559bff4eb2c058a9a356ded02bb7">OnGUI</link>(Rect&#32;position,&#32;SerializedProperty&#32;property,&#32;GUIContent&#32;label)&#32;{
00055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(property.hasMultipleDifferentValues)&#32;{
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.Box(position,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.LabelField(position,&#32;<emphasis role="stringliteral">&quot;Multi-object&#32;editing&#32;not&#32;supported&#32;for&#32;Serialized&#32;Dictionaries.&quot;</emphasis>,&#32;EditorStyles.miniLabel);
00058 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_currProperty&#32;=&#32;property;
00060 
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(property);
00062 
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUIUtility.labelWidth&#32;/=&#32;2;
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_list.DoList(position);
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUIUtility.labelWidth&#32;*=&#32;2;
00066 &#32;&#32;&#32;&#32;&#32;&#32;}
00067 &#32;&#32;&#32;&#32;}
00068 
<anchor xml:id="__serializable_dictionary_editor_8cs_source_1l00069"/><link linkend="_class_leap_1_1_unity_1_1_serializable_dictionary_editor_1a7ba45bda36cd2ad85eec1b240f384976">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_serializable_dictionary_editor_1a7ba45bda36cd2ad85eec1b240f384976">GetPropertyHeight</link>(SerializedProperty&#32;property,&#32;GUIContent&#32;label)&#32;{
00070 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(property.hasMultipleDifferentValues)&#32;{
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;EditorGUIUtility.singleLineHeight;
00072 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(property);
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_list.GetHeight();
00075 &#32;&#32;&#32;&#32;&#32;&#32;}
00076 &#32;&#32;&#32;&#32;}
00077 
00078 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;updatePairsFromProperty(SerializedProperty&#32;property)&#32;{
00079 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;keys&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;_keys&quot;</emphasis>);
00080 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;values&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;_values&quot;</emphasis>);
00081 
00082 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;dup&#32;=&#32;(fieldInfo.GetValue(property.serializedObject.targetObject)&#32;as&#32;<link linkend="_interface_leap_1_1_unity_1_1_i_can_report_duplicate_information">ICanReportDuplicateInformation</link>).GetDuplicationInformation();
00083 
00084 &#32;&#32;&#32;&#32;&#32;&#32;_pairs.Clear();
00085 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;keys.arraySize;
00086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;key&#32;=&#32;keys.GetArrayElementAtIndex(i);
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;value&#32;=&#32;values.GetArrayElementAtIndex(i);
00089 
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDup&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;dup.Count)&#32;{
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isDup&#32;=&#32;dup[i]&#32;&gt;&#32;1;
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00094 
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_pairs.Add(<emphasis role="keyword">new</emphasis>&#32;Pair(i,&#32;isDup,&#32;key,&#32;value));
00096 &#32;&#32;&#32;&#32;&#32;&#32;}
00097 &#32;&#32;&#32;&#32;}
00098 
00099 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;drawHeader(Rect&#32;rect)&#32;{
00100 &#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.LabelField(rect,&#32;_currProperty.displayName);
00101 &#32;&#32;&#32;&#32;&#32;&#32;rect.x&#32;+=&#32;rect.width&#32;-&#32;110;
00102 &#32;&#32;&#32;&#32;&#32;&#32;rect.width&#32;=&#32;110;
00103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GUI.Button(rect,&#32;<emphasis role="stringliteral">&quot;Clear&#32;Duplicates&quot;</emphasis>))&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;markDirty(_currProperty);
00105 
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.RecordObject(_currProperty.serializedObject.targetObject,&#32;<emphasis role="stringliteral">&quot;Cleared&#32;duplicates&quot;</emphasis>);
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(fieldInfo.GetValue(_currProperty.serializedObject.targetObject)&#32;as&#32;ICanReportDuplicateInformation).ClearDuplicates();
00108 
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_currProperty.serializedObject.Update();
00110 
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;markDirty(_currProperty);
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(_currProperty);
00113 &#32;&#32;&#32;&#32;&#32;&#32;}
00114 &#32;&#32;&#32;&#32;}
00115 
00116 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;drawElementCallback(Rect&#32;rect,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isActive,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFocused)&#32;{
00117 &#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;leftRect&#32;=&#32;rect;
00118 &#32;&#32;&#32;&#32;&#32;&#32;leftRect.width&#32;*=&#32;(fieldInfo.GetValue(_currProperty.serializedObject.targetObject)&#32;as&#32;ISerializableDictionary).KeyDisplayRatio();
00119 
00120 &#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;rightRect&#32;=&#32;rect;
00121 &#32;&#32;&#32;&#32;&#32;&#32;rightRect.x&#32;+=&#32;leftRect.width;
00122 &#32;&#32;&#32;&#32;&#32;&#32;rightRect.width&#32;-=&#32;leftRect.width;
00123 
00124 &#32;&#32;&#32;&#32;&#32;&#32;Pair&#32;pair&#32;=&#32;_pairs[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>];
00125 
00126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pair.isDuplicate)&#32;{
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.contentColor&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Color(1,&#32;0.7f,&#32;0);
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.color&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Color(1,&#32;0.7f,&#32;0.5f);
00129 &#32;&#32;&#32;&#32;&#32;&#32;}
00130 
00131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pair.a.propertyType&#32;==&#32;SerializedPropertyType.ObjectReference&#32;&amp;&amp;&#32;pair.a.objectReferenceValue&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.contentColor&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Color(1,&#32;0,&#32;0);
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.color&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Color(1,&#32;0,&#32;0);
00134 &#32;&#32;&#32;&#32;&#32;&#32;}
00135 
00136 &#32;&#32;&#32;&#32;&#32;&#32;drawProp(pair.a,&#32;leftRect);
00137 
00138 &#32;&#32;&#32;&#32;&#32;&#32;GUI.contentColor&#32;=&#32;Color.white;
00139 &#32;&#32;&#32;&#32;&#32;&#32;GUI.color&#32;=&#32;Color.white;
00140 &#32;&#32;&#32;&#32;&#32;&#32;GUI.backgroundColor&#32;=&#32;Color.white;
00141 
00142 &#32;&#32;&#32;&#32;&#32;&#32;drawProp(pair.b,&#32;rightRect);
00143 &#32;&#32;&#32;&#32;}
00144 
00145 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;onAddCallback(ReorderableList&#32;list)&#32;{
00146 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;keys&#32;=&#32;_currProperty.FindPropertyRelative(<emphasis role="stringliteral">&quot;_keys&quot;</emphasis>);
00147 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;values&#32;=&#32;_currProperty.FindPropertyRelative(<emphasis role="stringliteral">&quot;_values&quot;</emphasis>);
00148 
00149 &#32;&#32;&#32;&#32;&#32;&#32;keys.arraySize++;
00150 &#32;&#32;&#32;&#32;&#32;&#32;values.arraySize++;
00151 
00152 &#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(_currProperty);
00153 &#32;&#32;&#32;&#32;}
00154 
00155 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;onRemoveCallback(ReorderableList&#32;list)&#32;{
00156 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;keys&#32;=&#32;_currProperty.FindPropertyRelative(<emphasis role="stringliteral">&quot;_keys&quot;</emphasis>);
00157 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;values&#32;=&#32;_currProperty.FindPropertyRelative(<emphasis role="stringliteral">&quot;_values&quot;</emphasis>);
00158 
00159 &#32;&#32;&#32;&#32;&#32;&#32;actuallyDeleteAt(keys,&#32;list.index);
00160 &#32;&#32;&#32;&#32;&#32;&#32;actuallyDeleteAt(values,&#32;list.index);
00161 
00162 &#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(_currProperty);
00163 &#32;&#32;&#32;&#32;}
00164 
00165 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;onReorderCallback(ReorderableList&#32;list)&#32;{
00166 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;keys&#32;=&#32;_currProperty.FindPropertyRelative(<emphasis role="stringliteral">&quot;_keys&quot;</emphasis>);
00167 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;values&#32;=&#32;_currProperty.FindPropertyRelative(<emphasis role="stringliteral">&quot;_values&quot;</emphasis>);
00168 
00169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;startIndex&#32;=&#32;-1,&#32;endIndex&#32;=&#32;-1;
00170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isForward&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00171 
00172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;_pairs.Count;&#32;i++)&#32;{
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;_pairs[i].index)&#32;{
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_pairs[i].index&#32;-&#32;i&#32;&gt;&#32;1)&#32;{
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isForward&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startIndex&#32;=&#32;i;
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00180 &#32;&#32;&#32;&#32;&#32;&#32;}
00181 
00182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;_pairs.Count;&#32;i--&#32;!=&#32;0;)&#32;{
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;_pairs[i].index)&#32;{
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endIndex&#32;=&#32;i;
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00187 &#32;&#32;&#32;&#32;&#32;&#32;}
00188 
00189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isForward)&#32;{
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keys.MoveArrayElement(startIndex,&#32;endIndex);
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.MoveArrayElement(startIndex,&#32;endIndex);
00192 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keys.MoveArrayElement(endIndex,&#32;startIndex);
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.MoveArrayElement(endIndex,&#32;startIndex);
00195 &#32;&#32;&#32;&#32;&#32;&#32;}
00196 
00197 &#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(_currProperty);
00198 &#32;&#32;&#32;&#32;}
00199 
00200 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;elementHeightCallback(<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
00201 &#32;&#32;&#32;&#32;&#32;&#32;Pair&#32;pair&#32;=&#32;_pairs[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>];
00202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;size&#32;=&#32;Mathf.Max(getSize(pair.a),&#32;getSize(pair.b));
00203 &#32;&#32;&#32;&#32;&#32;&#32;_list.elementHeight&#32;=&#32;size;
00204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;size;
00205 &#32;&#32;&#32;&#32;}
00206 
00207 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;getSize(SerializedProperty&#32;prop)&#32;{
00208 
00209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;size&#32;=&#32;0;
00210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prop.propertyType&#32;==&#32;SerializedPropertyType.Generic)&#32;{
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;copy&#32;=&#32;prop.Copy();
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;endProp&#32;=&#32;copy.GetEndProperty(<emphasis role="keyword">false</emphasis>);
00213 
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy.NextVisible(<emphasis role="keyword">true</emphasis>);
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!SerializedProperty.EqualContents(copy,&#32;endProp))&#32;{
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;EditorGUI.GetPropertyHeight(copy);
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy.NextVisible(<emphasis role="keyword">false</emphasis>);
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00219 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;EditorGUI.GetPropertyHeight(prop,&#32;GUIContent.none,&#32;<emphasis role="keyword">false</emphasis>);
00221 &#32;&#32;&#32;&#32;&#32;&#32;}
00222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;size;
00223 &#32;&#32;&#32;&#32;}
00224 
00225 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;drawProp(SerializedProperty&#32;prop,&#32;Rect&#32;r)&#32;{
00226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prop.propertyType&#32;==&#32;SerializedPropertyType.Generic)&#32;{
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;copy&#32;=&#32;prop.Copy();
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;endProp&#32;=&#32;copy.GetEndProperty(<emphasis role="keyword">false</emphasis>);
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy.NextVisible(<emphasis role="keyword">true</emphasis>);
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!SerializedProperty.EqualContents(copy,&#32;endProp))&#32;{
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.height&#32;=&#32;EditorGUI.GetPropertyHeight(copy);
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.PropertyField(r,&#32;copy,&#32;<emphasis role="keyword">true</emphasis>);
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.y&#32;+=&#32;r.height;
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy.NextVisible(<emphasis role="keyword">false</emphasis>);
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00236 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.height&#32;=&#32;EditorGUI.GetPropertyHeight(prop);
00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.PropertyField(r,&#32;prop,&#32;GUIContent.none,&#32;<emphasis role="keyword">false</emphasis>);
00239 &#32;&#32;&#32;&#32;&#32;&#32;}
00240 &#32;&#32;&#32;&#32;}
00241 
00242 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;markDirty(SerializedProperty&#32;property)&#32;{
00243 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;keys&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;_keys&quot;</emphasis>);
00244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size&#32;=&#32;keys.arraySize;
00245 
00246 &#32;&#32;&#32;&#32;&#32;&#32;keys.InsertArrayElementAtIndex(size);
00247 &#32;&#32;&#32;&#32;&#32;&#32;actuallyDeleteAt(keys,&#32;size);
00248 &#32;&#32;&#32;&#32;}
00249 
00250 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;actuallyDeleteAt(SerializedProperty&#32;property,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
00251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;arraySize&#32;=&#32;<emphasis role="keyword">property</emphasis>.arraySize;
00252 
00253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(property.arraySize&#32;==&#32;arraySize)&#32;{
00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.DeleteArrayElementAtIndex(index);
00255 &#32;&#32;&#32;&#32;&#32;&#32;}
00256 &#32;&#32;&#32;&#32;}
00257 &#32;&#32;}
00258 }
</programlisting></section>
