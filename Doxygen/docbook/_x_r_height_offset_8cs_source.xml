<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__x_r_height_offset_8cs_source">
<title>XRHeightOffset.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/XR/XRHeightOffset.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_namespace_leap_1_1_unity">Unity</link>.<link linkend="_namespace_leap_1_1_unity_1_1_attributes">Attributes</link>;
00012 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_engine">UnityEngine</link>.Serialization;
00013 
00014 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00015 
00016 &#32;&#32;[ExecuteInEditMode]
<anchor xml:id="__x_r_height_offset_8cs_source_1l00017"/><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset">00017</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset">XRHeightOffset</link>&#32;:&#32;MonoBehaviour&#32;{
00018 
00019 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Inspector</emphasis>
00020 
00021 &#32;&#32;&#32;&#32;[Header(<emphasis role="stringliteral">&quot;Room-scale&#32;Height&#32;Offset&quot;</emphasis>)]
00022 
00023 &#32;&#32;&#32;&#32;[SerializeField]
00024 &#32;&#32;&#32;&#32;[OnEditorChange(<emphasis role="stringliteral">&quot;roomScaleHeightOffset&quot;</emphasis>)]
00025 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;This&#32;height&#32;offset&#32;allows&#32;you&#32;to&#32;place&#32;your&#32;Rig&apos;s&#32;base&#32;location&#32;at&#32;the&#32;&quot;</emphasis>
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;approximate&#32;head&#32;position&#32;of&#32;your&#32;player&#32;during&#32;edit-time,&#32;while&#32;still&#32;&quot;</emphasis>
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;providing&#32;correct&#32;cross-platform&#32;XR&#32;rig&#32;heights.&#32;If&#32;the&#32;tracking&#32;space&#32;&quot;</emphasis>
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;type&#32;is&#32;detected&#32;as&#32;RoomScale,&#32;the&#32;Rig&#32;will&#32;be&#32;shifted&#32;DOWN&#32;by&#32;this&#32;height&#32;&quot;</emphasis>
00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;on&#32;Start,&#32;matching&#32;the&#32;expected&#32;floor&#32;height&#32;for,&#32;e.g.,&#32;SteamVR,&#32;&quot;</emphasis>
00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;while&#32;the&#32;rig&#32;remains&#32;unchanged&#32;for&#32;Android&#32;VR&#32;and&#32;Oculus&#32;single-camera&#32;&quot;</emphasis>
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;targets.&#32;&quot;</emphasis>
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;Use&#32;the&#32;magenta&#32;gizmo&#32;as&#32;a&#32;reference;&#32;the&#32;circles&#32;represent&#32;where&#32;your&#32;&quot;</emphasis>
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;floor&#32;will&#32;be&#32;in&#32;a&#32;Room-scale&#32;experience.&quot;</emphasis>)]
00034 &#32;&#32;&#32;&#32;[<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>(0f)]
00035 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;_roomScaleHeightOffset&#32;=&#32;1.6f;&#32;<emphasis role="comment">//&#32;average&#32;human&#32;height&#32;(or&#32;so)</emphasis>
00036 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;_lastKnownHeightOffset&#32;=&#32;0f;
<anchor xml:id="__x_r_height_offset_8cs_source_1l00037"/><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a1e2ab3d404c464995b8686af7ef82af8">00037</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a1e2ab3d404c464995b8686af7ef82af8">roomScaleHeightOffset</link>&#32;{
00038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_roomScaleHeightOffset;&#32;}
00039 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_roomScaleHeightOffset&#32;=&#32;value;
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.transform.position&#32;+=&#32;this.transform.up
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;(_roomScaleHeightOffset&#32;-&#32;_lastKnownHeightOffset);
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_lastKnownHeightOffset&#32;=&#32;value;
00044 &#32;&#32;&#32;&#32;&#32;&#32;}
00045 &#32;&#32;&#32;&#32;}
00046 
00047 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Auto&#32;Recenter</emphasis>
00048 &#32;&#32;&#32;&#32;[Header(<emphasis role="stringliteral">&quot;Auto&#32;Recenter&quot;</emphasis>)]
00049 &#32;&#32;&#32;&#32;
00050 &#32;&#32;&#32;&#32;[FormerlySerializedAs(<emphasis role="stringliteral">&quot;autoRecenterOnUserPresence&quot;</emphasis>)]
00051 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;If&#32;the&#32;detected&#32;XR&#32;device&#32;is&#32;present&#32;and&#32;supports&#32;userPresence,&#32;&quot;</emphasis>
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;checking&#32;this&#32;option&#32;will&#32;detect&#32;when&#32;userPresence&#32;changes&#32;from&#32;false&#32;to&#32;&quot;</emphasis>
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;true&#32;and&#32;call&#32;InputTracking.Recenter.&#32;Supported&#32;in&#32;2017.2&#32;and&#32;newer.&quot;</emphasis>)]
<anchor xml:id="__x_r_height_offset_8cs_source_1l00054"/><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a1e55bc85120cf7fd3590730e2d0bbf90">00054</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a1e55bc85120cf7fd3590730e2d0bbf90">recenterOnUserPresence</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00055 
00056 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;Calls&#32;InputTracking.Recenter&#32;on&#32;Start().&quot;</emphasis>)]
<anchor xml:id="__x_r_height_offset_8cs_source_1l00057"/><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1aa89278a651e5f9ae1a15b7bdfa210444">00057</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1aa89278a651e5f9ae1a15b7bdfa210444">recenterOnStart</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00058 
00059 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;If&#32;enabled,&#32;InputTracking.Recenter&#32;will&#32;be&#32;called&#32;when&#32;the&#32;assigned&#32;key&#32;is&#32;&quot;</emphasis>
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;pressed.&quot;</emphasis>)]
<anchor xml:id="__x_r_height_offset_8cs_source_1l00061"/><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1aa609a6e1bab2d7393766fabf41ca4eea">00061</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1aa609a6e1bab2d7393766fabf41ca4eea">recenterOnKey</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00062 
00063 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;When&#32;this&#32;key&#32;is&#32;pressed,&#32;InputTracking.Recenter&#32;will&#32;be&#32;called.&quot;</emphasis>)]
<anchor xml:id="__x_r_height_offset_8cs_source_1l00064"/><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1ab8fb43ee2bb8f789f5868ed4d64f1a1e">00064</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;KeyCode&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1ab8fb43ee2bb8f789f5868ed4d64f1a1e">recenterKey</link>&#32;=&#32;KeyCode.R;
00065 
00066 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_lastUserPresence;
00067 
00068 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00069 
00070 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Runtime&#32;Height&#32;Adjustment</emphasis>
00071 
00072 &#32;&#32;&#32;&#32;[Header(<emphasis role="stringliteral">&quot;Runtime&#32;Height&#32;Adjustment&quot;</emphasis>)]
00073 
00074 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;If&#32;enabled,&#32;then&#32;you&#32;can&#32;use&#32;the&#32;chosen&#32;keys&#32;to&#32;step&#32;the&#32;player&apos;s&#32;height&#32;&quot;</emphasis>
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;up&#32;and&#32;down&#32;at&#32;runtime.&quot;</emphasis>)]
<anchor xml:id="__x_r_height_offset_8cs_source_1l00076"/><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a160ba995082678c7cd11b8bd6ba6bdf6">00076</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a160ba995082678c7cd11b8bd6ba6bdf6">enableRuntimeAdjustment</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00077 
00078 &#32;&#32;&#32;&#32;[<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_disable_if">DisableIf</link>(<emphasis role="stringliteral">&quot;enableRuntimeAdjustment&quot;</emphasis>,&#32;isEqualTo:&#32;<emphasis role="keyword">false</emphasis>)]
00079 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;Press&#32;this&#32;key&#32;on&#32;the&#32;keyboard&#32;to&#32;adjust&#32;the&#32;height&#32;offset&#32;up&#32;by&#32;stepSize.&quot;</emphasis>)]
<anchor xml:id="__x_r_height_offset_8cs_source_1l00080"/><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a4e0c22e1e51d4854433ac0cc8a444b81">00080</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;KeyCode&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a4e0c22e1e51d4854433ac0cc8a444b81">stepUpKey</link>&#32;=&#32;KeyCode.UpArrow;
00081 
00082 &#32;&#32;&#32;&#32;[<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_disable_if">DisableIf</link>(<emphasis role="stringliteral">&quot;enableRuntimeAdjustment&quot;</emphasis>,&#32;isEqualTo:&#32;<emphasis role="keyword">false</emphasis>)]
00083 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;Press&#32;this&#32;key&#32;on&#32;the&#32;keyboard&#32;to&#32;adjust&#32;the&#32;height&#32;offset&#32;down&#32;by&#32;stepSize.&quot;</emphasis>)]
<anchor xml:id="__x_r_height_offset_8cs_source_1l00084"/><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a90410015bda7681115417d82d3a13da3">00084</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;KeyCode&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a90410015bda7681115417d82d3a13da3">stepDownKey</link>&#32;=&#32;KeyCode.DownArrow;
00085 
00086 &#32;&#32;&#32;&#32;[<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_disable_if">DisableIf</link>(<emphasis role="stringliteral">&quot;enableRuntimeAdjustment&quot;</emphasis>,&#32;isEqualTo:&#32;<emphasis role="keyword">false</emphasis>)]
<anchor xml:id="__x_r_height_offset_8cs_source_1l00087"/><link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1abd0d557a4556194d4185277392523ac7">00087</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1abd0d557a4556194d4185277392523ac7">stepSize</link>&#32;=&#32;0.1f;
00088 
00089 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00090 
00091 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00092 
00093 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Unity&#32;Events</emphasis>
00094 
00095 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Start()&#32;{
00096 &#32;&#32;&#32;&#32;&#32;&#32;_lastKnownHeightOffset&#32;=&#32;_roomScaleHeightOffset;
00097 
00098 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(XRSupportUtil.IsRoomScale())&#32;{
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.transform.position&#32;-=&#32;this.transform.up&#32;*&#32;_roomScaleHeightOffset;
00100 &#32;&#32;&#32;&#32;&#32;&#32;}
00101 
00102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1aa89278a651e5f9ae1a15b7bdfa210444">recenterOnStart</link>)&#32;{
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XRSupportUtil.Recenter();
00104 &#32;&#32;&#32;&#32;&#32;&#32;}
00105 &#32;&#32;&#32;&#32;}
00106 
00107 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Update()&#32;{
00108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Application.isPlaying)&#32;{
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;deviceIsPresent&#32;=&#32;XRSupportUtil.IsXRDevicePresent();
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(deviceIsPresent)&#32;{
00111 
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a160ba995082678c7cd11b8bd6ba6bdf6">enableRuntimeAdjustment</link>)&#32;{
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Input.GetKeyDown(<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a4e0c22e1e51d4854433ac0cc8a444b81">stepUpKey</link>))&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a1e2ab3d404c464995b8686af7ef82af8">roomScaleHeightOffset</link>&#32;+=&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1abd0d557a4556194d4185277392523ac7">stepSize</link>;
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00116 
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Input.GetKeyDown(<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a90410015bda7681115417d82d3a13da3">stepDownKey</link>))&#32;{
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a1e2ab3d404c464995b8686af7ef82af8">roomScaleHeightOffset</link>&#32;-=&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1abd0d557a4556194d4185277392523ac7">stepSize</link>;
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00121 
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a1e55bc85120cf7fd3590730e2d0bbf90">recenterOnUserPresence</link>&#32;&amp;&amp;&#32;!XRSupportUtil.IsRoomScale())&#32;{
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;userPresence&#32;=&#32;XRSupportUtil.IsUserPresent();
00124 
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_lastUserPresence&#32;!=&#32;userPresence)&#32;{
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(userPresence)&#32;{
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XRSupportUtil.Recenter();
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00129 
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_lastUserPresence&#32;=&#32;userPresence;
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00133 
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1aa609a6e1bab2d7393766fabf41ca4eea">recenterOnKey</link>&#32;&amp;&amp;&#32;Input.GetKeyDown(<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1ab8fb43ee2bb8f789f5868ed4d64f1a1e">recenterKey</link>))&#32;{
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XRSupportUtil.Recenter();
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00138 &#32;&#32;&#32;&#32;&#32;&#32;}
00139 &#32;&#32;&#32;&#32;}
00140 
00141 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00142 
00143 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Gizmos</emphasis>
00144 
00145 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnDrawGizmos()&#32;{
00146 &#32;&#32;&#32;&#32;&#32;&#32;Gizmos.color&#32;=&#32;Color.Lerp(Color.magenta,&#32;Color.white,&#32;0.3f).WithAlpha(0.5f);
00147 
00148 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;totalHeight&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_x_r_height_offset_1a1e2ab3d404c464995b8686af7ef82af8">roomScaleHeightOffset</link>;
00149 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;segmentsPerMeter&#32;=&#32;32;
00150 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;numSegments&#32;=&#32;totalHeight&#32;*&#32;segmentsPerMeter;
00151 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;segmentLength&#32;=&#32;totalHeight&#32;/&#32;numSegments;
00152 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;rigPos&#32;=&#32;this.transform.position;
00153 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;down&#32;=&#32;this.transform.rotation&#32;*&#32;Vector3.down;
00154 &#32;&#32;&#32;&#32;&#32;&#32;
00155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_valve_1_1_v_r_1aecd07a81fe79a9f96c6787513e2d98e4ae498749f3c42246d50b15c81c101d988">Application</link>.isPlaying&#32;&amp;&amp;&#32;XRSupportUtil.IsRoomScale())&#32;{
00156 
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;roomScaleGizmoOffset&#32;=&#32;Vector3.up&#32;*&#32;totalHeight;
00158 
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rigPos&#32;+=&#32;roomScaleGizmoOffset;
00160 &#32;&#32;&#32;&#32;&#32;&#32;}
00161 
00162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numSegments;&#32;i&#32;+=&#32;2)&#32;{
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;segStart&#32;=&#32;rigPos&#32;+&#32;down&#32;*&#32;segmentLength&#32;*&#32;i;
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;segEnd&#32;&#32;&#32;=&#32;rigPos&#32;+&#32;down&#32;*&#32;segmentLength&#32;*&#32;(i&#32;+&#32;1);
00165 
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Gizmos.DrawLine(segStart,&#32;segEnd);
00167 &#32;&#32;&#32;&#32;&#32;&#32;}
00168 
00169 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;groundPos&#32;=&#32;rigPos&#32;+&#32;down&#32;*&#32;totalHeight;
00170 &#32;&#32;&#32;&#32;&#32;&#32;drawCircle(groundPos,&#32;down,&#32;0.01f);
00171 &#32;&#32;&#32;&#32;&#32;&#32;Gizmos.color&#32;=&#32;Gizmos.color.WithAlpha(0.3f);
00172 &#32;&#32;&#32;&#32;&#32;&#32;drawCircle(groundPos,&#32;down,&#32;0.10f);
00173 &#32;&#32;&#32;&#32;&#32;&#32;Gizmos.color&#32;=&#32;Gizmos.color.WithAlpha(0.2f);
00174 &#32;&#32;&#32;&#32;&#32;&#32;drawCircle(groundPos,&#32;down,&#32;0.20f);
00175 &#32;&#32;&#32;&#32;}
00176 
00177 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;drawCircle(Vector3&#32;position,&#32;Vector3&#32;normal,&#32;<emphasis role="keywordtype">float</emphasis>&#32;radius)&#32;{
00178 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;r&#32;=&#32;normal.Perpendicular()&#32;*&#32;radius;
00179 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;q&#32;=&#32;Quaternion.AngleAxis(360f&#32;/&#32;32,&#32;normal);
00180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;32;&#32;i++)&#32;{
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;tempR&#32;=&#32;q&#32;*&#32;r;
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Gizmos.DrawLine(position&#32;+&#32;r,&#32;position&#32;+&#32;tempR);
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r&#32;=&#32;tempR;
00184 &#32;&#32;&#32;&#32;&#32;&#32;}
00185 &#32;&#32;&#32;&#32;}
00186 
00187 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00188 
00189 &#32;&#32;}
00190 
00191 }
</programlisting></section>
