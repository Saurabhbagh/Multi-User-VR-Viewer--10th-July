<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__leap_eye_dislocator_8cs_source">
<title>LeapEyeDislocator.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/XR/LeapEyeDislocator.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00011 
00012 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00013 &#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Attributes;
00014 
00019 &#32;&#32;[RequireComponent(typeof(LeapXRServiceProvider))]
<anchor xml:id="__leap_eye_dislocator_8cs_source_1l00020"/><link linkend="_class_leap_1_1_unity_1_1_leap_eye_dislocator">00020</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_leap_eye_dislocator">LeapEyeDislocator</link>&#32;:&#32;MonoBehaviour&#32;{
00021 
00022 &#32;&#32;&#32;&#32;[SerializeField]
00023 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_useCustomBaseline&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00024 
00025 &#32;&#32;&#32;&#32;[<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>(0),&#32;Units(<emphasis role="stringliteral">&quot;MM&quot;</emphasis>),&#32;InspectorName(<emphasis role="stringliteral">&quot;Baseline&quot;</emphasis>)]
00026 &#32;&#32;&#32;&#32;[SerializeField]
00027 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;_customBaselineValue&#32;=&#32;64;
00028 
00029 &#32;&#32;&#32;&#32;[SerializeField]
00030 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_showEyePositions&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00031 
00032 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_leap_service_provider">LeapServiceProvider</link>&#32;_provider;
00033 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Maybe&lt;float&gt;&#32;_deviceBaseline&#32;=&#32;Maybe.None;
00034 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_hasVisitedPreCull&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00035 
00036 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Camera&#32;_cachedCamera;
00037 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Camera&#32;_camera&#32;{
00038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_cachedCamera&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_cachedCamera&#32;=&#32;GetComponent&lt;Camera&gt;();
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_cachedCamera;
00043 &#32;&#32;&#32;&#32;&#32;&#32;}
00044 &#32;&#32;&#32;&#32;}
00045 
00046 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;onDevice(<link linkend="_class_leap_1_1_device">Device</link>&#32;device)&#32;{
00047 &#32;&#32;&#32;&#32;&#32;&#32;_deviceBaseline&#32;=&#32;Maybe.Some(device.<link linkend="_class_leap_1_1_device_1a94d74a3c07a217a1aca1e4c88852f546">Baseline</link>);
00048 &#32;&#32;&#32;&#32;}
00049 
00050 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnEnable()&#32;{
00051 &#32;&#32;&#32;&#32;&#32;&#32;_provider&#32;=&#32;GetComponent&lt;LeapServiceProvider&gt;();
00052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_provider&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_provider&#32;=&#32;GetComponentInChildren&lt;LeapServiceProvider&gt;();
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_provider&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enabled&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00058 &#32;&#32;&#32;&#32;&#32;&#32;}
00059 
00060 &#32;&#32;&#32;&#32;&#32;&#32;_provider.<link linkend="_class_leap_1_1_unity_1_1_leap_service_provider_1a3d7b925adafada59a54fd28c53a7f86d">OnDeviceSafe</link>&#32;+=&#32;onDevice;
00061 &#32;&#32;&#32;&#32;}
00062 
00063 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnDisable()&#32;{
00064 &#32;&#32;&#32;&#32;&#32;&#32;_camera.ResetStereoViewMatrices();
00065 
00066 &#32;&#32;&#32;&#32;&#32;&#32;_provider.<link linkend="_class_leap_1_1_unity_1_1_leap_service_provider_1a3d7b925adafada59a54fd28c53a7f86d">OnDeviceSafe</link>&#32;-=&#32;onDevice;
00067 &#32;&#32;&#32;&#32;}
00068 
00069 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Update()&#32;{
00070 &#32;&#32;&#32;&#32;&#32;&#32;_camera.ResetStereoViewMatrices();
00071 &#32;&#32;&#32;&#32;&#32;&#32;_hasVisitedPreCull&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00072 &#32;&#32;&#32;&#32;}
00073 
00074 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnPreCull()&#32;{
00075 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_hasVisitedPreCull)&#32;{
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00077 &#32;&#32;&#32;&#32;&#32;&#32;}
00078 &#32;&#32;&#32;&#32;&#32;&#32;_hasVisitedPreCull&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00079 
00080 &#32;&#32;&#32;&#32;&#32;&#32;Maybe&lt;float&gt;&#32;baselineToUse&#32;=&#32;Maybe.None;
00081 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_useCustomBaseline)&#32;{
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baselineToUse&#32;=&#32;Maybe.Some(_customBaselineValue);
00083 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baselineToUse&#32;=&#32;_deviceBaseline;
00085 &#32;&#32;&#32;&#32;&#32;&#32;}
00086 
00087 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;baselineValue;
00088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(baselineToUse.TryGetValue(out&#32;baselineValue))&#32;{
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baselineValue&#32;*=&#32;1e-3f;
00090 
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4&#32;leftMat&#32;=&#32;_camera.GetStereoViewMatrix(Camera.StereoscopicEye.Left);
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4&#32;rightMat&#32;=&#32;_camera.GetStereoViewMatrix(Camera.StereoscopicEye.Right);
00093 
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;leftPos&#32;=&#32;leftMat.inverse.MultiplyPoint3x4(Vector3.zero);
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;rightPos&#32;=&#32;rightMat.inverse.MultiplyPoint3x4(Vector3.zero);
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;existingBaseline&#32;=&#32;Vector3.Distance(leftPos,&#32;rightPos);
00097 
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;baselineAdjust&#32;=&#32;baselineValue&#32;-&#32;existingBaseline;
00099 
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adjustViewMatrix(Camera.StereoscopicEye.Left,&#32;baselineAdjust);
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adjustViewMatrix(Camera.StereoscopicEye.Right,&#32;baselineAdjust);
00102 &#32;&#32;&#32;&#32;&#32;&#32;}
00103 &#32;&#32;&#32;&#32;}
00104 
00105 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;adjustViewMatrix(Camera.StereoscopicEye&#32;eye,&#32;<emphasis role="keywordtype">float</emphasis>&#32;baselineAdjust)&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;eyeOffset&#32;=&#32;eye&#32;==&#32;Camera.StereoscopicEye.Left&#32;?&#32;1&#32;:&#32;-1;
00107 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;ipdOffset&#32;=&#32;eyeOffset&#32;*&#32;Vector3.right&#32;*&#32;baselineAdjust&#32;*&#32;0.5f;
00108 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;providerForwardOffset&#32;=&#32;Vector3.zero,&#32;
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;providerVerticalOffset&#32;=&#32;Vector3.zero;
00110 &#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;providerRotation&#32;=&#32;Quaternion.Euler(0f,&#32;180f,&#32;0f);
00111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_provider&#32;is&#32;<link linkend="_class_leap_1_1_unity_1_1_leap_x_r_service_provider">LeapXRServiceProvider</link>)&#32;{
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_leap_x_r_service_provider">LeapXRServiceProvider</link>&#32;_xrProvider&#32;=&#32;_provider&#32;as&#32;<link linkend="_class_leap_1_1_unity_1_1_leap_x_r_service_provider">LeapXRServiceProvider</link>;
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;providerForwardOffset&#32;=&#32;Vector3.forward&#32;*&#32;_xrProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_x_r_service_provider_1ab78d04f47fd47ce45f7e5da319e29cee">deviceOffsetZAxis</link>;
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;providerVerticalOffset&#32;=&#32;-Vector3.up&#32;*&#32;_xrProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_x_r_service_provider_1a6c906e4ec5e7775596344ec87fda4681">deviceOffsetYAxis</link>;
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;providerRotation&#32;=&#32;Quaternion.AngleAxis(_xrProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_x_r_service_provider_1aabddae01cbb798a7cf340a2e1676e8ed">deviceTiltXAxis</link>,&#32;Vector3.right);
00116 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4&#32;imageMatWarp&#32;=&#32;_camera.projectionMatrix
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Matrix4x4.TRS(Vector3.zero,&#32;providerRotation,&#32;Vector3.one)
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;_camera.projectionMatrix.inverse;
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Shader.SetGlobalMatrix(<emphasis role="stringliteral">&quot;_LeapGlobalWarpedOffset&quot;</emphasis>,&#32;imageMatWarp);
00121 &#32;&#32;&#32;&#32;&#32;&#32;}
00122 
00123 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;existingMatrix&#32;=&#32;_camera.GetStereoViewMatrix(eye);
00124 &#32;&#32;&#32;&#32;&#32;&#32;_camera.SetStereoViewMatrix(eye,&#32;Matrix4x4.TRS(Vector3.zero,&#32;providerRotation,&#32;Vector3.one)&#32;*
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4.Translate(providerForwardOffset&#32;+&#32;ipdOffset)&#32;*
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4.Translate(providerVerticalOffset)&#32;*
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;existingMatrix);
00128 &#32;&#32;&#32;&#32;}
00129 
00130 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnDrawGizmos()&#32;{
00131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_showEyePositions&#32;&amp;&amp;&#32;Application.isPlaying)&#32;{
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4&#32;leftMat&#32;=&#32;_camera.GetStereoViewMatrix(Camera.StereoscopicEye.Left);
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4&#32;rightMat&#32;=&#32;_camera.GetStereoViewMatrix(Camera.StereoscopicEye.Right);
00134 
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;leftPos&#32;=&#32;leftMat.inverse.MultiplyPoint3x4(Vector3.zero);
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;rightPos&#32;=&#32;rightMat.inverse.MultiplyPoint3x4(Vector3.zero);
00137 
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Gizmos.color&#32;=&#32;Color.white;
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Gizmos.DrawSphere(leftPos,&#32;0.02f);
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Gizmos.DrawSphere(rightPos,&#32;0.02f);
00141 
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Gizmos.color&#32;=&#32;Color.blue;
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Gizmos.DrawLine(leftPos,&#32;rightPos);
00144 &#32;&#32;&#32;&#32;&#32;&#32;}
00145 &#32;&#32;&#32;&#32;}
00146 &#32;&#32;}
00147 }
</programlisting></section>
