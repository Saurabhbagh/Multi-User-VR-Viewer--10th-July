<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__rigged_hand_8cs_source">
<title>RiggedHand.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/RiggedHand.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00012 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00013 <emphasis role="keyword">using</emphasis>&#32;System.Linq;
00014 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>;
00015 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_namespace_leap_1_1_unity">Unity</link>.<link linkend="_namespace_leap_1_1_unity_1_1_attributes">Attributes</link>;
00016 
00017 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
<anchor xml:id="__rigged_hand_8cs_source_1l00019"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand">00019</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_rigged_hand">RiggedHand</link>&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model">HandModel</link>&#32;{
<anchor xml:id="__rigged_hand_8cs_source_1l00020"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aafa1ebadbf7fb5901f22f5834bac4dba">00020</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<link linkend="_namespace_leap_1_1_unity_1a186e5eb0a2b743f1f6b79346f0ab8ad0">ModelType</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aafa1ebadbf7fb5901f22f5834bac4dba">HandModelType</link>&#32;{
00021 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_leap_1_1_unity_1a186e5eb0a2b743f1f6b79346f0ab8ad0">ModelType</link>.Graphics;
00023 &#32;&#32;&#32;&#32;&#32;&#32;}
00024 &#32;&#32;&#32;&#32;}
<anchor xml:id="__rigged_hand_8cs_source_1l00025"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aa44bd1ae715125809d5803b293eb1bee">00025</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aa44bd1ae715125809d5803b293eb1bee">SupportsEditorPersistence</link>()&#32;{
00026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ab8de11dc599037ace3a7bce66cdb8b94">SetEditorLeapPose</link>;
00027 &#32;&#32;&#32;&#32;}
00028 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;When&#32;True,&#32;hands&#32;will&#32;be&#32;put&#32;into&#32;a&#32;Leap&#32;editor&#32;pose&#32;near&#32;the&#32;LeapServiceProvider&apos;s&#32;transform.&#32;&#32;When&#32;False,&#32;the&#32;hands&#32;will&#32;be&#32;returned&#32;to&#32;their&#32;Start&#32;Pose&#32;if&#32;it&#32;has&#32;been&#32;saved.&quot;</emphasis>)]
00029 &#32;&#32;&#32;&#32;[SerializeField]
00030 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;setEditorLeapPose&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00031 &#32;&#32;&#32;&#32;
<anchor xml:id="__rigged_hand_8cs_source_1l00032"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ab8de11dc599037ace3a7bce66cdb8b94">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ab8de11dc599037ace3a7bce66cdb8b94">SetEditorLeapPose</link>&#32;{
00033 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;setEditorLeapPose;&#32;}
00034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;<emphasis role="keyword">false</emphasis>)&#32;{
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aad0ba3eb19fbd881af90b7e5b6ffaf7d">RestoreJointsStartPose</link>();
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setEditorLeapPose&#32;=&#32;value;
00039 &#32;&#32;&#32;&#32;&#32;&#32;}
00040 &#32;&#32;&#32;&#32;}
00041 &#32;&#32;&#32;&#32;[SerializeField]
<anchor xml:id="__rigged_hand_8cs_source_1l00042"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a58577754d59a13b304fd1855bab163cf">00042</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a58577754d59a13b304fd1855bab163cf">DeformPositionsInFingers</link>;
00043 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;When&#32;True,&#32;hands&#32;will&#32;be&#32;put&#32;into&#32;a&#32;Leap&#32;editor&#32;pose&#32;near&#32;the&#32;LeapServiceProvider&apos;s&#32;transform.&#32;&#32;When&#32;False,&#32;the&#32;hands&#32;will&#32;be&#32;returned&#32;to&#32;their&#32;Start&#32;Pose&#32;if&#32;it&#32;has&#32;been&#32;saved.&quot;</emphasis>)]
00044 &#32;&#32;&#32;&#32;[SerializeField]
00045 &#32;&#32;&#32;&#32;[HideInInspector]
00046 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;deformPositionsState&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00047 &#32;&#32;&#32;&#32;
00048 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;Hands&#32;are&#32;typically&#32;rigged&#32;in&#32;3D&#32;packages&#32;with&#32;the&#32;palm&#32;transform&#32;near&#32;the&#32;wrist.&#32;Uncheck&#32;this&#32;is&#32;your&#32;model&apos;s&#32;palm&#32;transform&#32;is&#32;at&#32;the&#32;center&#32;of&#32;the&#32;palm&#32;similar&#32;to&#32;Leap&apos;s&#32;API&#32;drives&quot;</emphasis>)]
<anchor xml:id="__rigged_hand_8cs_source_1l00049"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aba36c91e04e41858d120462170cf7902">00049</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aba36c91e04e41858d120462170cf7902">ModelPalmAtLeapWrist</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00050 
00051 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;Set&#32;to&#32;True&#32;if&#32;each&#32;finger&#32;has&#32;an&#32;extra&#32;trasform&#32;between&#32;palm&#32;and&#32;base&#32;of&#32;the&#32;finger.&quot;</emphasis>)]
<anchor xml:id="__rigged_hand_8cs_source_1l00052"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ad02235db6045a120093cdca16b1e61bf">00052</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ad02235db6045a120093cdca16b1e61bf">UseMetaCarpals</link>;
00053 
00054 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;Because&#32;bones&#32;only&#32;exist&#32;at&#32;their&#32;roots&#32;in&#32;model&#32;rigs,&#32;the&#32;length&#32;of&#32;the&#32;&quot;</emphasis>
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;last&#32;fingertip&#32;bone&#32;is&#32;lost&#32;when&#32;placing&#32;bones&#32;at&#32;positions&#32;in&#32;the&#32;tracked&#32;&quot;</emphasis>
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;hand.&#32;This&#32;option&#32;scales&#32;the&#32;last&#32;bone&#32;along&#32;its&#32;X&#32;axis&#32;(length&#32;axis)&#32;to&#32;&quot;</emphasis>
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;match&#32;its&#32;bone&#32;length&#32;to&#32;the&#32;tracked&#32;bone&#32;length.&#32;This&#32;option&#32;only&#32;has&#32;&quot;</emphasis>
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;an&#32;effect&#32;if&#32;Deform&#32;Positions&#32;In&#32;Fingers&#32;is&#32;enabled.&quot;</emphasis>)]
00059 &#32;&#32;&#32;&#32;[<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_disable_if">DisableIf</link>(<emphasis role="stringliteral">&quot;DeformPositionsInFingers&quot;</emphasis>,&#32;isEqualTo:&#32;<emphasis role="keyword">false</emphasis>)]
00060 &#32;&#32;&#32;&#32;[SerializeField]
00061 &#32;&#32;&#32;&#32;[OnEditorChange(<emphasis role="stringliteral">&quot;scaleLastFingerBones&quot;</emphasis>)]
00062 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_scaleLastFingerBones&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__rigged_hand_8cs_source_1l00063"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a5b746af2657245a3e8cad12b081d1fe0">00063</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a5b746af2657245a3e8cad12b081d1fe0">scaleLastFingerBones</link>&#32;{
00064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_scaleLastFingerBones;&#32;}
00065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_scaleLastFingerBones&#32;=&#32;value;
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setScaleLastFingerBoneInFingers(_scaleLastFingerBones);
00068 &#32;&#32;&#32;&#32;&#32;&#32;}
00069 &#32;&#32;&#32;&#32;}
00070 
<anchor xml:id="__rigged_hand_8cs_source_1l00071"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac0ccd96e23893625056adc4929688f5a">00071</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac0ccd96e23893625056adc4929688f5a">modelFingerPointing</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;0,&#32;0);
<anchor xml:id="__rigged_hand_8cs_source_1l00072"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a684f30ad8b1293a862bc3f6ddc6fb5a1">00072</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a684f30ad8b1293a862bc3f6ddc6fb5a1">modelPalmFacing</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;0,&#32;0);
00073 
00074 &#32;&#32;&#32;&#32;[Header(<emphasis role="stringliteral">&quot;Values&#32;for&#32;Stored&#32;Start&#32;Pose&quot;</emphasis>)]
00075 &#32;&#32;&#32;&#32;[SerializeField]
00076 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;Transform&gt;&#32;jointList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Transform&gt;();
00077 &#32;&#32;&#32;&#32;[SerializeField]
00078 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;Quaternion&gt;&#32;localRotations&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Quaternion&gt;();
00079 &#32;&#32;&#32;&#32;[SerializeField]
00080 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;Vector3&gt;&#32;localPositions&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Vector3&gt;();
00081 
<anchor xml:id="__rigged_hand_8cs_source_1l00082"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a588b2f58a5ffbbfc451ddf8432228507">00082</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a588b2f58a5ffbbfc451ddf8432228507">InitHand</link>()&#32;{
00083 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac4e41fd3965e2d0d56379d3fc6011128">UpdateHand</link>();
00084 &#32;&#32;&#32;&#32;&#32;&#32;setDeformPositionsInFingers(deformPositionsState);
00085 &#32;&#32;&#32;&#32;&#32;&#32;setScaleLastFingerBoneInFingers(<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a5b746af2657245a3e8cad12b081d1fe0">scaleLastFingerBones</link>);
00086 &#32;&#32;&#32;&#32;}
00087 
<anchor xml:id="__rigged_hand_8cs_source_1l00088"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aa4056b463cf5f441e96e1805a609cd6f">00088</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Quaternion&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aa4056b463cf5f441e96e1805a609cd6f">Reorientation</link>()&#32;{
00089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac0ccd96e23893625056adc4929688f5a">modelFingerPointing</link>&#32;==&#32;Vector3.zero&#32;||&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a684f30ad8b1293a862bc3f6ddc6fb5a1">modelPalmFacing</link>&#32;==&#32;Vector3.zero)&#32;{
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.identity;
00091 &#32;&#32;&#32;&#32;&#32;&#32;}
00092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.Inverse(Quaternion.LookRotation(<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac0ccd96e23893625056adc4929688f5a">modelFingerPointing</link>,&#32;-<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a684f30ad8b1293a862bc3f6ddc6fb5a1">modelPalmFacing</link>));
00093 &#32;&#32;&#32;&#32;}
00094 
<anchor xml:id="__rigged_hand_8cs_source_1l00095"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac4e41fd3965e2d0d56379d3fc6011128">00095</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac4e41fd3965e2d0d56379d3fc6011128">UpdateHand</link>()&#32;{
00096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aba36c91e04e41858d120462170cf7902">ModelPalmAtLeapWrist</link>)&#32;{
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.position&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a095aedb3f03a32b782abaf1a22861588">GetWristPosition</link>();
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.position&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a17386cdea4e2d9bfdc9fbf88e5eafd37">GetPalmPosition</link>();
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a5dd72502f20abe5fcddbeabe6bf0bfc9">wristJoint</link>)&#32;{
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a5dd72502f20abe5fcddbeabe6bf0bfc9">wristJoint</link>.position&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a095aedb3f03a32b782abaf1a22861588">GetWristPosition</link>();
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.rotation&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aeeb6a629e804a4047ff01562cde17371">GetRiggedPalmRotation</link>()&#32;*&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aa4056b463cf5f441e96e1805a609cd6f">Reorientation</link>();
00107 &#32;&#32;&#32;&#32;&#32;&#32;}
00108 
00109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a50b236af9574f8f2b5e9fedba8aa5ff0">forearm</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a50b236af9574f8f2b5e9fedba8aa5ff0">forearm</link>.rotation&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a2bea9f9359bb0eb9f2a66a1e2a7c889f">GetArmRotation</link>()&#32;*&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aa4056b463cf5f441e96e1805a609cd6f">Reorientation</link>();
00111 &#32;&#32;&#32;&#32;&#32;&#32;}
00112 
00113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a51a8c47034746f5961815b6276db2eee">fingers</link>.Length;&#32;++i)&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a51a8c47034746f5961815b6276db2eee">fingers</link>[i]&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a51a8c47034746f5961815b6276db2eee">fingers</link>[i].<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a21c5f56f4dd6fba09212d1738811eecb">fingerType</link>&#32;=&#32;(<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>)i;
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a51a8c47034746f5961815b6276db2eee">fingers</link>[i].<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a9103f063172a8f99a9aa083407ada2a2">UpdateFinger</link>();
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00118 &#32;&#32;&#32;&#32;&#32;&#32;}
00119 &#32;&#32;&#32;&#32;}
00120 
00121 &#32;&#32;&#32;&#32;<emphasis role="comment">//These&#32;versions&#32;of&#32;GetPalmRotation&#32;&amp;&#32;CalculateRotation&#32;return&#32;the&#32;opposite&#32;vector&#32;compared&#32;to&#32;LeapUnityExtension.CalculateRotation</emphasis>
00122 &#32;&#32;&#32;&#32;<emphasis role="comment">//This&#32;will&#32;be&#32;deprecated&#32;once&#32;LeapUnityExtension.CalculateRotation&#32;is&#32;flipped&#32;in&#32;the&#32;next&#32;release&#32;of&#32;LeapMotion&#32;Core&#32;Assets</emphasis>
<anchor xml:id="__rigged_hand_8cs_source_1l00123"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aeeb6a629e804a4047ff01562cde17371">00123</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Quaternion&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aeeb6a629e804a4047ff01562cde17371">GetRiggedPalmRotation</link>()&#32;{
00124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a5021ce9e2077ee8616ac608409133d5c">hand_</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_leap_transform">LeapTransform</link>&#32;trs&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a5021ce9e2077ee8616ac608409133d5c">hand_</link>.<link linkend="_class_leap_1_1_hand_1a31cd466c474963af5727269c7c9d6b5a">Basis</link>;
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CalculateRotation(trs);
00127 &#32;&#32;&#32;&#32;&#32;&#32;}
00128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>)&#32;{
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.rotation;
00130 &#32;&#32;&#32;&#32;&#32;&#32;}
00131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.identity;
00132 &#32;&#32;&#32;&#32;}
00133 
00134 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Quaternion&#32;CalculateRotation(<link linkend="_struct_leap_1_1_leap_transform">LeapTransform</link>&#32;trs)&#32;{
00135 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;up&#32;=&#32;trs.<link linkend="_struct_leap_1_1_leap_transform_1ac46874ef78036f1bc2d2bf76dd9a62a2">yBasis</link>.ToVector3();
00136 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;forward&#32;=&#32;trs.<link linkend="_struct_leap_1_1_leap_transform_1a59e5ecf307c5938bf9e04902b8395f8a">zBasis</link>.ToVector3();
00137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.LookRotation(forward,&#32;up);
00138 &#32;&#32;&#32;&#32;}
00140 &#32;&#32;&#32;&#32;[ContextMenu(<emphasis role="stringliteral">&quot;Setup&#32;Rigged&#32;Hand&quot;</emphasis>)]
<anchor xml:id="__rigged_hand_8cs_source_1l00141"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a5a1c018bad50c06259998bdccbc2c513">00141</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a5a1c018bad50c06259998bdccbc2c513">SetupRiggedHand</link>()&#32;{
00142 &#32;&#32;&#32;&#32;&#32;&#32;Debug.Log(<emphasis role="stringliteral">&quot;Using&#32;transform&#32;naming&#32;to&#32;setup&#32;RiggedHand&#32;on&#32;&quot;</emphasis>&#32;+&#32;transform.name);
00143 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac0ccd96e23893625056adc4929688f5a">modelFingerPointing</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;0,&#32;0);
00144 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a684f30ad8b1293a862bc3f6ddc6fb5a1">modelPalmFacing</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;0,&#32;0);
00145 &#32;&#32;&#32;&#32;&#32;&#32;assignRiggedFingersByName();
00146 &#32;&#32;&#32;&#32;&#32;&#32;SetupRiggedFingers();
00147 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a684f30ad8b1293a862bc3f6ddc6fb5a1">modelPalmFacing</link>&#32;=&#32;calculateModelPalmFacing(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>,&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a51a8c47034746f5961815b6276db2eee">fingers</link>[2].transform,&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a51a8c47034746f5961815b6276db2eee">fingers</link>[1].transform);
00148 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac0ccd96e23893625056adc4929688f5a">modelFingerPointing</link>&#32;=&#32;calculateModelFingerPointing();
00149 &#32;&#32;&#32;&#32;&#32;&#32;setFingerPalmFacing();
00150 &#32;&#32;&#32;&#32;}
<anchor xml:id="__rigged_hand_8cs_source_1l00152"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a919b4e3b967a79eb3bcce6d838a7ef4c">00152</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a919b4e3b967a79eb3bcce6d838a7ef4c">AutoRigRiggedHand</link>(Transform&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>,&#32;Transform&#32;finger1,&#32;Transform&#32;finger2)&#32;{
00153 &#32;&#32;&#32;&#32;&#32;&#32;Debug.Log(<emphasis role="stringliteral">&quot;Using&#32;Mecanim&#32;mapping&#32;to&#32;setup&#32;RiggedHand&#32;on&#32;&quot;</emphasis>&#32;+&#32;transform.name);
00154 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac0ccd96e23893625056adc4929688f5a">modelFingerPointing</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;0,&#32;0);
00155 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a684f30ad8b1293a862bc3f6ddc6fb5a1">modelPalmFacing</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;0,&#32;0);
00156 &#32;&#32;&#32;&#32;&#32;&#32;SetupRiggedFingers();
00157 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a684f30ad8b1293a862bc3f6ddc6fb5a1">modelPalmFacing</link>&#32;=&#32;calculateModelPalmFacing(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>,&#32;finger1,&#32;finger2);
00158 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ac0ccd96e23893625056adc4929688f5a">modelFingerPointing</link>&#32;=&#32;calculateModelFingerPointing();
00159 &#32;&#32;&#32;&#32;&#32;&#32;setFingerPalmFacing();
00160 &#32;&#32;&#32;&#32;}
00162 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;assignRiggedFingersByName(){
00163 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;palmStrings&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;&#32;{&#32;<emphasis role="stringliteral">&quot;palm&quot;</emphasis>};
00164 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;thumbStrings&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;&#32;{&#32;<emphasis role="stringliteral">&quot;thumb&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;tmb&quot;</emphasis>&#32;};
00165 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;indexStrings&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;&#32;{&#32;<emphasis role="stringliteral">&quot;index&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;idx&quot;</emphasis>};
00166 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;middleStrings&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;&#32;{&#32;<emphasis role="stringliteral">&quot;middle&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;mid&quot;</emphasis>};
00167 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;ringStrings&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;&#32;{&#32;<emphasis role="stringliteral">&quot;ring&quot;</emphasis>};
00168 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;pinkyStrings&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;&#32;{&#32;<emphasis role="stringliteral">&quot;pinky&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;pin&quot;</emphasis>};
00169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//find&#32;palm&#32;by&#32;name</emphasis>
00170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Transform&#32;palm&#32;=&#32;null;</emphasis>
00171 &#32;&#32;&#32;&#32;&#32;&#32;Transform&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67af12105146129696d6a7e0ed521db2e48">thumb</link>&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00172 &#32;&#32;&#32;&#32;&#32;&#32;Transform&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00173 &#32;&#32;&#32;&#32;&#32;&#32;Transform&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a4a548addbfb239bbd12f5afe11a4b6dc">middle</link>&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00174 &#32;&#32;&#32;&#32;&#32;&#32;Transform&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a1a5df958e0f29d35594c7cf057fe4bd1">ring</link>&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00175 &#32;&#32;&#32;&#32;&#32;&#32;Transform&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67adaea4d0b55ef6c16f04b8997a51e7e6a">pinky</link>&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00176 &#32;&#32;&#32;&#32;&#32;&#32;Transform[]&#32;children&#32;=&#32;transform.GetComponentsInChildren&lt;Transform&gt;();
00177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(palmStrings.Any(w&#32;=&gt;&#32;transform.name.ToLower().Contains(w))){
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base.palm&#32;=&#32;transform;
00179 &#32;&#32;&#32;&#32;&#32;&#32;}
00180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>{
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(Transform&#32;t&#32;<emphasis role="keywordflow">in</emphasis>&#32;children)&#32;{
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(palmStrings.Any(w&#32;=&gt;&#32;t.name.ToLower().Contains(w))&#32;==&#32;<emphasis role="keyword">true</emphasis>)&#32;{
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base.palm&#32;=&#32;t;
00184 
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00187 &#32;&#32;&#32;&#32;&#32;&#32;}
00188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>)&#32;{
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>&#32;=&#32;transform;
00190 &#32;&#32;&#32;&#32;&#32;&#32;}
00191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>)&#32;{
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(Transform&#32;t&#32;<emphasis role="keywordflow">in</emphasis>&#32;children)&#32;{
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&#32;preExistingRiggedFinger;
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preExistingRiggedFinger&#32;=&#32;t.GetComponent&lt;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&gt;();
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;lowercaseName&#32;=&#32;t.name.ToLower();
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!preExistingRiggedFinger)&#32;{
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(thumbStrings.Any(w&#32;=&gt;&#32;lowercaseName.Contains(w))&#32;&amp;&amp;&#32;t.parent&#32;==&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>)&#32;{
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67af12105146129696d6a7e0ed521db2e48">thumb</link>&#32;=&#32;t;
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&#32;newRiggedFinger&#32;=&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67af12105146129696d6a7e0ed521db2e48">thumb</link>.gameObject.AddComponent&lt;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&gt;();
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newRiggedFinger.<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a21c5f56f4dd6fba09212d1738811eecb">fingerType</link>&#32;=&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_THUMB;
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indexStrings.Any(w&#32;=&gt;&#32;lowercaseName.Contains(w))&#32;&amp;&amp;&#32;t.parent&#32;==&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>)&#32;{
00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>&#32;=&#32;t;
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&#32;newRiggedFinger&#32;=&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>.gameObject.AddComponent&lt;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&gt;();
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newRiggedFinger.<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a21c5f56f4dd6fba09212d1738811eecb">fingerType</link>&#32;=&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_INDEX;
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(middleStrings.Any(w&#32;=&gt;&#32;lowercaseName.Contains(w))&#32;&amp;&amp;&#32;t.parent&#32;==&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>)&#32;{
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a4a548addbfb239bbd12f5afe11a4b6dc">middle</link>&#32;=&#32;t;
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&#32;newRiggedFinger&#32;=&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a4a548addbfb239bbd12f5afe11a4b6dc">middle</link>.gameObject.AddComponent&lt;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&gt;();
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newRiggedFinger.<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a21c5f56f4dd6fba09212d1738811eecb">fingerType</link>&#32;=&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_MIDDLE;
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ringStrings.Any(w&#32;=&gt;&#32;lowercaseName.Contains(w))&#32;&amp;&amp;&#32;t.parent&#32;==&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>)&#32;{
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a1a5df958e0f29d35594c7cf057fe4bd1">ring</link>&#32;=&#32;t;
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&#32;newRiggedFinger&#32;=&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a1a5df958e0f29d35594c7cf057fe4bd1">ring</link>.gameObject.AddComponent&lt;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&gt;();
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newRiggedFinger.<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a21c5f56f4dd6fba09212d1738811eecb">fingerType</link>&#32;=&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_RING;
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pinkyStrings.Any(w&#32;=&gt;&#32;lowercaseName.Contains(w))&#32;&amp;&amp;&#32;t.parent&#32;==&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>)&#32;{
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67adaea4d0b55ef6c16f04b8997a51e7e6a">pinky</link>&#32;=&#32;t;
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&#32;newRiggedFinger&#32;=&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67adaea4d0b55ef6c16f04b8997a51e7e6a">pinky</link>.gameObject.AddComponent&lt;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>&gt;();
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newRiggedFinger.<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a21c5f56f4dd6fba09212d1738811eecb">fingerType</link>&#32;=&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_PINKY;
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00224 &#32;&#32;&#32;&#32;&#32;&#32;}
00225 &#32;&#32;&#32;&#32;}
00227 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetupRiggedFingers()&#32;{
00228 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>[]&#32;fingerModelList&#32;=&#32;GetComponentsInChildren&lt;RiggedFinger&gt;();
00229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;5;&#32;i++)&#32;{
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fingersIndex&#32;=&#32;fingerModelList[i].<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a21c5f56f4dd6fba09212d1738811eecb">fingerType</link>.indexOf();
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a51a8c47034746f5961815b6276db2eee">fingers</link>[fingersIndex]&#32;=&#32;fingerModelList[i];
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fingerModelList[i].<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1aaea2955085d8c4ec4d97a709ee8732e7">SetupRiggedFinger</link>(<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ad02235db6045a120093cdca16b1e61bf">UseMetaCarpals</link>);
00233 &#32;&#32;&#32;&#32;&#32;&#32;}
00234 &#32;&#32;&#32;&#32;}
00236 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;setFingerPalmFacing()&#32;{
00237 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_finger">RiggedFinger</link>[]&#32;fingerModelList&#32;=&#32;GetComponentsInChildren&lt;RiggedFinger&gt;();
00238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;5;&#32;i++)&#32;{
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fingersIndex&#32;=&#32;fingerModelList[i].<link linkend="_class_leap_1_1_unity_1_1_finger_model_1a21c5f56f4dd6fba09212d1738811eecb">fingerType</link>.indexOf();
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a51a8c47034746f5961815b6276db2eee">fingers</link>[fingersIndex]&#32;=&#32;fingerModelList[i];
00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fingerModelList[i].<link linkend="_class_leap_1_1_unity_1_1_rigged_finger_1ab8d09b7fb7d2390e19d7f44505dd8dec">modelPalmFacing</link>&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a684f30ad8b1293a862bc3f6ddc6fb5a1">modelPalmFacing</link>;
00242 &#32;&#32;&#32;&#32;&#32;&#32;}
00243 &#32;&#32;&#32;&#32;}
00245 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;calculateModelPalmFacing(Transform&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>,&#32;Transform&#32;finger1,&#32;Transform&#32;finger2)&#32;{
00246 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;a&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.transform.InverseTransformPoint(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.position);
00247 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;b&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.transform.InverseTransformPoint(finger1.position);
00248 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;c&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.transform.InverseTransformPoint(finger2.position);
00249 
00250 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;side1&#32;=&#32;b&#32;-&#32;a;
00251 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;side2&#32;=&#32;c&#32;-&#32;a;
00252 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;perpendicular;
00253 
00254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1adc0cdab6a0de6c0520a100bfff19a6cd">Handedness</link>&#32;==&#32;<link linkend="_namespace_leap_1_1_unity_1a4d15adcf20ba121b2cd9c07f503b606f">Chirality</link>.Left)&#32;{
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;perpendicular&#32;=&#32;Vector3.Cross(side1,&#32;side2);
00256 &#32;&#32;&#32;&#32;&#32;&#32;}
00257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;perpendicular&#32;=&#32;Vector3.Cross(side2,&#32;side1);
00258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//flip&#32;perpendicular&#32;if&#32;it&#32;is&#32;above&#32;palm</emphasis>
00259 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;calculatedPalmFacing&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a67e0012de184ea7ea1e76cec5a21589b">CalculateZeroedVector</link>(perpendicular);
00260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;calculatedPalmFacing;
00261 &#32;&#32;&#32;&#32;}
00263 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;calculateModelFingerPointing()&#32;{
00264 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;distance&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.transform.InverseTransformPoint(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a51a8c47034746f5961815b6276db2eee">fingers</link>[2].transform.GetChild(0).transform.position)&#32;-&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.transform.InverseTransformPoint(<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.position);
00265 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;calculatedFingerPointing&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a67e0012de184ea7ea1e76cec5a21589b">CalculateZeroedVector</link>(distance);
00266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;calculatedFingerPointing&#32;*&#32;-1f;
00267 &#32;&#32;&#32;&#32;}
<anchor xml:id="__rigged_hand_8cs_source_1l00269"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a67e0012de184ea7ea1e76cec5a21589b">00269</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a67e0012de184ea7ea1e76cec5a21589b">CalculateZeroedVector</link>(Vector3&#32;vectorToZero)&#32;{
00270 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;zeroed&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3();
00271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;max&#32;=&#32;Mathf.Max(Mathf.Abs(vectorToZero.x),&#32;Mathf.Abs(vectorToZero.y),&#32;Mathf.Abs(vectorToZero.z));
00272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Mathf.Abs(vectorToZero.x)&#32;==&#32;max)&#32;{
00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zeroed&#32;=&#32;(vectorToZero.x&#32;&lt;&#32;0)&#32;?&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(1,&#32;0,&#32;0)&#32;:&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(-1,&#32;0,&#32;0);
00274 &#32;&#32;&#32;&#32;&#32;&#32;}
00275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Mathf.Abs(vectorToZero.y)&#32;==&#32;max)&#32;{
00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zeroed&#32;=&#32;(vectorToZero.y&#32;&lt;&#32;0)&#32;?&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;1,&#32;0)&#32;:&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;-1,&#32;0);
00277 &#32;&#32;&#32;&#32;&#32;&#32;}
00278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Mathf.Abs(vectorToZero.z)&#32;==&#32;max)&#32;{
00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zeroed&#32;=&#32;(vectorToZero.z&#32;&lt;&#32;0)&#32;?&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;0,&#32;1)&#32;:&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;0,&#32;-1);
00280 &#32;&#32;&#32;&#32;&#32;&#32;}
00281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zeroed;
00282 &#32;&#32;&#32;&#32;}
00284 &#32;&#32;&#32;&#32;[ContextMenu(<emphasis role="stringliteral">&quot;StoreJointsStartPose&quot;</emphasis>)]
<anchor xml:id="__rigged_hand_8cs_source_1l00285"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ae59cd89a5a3b39f56be3b8db74030fa5">00285</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1ae59cd89a5a3b39f56be3b8db74030fa5">StoreJointsStartPose</link>()&#32;{
00286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(Transform&#32;t&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_1a9ed203915ef3ad91ea37b705c1fcffa1">palm</link>.parent.GetComponentsInChildren&lt;Transform&gt;())&#32;{
00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jointList.Add(t);
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localRotations.Add(t.localRotation);
00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localPositions.Add(t.localPosition);
00290 &#32;&#32;&#32;&#32;&#32;&#32;}
00291 &#32;&#32;&#32;&#32;}
00293 &#32;&#32;&#32;&#32;[ContextMenu(<emphasis role="stringliteral">&quot;RestoreJointsStartPose&quot;</emphasis>)]
<anchor xml:id="__rigged_hand_8cs_source_1l00294"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aad0ba3eb19fbd881af90b7e5b6ffaf7d">00294</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aad0ba3eb19fbd881af90b7e5b6ffaf7d">RestoreJointsStartPose</link>()&#32;{
00295 &#32;&#32;&#32;&#32;&#32;&#32;Debug.Log(<emphasis role="stringliteral">&quot;RestoreJointsStartPose()&quot;</emphasis>);
00296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;jointList.Count;&#32;i++)&#32;{
00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Transform&#32;jointTrans&#32;=&#32;jointList[i];
00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jointTrans.localRotation&#32;=&#32;localRotations[i];
00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jointTrans.localPosition&#32;=&#32;localPositions[i];
00300 &#32;&#32;&#32;&#32;&#32;&#32;}
00301 &#32;&#32;&#32;&#32;}
00302 
00303 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;setDeformPositionsInFingers(<emphasis role="keywordtype">bool</emphasis>&#32;onOff)&#32;{
00304 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;riggedFingers&#32;=&#32;GetComponentsInChildren&lt;RiggedFinger&gt;();
00305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;finger&#32;<emphasis role="keywordflow">in</emphasis>&#32;riggedFingers){
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;finger.deformPosition&#32;=&#32;onOff;
00307 &#32;&#32;&#32;&#32;&#32;&#32;}
00308 &#32;&#32;&#32;&#32;}
00309 
00310 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;setScaleLastFingerBoneInFingers(<emphasis role="keywordtype">bool</emphasis>&#32;shouldScale)&#32;{
00311 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;riggedFingers&#32;=&#32;GetComponentsInChildren&lt;RiggedFinger&gt;();
00312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;finger&#32;<emphasis role="keywordflow">in</emphasis>&#32;riggedFingers)&#32;{
00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;finger.scaleLastFingerBone&#32;=&#32;shouldScale;
00314 &#32;&#32;&#32;&#32;&#32;&#32;}
00315 &#32;&#32;&#32;&#32;}
00316 
<anchor xml:id="__rigged_hand_8cs_source_1l00317"/><link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a375204e4916d600d49dcd6812d08f56e">00317</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a375204e4916d600d49dcd6812d08f56e">OnValidate</link>()&#32;{
00318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a58577754d59a13b304fd1855bab163cf">DeformPositionsInFingers</link>&#32;!=&#32;deformPositionsState)&#32;{
00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aad0ba3eb19fbd881af90b7e5b6ffaf7d">RestoreJointsStartPose</link>();
00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setDeformPositionsInFingers(<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a58577754d59a13b304fd1855bab163cf">DeformPositionsInFingers</link>);
00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deformPositionsState&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1a58577754d59a13b304fd1855bab163cf">DeformPositionsInFingers</link>;
00322 &#32;&#32;&#32;&#32;&#32;&#32;}
00323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(setEditorLeapPose&#32;==&#32;<emphasis role="keyword">false</emphasis>)&#32;{
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_rigged_hand_1aad0ba3eb19fbd881af90b7e5b6ffaf7d">RestoreJointsStartPose</link>();
00325 &#32;&#32;&#32;&#32;&#32;&#32;}
00326 &#32;&#32;&#32;&#32;}
00327 &#32;&#32;}
00328 }
</programlisting></section>
