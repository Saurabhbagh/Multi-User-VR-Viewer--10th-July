<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__attachment_hands_8cs_source">
<title>AttachmentHands.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Attachments/AttachmentHands.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_namespace_leap_1_1_unity">Unity</link>.<link linkend="_namespace_leap_1_1_unity_1_1_attributes">Attributes</link>;
00011 <emphasis role="keyword">using</emphasis>&#32;System;
00012 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00013 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00014 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
00015 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_editor">UnityEditor</link>;
00016 <emphasis role="preprocessor">#endif</emphasis>
00017 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00018 
00019 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_attachments">Leap.Unity.Attachments</link>&#32;{
00020 
00029 &#32;&#32;[ExecuteInEditMode]
<anchor xml:id="__attachment_hands_8cs_source_1l00030"/><link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hands">00030</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hands">AttachmentHands</link>&#32;:&#32;MonoBehaviour&#32;{
00031 
00032 &#32;&#32;&#32;&#32;[SerializeField]
00033 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_namespace_leap_1_1_unity_1_1_attachments_1a4b32b38f722ad110fcd5a817256e09ab">AttachmentPointFlags</link>&#32;_attachmentPoints&#32;=&#32;<link linkend="_namespace_leap_1_1_unity_1_1_attachments_1a4b32b38f722ad110fcd5a817256e09ab">AttachmentPointFlags</link>.Palm&#32;|&#32;<link linkend="_namespace_leap_1_1_unity_1_1_attachments_1a4b32b38f722ad110fcd5a817256e09ab">AttachmentPointFlags</link>.Wrist;
<anchor xml:id="__attachment_hands_8cs_source_1l00034"/><link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hands_1aa5e61a917e83531792e87dee55f5ffd5">00034</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_leap_1_1_unity_1_1_attachments_1a4b32b38f722ad110fcd5a817256e09ab">AttachmentPointFlags</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hands_1aa5e61a917e83531792e87dee55f5ffd5">attachmentPoints</link>&#32;{
00035 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_attachmentPoints;
00037 &#32;&#32;&#32;&#32;&#32;&#32;}
00038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_attachmentPoints&#32;!=&#32;value)&#32;{
00040 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;UNITY_EDITOR</emphasis>
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.IncrementCurrentGroup();
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.SetCurrentGroupName(<emphasis role="stringliteral">&quot;Modify&#32;Attachment&#32;Points&quot;</emphasis>);
00043 
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.RecordObject(<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;Modify&#32;AttachmentHands&#32;Points&quot;</emphasis>);
00045 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
00046 
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentPoints&#32;=&#32;value;
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;refreshAttachmentHandTransforms();
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00050 &#32;&#32;&#32;&#32;&#32;&#32;}
00051 &#32;&#32;&#32;&#32;}
00052 
00053 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Func&lt;Hand&gt;[]&#32;_handAccessors;
<anchor xml:id="__attachment_hands_8cs_source_1l00063"/><link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hands_1a7a1f75d54d1823bae8829a9e6e49c176">00063</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Func&lt;Hand&gt;[]&#32;<link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hands_1a7a1f75d54d1823bae8829a9e6e49c176">handAccessors</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_handAccessors;&#32;}&#32;<emphasis role="keyword">set</emphasis>&#32;{&#32;_handAccessors&#32;=&#32;value;&#32;}&#32;}
00064 
00065 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hand">AttachmentHand</link>[]&#32;_attachmentHands;
<anchor xml:id="__attachment_hands_8cs_source_1l00074"/><link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hands_1a4b6dfa27f95d4e5cb9b33131f5f837cc">00074</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hand">AttachmentHand</link>[]&#32;<link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hands_1a4b6dfa27f95d4e5cb9b33131f5f837cc">attachmentHands</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_attachmentHands;&#32;}&#32;<emphasis role="keyword">set</emphasis>&#32;{&#32;_attachmentHands&#32;=&#32;value;&#32;}&#32;}
00075 
00076 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
00077 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnValidate()&#32;{
00078 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getIsPrefab())&#32;<emphasis role="keywordflow">return</emphasis>;
00079 
00080 &#32;&#32;&#32;&#32;&#32;&#32;reinitialize();
00081 &#32;&#32;&#32;&#32;}
00082 <emphasis role="preprocessor">#endif</emphasis>
00083 
00084 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Awake()&#32;{
00085 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
00086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getIsPrefab())&#32;<emphasis role="keywordflow">return</emphasis>;
00087 <emphasis role="preprocessor">#endif</emphasis>
00088 
00089 &#32;&#32;&#32;&#32;&#32;&#32;reinitialize();
00090 &#32;&#32;&#32;&#32;}
00091 
00092 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;reinitialize()&#32;{
00093 &#32;&#32;&#32;&#32;&#32;&#32;refreshHandAccessors();
00094 &#32;&#32;&#32;&#32;&#32;&#32;refreshAttachmentHands();
00095 
00096 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;UNITY_EDITOR</emphasis>
00097 &#32;&#32;&#32;&#32;&#32;&#32;EditorApplication.delayCall&#32;+=&#32;refreshAttachmentHandTransforms;
00098 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#else</emphasis>
00099 &#32;&#32;&#32;&#32;&#32;&#32;refreshAttachmentHandTransforms();
00100 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
00101 &#32;&#32;&#32;&#32;}
00102 
00103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Update()&#32;{
00104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;UNITY_EDITOR</emphasis>
00105 &#32;&#32;&#32;&#32;&#32;&#32;PrefabType&#32;prefabType&#32;=&#32;PrefabUtility.GetPrefabType(this.gameObject);
00106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prefabType&#32;==&#32;PrefabType.Prefab&#32;||&#32;prefabType&#32;==&#32;PrefabType.ModelPrefab)&#32;{
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00108 &#32;&#32;&#32;&#32;&#32;&#32;}
00109 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
00110 
00111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;requiresReinitialization&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00112 
00113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(<emphasis role="keyword">new</emphasis>&#32;ProfilerSample(<emphasis role="stringliteral">&quot;Attachment&#32;Hands&#32;Update&quot;</emphasis>,&#32;this.gameObject))&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;_attachmentHands.Length;&#32;i++)&#32;{
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;attachmentHand&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hands_1a4b6dfa27f95d4e5cb9b33131f5f837cc">attachmentHands</link>[i];
00116 
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(attachmentHand&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;requiresReinitialization&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00121 
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;leapHand&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hands_1a7a1f75d54d1823bae8829a9e6e49c176">handAccessors</link>[i]();
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;attachmentHand.isTracked&#32;=&#32;leapHand&#32;!=&#32;<emphasis role="keyword">null</emphasis>;
00124 
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(<emphasis role="keyword">new</emphasis>&#32;ProfilerSample(attachmentHand.gameObject.name&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;Update&#32;Points&quot;</emphasis>))&#32;{
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;point&#32;<emphasis role="keywordflow">in</emphasis>&#32;attachmentHand.points)&#32;{
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;point.SetTransformUsingHand(leapHand);
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00131 
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(requiresReinitialization)&#32;{
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reinitialize();
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00135 &#32;&#32;&#32;&#32;&#32;&#32;}
00136 &#32;&#32;&#32;&#32;}
00137 
00138 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;refreshHandAccessors()&#32;{
00139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;necessary,&#32;generate&#32;a&#32;left-hand&#32;and&#32;right-hand&#32;set&#32;of&#32;accessors.</emphasis>
00140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_handAccessors&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;_handAccessors.Length&#32;==&#32;0)&#32;{
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_handAccessors&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Func&lt;Hand&gt;[2];
00142 
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_handAccessors[0]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Func&lt;Hand&gt;(()&#32;=&gt;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;Hands.Left;&#32;});
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_handAccessors[1]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Func&lt;Hand&gt;(()&#32;=&gt;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;Hands.Right;&#32;});
00145 &#32;&#32;&#32;&#32;&#32;&#32;}
00146 &#32;&#32;&#32;&#32;}
00147 
00148 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;refreshAttachmentHands()&#32;{
00149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&apos;re&#32;a&#32;prefab,&#32;we&apos;ll&#32;be&#32;unable&#32;to&#32;set&#32;parent&#32;transforms,&#32;so&#32;we&#32;shouldn&apos;t&#32;create&#32;new&#32;objects&#32;in&#32;general.</emphasis>
00150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isPrefab&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00151 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;UNITY_EDITOR</emphasis>
00152 &#32;&#32;&#32;&#32;&#32;&#32;isPrefab&#32;=&#32;getIsPrefab();
00153 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
00154 
00155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;necessary,&#32;generate&#32;a&#32;left&#32;and&#32;right&#32;AttachmentHand.</emphasis>
00156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_attachmentHands&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;_attachmentHands.Length&#32;==&#32;0&#32;||&#32;(_attachmentHands[0]&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;_attachmentHands[1]&#32;==&#32;<emphasis role="keyword">null</emphasis>))&#32;{
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentHands&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;AttachmentHand[2];
00158 
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;to&#32;use&#32;existing&#32;AttachmentHand&#32;objects&#32;first.</emphasis>
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(Transform&#32;child&#32;<emphasis role="keywordflow">in</emphasis>&#32;this.transform.GetChildren())&#32;{
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;attachmentHand&#32;=&#32;child.GetComponent&lt;AttachmentHand&gt;();
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(attachmentHand&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentHands[attachmentHand.chirality&#32;==&#32;<link linkend="_namespace_leap_1_1_unity_1a4d15adcf20ba121b2cd9c07f503b606f">Chirality</link>.Left&#32;?&#32;0&#32;:&#32;1]&#32;=&#32;attachmentHand;
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00166 
00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;are&#32;a&#32;prefab&#32;and&#32;there&#32;are&#32;missing&#32;AttachmentHands,&#32;we&#32;have&#32;to&#32;return&#32;early.</emphasis>
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;can&apos;t&#32;set&#32;parent&#32;transforms&#32;while&#32;a&#32;prefab.&#32;We&apos;re&#32;only&#32;OK&#32;if&#32;we&#32;already&#32;have&#32;attachmentHand</emphasis>
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;objects&#32;and&#32;their&#32;parents&#32;are&#32;properly&#32;set.</emphasis>
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isPrefab&#32;&amp;&amp;&#32;(_attachmentHands[0]&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;_attachmentHands[0].transform.parent&#32;!=&#32;<emphasis role="keyword">this</emphasis>.transform
00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_attachmentHands[1]&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;_attachmentHands[1].transform.parent&#32;!=&#32;<emphasis role="keyword">this</emphasis>.transform))&#32;{
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00174 
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Construct&#32;any&#32;missing&#32;AttachmentHand&#32;objects.</emphasis>
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_attachmentHands[0]&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GameObject&#32;obj&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;GameObject();
00178 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;UNITY_EDITOR</emphasis>
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.RegisterCreatedObjectUndo(obj,&#32;<emphasis role="stringliteral">&quot;Created&#32;GameObject&quot;</emphasis>);
00180 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentHands[0]&#32;=&#32;obj.AddComponent&lt;AttachmentHand&gt;();
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentHands[0].<link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hand_1af525bdb21f50e37061ce6b69a351654f">chirality</link>&#32;=&#32;<link linkend="_namespace_leap_1_1_unity_1a4d15adcf20ba121b2cd9c07f503b606f">Chirality</link>.Left;
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentHands[0].gameObject.name&#32;=&#32;<emphasis role="stringliteral">&quot;Attachment&#32;Hand&#32;(Left)&quot;</emphasis>;
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_attachmentHands[0].transform.parent&#32;!=&#32;<emphasis role="keyword">this</emphasis>.transform)&#32;_attachmentHands[0].transform.parent&#32;=&#32;this.transform;
00186 
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_attachmentHands[1]&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GameObject&#32;obj&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;GameObject();
00189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;UNITY_EDITOR</emphasis>
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.RegisterCreatedObjectUndo(obj,&#32;<emphasis role="stringliteral">&quot;Created&#32;GameObject&quot;</emphasis>);
00191 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentHands[1]&#32;=&#32;obj.AddComponent&lt;AttachmentHand&gt;();
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentHands[1].<link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hand_1af525bdb21f50e37061ce6b69a351654f">chirality</link>&#32;=&#32;<link linkend="_namespace_leap_1_1_unity_1a4d15adcf20ba121b2cd9c07f503b606f">Chirality</link>.Right;
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentHands[1].gameObject.name&#32;=&#32;<emphasis role="stringliteral">&quot;Attachment&#32;Hand&#32;(Right)&quot;</emphasis>;
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_attachmentHands[1].transform.parent&#32;!=&#32;<emphasis role="keyword">this</emphasis>.transform)&#32;_attachmentHands[1].transform.parent&#32;=&#32;this.transform;
00197 
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Organize&#32;left&#32;hand&#32;first&#32;in&#32;sibling&#32;order.</emphasis>
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentHands[0].transform.SetSiblingIndex(0);
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_attachmentHands[1].transform.SetSiblingIndex(1);
00201 &#32;&#32;&#32;&#32;&#32;&#32;}
00202 &#32;&#32;&#32;&#32;}
00203 
00204 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;refreshAttachmentHandTransforms()&#32;{
00205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>;
00206 
00207 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;UNITY_EDITOR</emphasis>
00208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getIsPrefab())&#32;<emphasis role="keywordflow">return</emphasis>;
00209 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
00210 
00211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;requiresReinitialization&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00212 
00213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_attachmentHands&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;requiresReinitialization&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00215 &#32;&#32;&#32;&#32;&#32;&#32;}
00216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;hand&#32;<emphasis role="keywordflow">in</emphasis>&#32;_attachmentHands)&#32;{
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hand&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;AttachmentHand&#32;must&#32;have&#32;been&#32;destroyed</emphasis>
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;requiresReinitialization&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00223 
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hand.<link linkend="_class_leap_1_1_unity_1_1_attachments_1_1_attachment_hand_1ad3c1c16a0e65333e017b6799f0adf234">refreshAttachmentTransforms</link>(_attachmentPoints);
00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00226 
00227 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;UNITY_EDITOR</emphasis>
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorUtility.SetDirty(<emphasis role="keyword">this</emphasis>);
00229 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
00230 &#32;&#32;&#32;&#32;&#32;&#32;}
00231 
00232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(requiresReinitialization)&#32;{
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reinitialize();
00234 &#32;&#32;&#32;&#32;&#32;&#32;}
00235 &#32;&#32;&#32;&#32;}
00236 
00237 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
00238 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;getIsPrefab()&#32;{
00239 &#32;&#32;&#32;&#32;&#32;&#32;PrefabType&#32;prefabType&#32;=&#32;PrefabUtility.GetPrefabType(this.gameObject);
00240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(prefabType&#32;==&#32;PrefabType.Prefab&#32;||&#32;prefabType&#32;==&#32;PrefabType.ModelPrefab);
00241 &#32;&#32;&#32;&#32;}
00242 <emphasis role="preprocessor">#endif</emphasis>
00243 
00244 &#32;&#32;}
00245 
00246 
00247 }
</programlisting></section>
