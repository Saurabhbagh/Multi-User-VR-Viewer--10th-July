<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__frame_validator_8cs_source">
<title>FrameValidator.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Editor/Tests/FrameValidator.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System.Linq;
00011 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00012 
<anchor xml:id="__frame_validator_8cs_source_1l00013"/><link linkend="_namespace_leap_1_1_unity_1_1_tests">00013</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_tests">Leap.Unity.Tests</link>&#32;{
00014 
<anchor xml:id="__frame_validator_8cs_source_1l00015"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">00015</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">abstract</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>&#32;{
<anchor xml:id="__frame_validator_8cs_source_1l00016"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d">00016</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d">TOLERANCE</link>&#32;=&#32;0.0001f;
<anchor xml:id="__frame_validator_8cs_source_1l00017"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa3a5c6d3225a94d925a57a2c4f332107">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>[]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa3a5c6d3225a94d925a57a2c4f332107">_fingers</link>&#32;=&#32;{
00018 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_INDEX,
00019 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_MIDDLE,
00020 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_PINKY,
00021 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_RING,
00022 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>.TYPE_THUMB
00023 &#32;&#32;&#32;&#32;};
00024 
<anchor xml:id="__frame_validator_8cs_source_1l00025"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a841c73eaa5d5f6c83bfafb4ee87351b8">00025</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>[]&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a841c73eaa5d5f6c83bfafb4ee87351b8">_bones</link>&#32;=&#32;{
00026 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>.TYPE_DISTAL,
00027 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>.TYPE_INTERMEDIATE,
00028 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>.TYPE_METACARPAL,
00029 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>.TYPE_PROXIMAL
00030 &#32;&#32;&#32;&#32;};
00031 
<anchor xml:id="__frame_validator_8cs_source_1l00032"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<link linkend="_class_leap_1_1_frame">Frame</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>;
00033 
00034 &#32;&#32;&#32;&#32;[SetUp]
<anchor xml:id="__frame_validator_8cs_source_1l00035"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1acd752e5e046ca556db0336d60df08941">00035</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1acd752e5e046ca556db0336d60df08941">Setup</link>()&#32;{
00036 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ae397067480c6fd2183160f048094e466">createFrame</link>();
00037 &#32;&#32;&#32;&#32;}
00038 
00039 &#32;&#32;&#32;&#32;[SetUp]
<anchor xml:id="__frame_validator_8cs_source_1l00040"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1af7d4444c63569def2bd38930563238ee">00040</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1af7d4444c63569def2bd38930563238ee">Teardown</link>()&#32;{
00041 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00042 &#32;&#32;&#32;&#32;}
00043 
00044 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">abstract</emphasis>&#32;<link linkend="_class_leap_1_1_frame">Frame</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ae397067480c6fd2183160f048094e466">createFrame</link>();
00045 
00046 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__frame_validator_8cs_source_1l00047"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ac68295024dab243f9b07c3dde5b6ef83">00047</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ac68295024dab243f9b07c3dde5b6ef83">HandsAreUnique</link>()&#32;{
00048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;existDuplicates&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>.GroupBy(h&#32;=&gt;&#32;h.Id).Any(g&#32;=&gt;&#32;g.Count()&#32;&gt;&#32;1);
00049 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(existDuplicates,&#32;Is.False);
00050 &#32;&#32;&#32;&#32;}
00051 
00052 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__frame_validator_8cs_source_1l00053"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab5dccd3893a86f0942bbabfb598c8617">00053</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab5dccd3893a86f0942bbabfb598c8617">HandsHaveFiveFingers</link>()&#32;{
00054 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_leap_1_1_hand">Hand</link>&#32;hand&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>)&#32;{
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(hand.<link linkend="_class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6">Fingers</link>.Count,&#32;Is.EqualTo(5));
00056 &#32;&#32;&#32;&#32;&#32;&#32;}
00057 &#32;&#32;&#32;&#32;}
00058 
00059 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__frame_validator_8cs_source_1l00060"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a918c59aec010758d457bc76c841bb2ea">00060</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a918c59aec010758d457bc76c841bb2ea">FingersHaveFourBones</link>([ValueSource(typeof(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>),&#32;<emphasis role="stringliteral">&quot;_fingers&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>&#32;fingerType,
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[ValueSource(typeof(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>),&#32;<emphasis role="stringliteral">&quot;_bones&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>&#32;boneType)&#32;{
00062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_leap_1_1_hand">Hand</link>&#32;hand&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>)&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>&#32;bone&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7">getBone</link>(hand,&#32;fingerType,&#32;boneType);
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(bone,&#32;Is.Not.Null);
00065 &#32;&#32;&#32;&#32;&#32;&#32;}
00066 &#32;&#32;&#32;&#32;}
00067 
00068 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__frame_validator_8cs_source_1l00069"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a7938771f1e92c2be05903222ad872182">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a7938771f1e92c2be05903222ad872182">BoneLength</link>([ValueSource(typeof(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>),&#32;<emphasis role="stringliteral">&quot;_fingers&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>&#32;fingerType,
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[ValueSource(typeof(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>),&#32;<emphasis role="stringliteral">&quot;_bones&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>&#32;boneType)&#32;{
00071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_leap_1_1_hand">Hand</link>&#32;hand&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>)&#32;{
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>&#32;bone&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7">getBone</link>(hand,&#32;fingerType,&#32;boneType);
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;apparentLength&#32;=&#32;bone.<link linkend="_class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7">NextJoint</link>.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(bone.<link linkend="_class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730">PrevJoint</link>);
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;actualLength&#32;=&#32;bone.<link linkend="_class_leap_1_1_bone_1ab10b9823a94b21069ded7fe9cbf92dc8">Length</link>;
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(actualLength,&#32;Is.EqualTo(apparentLength).Within(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d">TOLERANCE</link>));
00076 &#32;&#32;&#32;&#32;&#32;&#32;}
00077 &#32;&#32;&#32;&#32;}
00078 
00079 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__frame_validator_8cs_source_1l00080"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1afa4f4cab5e0011f2b69b2d7f4f361fb0">00080</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1afa4f4cab5e0011f2b69b2d7f4f361fb0">JointsMatch</link>([ValueSource(typeof(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>),&#32;<emphasis role="stringliteral">&quot;_fingers&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>&#32;fingerType,
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[ValueSource(typeof(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>),&#32;<emphasis role="stringliteral">&quot;_bones&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>&#32;boneType)&#32;{
00082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_leap_1_1_hand">Hand</link>&#32;hand&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>)&#32;{
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>&#32;prevBone&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7">getBone</link>(hand,&#32;fingerType,&#32;boneType&#32;-&#32;1);
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>&#32;bone&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7">getBone</link>(hand,&#32;fingerType,&#32;boneType);
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>&#32;nextBone&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7">getBone</link>(hand,&#32;fingerType,&#32;boneType&#32;+&#32;1);
00086 
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prevBone&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82">assertVectorsEqual</link>(prevBone.<link linkend="_class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7">NextJoint</link>,&#32;bone.<link linkend="_class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730">PrevJoint</link>);
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00090 
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextBone&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82">assertVectorsEqual</link>(nextBone.<link linkend="_class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730">PrevJoint</link>,&#32;bone.<link linkend="_class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7">NextJoint</link>);
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00094 &#32;&#32;&#32;&#32;&#32;&#32;}
00095 &#32;&#32;&#32;&#32;}
00096 
00097 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__frame_validator_8cs_source_1l00098"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a3c1a4a5978be1544fc8b0570f4b31218">00098</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a3c1a4a5978be1544fc8b0570f4b31218">CenterIsBetweenJoints</link>([ValueSource(typeof(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>),&#32;<emphasis role="stringliteral">&quot;_fingers&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>&#32;fingerType,
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[ValueSource(typeof(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>),&#32;<emphasis role="stringliteral">&quot;_bones&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>&#32;boneType)&#32;{
00100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_leap_1_1_hand">Hand</link>&#32;hand&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>)&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>&#32;bone&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7">getBone</link>(hand,&#32;fingerType,&#32;boneType);
00102 
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;jointAverage&#32;=&#32;(bone.<link linkend="_class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7">NextJoint</link>&#32;+&#32;bone.<link linkend="_class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730">PrevJoint</link>)&#32;*&#32;0.5f;
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82">assertVectorsEqual</link>(jointAverage,&#32;bone.<link linkend="_class_leap_1_1_bone_1a820e1a7a9975c41ca14aec7c806b9c65">Center</link>);
00105 &#32;&#32;&#32;&#32;&#32;&#32;}
00106 &#32;&#32;&#32;&#32;}
00107 
00108 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__frame_validator_8cs_source_1l00109"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad4790f2f0631567aaced9032c3bd5f4f">00109</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad4790f2f0631567aaced9032c3bd5f4f">DirectionMatchesJoints</link>([ValueSource(typeof(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>),&#32;<emphasis role="stringliteral">&quot;_fingers&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>&#32;fingerType,
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[ValueSource(typeof(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator">FrameValidator</link>),&#32;<emphasis role="stringliteral">&quot;_bones&quot;</emphasis>)]&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>&#32;boneType)&#32;{
00111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_leap_1_1_hand">Hand</link>&#32;hand&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>)&#32;{
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>&#32;bone&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7">getBone</link>(hand,&#32;fingerType,&#32;boneType);
00113 
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//If&#32;the&#32;joints&#32;are&#32;at&#32;the&#32;same&#32;position&#32;this&#32;test&#32;is&#32;meaningless</emphasis>
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bone.<link linkend="_class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7">NextJoint</link>.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(bone.<link linkend="_class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730">PrevJoint</link>)&#32;&lt;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d">TOLERANCE</link>)&#32;{
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00118 
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;jointDirection&#32;=&#32;(bone.<link linkend="_class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7">NextJoint</link>&#32;-&#32;bone.<link linkend="_class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730">PrevJoint</link>).Normalized;
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82">assertVectorsEqual</link>(jointDirection,&#32;bone.<link linkend="_class_leap_1_1_bone_1a15e47cfdff3b474b9da055ae15aec82e">Direction</link>);
00121 &#32;&#32;&#32;&#32;&#32;&#32;}
00122 &#32;&#32;&#32;&#32;}
00123 
00124 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__frame_validator_8cs_source_1l00125"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a5c9a107fa1376dbb6eeb458330e35fcf">00125</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a5c9a107fa1376dbb6eeb458330e35fcf">RotationIsValid</link>()&#32;{
00126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_leap_1_1_hand">Hand</link>&#32;hand&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b">_frame</link>.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>)&#32;{
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(hand.<link linkend="_class_leap_1_1_hand_1ad1f22c3baf75294e2aa4d834d87fec20">Rotation</link>.<link linkend="_struct_leap_1_1_leap_quaternion_1ad55818738b16d017e907cb9ac9fc975f">IsValid</link>());
00128 &#32;&#32;&#32;&#32;&#32;&#32;}
00129 &#32;&#32;&#32;&#32;}
00130 
<anchor xml:id="__frame_validator_8cs_source_1l00131"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7">00131</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<link linkend="_class_leap_1_1_bone">Bone</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7">getBone</link>(<link linkend="_class_leap_1_1_hand">Hand</link>&#32;hand,&#32;<link linkend="_class_leap_1_1_finger">Finger</link>.<link linkend="_class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba">FingerType</link>&#32;fingerType,&#32;<link linkend="_class_leap_1_1_bone">Bone</link>.<link linkend="_class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b">BoneType</link>&#32;boneType)&#32;{
00132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(boneType&#32;&lt;&#32;0&#32;||&#32;(<emphasis role="keywordtype">int</emphasis>)boneType&#32;&gt;=&#32;4)&#32;{
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
00134 &#32;&#32;&#32;&#32;&#32;&#32;}
00135 
00136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_leap_1_1_finger">Finger</link>&#32;finger&#32;<emphasis role="keywordflow">in</emphasis>&#32;hand.<link linkend="_class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6">Fingers</link>)&#32;{
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(finger.<link linkend="_class_leap_1_1_finger_1a86fc4ed5138e26ac07ec0885f3627126">Type</link>&#32;!=&#32;fingerType)&#32;{
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00140 
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;finger.<link linkend="_class_leap_1_1_finger_1a5ae2d74471ca480d76820478067bda64">Bone</link>(boneType);
00142 &#32;&#32;&#32;&#32;&#32;&#32;}
00143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
00144 &#32;&#32;&#32;&#32;}
00145 
<anchor xml:id="__frame_validator_8cs_source_1l00146"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82">00146</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82">assertVectorsEqual</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;a,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;b,&#32;<emphasis role="keywordtype">string</emphasis>&#32;vectorName&#32;=&#32;<emphasis role="stringliteral">&quot;Vector&quot;</emphasis>)&#32;{
00147 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(a.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;Is.EqualTo(b.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>).Within(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d">TOLERANCE</link>),&#32;vectorName&#32;+&#32;<emphasis role="stringliteral">&quot;.x&quot;</emphasis>);
00148 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(a.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;Is.EqualTo(b.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>).Within(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d">TOLERANCE</link>),&#32;vectorName&#32;+&#32;<emphasis role="stringliteral">&quot;.y&quot;</emphasis>);
00149 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(a.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;Is.EqualTo(b.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>).Within(<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d">TOLERANCE</link>),&#32;vectorName&#32;+&#32;<emphasis role="stringliteral">&quot;.z&quot;</emphasis>);
00150 &#32;&#32;&#32;&#32;}
00151 &#32;&#32;}
00152 }
</programlisting></section>
