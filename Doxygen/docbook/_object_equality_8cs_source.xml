<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__object_equality_8cs_source">
<title>ObjectEquality.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Editor/Tests/ObjectEquality.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00011 
00012 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_leap_c_sharp_1_1_tests">Leap.LeapCSharp.Tests</link>&#32;{
00013 &#32;&#32;[TestFixture()]
<anchor xml:id="__object_equality_8cs_source_1l00014"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality">00014</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality">ObjectEquality</link>&#32;{
00015 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__object_equality_8cs_source_1l00016"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1a08e1f1866ddcb0ce5fea14cbc17a43d0">00016</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1a08e1f1866ddcb0ce5fea14cbc17a43d0">Vector_ints</link>()&#32;{
00017 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;thisVector&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;2,&#32;3);
00018 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;thatVector&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;2,&#32;3);
00019 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(thisVector.<link linkend="_struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de">Equals</link>(thatVector),&#32;<emphasis role="stringliteral">&quot;this.Equals(that)&#32;Vector&quot;</emphasis>);
00020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.True&#32;(thisVector&#32;==&#32;thatVector,&#32;&quot;this&#32;==&#32;that&#32;Vector&quot;);</emphasis>
00021 
00022 &#32;&#32;&#32;&#32;}
00023 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__object_equality_8cs_source_1l00024"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1afbc37ef469be74e009c9d841453c7418">00024</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1afbc37ef469be74e009c9d841453c7418">Vector_floats</link>()&#32;{
00025 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;thisVector&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_struct_leap_1_1_vector">Vector</link>(1.111111111111111f,&#32;2.222222222222222f,&#32;3.333333333333333f);
00026 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;thatVector&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_struct_leap_1_1_vector">Vector</link>(1.111111111111111f,&#32;2.222222222222222f,&#32;3.333333333333333f);
00027 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(thisVector.<link linkend="_struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de">Equals</link>(thatVector),&#32;<emphasis role="stringliteral">&quot;this.Equals(that)&#32;Vector&quot;</emphasis>);
00028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.True&#32;(thisVector&#32;==&#32;thatVector,&#32;&quot;this&#32;==&#32;that&#32;Vector&quot;);</emphasis>
00029 
00030 &#32;&#32;&#32;&#32;}
00031 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__object_equality_8cs_source_1l00032"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1a171da70f23f5ceb3a8ec713bf161998d">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1a171da70f23f5ceb3a8ec713bf161998d">Vector_more_floats</link>()&#32;{
00033 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;thisVector&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(0.199821f,&#32;-0.845375f,&#32;0.495392f);
00034 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;thatVector&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(0.199821f,&#32;-0.845375f,&#32;0.495392f);
00035 &#32;&#32;&#32;&#32;&#32;&#32;Assert.True(thisVector.<link linkend="_struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de">Equals</link>(thatVector),&#32;<emphasis role="stringliteral">&quot;this.Equals(that)&#32;Vector&quot;</emphasis>);
00036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Assert.True&#32;(thisVector&#32;==&#32;thatVector,&#32;&quot;this&#32;==&#32;that&#32;Vector&quot;);</emphasis>
00037 &#32;&#32;&#32;&#32;}
00038 &#32;&#32;}
00039 }
00040 
</programlisting></section>
