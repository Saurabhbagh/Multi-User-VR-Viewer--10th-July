<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__bit_converter_non_alloc_8cs_source">
<title>BitConverterNonAlloc.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Utils/BitConverterNonAlloc.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Runtime.InteropServices;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00014 
00015 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>BitConverterNonAlloc&#32;{
00016 
00017 <emphasis role="preprocessor">#if&#32;!ENABLE_IL2CPP</emphasis>
00018 &#32;&#32;&#32;&#32;[ThreadStatic]
00019 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ConversionStruct&#32;_c;
00020 <emphasis role="preprocessor">#endif</emphasis>
00021 
00027 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;UInt16&#32;ToUInt16(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00028 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00029 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(UInt16*)ptr;
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00033 &#32;&#32;&#32;&#32;&#32;&#32;}
00034 <emphasis role="preprocessor">#else</emphasis>
00035 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00036 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00037 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.UInt16;
00038 <emphasis role="preprocessor">#endif</emphasis>
00039 &#32;&#32;&#32;&#32;}
00045 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Int16&#32;ToInt16(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00046 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00047 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(Int16*)ptr;
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00051 &#32;&#32;&#32;&#32;&#32;&#32;}
00052 <emphasis role="preprocessor">#else</emphasis>
00053 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00054 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.Int16;
00056 <emphasis role="preprocessor">#endif</emphasis>
00057 &#32;&#32;&#32;&#32;}
00063 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;UInt32&#32;ToUInt32(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00064 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00065 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(UInt32*)ptr;
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00069 &#32;&#32;&#32;&#32;&#32;&#32;}
00070 <emphasis role="preprocessor">#else</emphasis>
00071 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00072 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00073 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00074 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00075 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.UInt32;
00076 <emphasis role="preprocessor">#endif</emphasis>
00077 &#32;&#32;&#32;&#32;}
00083 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Int32&#32;ToInt32(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00084 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00085 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(Int32*)ptr;
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00089 &#32;&#32;&#32;&#32;&#32;&#32;}
00090 <emphasis role="preprocessor">#else</emphasis>
00091 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00092 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00093 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00094 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.Int32;
00096 <emphasis role="preprocessor">#endif</emphasis>
00097 &#32;&#32;&#32;&#32;}
00103 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;UInt64&#32;ToUInt64(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00104 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00105 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(UInt64*)ptr;
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00109 &#32;&#32;&#32;&#32;&#32;&#32;}
00110 <emphasis role="preprocessor">#else</emphasis>
00111 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00112 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00113 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00114 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00115 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte4&#32;=&#32;bytes[offset++];
00116 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte5&#32;=&#32;bytes[offset++];
00117 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte6&#32;=&#32;bytes[offset++];
00118 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte7&#32;=&#32;bytes[offset++];
00119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.UInt64;
00120 <emphasis role="preprocessor">#endif</emphasis>
00121 &#32;&#32;&#32;&#32;}
00127 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Int64&#32;ToInt64(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00128 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00129 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(Int64*)ptr;
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00133 &#32;&#32;&#32;&#32;&#32;&#32;}
00134 <emphasis role="preprocessor">#else</emphasis>
00135 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00136 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00137 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00138 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00139 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte4&#32;=&#32;bytes[offset++];
00140 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte5&#32;=&#32;bytes[offset++];
00141 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte6&#32;=&#32;bytes[offset++];
00142 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte7&#32;=&#32;bytes[offset++];
00143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.Int64;
00144 <emphasis role="preprocessor">#endif</emphasis>
00145 &#32;&#32;&#32;&#32;}
00151 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_valve_1_1_v_r_1a03fc137e42935809cb498bd46107ca54a66ba162102bbf6ae31b522aec561735e">Single</link>&#32;ToSingle(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00152 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00153 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(<link linkend="_namespace_valve_1_1_v_r_1a03fc137e42935809cb498bd46107ca54a66ba162102bbf6ae31b522aec561735e">Single</link>*)ptr;
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00157 &#32;&#32;&#32;&#32;&#32;&#32;}
00158 <emphasis role="preprocessor">#else</emphasis>
00159 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00160 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00161 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00162 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.Single;
00164 <emphasis role="preprocessor">#endif</emphasis>
00165 &#32;&#32;&#32;&#32;}
00171 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Double&#32;ToDouble(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00172 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00173 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(Double*)ptr;
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00177 &#32;&#32;&#32;&#32;&#32;&#32;}
00178 <emphasis role="preprocessor">#else</emphasis>
00179 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00180 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00181 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00182 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00183 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte4&#32;=&#32;bytes[offset++];
00184 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte5&#32;=&#32;bytes[offset++];
00185 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte6&#32;=&#32;bytes[offset++];
00186 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte7&#32;=&#32;bytes[offset++];
00187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.Double;
00188 <emphasis role="preprocessor">#endif</emphasis>
00189 &#32;&#32;&#32;&#32;}
00190 
00199 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;UInt16&#32;ToUInt16(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00200 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00201 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(UInt16);
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(UInt16*)ptr;
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00206 &#32;&#32;&#32;&#32;&#32;&#32;}
00207 <emphasis role="preprocessor">#else</emphasis>
00208 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00209 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.UInt16;
00211 <emphasis role="preprocessor">#endif</emphasis>
00212 &#32;&#32;&#32;&#32;}
00213 
00222 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Int16&#32;ToInt16(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00223 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00224 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(Int16);
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(Int16*)ptr;
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00229 &#32;&#32;&#32;&#32;&#32;&#32;}
00230 <emphasis role="preprocessor">#else</emphasis>
00231 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00232 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.Int16;
00234 <emphasis role="preprocessor">#endif</emphasis>
00235 &#32;&#32;&#32;&#32;}
00236 
00245 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;UInt32&#32;ToUInt32(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00246 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00247 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(UInt32);
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(UInt32*)ptr;
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00252 &#32;&#32;&#32;&#32;&#32;&#32;}
00253 <emphasis role="preprocessor">#else</emphasis>
00254 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00255 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00256 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00257 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.UInt32;
00259 <emphasis role="preprocessor">#endif</emphasis>
00260 &#32;&#32;&#32;&#32;}
00261 
00270 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Int32&#32;ToInt32(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00271 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00272 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(Int32);
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(Int32*)ptr;
00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00277 &#32;&#32;&#32;&#32;&#32;&#32;}
00278 <emphasis role="preprocessor">#else</emphasis>
00279 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00280 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00281 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00282 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.Int32;
00284 <emphasis role="preprocessor">#endif</emphasis>
00285 &#32;&#32;&#32;&#32;}
00286 
00295 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;UInt64&#32;ToUInt64(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00296 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00297 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(UInt64);
00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(UInt64*)ptr;
00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00302 &#32;&#32;&#32;&#32;&#32;&#32;}
00303 <emphasis role="preprocessor">#else</emphasis>
00304 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00305 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00306 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00307 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00308 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte4&#32;=&#32;bytes[offset++];
00309 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte5&#32;=&#32;bytes[offset++];
00310 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte6&#32;=&#32;bytes[offset++];
00311 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte7&#32;=&#32;bytes[offset++];
00312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.UInt64;
00313 <emphasis role="preprocessor">#endif</emphasis>
00314 &#32;&#32;&#32;&#32;}
00315 
00324 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Int64&#32;ToInt64(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00325 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00326 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(Int64);
00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(Int64*)ptr;
00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00331 &#32;&#32;&#32;&#32;&#32;&#32;}
00332 <emphasis role="preprocessor">#else</emphasis>
00333 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00334 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00335 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00336 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00337 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte4&#32;=&#32;bytes[offset++];
00338 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte5&#32;=&#32;bytes[offset++];
00339 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte6&#32;=&#32;bytes[offset++];
00340 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte7&#32;=&#32;bytes[offset++];
00341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.Int64;
00342 <emphasis role="preprocessor">#endif</emphasis>
00343 &#32;&#32;&#32;&#32;}
00344 
00353 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_valve_1_1_v_r_1a03fc137e42935809cb498bd46107ca54a66ba162102bbf6ae31b522aec561735e">Single</link>&#32;ToSingle(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00354 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00355 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_namespace_valve_1_1_v_r_1a03fc137e42935809cb498bd46107ca54a66ba162102bbf6ae31b522aec561735e">Single</link>);
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(<link linkend="_namespace_valve_1_1_v_r_1a03fc137e42935809cb498bd46107ca54a66ba162102bbf6ae31b522aec561735e">Single</link>*)ptr;
00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00360 &#32;&#32;&#32;&#32;&#32;&#32;}
00361 <emphasis role="preprocessor">#else</emphasis>
00362 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00363 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00364 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00365 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.Single;
00367 <emphasis role="preprocessor">#endif</emphasis>
00368 &#32;&#32;&#32;&#32;}
00369 
00378 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Double&#32;ToDouble(<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00379 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00380 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(Double);
00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(Double*)ptr;
00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00385 &#32;&#32;&#32;&#32;&#32;&#32;}
00386 <emphasis role="preprocessor">#else</emphasis>
00387 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte0&#32;=&#32;bytes[offset++];
00388 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte1&#32;=&#32;bytes[offset++];
00389 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte2&#32;=&#32;bytes[offset++];
00390 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte3&#32;=&#32;bytes[offset++];
00391 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte4&#32;=&#32;bytes[offset++];
00392 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte5&#32;=&#32;bytes[offset++];
00393 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte6&#32;=&#32;bytes[offset++];
00394 &#32;&#32;&#32;&#32;&#32;&#32;_c.Byte7&#32;=&#32;bytes[offset++];
00395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_c.Double;
00396 <emphasis role="preprocessor">#endif</emphasis>
00397 &#32;&#32;&#32;&#32;}
00398 
00404 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(UInt16&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00405 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00406 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(UInt16*)ptr&#32;=&#32;value;
00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00410 &#32;&#32;&#32;&#32;&#32;&#32;}
00411 <emphasis role="preprocessor">#else</emphasis>
00412 &#32;&#32;&#32;&#32;&#32;&#32;_c.UInt16&#32;=&#32;value;
00413 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00414 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00415 <emphasis role="preprocessor">#endif</emphasis>
00416 &#32;&#32;&#32;&#32;}
00417 
00423 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(Int16&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00424 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00425 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(Int16*)ptr&#32;=&#32;value;
00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00429 &#32;&#32;&#32;&#32;&#32;&#32;}
00430 <emphasis role="preprocessor">#else</emphasis>
00431 &#32;&#32;&#32;&#32;&#32;&#32;_c.Int16&#32;=&#32;value;
00432 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00433 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00434 <emphasis role="preprocessor">#endif</emphasis>
00435 &#32;&#32;&#32;&#32;}
00436 
00442 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(UInt32&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00443 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00444 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(UInt32*)ptr&#32;=&#32;value;
00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00448 &#32;&#32;&#32;&#32;&#32;&#32;}
00449 <emphasis role="preprocessor">#else</emphasis>
00450 &#32;&#32;&#32;&#32;&#32;&#32;_c.UInt32&#32;=&#32;value;
00451 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00452 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00453 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00454 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00455 <emphasis role="preprocessor">#endif</emphasis>
00456 &#32;&#32;&#32;&#32;}
00457 
00463 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(Int32&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00464 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00465 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(Int32*)ptr&#32;=&#32;value;
00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00469 &#32;&#32;&#32;&#32;&#32;&#32;}
00470 <emphasis role="preprocessor">#else</emphasis>
00471 &#32;&#32;&#32;&#32;&#32;&#32;_c.Int32&#32;=&#32;value;
00472 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00473 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00474 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00475 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00476 <emphasis role="preprocessor">#endif</emphasis>
00477 &#32;&#32;&#32;&#32;}
00478 
00484 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(UInt64&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00485 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00486 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(UInt64*)ptr&#32;=&#32;value;
00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00490 &#32;&#32;&#32;&#32;&#32;&#32;}
00491 <emphasis role="preprocessor">#else</emphasis>
00492 &#32;&#32;&#32;&#32;&#32;&#32;_c.UInt64&#32;=&#32;value;
00493 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00494 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00495 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00496 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00497 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte4;
00498 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte5;
00499 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte6;
00500 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte7;
00501 <emphasis role="preprocessor">#endif</emphasis>
00502 &#32;&#32;&#32;&#32;}
00503 
00509 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(Int64&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00510 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00511 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(Int64*)ptr&#32;=&#32;value;
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00515 &#32;&#32;&#32;&#32;&#32;&#32;}
00516 <emphasis role="preprocessor">#else</emphasis>
00517 &#32;&#32;&#32;&#32;&#32;&#32;_c.Int64&#32;=&#32;value;
00518 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00519 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00520 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00521 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00522 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte4;
00523 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte5;
00524 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte6;
00525 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte7;
00526 <emphasis role="preprocessor">#endif</emphasis>
00527 &#32;&#32;&#32;&#32;}
00528 
00534 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(Single&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00535 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00536 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(<link linkend="_namespace_valve_1_1_v_r_1a03fc137e42935809cb498bd46107ca54a66ba162102bbf6ae31b522aec561735e">Single</link>*)ptr&#32;=&#32;value;
00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00540 &#32;&#32;&#32;&#32;&#32;&#32;}
00541 <emphasis role="preprocessor">#else</emphasis>
00542 &#32;&#32;&#32;&#32;&#32;&#32;_c.Single&#32;=&#32;value;
00543 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00544 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00545 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00546 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00547 <emphasis role="preprocessor">#endif</emphasis>
00548 &#32;&#32;&#32;&#32;}
00549 
00555 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(Double&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0)&#32;{
00556 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00557 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(Double*)ptr&#32;=&#32;value;
00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00561 &#32;&#32;&#32;&#32;&#32;&#32;}
00562 <emphasis role="preprocessor">#else</emphasis>
00563 &#32;&#32;&#32;&#32;&#32;&#32;_c.Double&#32;=&#32;value;
00564 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00565 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00566 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00567 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00568 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte4;
00569 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte5;
00570 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte6;
00571 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte7;
00572 <emphasis role="preprocessor">#endif</emphasis>
00573 &#32;&#32;&#32;&#32;}
00574 
00583 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(UInt16&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00584 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00585 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(UInt16);
00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(UInt16*)ptr&#32;=&#32;value;
00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00590 &#32;&#32;&#32;&#32;&#32;&#32;}
00591 <emphasis role="preprocessor">#else</emphasis>
00592 &#32;&#32;&#32;&#32;&#32;&#32;_c.UInt16&#32;=&#32;value;
00593 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00594 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00595 <emphasis role="preprocessor">#endif</emphasis>
00596 &#32;&#32;&#32;&#32;}
00597 
00606 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(Int16&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00607 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00608 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(Int16);
00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(Int16*)ptr&#32;=&#32;value;
00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00613 &#32;&#32;&#32;&#32;&#32;&#32;}
00614 <emphasis role="preprocessor">#else</emphasis>
00615 &#32;&#32;&#32;&#32;&#32;&#32;_c.Int16&#32;=&#32;value;
00616 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00617 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00618 <emphasis role="preprocessor">#endif</emphasis>
00619 &#32;&#32;&#32;&#32;}
00620 
00629 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(UInt32&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00630 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00631 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(UInt32);
00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(UInt32*)ptr&#32;=&#32;value;
00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00636 &#32;&#32;&#32;&#32;&#32;&#32;}
00637 <emphasis role="preprocessor">#else</emphasis>
00638 &#32;&#32;&#32;&#32;&#32;&#32;_c.UInt32&#32;=&#32;value;
00639 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00640 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00641 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00642 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00643 <emphasis role="preprocessor">#endif</emphasis>
00644 &#32;&#32;&#32;&#32;}
00645 
00654 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(Int32&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00655 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00656 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(Int32);
00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(Int32*)ptr&#32;=&#32;value;
00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00661 &#32;&#32;&#32;&#32;&#32;&#32;}
00662 <emphasis role="preprocessor">#else</emphasis>
00663 &#32;&#32;&#32;&#32;&#32;&#32;_c.Int32&#32;=&#32;value;
00664 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00665 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00666 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00667 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00668 <emphasis role="preprocessor">#endif</emphasis>
00669 &#32;&#32;&#32;&#32;}
00670 
00679 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(UInt64&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00680 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00681 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(UInt64);
00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(UInt64*)ptr&#32;=&#32;value;
00685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00686 &#32;&#32;&#32;&#32;&#32;&#32;}
00687 <emphasis role="preprocessor">#else</emphasis>
00688 &#32;&#32;&#32;&#32;&#32;&#32;_c.UInt64&#32;=&#32;value;
00689 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00690 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00691 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00692 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00693 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte4;
00694 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte5;
00695 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte6;
00696 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte7;
00697 <emphasis role="preprocessor">#endif</emphasis>
00698 &#32;&#32;&#32;&#32;}
00699 
00708 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(Int64&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00709 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00710 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(Int64);
00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(Int64*)ptr&#32;=&#32;value;
00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00715 &#32;&#32;&#32;&#32;&#32;&#32;}
00716 <emphasis role="preprocessor">#else</emphasis>
00717 &#32;&#32;&#32;&#32;&#32;&#32;_c.Int64&#32;=&#32;value;
00718 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00719 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00720 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00721 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00722 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte4;
00723 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte5;
00724 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte6;
00725 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte7;
00726 <emphasis role="preprocessor">#endif</emphasis>
00727 &#32;&#32;&#32;&#32;}
00728 
00737 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(Single&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00738 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00739 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_namespace_valve_1_1_v_r_1a03fc137e42935809cb498bd46107ca54a66ba162102bbf6ae31b522aec561735e">Single</link>);
00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(<link linkend="_namespace_valve_1_1_v_r_1a03fc137e42935809cb498bd46107ca54a66ba162102bbf6ae31b522aec561735e">Single</link>*)ptr&#32;=&#32;value;
00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00744 &#32;&#32;&#32;&#32;&#32;&#32;}
00745 <emphasis role="preprocessor">#else</emphasis>
00746 &#32;&#32;&#32;&#32;&#32;&#32;_c.Single&#32;=&#32;value;
00747 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00748 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00749 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00750 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00751 <emphasis role="preprocessor">#endif</emphasis>
00752 &#32;&#32;&#32;&#32;}
00753 
00762 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetBytes(Double&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)&#32;{
00763 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00764 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;ptr&#32;=&#32;&amp;bytes[offset])&#32;{
00766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(Double);
00767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(Double*)ptr&#32;=&#32;value;
00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00769 &#32;&#32;&#32;&#32;&#32;&#32;}
00770 <emphasis role="preprocessor">#else</emphasis>
00771 &#32;&#32;&#32;&#32;&#32;&#32;_c.Double&#32;=&#32;value;
00772 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte0;
00773 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte1;
00774 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte2;
00775 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte3;
00776 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte4;
00777 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte5;
00778 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte6;
00779 &#32;&#32;&#32;&#32;&#32;&#32;bytes[offset++]&#32;=&#32;_c.Byte7;
00780 <emphasis role="preprocessor">#endif</emphasis>
00781 &#32;&#32;&#32;&#32;}
00782 
00783 <emphasis role="preprocessor">#if&#32;!ENABLE_IL2CPP</emphasis>
00784 &#32;&#32;&#32;&#32;[StructLayout(LayoutKind.Explicit)]
00785 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>ConversionStruct&#32;{
00786 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(0)]
00787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;Byte0;
00788 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(1)]
00789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;Byte1;
00790 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(2)]
00791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;Byte2;
00792 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(3)]
00793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;Byte3;
00794 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(4)]
00795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;Byte4;
00796 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(5)]
00797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;Byte5;
00798 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(6)]
00799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;Byte6;
00800 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(7)]
00801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;Byte7;
00802 
00803 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(0)]
00804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;UInt16&#32;UInt16;
00805 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(0)]
00806 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Int16&#32;Int16;
00807 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(0)]
00808 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;UInt32&#32;UInt32;
00809 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(0)]
00810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Int32&#32;Int32;
00811 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(0)]
00812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;UInt64&#32;UInt64;
00813 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(0)]
00814 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Int64&#32;Int64;
00815 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(0)]
00816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_valve_1_1_v_r_1a03fc137e42935809cb498bd46107ca54a66ba162102bbf6ae31b522aec561735e">Single</link>&#32;<link linkend="_namespace_valve_1_1_v_r_1a03fc137e42935809cb498bd46107ca54a66ba162102bbf6ae31b522aec561735e">Single</link>;
00817 &#32;&#32;&#32;&#32;&#32;&#32;[FieldOffset(0)]
00818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Double&#32;Double;
00819 &#32;&#32;&#32;&#32;}
00820 <emphasis role="preprocessor">#endif</emphasis>
00821 &#32;&#32;}
00822 }
</programlisting></section>
