<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__velocity_estimator_8cs_source">
<title>VelocityEstimator.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/SteamVR/InteractionSystem/Core/Scripts/VelocityEstimator.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//=======&#32;Copyright&#32;(c)&#32;Valve&#32;Corporation,&#32;All&#32;rights&#32;reserved.&#32;===============</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Purpose:&#32;Estimates&#32;the&#32;velocity&#32;of&#32;an&#32;object&#32;based&#32;on&#32;change&#32;in&#32;position</emphasis>
00004 <emphasis role="comment">//</emphasis>
00005 <emphasis role="comment">//=============================================================================</emphasis>
00006 
00007 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00008 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00009 
00010 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_valve_1_1_v_r_1_1_interaction_system">Valve.VR.InteractionSystem</link>
00011 {
00012 &#32;&#32;&#32;&#32;<emphasis role="comment">//-------------------------------------------------------------------------</emphasis>
<anchor xml:id="__velocity_estimator_8cs_source_1l00013"/><link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator">00013</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator">VelocityEstimator</link>&#32;:&#32;MonoBehaviour
00014 &#32;&#32;&#32;&#32;{
00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[Tooltip(&#32;<emphasis role="stringliteral">&quot;How&#32;many&#32;frames&#32;to&#32;average&#32;over&#32;for&#32;computing&#32;velocity&quot;</emphasis>&#32;)]
<anchor xml:id="__velocity_estimator_8cs_source_1l00016"/><link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a838dbedcb8be448e4c2224296b3b2622">00016</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a838dbedcb8be448e4c2224296b3b2622">velocityAverageFrames</link>&#32;=&#32;5;
00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[Tooltip(&#32;<emphasis role="stringliteral">&quot;How&#32;many&#32;frames&#32;to&#32;average&#32;over&#32;for&#32;computing&#32;angular&#32;velocity&quot;</emphasis>&#32;)]
<anchor xml:id="__velocity_estimator_8cs_source_1l00018"/><link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a7682e772901dd4d49493ec4073de3aff">00018</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a7682e772901dd4d49493ec4073de3aff">angularVelocityAverageFrames</link>&#32;=&#32;11;
00019 
<anchor xml:id="__velocity_estimator_8cs_source_1l00020"/><link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a6f41731474b7149756386f9daef4ab1a">00020</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a6f41731474b7149756386f9daef4ab1a">estimateOnAwake</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00021 
00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Coroutine&#32;routine;
00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;sampleCount;
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3[]&#32;velocitySamples;
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3[]&#32;angularVelocitySamples;
00026 
00027 &#32;&#32;&#32;&#32;
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//-------------------------------------------------</emphasis>
<anchor xml:id="__velocity_estimator_8cs_source_1l00029"/><link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a7e6e08f723805cc2837f9e90aa8d583d">00029</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a7e6e08f723805cc2837f9e90aa8d583d">BeginEstimatingVelocity</link>()
00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1aead319a66f9f5153e29b1979aa29c829">FinishEstimatingVelocity</link>();
00032 
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;routine&#32;=&#32;StartCoroutine(&#32;EstimateVelocityCoroutine()&#32;);
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00035 
00036 
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//-------------------------------------------------</emphasis>
<anchor xml:id="__velocity_estimator_8cs_source_1l00038"/><link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1aead319a66f9f5153e29b1979aa29c829">00038</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1aead319a66f9f5153e29b1979aa29c829">FinishEstimatingVelocity</link>()
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;routine&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;)
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StopCoroutine(&#32;routine&#32;);
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;routine&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00046 
00047 
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//-------------------------------------------------</emphasis>
<anchor xml:id="__velocity_estimator_8cs_source_1l00049"/><link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a559516108b17223f0ed8de71e52e8d49">00049</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a559516108b17223f0ed8de71e52e8d49">GetVelocityEstimate</link>()
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;average&#32;velocity</emphasis>
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;velocity&#32;=&#32;Vector3.zero;
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;velocitySampleCount&#32;=&#32;Mathf.Min(&#32;sampleCount,&#32;velocitySamples.Length&#32;);
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;velocitySampleCount&#32;!=&#32;0&#32;)
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;velocitySampleCount;&#32;i++&#32;)
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;velocity&#32;+=&#32;velocitySamples[i];
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;velocity&#32;*=&#32;(&#32;1.0f&#32;/&#32;velocitySampleCount&#32;);
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00062 
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;velocity;
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00065 
00066 
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//-------------------------------------------------</emphasis>
<anchor xml:id="__velocity_estimator_8cs_source_1l00068"/><link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a83bd0335b0f4ac8f17d93403f9339026">00068</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a83bd0335b0f4ac8f17d93403f9339026">GetAngularVelocityEstimate</link>()
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;average&#32;angular&#32;velocity</emphasis>
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;angularVelocity&#32;=&#32;Vector3.zero;
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;angularVelocitySampleCount&#32;=&#32;Mathf.Min(&#32;sampleCount,&#32;angularVelocitySamples.Length&#32;);
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;angularVelocitySampleCount&#32;!=&#32;0&#32;)
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;angularVelocitySampleCount;&#32;i++&#32;)
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;angularVelocity&#32;+=&#32;angularVelocitySamples[i];
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;angularVelocity&#32;*=&#32;(&#32;1.0f&#32;/&#32;angularVelocitySampleCount&#32;);
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00081 
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;angularVelocity;
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00084 
00085 
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//-------------------------------------------------</emphasis>
<anchor xml:id="__velocity_estimator_8cs_source_1l00087"/><link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1ad8110ea3ac14d8687d55169587027003">00087</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1ad8110ea3ac14d8687d55169587027003">GetAccelerationEstimate</link>()
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;average&#32;=&#32;Vector3.zero;
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;2&#32;+&#32;sampleCount&#32;-&#32;velocitySamples.Length;&#32;i&#32;&lt;&#32;sampleCount;&#32;i++&#32;)
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;i&#32;&lt;&#32;2&#32;)
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00094 
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;first&#32;=&#32;i&#32;-&#32;2;
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;second&#32;=&#32;i&#32;-&#32;1;
00097 
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;v1&#32;=&#32;velocitySamples[first&#32;%&#32;velocitySamples.Length];
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;v2&#32;=&#32;velocitySamples[second&#32;%&#32;velocitySamples.Length];
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;average&#32;+=&#32;v2&#32;-&#32;v1;
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;average&#32;*=&#32;(&#32;1.0f&#32;/&#32;Time.deltaTime&#32;);
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;average;
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00105 
00106 
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//-------------------------------------------------</emphasis>
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Awake()
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;velocitySamples&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3[<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a838dbedcb8be448e4c2224296b3b2622">velocityAverageFrames</link>];
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;angularVelocitySamples&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3[<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a7682e772901dd4d49493ec4073de3aff">angularVelocityAverageFrames</link>];
00112 
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a6f41731474b7149756386f9daef4ab1a">estimateOnAwake</link>&#32;)
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_valve_1_1_v_r_1_1_interaction_system_1_1_velocity_estimator_1a7e6e08f723805cc2837f9e90aa8d583d">BeginEstimatingVelocity</link>();
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00118 
00119 
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//-------------------------------------------------</emphasis>
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;IEnumerator&#32;EstimateVelocityCoroutine()
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sampleCount&#32;=&#32;0;
00124 
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;previousPosition&#32;=&#32;transform.position;
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;previousRotation&#32;=&#32;transform.rotation;
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(&#32;<emphasis role="keyword">true</emphasis>&#32;)
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitForEndOfFrame();
00130 
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;velocityFactor&#32;=&#32;1.0f&#32;/&#32;Time.deltaTime;
00132 
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;v&#32;=&#32;sampleCount&#32;%&#32;velocitySamples.Length;
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;w&#32;=&#32;sampleCount&#32;%&#32;angularVelocitySamples.Length;
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sampleCount++;
00136 
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Estimate&#32;linear&#32;velocity</emphasis>
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;velocitySamples[v]&#32;=&#32;velocityFactor&#32;*&#32;(&#32;transform.position&#32;-&#32;previousPosition&#32;);
00139 
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Estimate&#32;angular&#32;velocity</emphasis>
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;deltaRotation&#32;=&#32;transform.rotation&#32;*&#32;Quaternion.Inverse(&#32;previousRotation&#32;);
00142 
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;theta&#32;=&#32;2.0f&#32;*&#32;Mathf.Acos(&#32;Mathf.Clamp(&#32;deltaRotation.w,&#32;-1.0f,&#32;1.0f&#32;)&#32;);
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;theta&#32;&gt;&#32;Mathf.PI&#32;)
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;theta&#32;-=&#32;2.0f&#32;*&#32;Mathf.PI;
00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00148 
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;angularVelocity&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(&#32;deltaRotation.x,&#32;deltaRotation.y,&#32;deltaRotation.z&#32;);
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;angularVelocity.sqrMagnitude&#32;&gt;&#32;0.0f&#32;)
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;angularVelocity&#32;=&#32;theta&#32;*&#32;velocityFactor&#32;*&#32;angularVelocity.normalized;
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00154 
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;angularVelocitySamples[w]&#32;=&#32;angularVelocity;
00156 
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previousPosition&#32;=&#32;transform.position;
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previousRotation&#32;=&#32;transform.rotation;
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00161 &#32;&#32;&#32;&#32;}
00162 }
</programlisting></section>
