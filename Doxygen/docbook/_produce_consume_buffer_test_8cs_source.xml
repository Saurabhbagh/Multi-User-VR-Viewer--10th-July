<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__produce_consume_buffer_test_8cs_source">
<title>ProduceConsumeBufferTest.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Editor/Tests/ProduceConsumeBufferTest.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Threading;
00012 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00013 
00014 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_tests">Leap.Unity.Tests</link>&#32;{
00015 
<anchor xml:id="__produce_consume_buffer_test_8cs_source_1l00016"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_produce_consume_buffer_test">00016</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_produce_consume_buffer_test">ProduceConsumeBufferTest</link>&#32;{
00017 
00018 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">ProduceConsumeBuffer&lt;TestStruct&gt;</link>&#32;buffer;
00019 
00020 &#32;&#32;&#32;&#32;[SetUp]
<anchor xml:id="__produce_consume_buffer_test_8cs_source_1l00021"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_produce_consume_buffer_test_1a1d025f640bb90724d29269300a2ec3db">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_produce_consume_buffer_test_1a1d025f640bb90724d29269300a2ec3db">Setup</link>()&#32;{
00022 &#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer">ProduceConsumeBuffer&lt;TestStruct&gt;</link>(16);
00023 &#32;&#32;&#32;&#32;}
00024 
00025 &#32;&#32;&#32;&#32;[TearDown]
<anchor xml:id="__produce_consume_buffer_test_8cs_source_1l00026"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_produce_consume_buffer_test_1a77c36eff139f3ba073d541663528b808">00026</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_produce_consume_buffer_test_1a77c36eff139f3ba073d541663528b808">Teardown</link>()&#32;{
00027 &#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00028 &#32;&#32;&#32;&#32;}
00029 
00030 &#32;&#32;&#32;&#32;[<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_produce_consume_buffer_test_1a3e45e3a47fd7e880a5ab1cbf7b8a57b7">Test</link>]
00031 &#32;&#32;&#32;&#32;[Timeout(1000)]
<anchor xml:id="__produce_consume_buffer_test_8cs_source_1l00032"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_produce_consume_buffer_test_1a3e45e3a47fd7e880a5ab1cbf7b8a57b7">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_produce_consume_buffer_test_1a3e45e3a47fd7e880a5ab1cbf7b8a57b7">Test</link>()&#32;{
00033 &#32;&#32;&#32;&#32;&#32;&#32;Thread&#32;consumer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Thread(<emphasis role="keyword">new</emphasis>&#32;ThreadStart(consumerThread));
00034 &#32;&#32;&#32;&#32;&#32;&#32;Thread&#32;producer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Thread(<emphasis role="keyword">new</emphasis>&#32;ThreadStart(producerThread));
00035 
00036 &#32;&#32;&#32;&#32;&#32;&#32;consumer.Start();
00037 &#32;&#32;&#32;&#32;&#32;&#32;producer.Start();
00038 
00039 &#32;&#32;&#32;&#32;&#32;&#32;consumer.Join();
00040 &#32;&#32;&#32;&#32;&#32;&#32;producer.Join();
00041 &#32;&#32;&#32;&#32;}
00042 
00043 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;consumerThread()&#32;{
00044 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;buffer.<link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a04753532a728b38e5cc0226c797fbef1">Capacity</link>;&#32;i++)&#32;{
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestStruct&#32;s;
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.index&#32;=&#32;i;
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.name&#32;=&#32;i.ToString();
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!buffer.<link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a2c3eaa1d8aafc68cf6d8d020ae47e4de">TryEnqueue</link>(ref&#32;s))&#32;{&#32;}
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00051 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;e)&#32;{
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Fail(e.Message);
00053 &#32;&#32;&#32;&#32;&#32;&#32;}
00054 &#32;&#32;&#32;&#32;}
00055 
00056 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;producerThread()&#32;{
00057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;buffer.<link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a04753532a728b38e5cc0226c797fbef1">Capacity</link>;&#32;i++)&#32;{
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TestStruct&#32;s;
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!buffer.<link linkend="_class_leap_1_1_unity_1_1_produce_consume_buffer_1a8974fa947fcc940620300c54d3de6f1b">TryDequeue</link>(out&#32;s))&#32;{&#32;}
00061 
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(s.index,&#32;Is.EqualTo(i));
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(s.name,&#32;Is.EqualTo(i.ToString()));
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00065 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;e)&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.Fail(e.Message);
00067 &#32;&#32;&#32;&#32;&#32;&#32;}
00068 &#32;&#32;&#32;&#32;}
00069 
00070 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>TestStruct&#32;{
00071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>;
00072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;name;
00073 &#32;&#32;&#32;&#32;}
00074 &#32;&#32;}
00075 }
</programlisting></section>
