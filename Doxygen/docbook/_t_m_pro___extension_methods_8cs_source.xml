<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__t_m_pro___extension_methods_8cs_source">
<title>TMPro_ExtensionMethods.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Library/PackageCache/com.unity.textmeshpro@1.3.0/Scripts/Runtime/TMPro_ExtensionMethods.cs</primary></indexterm>
<programlisting>00001 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00002 <emphasis role="keyword">using</emphasis>&#32;System.Text;
00003 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00004 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00005 
00006 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_t_m_pro">TMPro</link>
00007 {
00008 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>TMPro_ExtensionMethods
00009 &#32;&#32;&#32;&#32;{
00010 
00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;ArrayToString(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[]&#32;chars)
00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;s&#32;=&#32;<emphasis role="keywordtype">string</emphasis>.Empty;
00014 
00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;chars.Length&#32;&amp;&amp;&#32;chars[i]&#32;!=&#32;0;&#32;i++)
00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;chars[i];
00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00019 
00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00022 
00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;IntToString(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;unicodes)
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>[]&#32;chars&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[unicodes.Length];
00026 
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;unicodes.Length;&#32;i++)
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chars[i]&#32;=&#32;(char)unicodes[i];
00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00031 
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;string(chars);
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00034 
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;IntToString(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;unicodes,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start,&#32;<emphasis role="keywordtype">int</emphasis>&#32;length)
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>[]&#32;chars&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[length];
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;end&#32;=&#32;start&#32;+&#32;length;
00039 
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;start;&#32;i&#32;&lt;&#32;end&#32;&amp;&amp;&#32;i&#32;&lt;&#32;unicodes.Length;&#32;i++)
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chars[i]&#32;=&#32;(char)unicodes[i];
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00044 
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;string(chars,&#32;start,&#32;length);
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00047 
00048 
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;FindInstanceID&#32;&lt;T&gt;&#32;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;T&#32;target)&#32;where&#32;T&#32;:&#32;<link linkend="__t_m_pro___font_asset_creator_window_8cs_1aef19bab18b9814edeef255c43e4f6bbc">Object</link>
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;targetID&#32;=&#32;target.GetInstanceID();
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;list.Count;&#32;i++)
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list[i].GetInstanceID()&#32;==&#32;targetID)
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00060 
00061 
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Compare(<emphasis role="keyword">this</emphasis>&#32;Color32&#32;a,&#32;Color32&#32;b)
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a.r&#32;==&#32;b.r&#32;&amp;&amp;&#32;a.g&#32;==&#32;b.g&#32;&amp;&amp;&#32;a.b&#32;==&#32;b.b&#32;&amp;&amp;&#32;a.a&#32;==&#32;b.a;
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00066 
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CompareRGB(<emphasis role="keyword">this</emphasis>&#32;Color32&#32;a,&#32;Color32&#32;b)
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a.r&#32;==&#32;b.r&#32;&amp;&amp;&#32;a.g&#32;==&#32;b.g&#32;&amp;&amp;&#32;a.b&#32;==&#32;b.b;
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00071 
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Compare(<emphasis role="keyword">this</emphasis>&#32;Color&#32;a,&#32;Color&#32;b)
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a.r&#32;==&#32;b.r&#32;&amp;&amp;&#32;a.g&#32;==&#32;b.g&#32;&amp;&amp;&#32;a.b&#32;==&#32;b.b&#32;&amp;&amp;&#32;a.a&#32;==&#32;b.a;
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00076 
00077 
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CompareRGB(<emphasis role="keyword">this</emphasis>&#32;Color&#32;a,&#32;Color&#32;b)
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a.r&#32;==&#32;b.r&#32;&amp;&amp;&#32;a.g&#32;==&#32;b.g&#32;&amp;&amp;&#32;a.b&#32;==&#32;b.b;
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00082 
00083 
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Color32&#32;Multiply&#32;(<emphasis role="keyword">this</emphasis>&#32;Color32&#32;c1,&#32;Color32&#32;c2)
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;r&#32;=&#32;(byte)((c1.r&#32;/&#32;255f)&#32;*&#32;(c2.r&#32;/&#32;255f)&#32;*&#32;255);
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g&#32;=&#32;(byte)((c1.g&#32;/&#32;255f)&#32;*&#32;(c2.g&#32;/&#32;255f)&#32;*&#32;255);
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;b&#32;=&#32;(byte)((c1.b&#32;/&#32;255f)&#32;*&#32;(c2.b&#32;/&#32;255f)&#32;*&#32;255);
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;a&#32;=&#32;(byte)((c1.a&#32;/&#32;255f)&#32;*&#32;(c2.a&#32;/&#32;255f)&#32;*&#32;255);
00090 
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Color32(r,&#32;g,&#32;b,&#32;a);
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00093 
00094 
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Color32&#32;Tint&#32;(<emphasis role="keyword">this</emphasis>&#32;Color32&#32;c1,&#32;Color32&#32;c2)
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;r&#32;=&#32;(byte)((c1.r&#32;/&#32;255f)&#32;*&#32;(c2.r&#32;/&#32;255f)&#32;*&#32;255);
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g&#32;=&#32;(byte)((c1.g&#32;/&#32;255f)&#32;*&#32;(c2.g&#32;/&#32;255f)&#32;*&#32;255);
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;b&#32;=&#32;(byte)((c1.b&#32;/&#32;255f)&#32;*&#32;(c2.b&#32;/&#32;255f)&#32;*&#32;255);
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;a&#32;=&#32;(byte)((c1.a&#32;/&#32;255f)&#32;*&#32;(c2.a&#32;/&#32;255f)&#32;*&#32;255);
00101 
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Color32(r,&#32;g,&#32;b,&#32;a);
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00104 
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Color32&#32;Tint(<emphasis role="keyword">this</emphasis>&#32;Color32&#32;c1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;tint)
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;r&#32;=&#32;(byte)(Mathf.Clamp(c1.r&#32;/&#32;255f&#32;*&#32;tint&#32;*&#32;255,&#32;0,&#32;255));
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g&#32;=&#32;(byte)(Mathf.Clamp(c1.g&#32;/&#32;255f&#32;*&#32;tint&#32;*&#32;255,&#32;0,&#32;255));
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;b&#32;=&#32;(byte)(Mathf.Clamp(c1.b&#32;/&#32;255f&#32;*&#32;tint&#32;*&#32;255,&#32;0,&#32;255));
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;a&#32;=&#32;(byte)(Mathf.Clamp(c1.a&#32;/&#32;255f&#32;*&#32;tint&#32;*&#32;255,&#32;0,&#32;255));
00111 
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Color32(r,&#32;g,&#32;b,&#32;a);
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00114 
00115 
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Compare(<emphasis role="keyword">this</emphasis>&#32;Vector3&#32;v1,&#32;Vector3&#32;v2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;accuracy)
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;x&#32;=&#32;(int)(v1.x&#32;*&#32;accuracy)&#32;==&#32;(int)(v2.x&#32;*&#32;accuracy);
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;y&#32;=&#32;(int)(v1.y&#32;*&#32;accuracy)&#32;==&#32;(int)(v2.y&#32;*&#32;accuracy);
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;z&#32;=&#32;(int)(v1.z&#32;*&#32;accuracy)&#32;==&#32;(int)(v2.z&#32;*&#32;accuracy);
00121 
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x&#32;&amp;&amp;&#32;y&#32;&amp;&amp;&#32;z;
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00124 
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Compare(<emphasis role="keyword">this</emphasis>&#32;Quaternion&#32;q1,&#32;Quaternion&#32;q2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;accuracy)
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;x&#32;=&#32;(int)(q1.x&#32;*&#32;accuracy)&#32;==&#32;(int)(q2.x&#32;*&#32;accuracy);
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;y&#32;=&#32;(int)(q1.y&#32;*&#32;accuracy)&#32;==&#32;(int)(q2.y&#32;*&#32;accuracy);
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;z&#32;=&#32;(int)(q1.z&#32;*&#32;accuracy)&#32;==&#32;(int)(q2.z&#32;*&#32;accuracy);
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;w&#32;=&#32;(int)(q1.w&#32;*&#32;accuracy)&#32;==&#32;(int)(q2.w&#32;*&#32;accuracy);
00131 
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x&#32;&amp;&amp;&#32;y&#32;&amp;&amp;&#32;z&#32;&amp;&amp;&#32;w;
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00134 
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;static&#32;void&#32;AddElementAtIndex&lt;T&gt;(this&#32;T[]&#32;array,&#32;int&#32;writeIndex,&#32;T&#32;item)</emphasis>
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;if&#32;(writeIndex&#32;&gt;=&#32;array.Length)</emphasis>
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;System.Array.Resize(ref&#32;array,&#32;Mathf.NextPowerOfTwo(writeIndex&#32;+&#32;1));</emphasis>
00139 
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;array[writeIndex]&#32;=&#32;item;</emphasis>
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
00142 
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;static&#32;void&#32;Insert&lt;T&gt;(this&#32;T[]&#32;array,&#32;int&#32;index,&#32;T&#32;item)</emphasis>
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;if&#32;(index&#32;&gt;&#32;array.Length&#32;-&#32;1)&#32;return;</emphasis>
00153 
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;T&#32;savedItem&#32;=&#32;item;</emphasis>
00155 
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;for&#32;(int&#32;i&#32;=&#32;index;&#32;i&#32;&lt;&#32;array.Length;&#32;i++)</emphasis>
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;{</emphasis>
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;savedItem&#32;=&#32;array[i];</emphasis>
00159 
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array[i]&#32;=&#32;item;</emphasis>
00161 
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;item&#32;=&#32;savedItem;</emphasis>
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;}</emphasis>
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
00165 
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;static&#32;void&#32;Insert&lt;T&gt;(this&#32;T[]&#32;array,&#32;int&#32;index,&#32;T[]&#32;items)</emphasis>
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;if&#32;(index&#32;&gt;&#32;array.Length&#32;-&#32;1)&#32;return;</emphasis>
00176 
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;System.Array.Resize(ref&#32;array,&#32;array.Length&#32;+&#32;items.Length);</emphasis>
00178 
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;int&#32;sourceIndex&#32;=&#32;0;</emphasis>
00180 
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;T&#32;savedItem&#32;=&#32;items[sourceIndex];</emphasis>
00182 
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;for&#32;(int&#32;i&#32;=&#32;index;&#32;i&#32;&lt;&#32;array.Length;&#32;i++)</emphasis>
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;{</emphasis>
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;savedItem&#32;=&#32;array[i];</emphasis>
00186 
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array[i]&#32;=&#32;items[sourceIndex];</emphasis>
00188 
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;items[sourceIndex]&#32;=&#32;savedItem;</emphasis>
00190 
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(sourceIndex&#32;&lt;&#32;items.Length&#32;-&#32;1)</emphasis>
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sourceIndex&#32;+=&#32;1;</emphasis>
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sourceIndex&#32;=&#32;0;</emphasis>
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;}</emphasis>
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
00197 
00198 &#32;&#32;&#32;&#32;}
00199 
00200 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>TMP_Math
00201 &#32;&#32;&#32;&#32;{
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;FLOAT_MAX&#32;=&#32;32767;
00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;FLOAT_MIN&#32;=&#32;-32767;
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;INT_MAX&#32;=&#32;2147483647;
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;INT_MIN&#32;=&#32;-2147483647;
00206 
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;FLOAT_UNSET&#32;=&#32;-32767;
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;INT_UNSET&#32;=&#32;-32767;
00209 
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector2&#32;MAX_16BIT&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(FLOAT_MAX,&#32;FLOAT_MAX);
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector2&#32;MIN_16BIT&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2(FLOAT_MIN,&#32;FLOAT_MIN);
00212 
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Approximately(<emphasis role="keywordtype">float</emphasis>&#32;a,&#32;<emphasis role="keywordtype">float</emphasis>&#32;b)
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(b&#32;-&#32;0.0001f)&#32;&lt;&#32;a&#32;&amp;&amp;&#32;a&#32;&lt;&#32;(b&#32;+&#32;0.0001f);
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00217 &#32;&#32;&#32;&#32;}
00218 }
</programlisting></section>
