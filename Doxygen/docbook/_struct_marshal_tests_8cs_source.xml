<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__struct_marshal_tests_8cs_source">
<title>StructMarshalTests.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Editor/Tests/StructMarshalTests.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Runtime.InteropServices;
00012 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00013 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap_internal">LeapInternal</link>;
00014 
00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_leap_c_sharp_1_1_tests">Leap.LeapCSharp.Tests</link>&#32;{
00016 
00017 &#32;&#32;[StructLayout(LayoutKind.Sequential)]
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00018"/><link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct">00018</link> &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct">TestMarshaledStruct</link>&#32;{
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00019"/><link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1a46b6e7994957bd6b633533479298e2b1">00019</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1a46b6e7994957bd6b633533479298e2b1">id</link>;
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00020"/><link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1ae3963be967349ef673366fe28fa59892">00020</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1ae3963be967349ef673366fe28fa59892">TestMarshaledStruct</link>(<emphasis role="keywordtype">int</emphasis>&#32;t)&#32;{&#32;<emphasis role="keywordtype">id</emphasis>&#32;=&#32;t;&#32;}
00021 &#32;&#32;}
00022 
00023 &#32;&#32;[TestFixture()]
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00024"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests">00024</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests">StructMarshalTests</link>&#32;{
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00025"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a0e96ac2a4de8582ad6623d1459d7fda4">00025</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a0e96ac2a4de8582ad6623d1459d7fda4">ARRAY_SIZE</link>&#32;=&#32;5;
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00026"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1af0bc3ff18803ea59b5adcd7348aaa504">00026</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1af0bc3ff18803ea59b5adcd7348aaa504">ARRAY_TEST_INDEX</link>&#32;=&#32;3;
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00027"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1aca4bb42c952b27e8fb216d3927d3991b">00027</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1aca4bb42c952b27e8fb216d3927d3991b">TEST_ID</link>&#32;=&#32;23;
00028 
00029 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_size;
00030 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;IntPtr&#32;_ptr;
00031 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct">TestMarshaledStruct</link>&#32;_testStruct;
00032 
00033 &#32;&#32;&#32;&#32;[SetUp]
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00034"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1ad9685e37feb15c81d7766a7959609227">00034</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1ad9685e37feb15c81d7766a7959609227">Setup</link>()&#32;{
00035 &#32;&#32;&#32;&#32;&#32;&#32;_size&#32;=&#32;Marshal.SizeOf(typeof(<link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct">TestMarshaledStruct</link>));
00036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//For&#32;each&#32;test,&#32;allocate&#32;a&#32;chunk&#32;of&#32;memory&#32;large&#32;enough&#32;for&#32;[ARRAY_SIZE]&#32;structs</emphasis>
00037 &#32;&#32;&#32;&#32;&#32;&#32;_ptr&#32;=&#32;Marshal.AllocHGlobal(_size&#32;*&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a0e96ac2a4de8582ad6623d1459d7fda4">ARRAY_SIZE</link>);
00038 &#32;&#32;&#32;&#32;&#32;&#32;_testStruct&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct">TestMarshaledStruct</link>(<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1aca4bb42c952b27e8fb216d3927d3991b">TEST_ID</link>);
00039 &#32;&#32;&#32;&#32;}
00040 
00041 &#32;&#32;&#32;&#32;[TearDown]
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00042"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1ab8fd65b7761b7a0423173f81affe129f">00042</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1ab8fd65b7761b7a0423173f81affe129f">Teardown</link>()&#32;{
00043 &#32;&#32;&#32;&#32;&#32;&#32;_size&#32;=&#32;0;
00044 &#32;&#32;&#32;&#32;&#32;&#32;Marshal.FreeHGlobal(_ptr);
00045 &#32;&#32;&#32;&#32;&#32;&#32;_ptr&#32;=&#32;IntPtr.Zero;
00046 &#32;&#32;&#32;&#32;&#32;&#32;_testStruct&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct">TestMarshaledStruct</link>();
00047 &#32;&#32;&#32;&#32;}
00048 
00049 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00050"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a3c10a893a23723f291d2130e45002781">00050</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a3c10a893a23723f291d2130e45002781">SizeTest</link>()&#32;{
00051 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;reportedSize&#32;=&#32;StructMarshal&lt;TestMarshaledStruct&gt;.Size;
00052 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_size,&#32;Is.EqualTo(reportedSize),&#32;<emphasis role="stringliteral">&quot;Size&#32;must&#32;match&#32;Marshal.SizeOf.&quot;</emphasis>);
00053 &#32;&#32;&#32;&#32;}
00054 
00055 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00056"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a77668a08f998c376bda76f5d5fc3a932">00056</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a77668a08f998c376bda76f5d5fc3a932">PtrToStructTest</link>()&#32;{
00057 &#32;&#32;&#32;&#32;&#32;&#32;Marshal.StructureToPtr(_testStruct,&#32;_ptr,&#32;<emphasis role="keyword">false</emphasis>);
00058 
00059 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct">TestMarshaledStruct</link>&#32;output;
00060 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;TestMarshaledStruct&gt;.PtrToStruct(_ptr,&#32;out&#32;output);
00061 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_testStruct.<link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1a46b6e7994957bd6b633533479298e2b1">id</link>,&#32;Is.EqualTo(output.id),&#32;<emphasis role="stringliteral">&quot;Input&#32;must&#32;match&#32;output.&quot;</emphasis>);
00062 &#32;&#32;&#32;&#32;}
00063 
00064 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__struct_marshal_tests_8cs_source_1l00065"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a76c6c258ce0841fbebd04e4363a9c13c">00065</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a76c6c258ce0841fbebd04e4363a9c13c">ArrayElementToStructTest</link>()&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;Marshal.StructureToPtr(_testStruct,&#32;(IntPtr)((<emphasis role="keywordtype">long</emphasis>)_ptr&#32;+&#32;_size&#32;*&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1af0bc3ff18803ea59b5adcd7348aaa504">ARRAY_TEST_INDEX</link>),&#32;<emphasis role="keyword">false</emphasis>);
00067 
00068 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct">TestMarshaledStruct</link>&#32;output;
00069 &#32;&#32;&#32;&#32;&#32;&#32;StructMarshal&lt;TestMarshaledStruct&gt;.ArrayElementToStruct(_ptr,&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1af0bc3ff18803ea59b5adcd7348aaa504">ARRAY_TEST_INDEX</link>,&#32;out&#32;output);
00070 &#32;&#32;&#32;&#32;&#32;&#32;Assert.That(_testStruct.<link linkend="_struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1a46b6e7994957bd6b633533479298e2b1">id</link>,&#32;Is.EqualTo(output.id),&#32;<emphasis role="stringliteral">&quot;Input&#32;must&#32;match&#32;output.&quot;</emphasis>);
00071 &#32;&#32;&#32;&#32;}
00072 &#32;&#32;}
00073 }
</programlisting></section>
