<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__t_m_pro___shader_utilities_8cs_source">
<title>TMPro_ShaderUtilities.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Library/PackageCache/com.unity.textmeshpro@1.3.0/Scripts/Runtime/TMPro_ShaderUtilities.cs</primary></indexterm>
<programlisting>00001 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00002 <emphasis role="keyword">using</emphasis>&#32;System.Linq;
00003 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00004 
00005 
00006 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_t_m_pro">TMPro</link>
00007 {
00008 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>ShaderUtilities
00009 &#32;&#32;&#32;&#32;{
00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Shader&#32;Property&#32;IDs</emphasis>
00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_MainTex;
00012 
00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_FaceTex;
00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_FaceColor;&#32;
00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_FaceDilate;
00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_Shininess;
00017 
00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_UnderlayColor;
00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_UnderlayOffsetX;&#32;
00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_UnderlayOffsetY;&#32;
00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_UnderlayDilate;
00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_UnderlaySoftness;
00023 
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_WeightNormal;&#32;
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_WeightBold;
00026 
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_OutlineTex;
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_OutlineWidth;&#32;
00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_OutlineSoftness;
00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_OutlineColor;
00031 
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_Padding;
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_GradientScale;&#32;
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_ScaleX;&#32;
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_ScaleY;&#32;
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_PerspectiveFilter;&#32;
00037 
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_TextureWidth;&#32;
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_TextureHeight;&#32;
00040 
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_BevelAmount;&#32;
00042 
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_GlowColor;&#32;
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_GlowOffset;
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_GlowPower;&#32;&#32;
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_GlowOuter;&#32;
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_LightAngle;
00049 
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_EnvMap;
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_EnvMatrix;
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_EnvMatrixRotation;
00053 
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;static&#32;int&#32;ID_MaskID;</emphasis>
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_MaskCoord;
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_ClipRect;&#32;
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_MaskSoftnessX;&#32;
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_MaskSoftnessY;&#32;
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_VertexOffsetX;&#32;
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_VertexOffsetY;
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_UseClipRect;
00062 
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_StencilID;
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_StencilOp;
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_StencilComp;
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_StencilReadMask;
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_StencilWriteMask;
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_ShaderFlags;&#32;
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_ScaleRatio_A;
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_ScaleRatio_B;
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ID_ScaleRatio_C;
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;Keyword_Bevel&#32;=&#32;<emphasis role="stringliteral">&quot;BEVEL_ON&quot;</emphasis>;
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;Keyword_Glow&#32;=&#32;<emphasis role="stringliteral">&quot;GLOW_ON&quot;</emphasis>;
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;Keyword_Underlay&#32;=&#32;<emphasis role="stringliteral">&quot;UNDERLAY_ON&quot;</emphasis>;
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;Keyword_Ratios&#32;=&#32;<emphasis role="stringliteral">&quot;RATIOS_OFF&quot;</emphasis>;
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//public&#32;static&#32;string&#32;Keyword_MASK_OFF&#32;=&#32;&quot;MASK_OFF&quot;;</emphasis>
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;Keyword_MASK_SOFT&#32;=&#32;<emphasis role="stringliteral">&quot;MASK_SOFT&quot;</emphasis>;
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;Keyword_MASK_HARD&#32;=&#32;<emphasis role="stringliteral">&quot;MASK_HARD&quot;</emphasis>;
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;Keyword_MASK_TEX&#32;=&#32;<emphasis role="stringliteral">&quot;MASK_TEX&quot;</emphasis>;
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;Keyword_Outline&#32;=&#32;<emphasis role="stringliteral">&quot;OUTLINE_ON&quot;</emphasis>;
00083 
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;ShaderTag_ZTestMode&#32;=&#32;<emphasis role="stringliteral">&quot;unity_GUIZTestMode&quot;</emphasis>;
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;ShaderTag_CullMode&#32;=&#32;<emphasis role="stringliteral">&quot;_CullMode&quot;</emphasis>;
00086 
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_clamp&#32;=&#32;1.0f;
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isInitialized&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00089 
00090 
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;ShaderUtilities()
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GetShaderPropertyIDs();
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00098 
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GetShaderPropertyIDs()
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isInitialized&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;Getting&#32;Shader&#32;property&#32;IDs&quot;);</emphasis>
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isInitialized&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00108 
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_MainTex&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_MainTex&quot;</emphasis>);
00110 
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_FaceTex&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_FaceTex&quot;</emphasis>);
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_FaceColor&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_FaceColor&quot;</emphasis>);
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_FaceDilate&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_FaceDilate&quot;</emphasis>);
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_Shininess&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_FaceShininess&quot;</emphasis>);
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_UnderlayColor&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_UnderlayColor&quot;</emphasis>);
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_UnderlayOffsetX&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_UnderlayOffsetX&quot;</emphasis>);
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_UnderlayOffsetY&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_UnderlayOffsetY&quot;</emphasis>);
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_UnderlayDilate&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_UnderlayDilate&quot;</emphasis>);
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_UnderlaySoftness&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_UnderlaySoftness&quot;</emphasis>);
00121 
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_WeightNormal&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_WeightNormal&quot;</emphasis>);
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_WeightBold&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_WeightBold&quot;</emphasis>);
00124 
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_OutlineTex&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_OutlineTex&quot;</emphasis>);
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_OutlineWidth&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_OutlineWidth&quot;</emphasis>);
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_OutlineSoftness&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_OutlineSoftness&quot;</emphasis>);
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_OutlineColor&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_OutlineColor&quot;</emphasis>);
00129 
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_Padding&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_Padding&quot;</emphasis>);
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_GradientScale&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_GradientScale&quot;</emphasis>);
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_ScaleX&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_ScaleX&quot;</emphasis>);
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_ScaleY&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_ScaleY&quot;</emphasis>);
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_PerspectiveFilter&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_PerspectiveFilter&quot;</emphasis>);
00135 
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_TextureWidth&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_TextureWidth&quot;</emphasis>);
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_TextureHeight&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_TextureHeight&quot;</emphasis>);
00138 
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_BevelAmount&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_Bevel&quot;</emphasis>);
00140 
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_LightAngle&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_LightAngle&quot;</emphasis>);
00142 
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_EnvMap&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_Cube&quot;</emphasis>);
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_EnvMatrix&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_EnvMatrix&quot;</emphasis>);
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_EnvMatrixRotation&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_EnvMatrixRotation&quot;</emphasis>);
00146 
00147 
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_GlowColor&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_GlowColor&quot;</emphasis>);
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_GlowOffset&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_GlowOffset&quot;</emphasis>);
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_GlowPower&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_GlowPower&quot;</emphasis>);
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_GlowOuter&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_GlowOuter&quot;</emphasis>);
00152 
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//ID_MaskID&#32;=&#32;Shader.PropertyToID(&quot;_MaskID&quot;);</emphasis>
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_MaskCoord&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_MaskCoord&quot;</emphasis>);
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_ClipRect&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_ClipRect&quot;</emphasis>);
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_UseClipRect&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_UseClipRect&quot;</emphasis>);
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_MaskSoftnessX&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_MaskSoftnessX&quot;</emphasis>);
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_MaskSoftnessY&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_MaskSoftnessY&quot;</emphasis>);
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_VertexOffsetX&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_VertexOffsetX&quot;</emphasis>);
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_VertexOffsetY&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_VertexOffsetY&quot;</emphasis>);
00161 
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_StencilID&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_Stencil&quot;</emphasis>);
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_StencilOp&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_StencilOp&quot;</emphasis>);
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_StencilComp&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_StencilComp&quot;</emphasis>);
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_StencilReadMask&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_StencilReadMask&quot;</emphasis>);
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_StencilWriteMask&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_StencilWriteMask&quot;</emphasis>);
00167 
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_ShaderFlags&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_ShaderFlags&quot;</emphasis>);
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_ScaleRatio_A&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_ScaleRatioA&quot;</emphasis>);
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_ScaleRatio_B&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_ScaleRatioB&quot;</emphasis>);
00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID_ScaleRatio_C&#32;=&#32;Shader.PropertyToID(<emphasis role="stringliteral">&quot;_ScaleRatioC&quot;</emphasis>);
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00174 
00175 
00176 
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scale&#32;Ratios&#32;to&#32;ensure&#32;property&#32;ranges&#32;are&#32;optimum&#32;in&#32;Material&#32;Editor&#32;&#32;</emphasis>
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;UpdateShaderRatios(Material&#32;mat)
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;UpdateShaderRatios()&#32;called.&quot;);</emphasis>
00181 
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;ratio_A&#32;=&#32;1;
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;ratio_B&#32;=&#32;1;
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;ratio_C&#32;=&#32;1;
00185 
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isRatioEnabled&#32;=&#32;!mat.shaderKeywords.Contains(Keyword_Ratios);
00187 
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;Ratio&#32;A</emphasis>
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale&#32;=&#32;mat.GetFloat(ID_GradientScale);
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;faceDilate&#32;=&#32;mat.GetFloat(ID_FaceDilate);
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;outlineThickness&#32;=&#32;mat.GetFloat(ID_OutlineWidth);
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;outlineSoftness&#32;=&#32;mat.GetFloat(ID_OutlineSoftness);
00193 
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;weight&#32;=&#32;Mathf.Max(mat.GetFloat(ID_WeightNormal),&#32;mat.GetFloat(ID_WeightBold))&#32;/&#32;4.0f;
00195 
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;Mathf.Max(1,&#32;weight&#32;+&#32;faceDilate&#32;+&#32;outlineThickness&#32;+&#32;outlineSoftness);
00197 
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ratio_A&#32;=&#32;isRatioEnabled&#32;?&#32;(scale&#32;-&#32;m_clamp)&#32;/&#32;(scale&#32;*&#32;t)&#32;:&#32;1;
00199 
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//float&#32;ratio_A_old&#32;=&#32;mat.GetFloat(ID_ScaleRatio_A);</emphasis>
00201 
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;set&#32;the&#32;ratio&#32;if&#32;it&#32;has&#32;changed.</emphasis>
00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(ratio_A&#32;!=&#32;ratio_A_old)</emphasis>
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mat.SetFloat(ID_ScaleRatio_A,&#32;ratio_A);
00205 
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;Ratio&#32;B</emphasis>
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mat.HasProperty(ID_GlowOffset))
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;glowOffset&#32;=&#32;mat.GetFloat(ID_GlowOffset);
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;glowOuter&#32;=&#32;mat.GetFloat(ID_GlowOuter);
00211 
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;range&#32;=&#32;(weight&#32;+&#32;faceDilate)&#32;*&#32;(scale&#32;-&#32;m_clamp);
00213 
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;Mathf.Max(1,&#32;glowOffset&#32;+&#32;glowOuter);
00215 
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ratio_B&#32;=&#32;isRatioEnabled&#32;?&#32;Mathf.Max(0,&#32;scale&#32;-&#32;m_clamp&#32;-&#32;range)&#32;/&#32;(scale&#32;*&#32;t)&#32;:&#32;1;
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//float&#32;ratio_B_old&#32;=&#32;mat.GetFloat(ID_ScaleRatio_B);</emphasis>
00218 
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;set&#32;the&#32;ratio&#32;if&#32;it&#32;has&#32;changed.</emphasis>
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(ratio_B&#32;!=&#32;ratio_B_old)</emphasis>
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mat.SetFloat(ID_ScaleRatio_B,&#32;ratio_B);
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00223 
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;Ratio&#32;C</emphasis>
00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mat.HasProperty(ID_UnderlayOffsetX))
00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;underlayOffsetX&#32;=&#32;mat.GetFloat(ID_UnderlayOffsetX);
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;underlayOffsetY&#32;=&#32;mat.GetFloat(ID_UnderlayOffsetY);
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;underlayDilate&#32;=&#32;mat.GetFloat(ID_UnderlayDilate);
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;underlaySoftness&#32;=&#32;mat.GetFloat(ID_UnderlaySoftness);
00231 
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;range&#32;=&#32;(weight&#32;+&#32;faceDilate)&#32;*&#32;(scale&#32;-&#32;m_clamp);
00233 
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;Mathf.Max(1,&#32;Mathf.Max(Mathf.Abs(underlayOffsetX),&#32;Mathf.Abs(underlayOffsetY))&#32;+&#32;underlayDilate&#32;+&#32;underlaySoftness);
00235 
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ratio_C&#32;=&#32;isRatioEnabled&#32;?&#32;Mathf.Max(0,&#32;scale&#32;-&#32;m_clamp&#32;-&#32;range)&#32;/&#32;(scale&#32;*&#32;t)&#32;:&#32;1;
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//float&#32;ratio_C_old&#32;=&#32;mat.GetFloat(ID_ScaleRatio_C);</emphasis>
00238 
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;set&#32;the&#32;ratio&#32;if&#32;it&#32;has&#32;changed.</emphasis>
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(ratio_C&#32;!=&#32;ratio_C_old)</emphasis>
00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mat.SetFloat(ID_ScaleRatio_C,&#32;ratio_C);
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00244 
00245 
00246 
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Function&#32;to&#32;calculate&#32;padding&#32;required&#32;for&#32;Outline&#32;Width&#32;&amp;&#32;Dilation&#32;for&#32;proper&#32;text&#32;alignment</emphasis>
00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector4&#32;GetFontExtent(Material&#32;material)
00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Revised&#32;implementation&#32;where&#32;style&#32;no&#32;longer&#32;affects&#32;alignment</emphasis>
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector4.zero;
00252 
00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
00254 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(material&#32;==&#32;null&#32;||&#32;!material.HasProperty(ShaderUtilities.ID_GradientScale))</emphasis>
00255 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;Vector4.zero;&#32;&#32;&#32;//&#32;We&#32;are&#32;using&#32;an&#32;non&#32;SDF&#32;Shader.</emphasis>
00256 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
00257 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float&#32;scaleRatioA&#32;=&#32;material.GetFloat(ID_ScaleRatio_A);</emphasis>
00258 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float&#32;faceDilate&#32;=&#32;material.GetFloat(ID_FaceDilate)&#32;*&#32;scaleRatioA;</emphasis>
00259 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float&#32;outlineThickness&#32;=&#32;material.GetFloat(ID_OutlineWidth)&#32;*&#32;scaleRatioA;</emphasis>
00260 <emphasis role="comment"></emphasis>
00261 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float&#32;extent&#32;=&#32;Mathf.Min(1,&#32;faceDilate&#32;+&#32;outlineThickness);</emphasis>
00262 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extent&#32;*=&#32;material.GetFloat(ID_GradientScale);</emphasis>
00263 <emphasis role="comment"></emphasis>
00264 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;new&#32;Vector4(extent,&#32;extent,&#32;extent,&#32;extent);</emphasis>
00265 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00267 
00268 
00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Function&#32;to&#32;check&#32;if&#32;Masking&#32;is&#32;enabled</emphasis>
00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsMaskingEnabled(Material&#32;material)
00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;!material.HasProperty(ShaderUtilities.ID_ClipRect))
00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00274 
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.shaderKeywords.Contains(ShaderUtilities.Keyword_MASK_SOFT)&#32;||&#32;material.shaderKeywords.Contains(ShaderUtilities.Keyword_MASK_HARD)&#32;||&#32;material.shaderKeywords.Contains(ShaderUtilities.Keyword_MASK_TEX))
00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00277 
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00280 
00281 
00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Function&#32;to&#32;determine&#32;how&#32;much&#32;extra&#32;padding&#32;is&#32;required&#32;as&#32;a&#32;result&#32;of&#32;material&#32;properties&#32;like&#32;dilate,&#32;outline&#32;thickness,&#32;softness,&#32;glow,&#32;etc...</emphasis>
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;GetPadding(Material&#32;material,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;enableExtraPadding,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isBold)
00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;GetPadding()&#32;called.&quot;);</emphasis>
00286 
00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isInitialized&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GetShaderPropertyIDs();
00289 
00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;if&#32;Material&#32;is&#32;null</emphasis>
00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00292 
00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;extraPadding&#32;=&#32;enableExtraPadding&#32;?&#32;4&#32;:&#32;0;
00294 
00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;we&#32;are&#32;using&#32;a&#32;non&#32;Distance&#32;Field&#32;Shader</emphasis>
00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.HasProperty(ID_GradientScale)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.HasProperty(ID_Padding))
00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extraPadding&#32;+=&#32;(<emphasis role="keywordtype">int</emphasis>)material.GetFloat(ID_Padding);
00300 
00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;extraPadding;
00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00303 
00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector4&#32;padding&#32;=&#32;Vector4.zero;
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector4&#32;maxPadding&#32;=&#32;Vector4.zero;
00306 
00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//float&#32;weight&#32;=&#32;0;</emphasis>
00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;faceDilate&#32;=&#32;0;
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;faceSoftness&#32;=&#32;0;
00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;outlineThickness&#32;=&#32;0;
00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scaleRatio_A&#32;=&#32;0;
00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scaleRatio_B&#32;=&#32;0;
00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scaleRatio_C&#32;=&#32;0;
00314 
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;glowOffset&#32;=&#32;0;
00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;glowOuter&#32;=&#32;0;
00317 
00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;uniformPadding&#32;=&#32;0;
00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterate&#32;through&#32;each&#32;of&#32;the&#32;assigned&#32;materials&#32;to&#32;find&#32;the&#32;max&#32;values&#32;to&#32;set&#32;the&#32;padding.</emphasis>
00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;Shader&#32;Ratios&#32;prior&#32;to&#32;computing&#32;padding</emphasis>
00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UpdateShaderRatios(material);
00323 
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;shaderKeywords&#32;=&#32;material.shaderKeywords;
00325 
00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.HasProperty(ID_ScaleRatio_A))
00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scaleRatio_A&#32;=&#32;material.GetFloat(ID_ScaleRatio_A);
00328 
00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//weight&#32;=&#32;0;&#32;//&#32;Mathf.Max(material.GetFloat(ID_WeightNormal),&#32;material.GetFloat(ID_WeightBold))&#32;/&#32;2.0f&#32;*&#32;scaleRatio_A;</emphasis>
00330 
00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.HasProperty(ID_FaceDilate))
00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;faceDilate&#32;=&#32;material.GetFloat(ID_FaceDilate)&#32;*&#32;scaleRatio_A;
00333 
00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.HasProperty(ID_OutlineSoftness))
00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;faceSoftness&#32;=&#32;material.GetFloat(ID_OutlineSoftness)&#32;*&#32;scaleRatio_A;
00336 
00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.HasProperty(ID_OutlineWidth))
00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineThickness&#32;=&#32;material.GetFloat(ID_OutlineWidth)&#32;*&#32;scaleRatio_A;
00339 
00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniformPadding&#32;=&#32;outlineThickness&#32;+&#32;faceSoftness&#32;+&#32;faceDilate;
00341 
00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Glow&#32;padding&#32;contribution</emphasis>
00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.HasProperty(ID_GlowOffset)&#32;&amp;&amp;&#32;shaderKeywords.Contains(Keyword_Glow))&#32;<emphasis role="comment">//&#32;Generates&#32;GC</emphasis>
00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.HasProperty(ID_ScaleRatio_B))
00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scaleRatio_B&#32;=&#32;material.GetFloat(ID_ScaleRatio_B);
00347 
00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glowOffset&#32;=&#32;material.GetFloat(ID_GlowOffset)&#32;*&#32;scaleRatio_B;
00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glowOuter&#32;=&#32;material.GetFloat(ID_GlowOuter)&#32;*&#32;scaleRatio_B;
00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00351 
00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniformPadding&#32;=&#32;Mathf.Max(uniformPadding,&#32;faceDilate&#32;+&#32;glowOffset&#32;+&#32;glowOuter);
00353 
00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Underlay&#32;padding&#32;contribution</emphasis>
00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.HasProperty(ID_UnderlaySoftness)&#32;&amp;&amp;&#32;shaderKeywords.Contains(Keyword_Underlay))&#32;<emphasis role="comment">//&#32;Generates&#32;GC</emphasis>
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material.HasProperty(ID_ScaleRatio_C))
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scaleRatio_C&#32;=&#32;material.GetFloat(ID_ScaleRatio_C);
00359 
00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;offsetX&#32;=&#32;material.GetFloat(ID_UnderlayOffsetX)&#32;*&#32;scaleRatio_C;
00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;offsetY&#32;=&#32;material.GetFloat(ID_UnderlayOffsetY)&#32;*&#32;scaleRatio_C;
00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dilate&#32;=&#32;material.GetFloat(ID_UnderlayDilate)&#32;*&#32;scaleRatio_C;
00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;softness&#32;=&#32;material.GetFloat(ID_UnderlaySoftness)&#32;*&#32;scaleRatio_C;
00364 
00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.x&#32;=&#32;Mathf.Max(padding.x,&#32;faceDilate&#32;+&#32;dilate&#32;+&#32;softness&#32;-&#32;offsetX);
00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.y&#32;=&#32;Mathf.Max(padding.y,&#32;faceDilate&#32;+&#32;dilate&#32;+&#32;softness&#32;-&#32;offsetY);
00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.z&#32;=&#32;Mathf.Max(padding.z,&#32;faceDilate&#32;+&#32;dilate&#32;+&#32;softness&#32;+&#32;offsetX);
00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.w&#32;=&#32;Mathf.Max(padding.w,&#32;faceDilate&#32;+&#32;dilate&#32;+&#32;softness&#32;+&#32;offsetY);
00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00370 
00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.x&#32;=&#32;Mathf.Max(padding.x,&#32;uniformPadding);
00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.y&#32;=&#32;Mathf.Max(padding.y,&#32;uniformPadding);
00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.z&#32;=&#32;Mathf.Max(padding.z,&#32;uniformPadding);
00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.w&#32;=&#32;Mathf.Max(padding.w,&#32;uniformPadding);
00375 
00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.x&#32;+=&#32;extraPadding;
00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.y&#32;+=&#32;extraPadding;
00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.z&#32;+=&#32;extraPadding;
00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.w&#32;+=&#32;extraPadding;
00380 
00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.x&#32;=&#32;Mathf.Min(padding.x,&#32;1);
00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.y&#32;=&#32;Mathf.Min(padding.y,&#32;1);
00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.z&#32;=&#32;Mathf.Min(padding.z,&#32;1);
00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.w&#32;=&#32;Mathf.Min(padding.w,&#32;1);
00385 
00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxPadding.x&#32;=&#32;maxPadding.x&#32;&lt;&#32;padding.x&#32;?&#32;padding.x&#32;:&#32;maxPadding.x;
00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxPadding.y&#32;=&#32;maxPadding.y&#32;&lt;&#32;padding.y&#32;?&#32;padding.y&#32;:&#32;maxPadding.y;
00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxPadding.z&#32;=&#32;maxPadding.z&#32;&lt;&#32;padding.z&#32;?&#32;padding.z&#32;:&#32;maxPadding.z;
00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxPadding.w&#32;=&#32;maxPadding.w&#32;&lt;&#32;padding.w&#32;?&#32;padding.w&#32;:&#32;maxPadding.w;
00390 
00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;gradientScale&#32;=&#32;material.GetFloat(ID_GradientScale);
00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding&#32;*=&#32;gradientScale;
00393 
00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;UniformPadding&#32;to&#32;the&#32;maximum&#32;value&#32;of&#32;any&#32;of&#32;its&#32;components.</emphasis>
00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniformPadding&#32;=&#32;Mathf.Max(padding.x,&#32;padding.y);
00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniformPadding&#32;=&#32;Mathf.Max(padding.z,&#32;uniformPadding);
00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniformPadding&#32;=&#32;Mathf.Max(padding.w,&#32;uniformPadding);
00398 
00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;uniformPadding&#32;+&#32;0.5f;
00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00401 
00402 
00403 
00404 
00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Function&#32;to&#32;determine&#32;how&#32;much&#32;extra&#32;padding&#32;is&#32;required&#32;as&#32;a&#32;result&#32;of&#32;material&#32;properties&#32;like&#32;dilate,&#32;outline&#32;thickness,&#32;softness,&#32;glow,&#32;etc...</emphasis>
00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;GetPadding(Material[]&#32;materials,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;enableExtraPadding,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isBold)
00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;GetPadding()&#32;called.&quot;);</emphasis>
00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isInitialized&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GetShaderPropertyIDs();
00412 
00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;if&#32;Material&#32;is&#32;null</emphasis>
00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(materials&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;extraPadding&#32;=&#32;enableExtraPadding&#32;?&#32;4&#32;:&#32;0;
00417 
00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;we&#32;are&#32;using&#32;a&#32;Bitmap&#32;Shader</emphasis>
00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(materials[0].HasProperty(ID_Padding))
00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;extraPadding&#32;+&#32;materials[0].GetFloat(ID_Padding);
00421 
00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector4&#32;padding&#32;=&#32;Vector4.zero;
00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector4&#32;maxPadding&#32;=&#32;Vector4.zero;
00424 
00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;faceDilate&#32;=&#32;0;
00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;faceSoftness&#32;=&#32;0;
00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;outlineThickness&#32;=&#32;0;
00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scaleRatio_A&#32;=&#32;0;
00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scaleRatio_B&#32;=&#32;0;
00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scaleRatio_C&#32;=&#32;0;
00431 
00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;glowOffset&#32;=&#32;0;
00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;glowOuter&#32;=&#32;0;
00434 
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;uniformPadding&#32;=&#32;0;
00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterate&#32;through&#32;each&#32;of&#32;the&#32;assigned&#32;materials&#32;to&#32;find&#32;the&#32;max&#32;values&#32;to&#32;set&#32;the&#32;padding.</emphasis>
00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;materials.Length;&#32;i++)
00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;Shader&#32;Ratios&#32;prior&#32;to&#32;computing&#32;padding</emphasis>
00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ShaderUtilities.UpdateShaderRatios(materials[i]);
00441 
00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;shaderKeywords&#32;=&#32;materials[i].shaderKeywords;
00443 
00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(materials[i].HasProperty(ShaderUtilities.ID_ScaleRatio_A))
00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scaleRatio_A&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_ScaleRatio_A);
00446 
00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(materials[i].HasProperty(ShaderUtilities.ID_FaceDilate))
00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;faceDilate&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_FaceDilate)&#32;*&#32;scaleRatio_A;
00449 
00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(materials[i].HasProperty(ShaderUtilities.ID_OutlineSoftness))
00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;faceSoftness&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_OutlineSoftness)&#32;*&#32;scaleRatio_A;
00452 
00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(materials[i].HasProperty(ShaderUtilities.ID_OutlineWidth))
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineThickness&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_OutlineWidth)&#32;*&#32;scaleRatio_A;
00455 
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniformPadding&#32;=&#32;outlineThickness&#32;+&#32;faceSoftness&#32;+&#32;faceDilate;
00457 
00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Glow&#32;padding&#32;contribution</emphasis>
00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(materials[i].HasProperty(ShaderUtilities.ID_GlowOffset)&#32;&amp;&amp;&#32;shaderKeywords.Contains(ShaderUtilities.Keyword_Glow))
00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(materials[i].HasProperty(ShaderUtilities.ID_ScaleRatio_B))
00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scaleRatio_B&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_ScaleRatio_B);
00463 
00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glowOffset&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_GlowOffset)&#32;*&#32;scaleRatio_B;
00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glowOuter&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_GlowOuter)&#32;*&#32;scaleRatio_B;
00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00467 
00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniformPadding&#32;=&#32;Mathf.Max(uniformPadding,&#32;faceDilate&#32;+&#32;glowOffset&#32;+&#32;glowOuter);
00469 
00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Underlay&#32;padding&#32;contribution</emphasis>
00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(materials[i].HasProperty(ShaderUtilities.ID_UnderlaySoftness)&#32;&amp;&amp;&#32;shaderKeywords.Contains(ShaderUtilities.Keyword_Underlay))
00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(materials[i].HasProperty(ShaderUtilities.ID_ScaleRatio_C))
00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scaleRatio_C&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_ScaleRatio_C);
00475 
00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;offsetX&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_UnderlayOffsetX)&#32;*&#32;scaleRatio_C;
00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;offsetY&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_UnderlayOffsetY)&#32;*&#32;scaleRatio_C;
00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dilate&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_UnderlayDilate)&#32;*&#32;scaleRatio_C;
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;softness&#32;=&#32;materials[i].GetFloat(ShaderUtilities.ID_UnderlaySoftness)&#32;*&#32;scaleRatio_C;
00480 
00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.x&#32;=&#32;Mathf.Max(padding.x,&#32;faceDilate&#32;+&#32;dilate&#32;+&#32;softness&#32;-&#32;offsetX);
00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.y&#32;=&#32;Mathf.Max(padding.y,&#32;faceDilate&#32;+&#32;dilate&#32;+&#32;softness&#32;-&#32;offsetY);
00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.z&#32;=&#32;Mathf.Max(padding.z,&#32;faceDilate&#32;+&#32;dilate&#32;+&#32;softness&#32;+&#32;offsetX);
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.w&#32;=&#32;Mathf.Max(padding.w,&#32;faceDilate&#32;+&#32;dilate&#32;+&#32;softness&#32;+&#32;offsetY);
00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00486 
00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.x&#32;=&#32;Mathf.Max(padding.x,&#32;uniformPadding);
00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.y&#32;=&#32;Mathf.Max(padding.y,&#32;uniformPadding);
00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.z&#32;=&#32;Mathf.Max(padding.z,&#32;uniformPadding);
00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.w&#32;=&#32;Mathf.Max(padding.w,&#32;uniformPadding);
00491 
00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.x&#32;+=&#32;extraPadding;
00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.y&#32;+=&#32;extraPadding;
00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.z&#32;+=&#32;extraPadding;
00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.w&#32;+=&#32;extraPadding;
00496 
00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.x&#32;=&#32;Mathf.Min(padding.x,&#32;1);
00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.y&#32;=&#32;Mathf.Min(padding.y,&#32;1);
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.z&#32;=&#32;Mathf.Min(padding.z,&#32;1);
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding.w&#32;=&#32;Mathf.Min(padding.w,&#32;1);
00501 
00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxPadding.x&#32;=&#32;maxPadding.x&#32;&lt;&#32;padding.x&#32;?&#32;padding.x&#32;:&#32;maxPadding.x;
00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxPadding.y&#32;=&#32;maxPadding.y&#32;&lt;&#32;padding.y&#32;?&#32;padding.y&#32;:&#32;maxPadding.y;
00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxPadding.z&#32;=&#32;maxPadding.z&#32;&lt;&#32;padding.z&#32;?&#32;padding.z&#32;:&#32;maxPadding.z;
00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxPadding.w&#32;=&#32;maxPadding.w&#32;&lt;&#32;padding.w&#32;?&#32;padding.w&#32;:&#32;maxPadding.w;
00506 
00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00508 
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;gradientScale&#32;=&#32;materials[0].GetFloat(ShaderUtilities.ID_GradientScale);
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;padding&#32;*=&#32;gradientScale;
00511 
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;UniformPadding&#32;to&#32;the&#32;maximum&#32;value&#32;of&#32;any&#32;of&#32;its&#32;components.</emphasis>
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniformPadding&#32;=&#32;Mathf.Max(padding.x,&#32;padding.y);
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniformPadding&#32;=&#32;Mathf.Max(padding.z,&#32;uniformPadding);
00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniformPadding&#32;=&#32;Mathf.Max(padding.w,&#32;uniformPadding);
00516 
00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;uniformPadding&#32;+&#32;0.25f;
00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00519 
00520 
00521 &#32;&#32;&#32;&#32;}
00522 
00523 }
</programlisting></section>
