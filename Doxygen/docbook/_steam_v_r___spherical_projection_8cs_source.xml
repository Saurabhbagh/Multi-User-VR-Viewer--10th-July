<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__steam_v_r___spherical_projection_8cs_source">
<title>SteamVR_SphericalProjection.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/SteamVR/Scripts/SteamVR_SphericalProjection.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//=======&#32;Copyright&#32;(c)&#32;Valve&#32;Corporation,&#32;All&#32;rights&#32;reserved.&#32;===============</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Purpose:&#32;Applies&#32;spherical&#32;projection&#32;to&#32;output.</emphasis>
00004 <emphasis role="comment">//</emphasis>
00005 <emphasis role="comment">//=============================================================================</emphasis>
00006 
00007 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00008 
00009 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_valve_1_1_v_r">Valve.VR</link>
00010 {
00011 &#32;&#32;&#32;&#32;[ExecuteInEditMode]
<anchor xml:id="__steam_v_r___spherical_projection_8cs_source_1l00012"/><link linkend="_class_valve_1_1_v_r_1_1_steam_v_r___spherical_projection">00012</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_valve_1_1_v_r_1_1_steam_v_r___spherical_projection">SteamVR_SphericalProjection</link>&#32;:&#32;MonoBehaviour
00013 &#32;&#32;&#32;&#32;{
00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Material&#32;material;
00015 
<anchor xml:id="__steam_v_r___spherical_projection_8cs_source_1l00016"/><link linkend="_class_valve_1_1_v_r_1_1_steam_v_r___spherical_projection_1a4e5bb05db62e8cf84e24485f0f7e489b">00016</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_valve_1_1_v_r_1_1_steam_v_r___spherical_projection_1a4e5bb05db62e8cf84e24485f0f7e489b">Set</link>(Vector3&#32;N,
00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;phi0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;phi1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;theta0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;theta1,&#32;<emphasis role="comment">//&#32;in&#32;degrees</emphasis>
00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;uAxis,&#32;Vector3&#32;uOrigin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;uScale,
00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;vAxis,&#32;Vector3&#32;vOrigin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;vScale)
00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(material&#32;==&#32;<emphasis role="keyword">null</emphasis>)
00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Material(Shader.Find(<emphasis role="stringliteral">&quot;Custom/SteamVR_SphericalProjection&quot;</emphasis>));
00023 
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetVector(<emphasis role="stringliteral">&quot;_N&quot;</emphasis>,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector4(N.x,&#32;N.y,&#32;N.z));
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetFloat(<emphasis role="stringliteral">&quot;_Phi0&quot;</emphasis>,&#32;phi0&#32;*&#32;Mathf.Deg2Rad);
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetFloat(<emphasis role="stringliteral">&quot;_Phi1&quot;</emphasis>,&#32;phi1&#32;*&#32;Mathf.Deg2Rad);
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetFloat(<emphasis role="stringliteral">&quot;_Theta0&quot;</emphasis>,&#32;theta0&#32;*&#32;Mathf.Deg2Rad&#32;+&#32;Mathf.PI&#32;/&#32;2);
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetFloat(<emphasis role="stringliteral">&quot;_Theta1&quot;</emphasis>,&#32;theta1&#32;*&#32;Mathf.Deg2Rad&#32;+&#32;Mathf.PI&#32;/&#32;2);
00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetVector(<emphasis role="stringliteral">&quot;_UAxis&quot;</emphasis>,&#32;uAxis);
00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetVector(<emphasis role="stringliteral">&quot;_VAxis&quot;</emphasis>,&#32;vAxis);
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetVector(<emphasis role="stringliteral">&quot;_UOrigin&quot;</emphasis>,&#32;uOrigin);
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetVector(<emphasis role="stringliteral">&quot;_VOrigin&quot;</emphasis>,&#32;vOrigin);
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetFloat(<emphasis role="stringliteral">&quot;_UScale&quot;</emphasis>,&#32;uScale);
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;material.SetFloat(<emphasis role="stringliteral">&quot;_VScale&quot;</emphasis>,&#32;vScale);
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00036 
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnRenderImage(RenderTexture&#32;src,&#32;RenderTexture&#32;dest)
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Graphics.Blit(src,&#32;dest,&#32;material);
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00041 &#32;&#32;&#32;&#32;}
00042 }
</programlisting></section>
