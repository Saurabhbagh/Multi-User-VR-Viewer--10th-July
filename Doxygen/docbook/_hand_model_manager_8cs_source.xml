<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__hand_model_manager_8cs_source">
<title>HandModelManager.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/HandModelManager.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_engine">UnityEngine</link>.Assertions;
00012 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00013 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00014 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_engine">UnityEngine</link>.Serialization;
00015 <emphasis role="keyword">using</emphasis>&#32;System;
00016 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap">Leap</link>.<link linkend="_namespace_leap_1_1_unity">Unity</link>.<link linkend="_namespace_leap_1_1_unity_1_1_attributes">Attributes</link>;
00017 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
00018 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_editor">UnityEditor</link>;
00019 <emphasis role="preprocessor">#endif</emphasis>
00020 
00021 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00022 
<anchor xml:id="__hand_model_manager_8cs_source_1l00032"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager">00032</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager">HandModelManager</link>&#32;:&#32;MonoBehaviour&#32;{
00033 &#32;&#32;&#32;&#32;
00034 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Formerly&#32;in&#32;LeapHandController</emphasis>
00035 
<anchor xml:id="__hand_model_manager_8cs_source_1l00036"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a3966c995e00f366b661342a1c1ac371d">00036</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;Dictionary&lt;int,&#32;HandRepresentation&gt;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a3966c995e00f366b661342a1c1ac371d">graphicsHandReps</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;int,&#32;HandRepresentation&gt;();
<anchor xml:id="__hand_model_manager_8cs_source_1l00037"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1aac82ec7320cd24f524a2690ae0e27750">00037</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;Dictionary&lt;int,&#32;HandRepresentation&gt;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1aac82ec7320cd24f524a2690ae0e27750">physicsHandReps</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;int,&#32;HandRepresentation&gt;();
00038 
<anchor xml:id="__hand_model_manager_8cs_source_1l00039"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a5237173e0a7be15ea36e0e35830b22a7">00039</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a5237173e0a7be15ea36e0e35830b22a7">graphicsEnabled</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__hand_model_manager_8cs_source_1l00040"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1aa86eb54a713c69895ab326bea1ef0718">00040</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1aa86eb54a713c69895ab326bea1ef0718">physicsEnabled</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00041 
<anchor xml:id="__hand_model_manager_8cs_source_1l00042"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a16f0efea045dbc8202f20c5a35cb84f6">00042</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a16f0efea045dbc8202f20c5a35cb84f6">GraphicsEnabled</link>&#32;{
00043 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a5237173e0a7be15ea36e0e35830b22a7">graphicsEnabled</link>;
00045 &#32;&#32;&#32;&#32;&#32;&#32;}
00046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a5237173e0a7be15ea36e0e35830b22a7">graphicsEnabled</link>&#32;=&#32;value;
00048 &#32;&#32;&#32;&#32;&#32;&#32;}
00049 &#32;&#32;&#32;&#32;}
00050 
<anchor xml:id="__hand_model_manager_8cs_source_1l00051"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1af8053a0572a5b769a4e2b3ad78eacd5f">00051</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1af8053a0572a5b769a4e2b3ad78eacd5f">PhysicsEnabled</link>&#32;{
00052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1aa86eb54a713c69895ab326bea1ef0718">physicsEnabled</link>;
00054 &#32;&#32;&#32;&#32;&#32;&#32;}
00055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1aa86eb54a713c69895ab326bea1ef0718">physicsEnabled</link>&#32;=&#32;value;
00057 &#32;&#32;&#32;&#32;&#32;&#32;}
00058 &#32;&#32;&#32;&#32;}
00059 
<anchor xml:id="__hand_model_manager_8cs_source_1l00061"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1ad446a51a6956db5c0e30dd4c96981180">00061</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1ad446a51a6956db5c0e30dd4c96981180">OnUpdateFrame</link>(<link linkend="_class_leap_1_1_frame">Frame</link>&#32;frame)&#32;{
00062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frame&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a5237173e0a7be15ea36e0e35830b22a7">graphicsEnabled</link>)&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a79e87a3a32fdef95f497a081dae1f533">UpdateHandRepresentations</link>(<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a3966c995e00f366b661342a1c1ac371d">graphicsHandReps</link>,&#32;<link linkend="_namespace_leap_1_1_unity_1a186e5eb0a2b743f1f6b79346f0ab8ad0">ModelType</link>.Graphics,&#32;frame);
00064 &#32;&#32;&#32;&#32;&#32;&#32;}
00065 &#32;&#32;&#32;&#32;}
00066 
<anchor xml:id="__hand_model_manager_8cs_source_1l00068"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a0cc5990ef601cb9ba48b6121b535d7b0">00068</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a0cc5990ef601cb9ba48b6121b535d7b0">OnFixedFrame</link>(<link linkend="_class_leap_1_1_frame">Frame</link>&#32;frame)&#32;{
00069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frame&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1aa86eb54a713c69895ab326bea1ef0718">physicsEnabled</link>)&#32;{
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a79e87a3a32fdef95f497a081dae1f533">UpdateHandRepresentations</link>(<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1aac82ec7320cd24f524a2690ae0e27750">physicsHandReps</link>,&#32;<link linkend="_namespace_leap_1_1_unity_1a186e5eb0a2b743f1f6b79346f0ab8ad0">ModelType</link>.Physics,&#32;frame);
00071 &#32;&#32;&#32;&#32;&#32;&#32;}
00072 &#32;&#32;&#32;&#32;}
00073 
<anchor xml:id="__hand_model_manager_8cs_source_1l00084"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a79e87a3a32fdef95f497a081dae1f533">00084</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a79e87a3a32fdef95f497a081dae1f533">UpdateHandRepresentations</link>(Dictionary&lt;int,&#32;HandRepresentation&gt;&#32;all_hand_reps,&#32;<link linkend="_namespace_leap_1_1_unity_1a186e5eb0a2b743f1f6b79346f0ab8ad0">ModelType</link>&#32;modelType,&#32;<link linkend="_class_leap_1_1_frame">Frame</link>&#32;frame)&#32;{
00085 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;frame.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>.Count;&#32;i++)&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;curHand&#32;=&#32;frame.<link linkend="_class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069">Hands</link>[i];
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_representation">HandRepresentation</link>&#32;rep;
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!all_hand_reps.TryGetValue(curHand.Id,&#32;out&#32;rep))&#32;{
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rep&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a9f0b658a31543c0ec44cc354e0a0007b">MakeHandRepresentation</link>(curHand,&#32;modelType);
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;all_hand_reps.Add(curHand.Id,&#32;rep);
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rep&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rep.IsMarked&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rep.UpdateRepresentation(curHand);
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rep.LastUpdatedTime&#32;=&#32;(int)frame.<link linkend="_class_leap_1_1_frame_1a1e1b235fcb1f454ee20aa82c5342c987">Timestamp</link>;
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00097 &#32;&#32;&#32;&#32;&#32;&#32;}
00098 
00100 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_representation">HandRepresentation</link>&#32;toBeDeleted&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(var&#32;it&#32;=&#32;all_hand_reps.GetEnumerator();&#32;it.MoveNext();)&#32;{
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;r&#32;=&#32;it.Current;
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r.Value&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r.Value.IsMarked)&#32;{
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.Value.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1a4ce5138b060edd3b8ee54257c2ccd4ea">IsMarked</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;Finishing&quot;);</emphasis>
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toBeDeleted&#32;=&#32;r.Value;
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00113 &#32;&#32;&#32;&#32;&#32;&#32;}
00116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(toBeDeleted&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;all_hand_reps.Remove(toBeDeleted.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1a30e2f951969acdc0cabd3e6ba2661241">HandID</link>);
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toBeDeleted.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1a0f6b705675cb8f356b48330637483e78">Finish</link>();
00119 &#32;&#32;&#32;&#32;&#32;&#32;}
00120 &#32;&#32;&#32;&#32;}
00121 
00122 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00123 
00124 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;HandPool&#32;Inspector</emphasis>
00125 
00126 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;The&#32;LeapProvider&#32;to&#32;use&#32;to&#32;drive&#32;hand&#32;representations&#32;in&#32;the&#32;defined&#32;&quot;</emphasis>
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;model&#32;pool&#32;groups.&quot;</emphasis>)]
00128 &#32;&#32;&#32;&#32;[SerializeField]
00129 &#32;&#32;&#32;&#32;[OnEditorChange(<emphasis role="stringliteral">&quot;leapProvider&quot;</emphasis>)]
00130 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_leap_provider">LeapProvider</link>&#32;_leapProvider;
<anchor xml:id="__hand_model_manager_8cs_source_1l00131"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1ae529ae3a60ee8a6e88c64261f32b41b8">00131</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_leap_provider">LeapProvider</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1ae529ae3a60ee8a6e88c64261f32b41b8">leapProvider</link>&#32;{
00132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_leapProvider;&#32;}
00133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_leapProvider&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_leapProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_provider_1a125e19c25c0006a12f53e3069627b87f">OnFixedFrame</link>&#32;&#32;-=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a0cc5990ef601cb9ba48b6121b535d7b0">OnFixedFrame</link>;
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_leapProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_provider_1a4f7285be55b0ff2d23cbb0b4e3fb856a">OnUpdateFrame</link>&#32;-=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1ad446a51a6956db5c0e30dd4c96981180">OnUpdateFrame</link>;
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00138 
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_leapProvider&#32;=&#32;value;
00140 
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_leapProvider&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_leapProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_provider_1a125e19c25c0006a12f53e3069627b87f">OnFixedFrame</link>&#32;&#32;+=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a0cc5990ef601cb9ba48b6121b535d7b0">OnFixedFrame</link>;
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_leapProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_provider_1a4f7285be55b0ff2d23cbb0b4e3fb856a">OnUpdateFrame</link>&#32;+=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1ad446a51a6956db5c0e30dd4c96981180">OnUpdateFrame</link>;
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00145 &#32;&#32;&#32;&#32;&#32;&#32;}
00146 &#32;&#32;&#32;&#32;}
00147 
00148 &#32;&#32;&#32;&#32;[SerializeField]
00149 &#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;To&#32;add&#32;a&#32;new&#32;set&#32;of&#32;Hand&#32;Models,&#32;first&#32;add&#32;the&#32;Left&#32;and&#32;Right&#32;objects&#32;as&#32;&quot;</emphasis>
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;children&#32;of&#32;this&#32;object.&#32;Then&#32;create&#32;a&#32;new&#32;Model&#32;Pool&#32;entry&#32;referencing&#32;&quot;</emphasis>
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;the&#32;new&#32;Hand&#32;Models&#32;and&#32;configure&#32;it&#32;as&#32;desired.&#32;&quot;</emphasis>
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;Once&#32;configured,&#32;the&#32;Hand&#32;Model&#32;Manager&#32;object&#32;pipes&#32;Leap&#32;tracking&#32;data&#32;&quot;</emphasis>
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;to&#32;the&#32;Hand&#32;Models&#32;as&#32;hands&#32;are&#32;tracked,&#32;and&#32;spawns&#32;duplicates&#32;as&#32;needed&#32;&quot;</emphasis>
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;if&#32;\&quot;Can&#32;Duplicate\&quot;&#32;is&#32;enabled.&quot;</emphasis>)]
00155 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;ModelGroup&gt;&#32;ModelPool&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;ModelGroup&gt;();
00156 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;HandRepresentation&gt;&#32;activeHandReps&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;HandRepresentation&gt;();
00157 
00158 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Dictionary&lt;HandModelBase,&#32;ModelGroup&gt;&#32;modelGroupMapping&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;HandModelBase,&#32;ModelGroup&gt;();
00159 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Dictionary&lt;HandModelBase,&#32;HandRepresentation&gt;&#32;modelToHandRepMapping&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;HandModelBase,&#32;HandRepresentation&gt;();
00160 
00161 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00162 
00163 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;ModelGroup&#32;Class</emphasis>
00164 
00172 &#32;&#32;&#32;&#32;[System.Serializable]
<anchor xml:id="__hand_model_manager_8cs_source_1l00173"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group">00173</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group">ModelGroup</link>&#32;{
<anchor xml:id="__hand_model_manager_8cs_source_1l00174"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1ab656d1b43ddccc13a1963a40a563c5ce">00174</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1ab656d1b43ddccc13a1963a40a563c5ce">GroupName</link>;
00175 &#32;&#32;&#32;&#32;&#32;&#32;[HideInInspector]
<anchor xml:id="__hand_model_manager_8cs_source_1l00176"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a9d5316e304d9d93a94d3e2702530191f">00176</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager">HandModelManager</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a9d5316e304d9d93a94d3e2702530191f">_handModelManager</link>;
00177 
<anchor xml:id="__hand_model_manager_8cs_source_1l00178"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a46323a7d0662325b7312c773d6cc1ec6">00178</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a46323a7d0662325b7312c773d6cc1ec6">LeftModel</link>;
00179 &#32;&#32;&#32;&#32;&#32;&#32;[HideInInspector]
<anchor xml:id="__hand_model_manager_8cs_source_1l00180"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a86dbbaa10bbaba94e59d29eef1f110aa">00180</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a86dbbaa10bbaba94e59d29eef1f110aa">IsLeftToBeSpawned</link>;
<anchor xml:id="__hand_model_manager_8cs_source_1l00181"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a222ce0d3e9c3c9ac1ca33d282e187592">00181</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a222ce0d3e9c3c9ac1ca33d282e187592">RightModel</link>;
00182 &#32;&#32;&#32;&#32;&#32;&#32;[HideInInspector]
<anchor xml:id="__hand_model_manager_8cs_source_1l00183"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a3b6cab9d5e0f3f8b1eed720e422c3717">00183</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a3b6cab9d5e0f3f8b1eed720e422c3717">IsRightToBeSpawned</link>;
00184 &#32;&#32;&#32;&#32;&#32;&#32;[NonSerialized]
<anchor xml:id="__hand_model_manager_8cs_source_1l00185"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a58982d1aa9bff823e176a1a3dce562a5">00185</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;HandModelBase&gt;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a58982d1aa9bff823e176a1a3dce562a5">modelList</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;HandModelBase&gt;();
00186 &#32;&#32;&#32;&#32;&#32;&#32;[NonSerialized]
<anchor xml:id="__hand_model_manager_8cs_source_1l00187"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a30b74658ecc666ac251dd85c10c51b1f">00187</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;HandModelBase&gt;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a30b74658ecc666ac251dd85c10c51b1f">modelsCheckedOut</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;HandModelBase&gt;();
<anchor xml:id="__hand_model_manager_8cs_source_1l00188"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a83a92f3e148bc006bbf67bc1a969eca3">00188</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a83a92f3e148bc006bbf67bc1a969eca3">IsEnabled</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__hand_model_manager_8cs_source_1l00189"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1af3e57d97bd8bb98261b15898fac671bb">00189</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1af3e57d97bd8bb98261b15898fac671bb">CanDuplicate</link>;
00190 
00191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*Looks&#32;for&#32;suitable&#32;HandModelBase&#32;is&#32;the&#32;ModelGroup&apos;s&#32;modelList,&#32;if&#32;found,&#32;it&#32;is&#32;added&#32;to&#32;modelsCheckedOut.</emphasis>
00192 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;If&#32;not,&#32;one&#32;can&#32;be&#32;cloned*/</emphasis>
<anchor xml:id="__hand_model_manager_8cs_source_1l00193"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a7860e9dfad7b9f97443e52f499cb59b5">00193</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a7860e9dfad7b9f97443e52f499cb59b5">TryGetModel</link>(<link linkend="_namespace_leap_1_1_unity_1a4d15adcf20ba121b2cd9c07f503b606f">Chirality</link>&#32;chirality,&#32;<link linkend="_namespace_leap_1_1_unity_1a186e5eb0a2b743f1f6b79346f0ab8ad0">ModelType</link>&#32;modelType)&#32;{
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a58982d1aa9bff823e176a1a3dce562a5">modelList</link>.Count;&#32;i++)&#32;{
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a58982d1aa9bff823e176a1a3dce562a5">modelList</link>[i].HandModelType&#32;==&#32;modelType&#32;&amp;&amp;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a58982d1aa9bff823e176a1a3dce562a5">modelList</link>[i].Handedness&#32;==&#32;chirality)&#32;{
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;model&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a58982d1aa9bff823e176a1a3dce562a5">modelList</link>[i];
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a58982d1aa9bff823e176a1a3dce562a5">modelList</link>.RemoveAt(i);
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a30b74658ecc666ac251dd85c10c51b1f">modelsCheckedOut</link>.Add(model);
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;model;
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1af3e57d97bd8bb98261b15898fac671bb">CanDuplicate</link>)&#32;{
00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a30b74658ecc666ac251dd85c10c51b1f">modelsCheckedOut</link>.Count;&#32;i++)&#32;{
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a30b74658ecc666ac251dd85c10c51b1f">modelsCheckedOut</link>[i].HandModelType&#32;==&#32;modelType&#32;&amp;&amp;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a30b74658ecc666ac251dd85c10c51b1f">modelsCheckedOut</link>[i].Handedness&#32;==&#32;chirality)&#32;{
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;modelToSpawn&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a30b74658ecc666ac251dd85c10c51b1f">modelsCheckedOut</link>[i];
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;spawnedModel&#32;=&#32;GameObject.Instantiate(modelToSpawn);
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spawnedModel.transform.parent&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a9d5316e304d9d93a94d3e2702530191f">_handModelManager</link>.transform;
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a9d5316e304d9d93a94d3e2702530191f">_handModelManager</link>.modelGroupMapping.Add(spawnedModel,&#32;<emphasis role="keyword">this</emphasis>);
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a30b74658ecc666ac251dd85c10c51b1f">modelsCheckedOut</link>.Add(spawnedModel);
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;spawnedModel;
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
00215 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__hand_model_manager_8cs_source_1l00216"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1afda01e931d1d9194a65683edb62673c4">00216</link> &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1afda01e931d1d9194a65683edb62673c4">ReturnToGroup</link>(<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;model)&#32;{
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a30b74658ecc666ac251dd85c10c51b1f">modelsCheckedOut</link>.Remove(model);
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a58982d1aa9bff823e176a1a3dce562a5">modelList</link>.Add(model);
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this._handModelManager.modelToHandRepMapping.Remove(model);
00220 &#32;&#32;&#32;&#32;&#32;&#32;}
00221 &#32;&#32;&#32;&#32;}
00222 
00223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00224 
00225 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;HandPool&#32;Methods</emphasis>
00226 
<anchor xml:id="__hand_model_manager_8cs_source_1l00227"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a3786bfa074d0fdc61caf5069937a2d18">00227</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a3786bfa074d0fdc61caf5069937a2d18">ReturnToPool</link>(<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;model)&#32;{
00228 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group">ModelGroup</link>&#32;modelGroup;
00229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;groupFound&#32;=&#32;modelGroupMapping.TryGetValue(model,&#32;out&#32;modelGroup);
00230 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(groupFound);
00231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//First&#32;see&#32;if&#32;there&#32;is&#32;another&#32;active&#32;Representation&#32;that&#32;can&#32;use&#32;this&#32;model</emphasis>
00232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;activeHandReps.Count;&#32;i++)&#32;{
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_representation">HandRepresentation</link>&#32;rep&#32;=&#32;activeHandReps[i];
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1a732f287fb1b792434c81e670b8b1df0c">RepChirality</link>&#32;==&#32;model.<link linkend="_class_leap_1_1_unity_1_1_hand_model_base_1a9500f0cd89372ac06d0e6879e26bb3c5">Handedness</link>&#32;&amp;&amp;&#32;rep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1ae3de3baa219e6100022a6e606b5f9cc1">RepType</link>&#32;==&#32;model.<link linkend="_class_leap_1_1_unity_1_1_hand_model_base_1a14f5f440353325c6a4a531d9110d0ff2">HandModelType</link>)&#32;{
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;modelFromGroupFound&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1ab74a6ece88663f24aac02b88a750b1e3">handModels</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//And&#32;that&#32;Represention&#32;does&#32;not&#32;contain&#32;a&#32;model&#32;from&#32;this&#32;model&apos;s&#32;modelGroup</emphasis>
00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;modelGroup.modelsCheckedOut.Count;&#32;j++)&#32;{
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;modelToCompare&#32;=&#32;modelGroup.modelsCheckedOut[j];
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;rep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1ab74a6ece88663f24aac02b88a750b1e3">handModels</link>.Count;&#32;k++)&#32;{
00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1ab74a6ece88663f24aac02b88a750b1e3">handModels</link>[k]&#32;==&#32;modelToCompare)&#32;{
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelFromGroupFound&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!modelFromGroupFound)&#32;{
00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1ac21a6875139515363a4cd1ef206568b8">AddModel</link>(model);
00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelToHandRepMapping[model]&#32;=&#32;rep;
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00253 &#32;&#32;&#32;&#32;&#32;&#32;}
00254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Otherwise&#32;return&#32;to&#32;pool</emphasis>
00255 &#32;&#32;&#32;&#32;&#32;&#32;modelGroup.ReturnToGroup(model);
00256 &#32;&#32;&#32;&#32;}
00257 
00258 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00259 
00260 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Hand&#32;Representations</emphasis>
00261 
<anchor xml:id="__hand_model_manager_8cs_source_1l00267"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a9f0b658a31543c0ec44cc354e0a0007b">00267</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_representation">HandRepresentation</link>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a9f0b658a31543c0ec44cc354e0a0007b">MakeHandRepresentation</link>(<link linkend="_class_leap_1_1_hand">Hand</link>&#32;hand,&#32;<link linkend="_namespace_leap_1_1_unity_1a186e5eb0a2b743f1f6b79346f0ab8ad0">ModelType</link>&#32;modelType)&#32;{
00268 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_leap_1_1_unity_1a4d15adcf20ba121b2cd9c07f503b606f">Chirality</link>&#32;handChirality&#32;=&#32;hand.<link linkend="_class_leap_1_1_hand_1afa3c502b072d3101b7366fd928376e18">IsRight</link>&#32;?&#32;<link linkend="_namespace_leap_1_1_unity_1a4d15adcf20ba121b2cd9c07f503b606f">Chirality</link>.Right&#32;:&#32;<link linkend="_namespace_leap_1_1_unity_1a4d15adcf20ba121b2cd9c07f503b606f">Chirality</link>.Left;
00269 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_representation">HandRepresentation</link>&#32;handRep&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_representation">HandRepresentation</link>(<emphasis role="keyword">this</emphasis>,&#32;hand,&#32;handChirality,&#32;modelType);
00270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ModelPool.Count;&#32;i++)&#32;{
00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group">ModelGroup</link>&#32;group&#32;=&#32;ModelPool[i];
00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(group.<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a83a92f3e148bc006bbf67bc1a969eca3">IsEnabled</link>)&#32;{
00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;model&#32;=&#32;group.<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a7860e9dfad7b9f97443e52f499cb59b5">TryGetModel</link>(handChirality,&#32;modelType);
00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(model&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handRep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1ac21a6875139515363a4cd1ef206568b8">AddModel</link>(model);
00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!modelToHandRepMapping.ContainsKey(model))&#32;{
00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model.<link linkend="_class_leap_1_1_unity_1_1_hand_model_base_1a3b68edab1954372052ab9031786dfcfa">group</link>&#32;=&#32;group;
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelToHandRepMapping.Add(model,&#32;handRep);
00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00282 &#32;&#32;&#32;&#32;&#32;&#32;}
00283 &#32;&#32;&#32;&#32;&#32;&#32;activeHandReps.Add(handRep);
00284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handRep;
00285 &#32;&#32;&#32;&#32;}
00286 
<anchor xml:id="__hand_model_manager_8cs_source_1l00287"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a12fa966bd834e38d30e37c10c14c3be4">00287</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a12fa966bd834e38d30e37c10c14c3be4">RemoveHandRepresentation</link>(<link linkend="_class_leap_1_1_unity_1_1_hand_representation">HandRepresentation</link>&#32;handRepresentation)&#32;{
00288 &#32;&#32;&#32;&#32;&#32;&#32;activeHandReps.Remove(handRepresentation);
00289 &#32;&#32;&#32;&#32;}
00290 
00291 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00292 
00293 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Unity&#32;Events</emphasis>
00294 
<anchor xml:id="__hand_model_manager_8cs_source_1l00295"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a87325bb4c2915d284d41bef44c184e7e">00295</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a87325bb4c2915d284d41bef44c184e7e">OnEnable</link>()&#32;{
00296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_leapProvider&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_leapProvider&#32;=&#32;Hands.Provider;
00298 &#32;&#32;&#32;&#32;&#32;&#32;}
00299 
00300 &#32;&#32;&#32;&#32;&#32;&#32;_leapProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_provider_1a4f7285be55b0ff2d23cbb0b4e3fb856a">OnUpdateFrame</link>&#32;-=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1ad446a51a6956db5c0e30dd4c96981180">OnUpdateFrame</link>;
00301 &#32;&#32;&#32;&#32;&#32;&#32;_leapProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_provider_1a4f7285be55b0ff2d23cbb0b4e3fb856a">OnUpdateFrame</link>&#32;+=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1ad446a51a6956db5c0e30dd4c96981180">OnUpdateFrame</link>;
00302 
00303 &#32;&#32;&#32;&#32;&#32;&#32;_leapProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_provider_1a125e19c25c0006a12f53e3069627b87f">OnFixedFrame</link>&#32;-=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a0cc5990ef601cb9ba48b6121b535d7b0">OnFixedFrame</link>;
00304 &#32;&#32;&#32;&#32;&#32;&#32;_leapProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_provider_1a125e19c25c0006a12f53e3069627b87f">OnFixedFrame</link>&#32;+=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a0cc5990ef601cb9ba48b6121b535d7b0">OnFixedFrame</link>;
00305 &#32;&#32;&#32;&#32;}
00306 
<anchor xml:id="__hand_model_manager_8cs_source_1l00307"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1acfa3a4f4ce4f87260bffecfd3aad8ed9">00307</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1acfa3a4f4ce4f87260bffecfd3aad8ed9">OnDisable</link>()&#32;{
00308 &#32;&#32;&#32;&#32;&#32;&#32;_leapProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_provider_1a4f7285be55b0ff2d23cbb0b4e3fb856a">OnUpdateFrame</link>&#32;-=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1ad446a51a6956db5c0e30dd4c96981180">OnUpdateFrame</link>;
00309 &#32;&#32;&#32;&#32;&#32;&#32;_leapProvider.<link linkend="_class_leap_1_1_unity_1_1_leap_provider_1a125e19c25c0006a12f53e3069627b87f">OnFixedFrame</link>&#32;-=&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a0cc5990ef601cb9ba48b6121b535d7b0">OnFixedFrame</link>;
00310 &#32;&#32;&#32;&#32;}
00311 
00313 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Start()&#32;{
00314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;ModelPool.Count;&#32;i++)&#32;{
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InitializeModelGroup(ModelPool[i]);
00316 &#32;&#32;&#32;&#32;&#32;&#32;}
00317 &#32;&#32;&#32;&#32;}
00318 
00319 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00320 
00321 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Group&#32;Methods</emphasis>
00322 
00323 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;InitializeModelGroup(ModelGroup&#32;collectionGroup)&#32;{
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prevent&#32;the&#32;ModelGroup&#32;be&#32;initialized&#32;by&#32;multiple&#32;times</emphasis>
00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(modelGroupMapping.ContainsValue(collectionGroup))&#32;{
00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00328 
00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;collectionGroup._handModelManager&#32;=&#32;<emphasis role="keyword">this</emphasis>;
00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandModelBase&#32;leftModel;
00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandModelBase&#32;rightModel;
00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(collectionGroup.IsLeftToBeSpawned)&#32;{
00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandModelBase&#32;modelToSpawn&#32;=&#32;collectionGroup.LeftModel;
00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GameObject&#32;spawnedGO&#32;=&#32;Instantiate(modelToSpawn.gameObject);
00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;leftModel&#32;=&#32;spawnedGO.GetComponent&lt;HandModelBase&gt;();
00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;leftModel.transform.parent&#32;=&#32;this.transform;
00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;leftModel&#32;=&#32;collectionGroup.LeftModel;
00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(leftModel&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;collectionGroup.modelList.Add(leftModel);
00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelGroupMapping.Add(leftModel,&#32;collectionGroup);
00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00344 
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(collectionGroup.IsRightToBeSpawned)&#32;{
00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandModelBase&#32;modelToSpawn&#32;=&#32;collectionGroup.RightModel;
00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GameObject&#32;spawnedGO&#32;=&#32;Instantiate(modelToSpawn.gameObject);
00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rightModel&#32;=&#32;spawnedGO.GetComponent&lt;HandModelBase&gt;();
00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rightModel.transform.parent&#32;=&#32;this.transform;
00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rightModel&#32;=&#32;collectionGroup.RightModel;
00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rightModel&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;collectionGroup.modelList.Add(rightModel);
00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelGroupMapping.Add(rightModel,&#32;collectionGroup);
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00357 &#32;&#32;&#32;&#32;}
00358 
<anchor xml:id="__hand_model_manager_8cs_source_1l00363"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a4d6c8b759ff06758408ec0228a006417">00363</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a4d6c8b759ff06758408ec0228a006417">EnableGroup</link>(<emphasis role="keywordtype">string</emphasis>&#32;groupName)&#32;{
00364 &#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(enableGroup(groupName));
00365 &#32;&#32;&#32;&#32;}
00366 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;IEnumerator&#32;enableGroup(<emphasis role="keywordtype">string</emphasis>&#32;groupName)&#32;{
00367 &#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitForEndOfFrame();
00368 &#32;&#32;&#32;&#32;&#32;&#32;ModelGroup&#32;group&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ModelPool.Count;&#32;i++)&#32;{
00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ModelPool[i].GroupName&#32;==&#32;groupName)&#32;{
00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;group&#32;=&#32;ModelPool[i];
00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;hp&#32;=&#32;0;&#32;hp&#32;&lt;&#32;activeHandReps.Count;&#32;hp++)&#32;{
00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_representation">HandRepresentation</link>&#32;handRep&#32;=&#32;activeHandReps[hp];
00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;model&#32;=&#32;group.TryGetModel(handRep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1a732f287fb1b792434c81e670b8b1df0c">RepChirality</link>,&#32;handRep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1ae3de3baa219e6100022a6e606b5f9cc1">RepType</link>);
00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(model&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handRep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1ac21a6875139515363a4cd1ef206568b8">AddModel</link>(model);
00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelToHandRepMapping.Add(model,&#32;handRep);
00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;group.IsEnabled&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00382 &#32;&#32;&#32;&#32;&#32;&#32;}
00383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(group&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogWarning(<emphasis role="stringliteral">&quot;A&#32;group&#32;matching&#32;that&#32;name&#32;does&#32;not&#32;exisit&#32;in&#32;the&#32;modelPool&quot;</emphasis>);
00385 &#32;&#32;&#32;&#32;&#32;&#32;}
00386 &#32;&#32;&#32;&#32;}
00387 
<anchor xml:id="__hand_model_manager_8cs_source_1l00392"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a177e891c24a7008b823c0d2d48696171">00392</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a177e891c24a7008b823c0d2d48696171">DisableGroup</link>(<emphasis role="keywordtype">string</emphasis>&#32;groupName)&#32;{
00393 &#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(disableGroup(groupName));
00394 &#32;&#32;&#32;&#32;}
00395 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;IEnumerator&#32;disableGroup(<emphasis role="keywordtype">string</emphasis>&#32;groupName)&#32;{
00396 &#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitForEndOfFrame();
00397 &#32;&#32;&#32;&#32;&#32;&#32;ModelGroup&#32;group&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ModelPool.Count;&#32;i++)&#32;{
00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ModelPool[i].GroupName&#32;==&#32;groupName)&#32;{
00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;group&#32;=&#32;ModelPool[i];
00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;m&#32;=&#32;0;&#32;m&#32;&lt;&#32;group.modelsCheckedOut.Count;&#32;m++)&#32;{
00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;model&#32;=&#32;group.modelsCheckedOut[m];
00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_representation">HandRepresentation</link>&#32;handRep;
00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(modelToHandRepMapping.TryGetValue(model,&#32;out&#32;handRep))&#32;{
00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handRep.<link linkend="_class_leap_1_1_unity_1_1_hand_representation_1a6fa7f5ae7b4027c0d9b4a3c6b1b0d44f">RemoveModel</link>(model);
00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;group.ReturnToGroup(model);
00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m--;
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;group.modelsCheckedOut.Count,&#32;group.GroupName&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;s&#32;modelsCheckedOut&#32;List&#32;has&#32;not&#32;been&#32;cleared&quot;</emphasis>);
00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;group.IsEnabled&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00413 &#32;&#32;&#32;&#32;&#32;&#32;}
00414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(group&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogWarning(<emphasis role="stringliteral">&quot;A&#32;group&#32;matching&#32;that&#32;name&#32;does&#32;not&#32;exisit&#32;in&#32;the&#32;modelPool&quot;</emphasis>);
00416 &#32;&#32;&#32;&#32;&#32;&#32;}
00417 &#32;&#32;&#32;&#32;}
00418 
<anchor xml:id="__hand_model_manager_8cs_source_1l00419"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a2657cfc87b50f304816fbf1539f87dd0">00419</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a2657cfc87b50f304816fbf1539f87dd0">ToggleGroup</link>(<emphasis role="keywordtype">string</emphasis>&#32;groupName)&#32;{
00420 &#32;&#32;&#32;&#32;&#32;&#32;StartCoroutine(toggleGroup(groupName));
00421 &#32;&#32;&#32;&#32;}
00422 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;IEnumerator&#32;toggleGroup(<emphasis role="keywordtype">string</emphasis>&#32;groupName)&#32;{
00423 &#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitForEndOfFrame();
00424 &#32;&#32;&#32;&#32;&#32;&#32;ModelGroup&#32;modelGroup&#32;=&#32;ModelPool.Find(i&#32;=&gt;&#32;i.GroupName&#32;==&#32;groupName);
00425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(modelGroup&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(modelGroup.IsEnabled&#32;==&#32;<emphasis role="keyword">true</emphasis>)&#32;{
00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a177e891c24a7008b823c0d2d48696171">DisableGroup</link>(groupName);
00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelGroup.IsEnabled&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a4d6c8b759ff06758408ec0228a006417">EnableGroup</link>(groupName);
00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modelGroup.IsEnabled&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00433 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;Debug.LogWarning(<emphasis role="stringliteral">&quot;A&#32;group&#32;matching&#32;that&#32;name&#32;does&#32;not&#32;exisit&#32;in&#32;the&#32;modelPool&quot;</emphasis>);
00434 &#32;&#32;&#32;&#32;}
00435 
<anchor xml:id="__hand_model_manager_8cs_source_1l00436"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1acd9886df388682426cd975688e929cd4">00436</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1acd9886df388682426cd975688e929cd4">AddNewGroup</link>(<emphasis role="keywordtype">string</emphasis>&#32;groupName,&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;leftModel,&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;rightModel)&#32;{
00437 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group">ModelGroup</link>&#32;newGroup&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group">ModelGroup</link>();
00438 &#32;&#32;&#32;&#32;&#32;&#32;newGroup.<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a46323a7d0662325b7312c773d6cc1ec6">LeftModel</link>&#32;=&#32;leftModel;
00439 &#32;&#32;&#32;&#32;&#32;&#32;newGroup.<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a222ce0d3e9c3c9ac1ca33d282e187592">RightModel</link>&#32;=&#32;rightModel;
00440 &#32;&#32;&#32;&#32;&#32;&#32;newGroup.<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1ab656d1b43ddccc13a1963a40a563c5ce">GroupName</link>&#32;=&#32;groupName;
00441 &#32;&#32;&#32;&#32;&#32;&#32;newGroup.<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1af3e57d97bd8bb98261b15898fac671bb">CanDuplicate</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00442 &#32;&#32;&#32;&#32;&#32;&#32;newGroup.<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a83a92f3e148bc006bbf67bc1a969eca3">IsEnabled</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00443 &#32;&#32;&#32;&#32;&#32;&#32;ModelPool.Add(newGroup);
00444 &#32;&#32;&#32;&#32;&#32;&#32;InitializeModelGroup(newGroup);
00445 &#32;&#32;&#32;&#32;}
00446 
<anchor xml:id="__hand_model_manager_8cs_source_1l00447"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1aa85896c2f7d1b17021f0fb1d3a1086c2">00447</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1aa85896c2f7d1b17021f0fb1d3a1086c2">RemoveGroup</link>(<emphasis role="keywordtype">string</emphasis>&#32;groupName)&#32;{
00448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ModelPool.Find(i&#32;=&gt;&#32;i.GroupName&#32;==&#32;groupName)&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group">ModelGroup</link>&#32;modelGroup&#32;=&#32;ModelPool.Find(i&#32;=&gt;&#32;i.GroupName&#32;==&#32;groupName);
00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(modelGroup&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ModelPool.Remove(modelGroup);
00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00453 &#32;&#32;&#32;&#32;&#32;&#32;}
00454 &#32;&#32;&#32;&#32;}
00455 
<anchor xml:id="__hand_model_manager_8cs_source_1l00456"/><link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a387a153890d97fea2fd72118fb5dfe53">00456</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;T&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1a387a153890d97fea2fd72118fb5dfe53">GetHandModel&lt;T&gt;</link>(<emphasis role="keywordtype">int</emphasis>&#32;handId)&#32;where&#32;T&#32;:&#32;<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;{
00457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group">ModelGroup</link>&#32;group&#32;<emphasis role="keywordflow">in</emphasis>&#32;ModelPool)&#32;{
00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_leap_1_1_unity_1_1_hand_model_base">HandModelBase</link>&#32;handModel&#32;<emphasis role="keywordflow">in</emphasis>&#32;group.<link linkend="_class_leap_1_1_unity_1_1_hand_model_manager_1_1_model_group_1a30b74658ecc666ac251dd85c10c51b1f">modelsCheckedOut</link>)&#32;{
00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(handModel.<link linkend="_class_leap_1_1_unity_1_1_hand_model_base_1aa24ca02bf4a64ba33b0370ad6da8731f">GetLeapHand</link>().<link linkend="_class_leap_1_1_hand_1ac7bfb32524382f4c9e4fb830437fe72b">Id</link>&#32;==&#32;handId&#32;&amp;&amp;&#32;handModel&#32;is&#32;T)&#32;{
00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handModel&#32;as&#32;T;
00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00463 &#32;&#32;&#32;&#32;&#32;&#32;}
00464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
00465 &#32;&#32;&#32;&#32;}
00466 
00467 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00468 
00469 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#region&#32;Editor-only&#32;Methods</emphasis>
00470 
00471 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;UNITY_EDITOR</emphasis>
00472 
00473 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnValidate()&#32;{
00474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ModelPool&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ModelPool.Count;&#32;i++)&#32;{
00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ModelPool[i]&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ModelPool[i].LeftModel)&#32;{
00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ModelPool[i].IsLeftToBeSpawned&#32;=&#32;shouldBeSpawned(ModelPool[i].LeftModel);
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ModelPool[i].RightModel)&#32;{
00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ModelPool[i].IsRightToBeSpawned&#32;=&#32;shouldBeSpawned(ModelPool[i].RightModel);
00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00485 &#32;&#32;&#32;&#32;&#32;&#32;}
00486 &#32;&#32;&#32;&#32;}
00487 
00488 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;shouldBeSpawned(<link linkend="_namespace_unity_engine">UnityEngine</link>.Object&#32;model)&#32;{
00489 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;prefabType&#32;=&#32;PrefabUtility.GetPrefabType(model);
00490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PrefabUtility.GetPrefabType(<emphasis role="keyword">this</emphasis>)&#32;!=&#32;PrefabType.Prefab)&#32;{
00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prefabType&#32;==&#32;PrefabType.Prefab;
00492 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PrefabUtility.GetPrefabObject(model)&#32;!=&#32;PrefabUtility.GetPrefabObject(<emphasis role="keyword">this</emphasis>);
00494 &#32;&#32;&#32;&#32;&#32;&#32;}
00495 &#32;&#32;&#32;&#32;}
00496 
00497 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
00498 
00499 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endregion</emphasis>
00500 
00501 &#32;&#32;}
00502 }
00503 
</programlisting></section>
