<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__struct_marshal_8cs_source">
<title>StructMarshal.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/StructMarshal.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Runtime.InteropServices;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_internal">LeapInternal</link>&#32;{
00014 
00018 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>StructMarshal&lt;T&gt;&#32;where&#32;T&#32;:&#32;struct&#32;{
00019 <emphasis role="preprocessor">#if&#32;!ENABLE_IL2CPP</emphasis>
00020 &#32;&#32;&#32;&#32;[StructLayout(LayoutKind.Sequential)]
00021 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>StructContainer&#32;{
00022 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;T&#32;value;
00023 &#32;&#32;&#32;&#32;}
00024 
00025 &#32;&#32;&#32;&#32;[ThreadStatic]
00026 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StructContainer&#32;_container;
00027 <emphasis role="preprocessor">#endif</emphasis>
00028 
00029 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_sizeofT;
00030 
00031 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;StructMarshal()&#32;{
00032 &#32;&#32;&#32;&#32;&#32;&#32;_sizeofT&#32;=&#32;Marshal.SizeOf(typeof(T));
00033 &#32;&#32;&#32;&#32;}
00034 
00039 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Size&#32;{
00040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_sizeofT;
00042 &#32;&#32;&#32;&#32;&#32;&#32;}
00043 &#32;&#32;&#32;&#32;}
00044 
00048 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PtrToStruct(IntPtr&#32;ptr,&#32;out&#32;T&#32;t)&#32;{
00049 <emphasis role="preprocessor">#if&#32;ENABLE_IL2CPP</emphasis>
00050 <emphasis role="preprocessor">#if&#32;UNITY_2018_1_OR_NEWER</emphasis>
00051 &#32;&#32;&#32;&#32;&#32;&#32;unsafe&#32;{
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Unity.Collections.LowLevel.Unsafe.UnsafeUtility.CopyPtrToStructure((<emphasis role="keywordtype">void</emphasis>*)ptr,&#32;out&#32;t);
00053 &#32;&#32;&#32;&#32;&#32;&#32;}
00054 <emphasis role="preprocessor">#else</emphasis>
00055 <emphasis role="preprocessor">#error&#32;UnityModules&#32;Only&#32;supports&#32;IL2CPP&#32;on&#32;versions&#32;of&#32;Unity&#32;2018.1&#32;or&#32;greater.</emphasis>
00056 <emphasis role="preprocessor">#endif</emphasis>
00057 <emphasis role="preprocessor">#else</emphasis>
00058 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_container&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_container&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StructContainer();
00060 &#32;&#32;&#32;&#32;&#32;&#32;}
00061 
00062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marshal.PtrToStructure(ptr,&#32;_container);
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;_container.value;
00065 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;e)&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_unity_engine">UnityEngine</link>.Debug.LogException(e);
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;<emphasis role="keywordflow">default</emphasis>(T);
00068 &#32;&#32;&#32;&#32;&#32;&#32;}
00069 <emphasis role="preprocessor">#endif</emphasis>
00070 &#32;&#32;&#32;&#32;}
00071 
00077 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ArrayElementToStruct(IntPtr&#32;ptr,&#32;<emphasis role="keywordtype">int</emphasis>&#32;arrayIndex,&#32;out&#32;T&#32;t)&#32;{
00078 &#32;&#32;&#32;&#32;&#32;&#32;PtrToStruct(<emphasis role="keyword">new</emphasis>&#32;IntPtr(ptr.ToInt64()&#32;+&#32;_sizeofT&#32;*&#32;arrayIndex),&#32;out&#32;t);
00079 &#32;&#32;&#32;&#32;}
00080 &#32;&#32;}
00081 }
</programlisting></section>
