<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__steam_v_r___input___generator_8cs_source">
<title>SteamVR_Input_Generator.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/SteamVR/Input/Editor/SteamVR_Input_Generator.cs</primary></indexterm>
<programlisting>00001 <emphasis role="keyword">using</emphasis>&#32;System;
00002 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00003 <emphasis role="keyword">using</emphasis>&#32;System.Linq;
00004 <emphasis role="keyword">using</emphasis>&#32;System.Text;
00005 
00006 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_editor">UnityEditor</link>;
00007 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00008 
00009 <emphasis role="keyword">using</emphasis>&#32;System.CodeDom;
00010 <emphasis role="keyword">using</emphasis>&#32;Microsoft.CSharp;
00011 <emphasis role="keyword">using</emphasis>&#32;System.IO;
00012 <emphasis role="keyword">using</emphasis>&#32;System.CodeDom.Compiler;
00013 
00014 <emphasis role="keyword">using</emphasis>&#32;System.Reflection;
00015 <emphasis role="keyword">using</emphasis>&#32;System.Linq.Expressions;
00016 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_editor">UnityEditor</link>.SceneManagement;
00017 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_editor">UnityEditor</link>.Callbacks;
00018 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_valve">Valve</link>.Newtonsoft.Json;
00019 
00020 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_valve_1_1_v_r">Valve.VR</link>
00021 {
00022 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;0219&#32;//&#32;variable&#32;assigned&#32;but&#32;not&#32;used.</emphasis>
00023 
00024 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>SteamVR_Input_Generator
00025 &#32;&#32;&#32;&#32;{
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;steamVRInputOverwriteBuildKey&#32;=&#32;<emphasis role="stringliteral">&quot;SteamVR_Input_OverwriteBuild&quot;</emphasis>;
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;steamVRInputDeleteUnusedKey&#32;=&#32;<emphasis role="stringliteral">&quot;SteamVR_Input_DeleteUnused&quot;</emphasis>;
00028 
00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionSetClassNamePrefix&#32;=&#32;<emphasis role="stringliteral">&quot;SteamVR_Input_ActionSet_&quot;</emphasis>;
00030 
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;generationNeedsReloadKey&#32;=&#32;<emphasis role="stringliteral">&quot;SteamVR_Input_GenerationNeedsReload&quot;</emphasis>;
00032 
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;progressBarTitle&#32;=&#32;<emphasis role="stringliteral">&quot;SteamVR&#32;Input&#32;Generation&quot;</emphasis>;
00034 
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;steamVRInputActionSetClassesFolder&#32;=&#32;<emphasis role="stringliteral">&quot;ActionSetClasses&quot;</emphasis>;
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;steamVRInputActionsClass&#32;=&#32;<emphasis role="stringliteral">&quot;SteamVR_Input_Actions&quot;</emphasis>;
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;steamVRInputActionSetsClass&#32;=&#32;<emphasis role="stringliteral">&quot;SteamVR_Input_ActionSets&quot;</emphasis>;
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;steamVRInputInitializationClass&#32;=&#32;<emphasis role="stringliteral">&quot;SteamVR_Input_Initialization&quot;</emphasis>;
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;steamVRActionsAssemblyDefinition&#32;=&#32;<emphasis role="stringliteral">&quot;SteamVR_Actions&quot;</emphasis>;
00040 
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;generating&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00042 
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;BeginGeneration()
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;generating&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileChanged&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;currentPath&#32;=&#32;<link linkend="_namespace_valve_1_1_v_r_1aecd07a81fe79a9f96c6787513e2d98e4ae498749f3c42246d50b15c81c101d988">Application</link>.dataPath;
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lastIndex&#32;=&#32;currentPath.LastIndexOf(<emphasis role="charliteral">&apos;/&apos;</emphasis>);
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentPath&#32;=&#32;currentPath.Remove(lastIndex,&#32;currentPath.Length&#32;-&#32;lastIndex);
00050 
00051 
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SteamVR_Input_EditorWindow.SetProgressBarText(<emphasis role="stringliteral">&quot;Beginning&#32;generation...&quot;</emphasis>,&#32;0);
00053 
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenerationStep_CreateActionSetClasses();
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenerationStep_CreateHelperClasses();
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenerationStep_CreateInitClass();
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenerationStep_CreateAssemblyDefinition();
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeleteUnusedScripts();
00059 
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fileChanged)
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorPrefs.SetBool(generationNeedsReloadKey,&#32;<emphasis role="keyword">true</emphasis>);
00062 
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssetDatabase.Refresh();
00064 
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SteamVR_Input_EditorWindow.ClearProgressBar();
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;generating&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00068 
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[DidReloadScripts]
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnReload()
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;didGenerate&#32;=&#32;EditorPrefs.GetBool(generationNeedsReloadKey);
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(didGenerate)
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorPrefs.SetBool(generationNeedsReloadKey,&#32;<emphasis role="keyword">false</emphasis>);
00076 
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>.IsNullOrEmpty(EditorSceneManager.GetActiveScene().path)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorApplication.delayCall&#32;+=&#32;ReloadScene;
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00081 
00082 
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ReloadScene()
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorPrefs.SetBool(generationNeedsReloadKey,&#32;<emphasis role="keyword">false</emphasis>);
00086 
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>.IsNullOrEmpty(EditorSceneManager.GetActiveScene().path)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EditorSceneManager.GetActiveScene().isDirty)
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00093 
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;previousPath&#32;=&#32;EditorSceneManager.GetActiveScene().path;
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorSceneManager.NewScene(NewSceneSetup.EmptyScene);
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorSceneManager.OpenScene(previousPath);&#32;<emphasis role="comment">//reload&#32;open&#32;scene&#32;to&#32;avoid&#32;any&#32;weird&#32;serialization</emphasis>
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00099 
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsGenerating()
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;generating;
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00104 
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;CancelGeneration()
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;generating&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00108 
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00110 
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;CodeTypeDeclaration&gt;&#32;setClasses&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;CodeTypeDeclaration&gt;();
00112 
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GenerationStep_CreateInitClass()
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeCompileUnit&#32;compileUnit&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeCompileUnit();
00116 
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeTypeDeclaration&#32;inputClass&#32;=&#32;CreatePartialInputClass(compileUnit);
00118 
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberMethod&#32;preinitMethod&#32;=&#32;CreateStaticMethod(inputClass,&#32;SteamVR_Input_Generator_Names.preinitializeMethodName,&#32;<emphasis role="keyword">true</emphasis>);
00120 
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;steamVRInputClassName&#32;=&#32;typeof(SteamVR_Input).Name;
00122 
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddStaticInvokeToMethod(preinitMethod,&#32;SteamVR_Input_Generator_Names.actionsClassName,&#32;startPreInitActionSetsMethodName);
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddStaticInvokeToMethod(preinitMethod,&#32;steamVRInputClassName,&#32;initializeActionSetDictionariesMethodName);
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddStaticInvokeToMethod(preinitMethod,&#32;SteamVR_Input_Generator_Names.actionsClassName,&#32;preInitActionsMethodName);
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddStaticInvokeToMethod(preinitMethod,&#32;SteamVR_Input_Generator_Names.actionsClassName,&#32;initializeActionsArraysMethodName);
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddStaticInvokeToMethod(preinitMethod,&#32;steamVRInputClassName,&#32;initializeActionDictionariesMethodName);
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddStaticInvokeToMethod(preinitMethod,&#32;steamVRInputClassName,&#32;finishPreInitActionSetsMethodName);
00129 
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Build&#32;the&#32;output&#32;file&#32;name.</emphasis>
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fullSourceFilePath&#32;=&#32;GetSourceFilePath(steamVRInputInitializationClass);
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateFile(fullSourceFilePath,&#32;compileUnit);
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00134 
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GenerationStep_CreateAssemblyDefinition()
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fullSourceFilePath&#32;=&#32;GetSourceFilePath(steamVRActionsAssemblyDefinition,&#32;<emphasis role="stringliteral">&quot;.asmdef&quot;</emphasis>);
00138 
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(File.Exists(fullSourceFilePath)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SteamVR_Input_Unity_AssemblyFile_Definition&#32;actionsAssemblyDefinitionData&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;SteamVR_Input_Unity_AssemblyFile_Definition();
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsAssemblyDefinitionData.autoReferenced&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;jsonText&#32;=&#32;JsonConvert.SerializeObject(actionsAssemblyDefinitionData,&#32;Formatting.Indented,&#32;<emphasis role="keyword">new</emphasis>&#32;JsonSerializerSettings&#32;{&#32;NullValueHandling&#32;=&#32;NullValueHandling.Include&#32;});
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;File.WriteAllText(fullSourceFilePath,&#32;jsonText);
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00147 
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GenerationStep_CreateActionSetClasses()
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SteamVR_Input_EditorWindow.SetProgressBarText(<emphasis role="stringliteral">&quot;Generating&#32;action&#32;set&#32;classes...&quot;</emphasis>,&#32;0.25f);
00151 
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SteamVR_Input.InitializeFile();
00153 
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateActionsSubFolder();
00155 
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setClasses&#32;=&#32;GenerateActionSetClasses();
00157 
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogFormat(<emphasis role="stringliteral">&quot;&lt;b&gt;[SteamVR&#32;Input]&lt;/b&gt;&#32;Created&#32;input&#32;script&#32;set&#32;classes:&#32;{0}&quot;</emphasis>,&#32;setClasses.Count);
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00160 
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GenerationStep_CreateHelperClasses()
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SteamVR_Input_EditorWindow.SetProgressBarText(<emphasis role="stringliteral">&quot;Generating&#32;actions&#32;and&#32;actionsets&#32;classes...&quot;</emphasis>,&#32;0.5f);
00164 
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenerateActionHelpers(steamVRInputActionsClass);
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenerateActionSetsHelpers(steamVRInputActionSetsClass);
00167 
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionsFullpath&#32;=&#32;Path.Combine(GetClassPath(),&#32;steamVRInputActionsClass&#32;+&#32;<emphasis role="stringliteral">&quot;.cs&quot;</emphasis>);
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionSetsFullpath&#32;=&#32;Path.Combine(GetClassPath(),&#32;steamVRInputActionSetsClass&#32;+&#32;<emphasis role="stringliteral">&quot;.cs&quot;</emphasis>);
00170 
00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogFormat(<emphasis role="stringliteral">&quot;&lt;b&gt;[SteamVR&#32;Input]&lt;/b&gt;&#32;Created&#32;input&#32;script&#32;main&#32;classes:&#32;{0}&#32;and&#32;{1}&quot;</emphasis>,&#32;actionsFullpath,&#32;actionSetsFullpath);
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00173 
00174 
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DeleteUnusedScripts()
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;folderPath&#32;=&#32;GetSubFolderPath();
00178 
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;files&#32;=&#32;Directory.GetFiles(folderPath);
00180 
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;toDelete&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;();
00182 
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;fileIndex&#32;=&#32;0;&#32;fileIndex&#32;&lt;&#32;files.Length;&#32;fileIndex++)
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FileInfo&#32;file&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;FileInfo(files[fileIndex]);
00186 
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file.Name.EndsWith(<emphasis role="stringliteral">&quot;.cs&quot;</emphasis>)&#32;||&#32;file.Name.EndsWith(<emphasis role="stringliteral">&quot;.cs.meta&quot;</emphasis>))
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSet&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SteamVR_Input.actionFile.action_sets.Any(<emphasis role="keyword">set</emphasis>&#32;=&gt;&#32;<emphasis role="keywordtype">string</emphasis>.Equals(GetSetClassName(<emphasis role="keyword">set</emphasis>)&#32;+&#32;<emphasis role="stringliteral">&quot;.cs&quot;</emphasis>,&#32;file.Name,&#32;StringComparison.CurrentCultureIgnoreCase)&#32;||
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>.Equals(GetSetClassName(<emphasis role="keyword">set</emphasis>)&#32;+&#32;<emphasis role="stringliteral">&quot;.cs.meta&quot;</emphasis>,&#32;file.Name,&#32;StringComparison.CurrentCultureIgnoreCase)))
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSet&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00195 
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isAction&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SteamVR_Input.actionFile.actions.Any(action&#32;=&gt;&#32;<emphasis role="keywordtype">string</emphasis>.Equals(action.codeFriendlyName&#32;+&#32;<emphasis role="stringliteral">&quot;.cs&quot;</emphasis>,&#32;file.Name,&#32;StringComparison.CurrentCultureIgnoreCase)&#32;||
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>.Equals(action.codeFriendlyName&#32;+&#32;<emphasis role="stringliteral">&quot;.cs.meta&quot;</emphasis>,&#32;file.Name,&#32;StringComparison.CurrentCultureIgnoreCase)))
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00200 
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isAction&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00203 
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSet&#32;==&#32;<emphasis role="keyword">false</emphasis>&#32;&amp;&amp;&#32;isAction&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toDelete.Add(files[fileIndex]);
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00210 
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(toDelete.Count&#32;&gt;&#32;0)
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;filesToDelete&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>&#32;file&#32;<emphasis role="keywordflow">in</emphasis>&#32;toDelete)
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filesToDelete&#32;+=&#32;file&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00216 
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;confirm&#32;=&#32;EditorUtility.DisplayDialog(<emphasis role="stringliteral">&quot;SteamVR&#32;Input&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Would&#32;you&#32;like&#32;to&#32;delete&#32;the&#32;following&#32;unused&#32;input&#32;files:\n&quot;</emphasis>&#32;+&#32;filesToDelete,&#32;<emphasis role="stringliteral">&quot;Delete&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;No&quot;</emphasis>);
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(confirm)
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>&#32;fileName&#32;<emphasis role="keywordflow">in</emphasis>&#32;toDelete)
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FileInfo&#32;file&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;FileInfo(fileName);
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.IsReadOnly&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.Delete();
00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00229 
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;CreateActionsSubFolder()
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;folderPath&#32;=&#32;GetSubFolderPath();
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Directory.Exists(folderPath)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Directory.CreateDirectory(folderPath);
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00238 
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DeleteActionClassFiles()
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeleteActionClass(steamVRInputActionsClass);
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeleteActionClass(steamVRInputActionSetsClass);
00243 
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;folderPath&#32;=&#32;GetSubFolderPath();
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;confirm&#32;=&#32;EditorUtility.DisplayDialog(<emphasis role="stringliteral">&quot;Confirmation&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Are&#32;you&#32;absolutely&#32;sure&#32;you&#32;want&#32;to&#32;delete&#32;all&#32;code&#32;files&#32;in&#32;&quot;</emphasis>&#32;+&#32;folderPath&#32;+&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Delete&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Cancel&quot;</emphasis>);
00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(confirm)
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeleteActionObjects(<emphasis role="stringliteral">&quot;*.cs*&quot;</emphasis>);
00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00251 
00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DeleteGeneratedFolder()
00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;generatedFolderPath&#32;=&#32;GetClassPath();
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;subFolderPath&#32;=&#32;GetSubFolderPath();
00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;confirm&#32;=&#32;EditorUtility.DisplayDialog(<emphasis role="stringliteral">&quot;Confirmation&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Are&#32;you&#32;absolutely&#32;sure&#32;you&#32;want&#32;to&#32;delete&#32;all&#32;code&#32;files&#32;in&#32;&quot;</emphasis>&#32;+&#32;generatedFolderPath&#32;+&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Delete&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Cancel&quot;</emphasis>);
00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(confirm)
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeleteActionObjects(<emphasis role="stringliteral">&quot;*.cs*&quot;</emphasis>,&#32;generatedFolderPath);
00260 
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeleteActionObjects(<emphasis role="stringliteral">&quot;*.cs*&quot;</emphasis>,&#32;subFolderPath);
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00264 
00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DeleteActionObjects(<emphasis role="keywordtype">string</emphasis>&#32;filter,&#32;<emphasis role="keywordtype">string</emphasis>&#32;folderPath&#32;=&#32;<emphasis role="keyword">null</emphasis>)
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(folderPath&#32;==&#32;<emphasis role="keyword">null</emphasis>)
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;folderPath&#32;=&#32;GetSubFolderPath();
00269 
00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;assets&#32;=&#32;Directory.GetFiles(folderPath,&#32;filter);
00271 
00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;assetIndex&#32;=&#32;0;&#32;assetIndex&#32;&lt;&#32;assets.Length;&#32;assetIndex++)
00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssetDatabase.DeleteAsset(assets[assetIndex]);
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00276 
00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogFormat(<emphasis role="stringliteral">&quot;&lt;b&gt;[SteamVR&#32;Input]&lt;/b&gt;&#32;Deleted&#32;{0}&#32;files&#32;at&#32;path:&#32;{1}&quot;</emphasis>,&#32;assets.Length,&#32;folderPath);
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00279 
00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DeleteActionClass(<emphasis role="keywordtype">string</emphasis>&#32;className)
00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;filePath&#32;=&#32;GetSourceFilePath(className);
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(File.Exists(filePath)&#32;==&#32;<emphasis role="keyword">true</emphasis>)
00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssetDatabase.DeleteAsset(filePath);
00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.Log(<emphasis role="stringliteral">&quot;&lt;b&gt;[SteamVR&#32;Input]&lt;/b&gt;&#32;Deleted:&#32;&quot;</emphasis>&#32;+&#32;filePath);
00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.Log(<emphasis role="stringliteral">&quot;&lt;b&gt;[SteamVR&#32;Input]&lt;/b&gt;&#32;No&#32;file&#32;found&#32;at:&#32;&quot;</emphasis>&#32;+&#32;filePath);
00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00293 
00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;GetTypeStringForAction(SteamVR_Input_ActionFile_Action&#32;action)
00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetTypeForAction(action).Name;
00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00298 
00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Type&#32;GetTypeForAction(SteamVR_Input_ActionFile_Action&#32;action)
00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionType&#32;=&#32;action.type.ToLower();
00302 
00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SteamVR_Input_ActionFile_ActionTypes.boolean&#32;==&#32;actionType)
00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;typeof(SteamVR_Action_Boolean);
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00307 
00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SteamVR_Input_ActionFile_ActionTypes.vector1&#32;==&#32;actionType)
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;typeof(SteamVR_Action_Single);
00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00312 
00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SteamVR_Input_ActionFile_ActionTypes.vector2&#32;==&#32;actionType)
00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;typeof(SteamVR_Action_Vector2);
00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00317 
00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SteamVR_Input_ActionFile_ActionTypes.vector3&#32;==&#32;actionType)
00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;typeof(SteamVR_Action_Vector3);
00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00322 
00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SteamVR_Input_ActionFile_ActionTypes.pose&#32;==&#32;actionType)
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;typeof(SteamVR_Action_Pose);
00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00327 
00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SteamVR_Input_ActionFile_ActionTypes.skeleton&#32;==&#32;actionType)
00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;typeof(SteamVR_Action_Skeleton);
00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00332 
00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SteamVR_Input_ActionFile_ActionTypes.vibration&#32;==&#32;actionType)
00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;typeof(SteamVR_Action_Vibration);
00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00337 
00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;System.Exception(<emphasis role="stringliteral">&quot;unknown&#32;type&#32;(&quot;</emphasis>&#32;+&#32;action.type&#32;+&#32;<emphasis role="stringliteral">&quot;)&#32;in&#32;actions&#32;file&#32;for&#32;action:&#32;&quot;</emphasis>&#32;+&#32;action.name);
00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00340 
00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;GetClassPath()
00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;path&#32;=&#32;<emphasis role="keywordtype">string</emphasis>.Format(<emphasis role="stringliteral">&quot;Assets/{0}&quot;</emphasis>,&#32;SteamVR_Settings.instance.steamVRInputPath);
00344 
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(path[0]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>&#32;||&#32;path[0]&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)
00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path&#32;=&#32;path.Remove(0,&#32;1);
00347 
00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;path;
00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00350 
00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;GetSubFolderPath()
00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Path.Combine(GetClassPath(),&#32;steamVRInputActionSetClassesFolder);
00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00355 
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;GetSourceFilePath(<emphasis role="keywordtype">string</emphasis>&#32;classname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;suffix&#32;=&#32;<emphasis role="stringliteral">&quot;.cs&quot;</emphasis>)
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;sourceFileName&#32;=&#32;<emphasis role="keywordtype">string</emphasis>.Format(<emphasis role="stringliteral">&quot;{0}{1}&quot;</emphasis>,&#32;classname,&#32;suffix);
00359 
00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Path.Combine(GetClassPath(),&#32;sourceFileName);
00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00362 
00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;fileChanged&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;CreateFile(<emphasis role="keywordtype">string</emphasis>&#32;fullPath,&#32;CodeCompileUnit&#32;compileUnit)
00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generate&#32;the&#32;code&#32;with&#32;the&#32;C#&#32;code&#32;provider.</emphasis>
00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CSharpCodeProvider&#32;provider&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CSharpCodeProvider();
00368 
00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Build&#32;the&#32;output&#32;file&#32;name.</emphasis>
00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fullSourceFilePath&#32;=&#32;fullPath;
00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;[SteamVR]&#32;Writing&#32;class&#32;to:&#32;&quot;&#32;+&#32;fullSourceFilePath);</emphasis>
00372 
00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;path&#32;=&#32;GetClassPath();
00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>[]&#32;parts&#32;=&#32;path.Split(<emphasis role="charliteral">&apos;/&apos;</emphasis>);
00375 
00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;partIndex&#32;=&#32;0;&#32;partIndex&#32;&lt;&#32;parts.Length&#32;-&#32;1;&#32;partIndex++)
00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;directoryPath&#32;=&#32;<emphasis role="keywordtype">string</emphasis>.Join(<emphasis role="stringliteral">&quot;/&quot;</emphasis>,&#32;parts.Take(partIndex&#32;+&#32;1).ToArray());
00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Directory.Exists(directoryPath)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Directory.CreateDirectory(directoryPath);
00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;[SteamVR]&#32;Created&#32;directory:&#32;&quot;&#32;+&#32;directoryPath);</emphasis>
00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00385 
00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;priorMD5&#32;=&#32;<emphasis role="keyword">null</emphasis>;
00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FileInfo&#32;file&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;FileInfo(fullSourceFilePath);
00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file.Exists)
00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.IsReadOnly&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;priorMD5&#32;=&#32;SteamVR_Utils.GetBadMD5HashFromFile(fullSourceFilePath);
00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00393 
00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;TextWriter&#32;to&#32;a&#32;StreamWriter&#32;to&#32;the&#32;output&#32;file.</emphasis>
00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;(StreamWriter&#32;sw&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StreamWriter(fullSourceFilePath,&#32;<emphasis role="keyword">false</emphasis>))
00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IndentedTextWriter&#32;tw&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;IndentedTextWriter(sw,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&quot;</emphasis>);
00398 
00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generate&#32;source&#32;code&#32;using&#32;the&#32;code&#32;provider.</emphasis>
00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;provider.GenerateCodeFromCompileUnit(compileUnit,&#32;tw,
00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;CodeGeneratorOptions()&#32;{&#32;BracingStyle&#32;=&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;});
00402 
00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Close&#32;the&#32;output&#32;file.</emphasis>
00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tw.Close();
00405 
00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;newMD5&#32;=&#32;SteamVR_Utils.GetBadMD5HashFromFile(fullSourceFilePath);
00407 
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(priorMD5&#32;!=&#32;newMD5)
00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileChanged&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00411 
00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;[SteamVR]&#32;Complete!&#32;Input&#32;class&#32;at:&#32;&quot;&#32;+&#32;fullSourceFilePath);</emphasis>
00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00414 
00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;getActionMethodParamName&#32;=&#32;<emphasis role="stringliteral">&quot;path&quot;</emphasis>;
00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;skipStateUpdatesParamName&#32;=&#32;<emphasis role="stringliteral">&quot;skipStateAndEventUpdates&quot;</emphasis>;
00417 
00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;CodeTypeDeclaration&gt;&#32;GenerateActionSetClasses()
00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;CodeTypeDeclaration&gt;&#32;setClasses&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;CodeTypeDeclaration&gt;();
00421 
00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;actionSetIndex&#32;=&#32;0;&#32;actionSetIndex&#32;&lt;&#32;SteamVR_Input.actionFile.action_sets.Count;&#32;actionSetIndex++)
00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SteamVR_Input_ActionFile_ActionSet&#32;actionSet&#32;=&#32;SteamVR_Input.actionFile.action_sets[actionSetIndex];
00425 
00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeTypeDeclaration&#32;setClass&#32;=&#32;CreateActionSetClass(actionSet);
00427 
00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setClasses.Add(setClass);
00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00430 
00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setClasses;
00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00433 
00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;initializeActionDictionariesMethodName&#32;=&#32;<emphasis role="stringliteral">&quot;PreinitializeActionDictionaries&quot;</emphasis>;
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;initializeActionSetDictionariesMethodName&#32;=&#32;<emphasis role="stringliteral">&quot;PreinitializeActionSetDictionaries&quot;</emphasis>;
00436 
00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;preInitActionsMethodName&#32;=&#32;<emphasis role="stringliteral">&quot;PreInitActions&quot;</emphasis>;
00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;initializeActionsArraysMethodName&#32;=&#32;<emphasis role="stringliteral">&quot;InitializeActionArrays&quot;</emphasis>;
00439 
00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GenerateActionHelpers(<emphasis role="keywordtype">string</emphasis>&#32;actionsClassFileName)
00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeCompileUnit&#32;compileUnit&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeCompileUnit();
00443 
00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeTypeDeclaration&#32;inputClass&#32;=&#32;CreatePartialInputClass(compileUnit);
00445 
00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(SteamVR_Action)));
00447 
00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsInArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(ISteamVR_Action_In)));
00449 
00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsOutArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(ISteamVR_Action_Out)));
00451 
00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsVibrationArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(SteamVR_Action_Vibration)));
00453 
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsPoseArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(SteamVR_Action_Pose)));
00455 
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsSkeletonArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(SteamVR_Action_Skeleton)));
00457 
00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsBooleanArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(SteamVR_Action_Boolean)));
00459 
00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsSingleArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(SteamVR_Action_Single)));
00461 
00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsVector2Array&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(SteamVR_Action_Vector2)));
00463 
00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsVector3Array&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(SteamVR_Action_Vector3)));
00465 
00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionsNonPoseNonSkeletonArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(ISteamVR_Action_In)));
00467 
00468 
00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//add&#32;the&#32;getaction&#32;method&#32;to</emphasis>
00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberMethod&#32;actionsArraysInitMethod&#32;=&#32;CreateStaticMethod(inputClass,&#32;initializeActionsArraysMethodName,&#32;<emphasis role="keyword">false</emphasis>);
00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberMethod&#32;actionsPreInitMethod&#32;=&#32;CreateStaticMethod(inputClass,&#32;preInitActionsMethodName,&#32;<emphasis role="keyword">false</emphasis>);
00472 
00473 
00474 
00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;actionSetIndex&#32;=&#32;0;&#32;actionSetIndex&#32;&lt;&#32;SteamVR_Input.actionFile.action_sets.Count;&#32;actionSetIndex++)
00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SteamVR_Input_ActionFile_ActionSet&#32;actionSet&#32;=&#32;SteamVR_Input.actionFile.action_sets[actionSetIndex];
00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionSetShortName&#32;=&#32;actionSet.shortName;
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionSetShortName&#32;=&#32;actionSetShortName.Substring(0,&#32;1).ToLower()&#32;+&#32;actionSetShortName.Substring(1);
00480 
00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;actionIndex&#32;=&#32;0;&#32;actionIndex&#32;&lt;&#32;actionSet.actionsList.Count;&#32;actionIndex++)
00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SteamVR_Input_ActionFile_Action&#32;action&#32;=&#32;actionSet.actionsList[actionIndex];
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionShortName&#32;=&#32;action.shortName;
00485 
00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;typeName&#32;=&#32;GetTypeStringForAction(action);
00487 
00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;codeFriendlyInstanceName;
00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(actionSet.actionsList.Count(findAction&#32;=&gt;&#32;findAction.shortName&#32;==&#32;actionShortName)&#32;&gt;=&#32;2)
00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codeFriendlyInstanceName&#32;=&#32;<emphasis role="keywordtype">string</emphasis>.Format(<emphasis role="stringliteral">&quot;{0}_{1}_{2}&quot;</emphasis>,&#32;actionSetShortName,&#32;action.direction.ToString().ToLower(),&#32;actionShortName);
00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codeFriendlyInstanceName&#32;=&#32;<emphasis role="keywordtype">string</emphasis>.Format(<emphasis role="stringliteral">&quot;{0}_{1}&quot;</emphasis>,&#32;actionSetShortName,&#32;actionShortName);
00493 
00494 
00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberField&#32;actionField&#32;=&#32;CreateFieldAndPropertyWrapper(inputClass,&#32;codeFriendlyInstanceName,&#32;typeName);
00496 
00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignActionStatement(actionsPreInitMethod,&#32;inputClass.Name,&#32;actionField.Name,&#32;action.name,&#32;typeName);
00498 
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsArray.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00500 
00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(action.direction&#32;==&#32;<link linkend="_namespace_valve_1_1_v_r_1a1e6192cb5ddaf204afab87ccb5728780">SteamVR_ActionDirections</link>.In)
00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsInArray.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00504 
00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(typeName&#32;==&#32;typeof(SteamVR_Action_Pose).Name)
00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsPoseArray.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(typeName&#32;==&#32;typeof(SteamVR_Action_Skeleton).Name)
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsSkeletonArray.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(typeName&#32;==&#32;typeof(SteamVR_Action_Boolean).Name)
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsBooleanArray.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(typeName&#32;==&#32;typeof(SteamVR_Action_Single).Name)
00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsSingleArray.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(typeName&#32;==&#32;typeof(SteamVR_Action_Vector2).Name)
00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsVector2Array.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(typeName&#32;==&#32;typeof(SteamVR_Action_Vector3).Name)
00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsVector3Array.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00529 
00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((typeName&#32;==&#32;typeof(SteamVR_Action_Skeleton).Name)&#32;==&#32;<emphasis role="keyword">false</emphasis>&#32;&amp;&amp;&#32;(typeName&#32;==&#32;typeof(SteamVR_Action_Pose).Name)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsNonPoseNonSkeletonArray.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsVibrationArray.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00538 
00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionsOutArray.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00543 
00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsFieldName,&#32;actionsArray);
00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsInFieldName,&#32;actionsInArray);
00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsOutFieldName,&#32;actionsOutArray);
00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsVibrationFieldName,&#32;actionsVibrationArray);
00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsPoseFieldName,&#32;actionsPoseArray);
00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsBooleanFieldName,&#32;actionsBooleanArray);
00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsSingleFieldName,&#32;actionsSingleArray);
00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsVector2FieldName,&#32;actionsVector2Array);
00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsVector3FieldName,&#32;actionsVector3Array);
00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsSkeletonFieldName,&#32;actionsSkeletonArray);
00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(actionsArraysInitMethod,&#32;SteamVR_Input_Generator_Names.actionsNonPoseNonSkeletonIn,&#32;actionsNonPoseNonSkeletonArray);
00555 
00556 
00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Build&#32;the&#32;output&#32;file&#32;name.</emphasis>
00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fullSourceFilePath&#32;=&#32;GetSourceFilePath(actionsClassFileName);
00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateFile(fullSourceFilePath,&#32;compileUnit);
00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00561 
00562 
00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;startPreInitActionSetsMethodName&#32;=&#32;<emphasis role="stringliteral">&quot;StartPreInitActionSets&quot;</emphasis>;
00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;finishPreInitActionSetsMethodName&#32;=&#32;<emphasis role="stringliteral">&quot;PreinitializeFinishActionSets&quot;</emphasis>;
00565 
00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GenerateActionSetsHelpers(<emphasis role="keywordtype">string</emphasis>&#32;actionSetsClassFileName)
00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeCompileUnit&#32;compileUnit&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeCompileUnit();
00569 
00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeTypeDeclaration&#32;inputClass&#32;=&#32;CreatePartialInputClass(compileUnit);
00571 
00572 
00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberMethod&#32;startPreInitActionSetsMethod&#32;=&#32;CreateStaticMethod(inputClass,&#32;startPreInitActionSetsMethodName,&#32;<emphasis role="keyword">false</emphasis>);
00574 
00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeArrayCreateExpression&#32;actionSetsArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeArrayCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(typeof(SteamVR_ActionSet)));
00576 
00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;actionSetIndex&#32;=&#32;0;&#32;actionSetIndex&#32;&lt;&#32;SteamVR_Input.actionFile.action_sets.Count;&#32;actionSetIndex++)
00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SteamVR_Input_ActionFile_ActionSet&#32;actionSet&#32;=&#32;SteamVR_Input.actionFile.action_sets[actionSetIndex];
00580 
00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;shortName&#32;=&#32;GetValidIdentifier(actionSet.shortName);
00582 
00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;codeFriendlyInstanceName&#32;=&#32;shortName;
00584 
00585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;setTypeName&#32;=&#32;GetSetClassName(actionSet);
00586 
00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberField&#32;actionSetField&#32;=&#32;CreateFieldAndPropertyWrapper(inputClass,&#32;shortName,&#32;setTypeName);
00588 
00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignActionSetStatement(startPreInitActionSetsMethod,&#32;inputClass.Name,&#32;actionSetField.Name,&#32;actionSet.name,&#32;setTypeName);
00590 
00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionSetsArray.Initializers.Add(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;codeFriendlyInstanceName));
00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00593 
00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddAssignStatement(startPreInitActionSetsMethod,&#32;SteamVR_Input_Generator_Names.actionSetsFieldName,&#32;actionSetsArray);
00595 
00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Build&#32;the&#32;output&#32;file&#32;name.</emphasis>
00597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fullSourceFilePath&#32;=&#32;GetSourceFilePath(actionSetsClassFileName);
00598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateFile(fullSourceFilePath,&#32;compileUnit);
00599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00600 
00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CSharpCodeProvider&#32;provider&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CSharpCodeProvider();
00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;GetValidIdentifier(<emphasis role="keywordtype">string</emphasis>&#32;name)
00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;newName&#32;=&#32;name.Replace(<emphasis role="stringliteral">&quot;-&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>);
00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newName&#32;=&#32;provider.CreateValidIdentifier(newName);
00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newName;
00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00608 
00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;MethodInfo&#32;GetMethodInfo&lt;T&gt;(Expression&lt;Action&lt;T&gt;&gt;&#32;expression)
00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;member&#32;=&#32;expression.Body&#32;as&#32;MethodCallExpression;
00612 
00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(member&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;member.Method;
00615 
00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;ArgumentException(<emphasis role="stringliteral">&quot;Expression&#32;is&#32;not&#32;a&#32;method&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;expression&quot;</emphasis>);
00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00618 
00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeTypeDeclaration&#32;CreatePartialInputClass(CodeCompileUnit&#32;compileUnit)
00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeNamespace&#32;codeNamespace&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeNamespace(typeof(SteamVR_Input).Namespace);
00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codeNamespace.Imports.Add(<emphasis role="keyword">new</emphasis>&#32;CodeNamespaceImport(<emphasis role="stringliteral">&quot;System&quot;</emphasis>));
00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codeNamespace.Imports.Add(<emphasis role="keyword">new</emphasis>&#32;CodeNamespaceImport(<emphasis role="stringliteral">&quot;UnityEngine&quot;</emphasis>));
00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compileUnit.Namespaces.Add(codeNamespace);
00625 
00626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeTypeDeclaration&#32;inputClass&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeTypeDeclaration(SteamVR_Input_Generator_Names.actionsClassName);
00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputClass.IsPartial&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codeNamespace.Types.Add(inputClass);
00629 
00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;inputClass;
00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00632 
00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;GetSetClassName(SteamVR_Input_ActionFile_ActionSet&#32;<emphasis role="keyword">set</emphasis>)
00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;actionSetClassNamePrefix&#32;+&#32;<emphasis role="keyword">set</emphasis>.shortName;
00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00637 
00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;inActionFieldPrefix&#32;=&#32;<emphasis role="stringliteral">&quot;in_&quot;</emphasis>;
00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;outActionFieldPrefix&#32;=&#32;<emphasis role="stringliteral">&quot;out_&quot;</emphasis>;
00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;setFinishPreInitializeMethodName&#32;=&#32;<emphasis role="stringliteral">&quot;FinishPreInitialize&quot;</emphasis>;
00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeTypeDeclaration&#32;CreateActionSetClass(SteamVR_Input_ActionFile_ActionSet&#32;<emphasis role="keyword">set</emphasis>)
00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeCompileUnit&#32;compileUnit&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeCompileUnit();
00644 
00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeNamespace&#32;codeNamespace&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeNamespace(typeof(SteamVR_Input).Namespace);
00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codeNamespace.Imports.Add(<emphasis role="keyword">new</emphasis>&#32;CodeNamespaceImport(<emphasis role="stringliteral">&quot;System&quot;</emphasis>));
00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codeNamespace.Imports.Add(<emphasis role="keyword">new</emphasis>&#32;CodeNamespaceImport(<emphasis role="stringliteral">&quot;UnityEngine&quot;</emphasis>));
00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compileUnit.Namespaces.Add(codeNamespace);
00649 
00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeTypeDeclaration&#32;setClass&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeTypeDeclaration(GetSetClassName(<emphasis role="keyword">set</emphasis>));
00651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setClass.BaseTypes.Add(typeof(SteamVR_ActionSet));
00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setClass.Attributes&#32;=&#32;MemberAttributes.Public;
00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codeNamespace.Types.Add(setClass);
00654 
00655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionSetShortName&#32;=&#32;<emphasis role="keyword">set</emphasis>.shortName;
00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actionSetShortName&#32;=&#32;actionSetShortName.Substring(0,&#32;1).ToLower()&#32;+&#32;actionSetShortName.Substring(1);
00657 
00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;inAction&#32;<emphasis role="keywordflow">in</emphasis>&#32;<emphasis role="keyword">set</emphasis>.actionsInList)
00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;inActionName&#32;=&#32;inAction.shortName;
00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">set</emphasis>.actionsOutList.Any(outAction&#32;=&gt;&#32;inAction.shortName&#32;==&#32;outAction.shortName))
00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inActionName&#32;=&#32;inActionFieldPrefix&#32;+&#32;inActionName;
00663 
00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionClassPropertyName&#32;=&#32;<emphasis role="keywordtype">string</emphasis>.Format(<emphasis role="stringliteral">&quot;{0}_{1}&quot;</emphasis>,&#32;actionSetShortName,&#32;inActionName);
00665 
00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateActionPropertyWrapper(setClass,&#32;SteamVR_Input_Generator_Names.actionsClassName,&#32;inActionName,&#32;actionClassPropertyName,&#32;inAction);
00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00668 
00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;outAction&#32;<emphasis role="keywordflow">in</emphasis>&#32;<emphasis role="keyword">set</emphasis>.actionsOutList)
00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;outActionName&#32;=&#32;outAction.shortName;
00672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">set</emphasis>.actionsInList.Any(inAction&#32;=&gt;&#32;inAction.shortName&#32;==&#32;outAction.shortName))
00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outActionName&#32;=&#32;outActionFieldPrefix&#32;+&#32;outActionName;
00674 
00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionClassPropertyName&#32;=&#32;<emphasis role="keywordtype">string</emphasis>.Format(<emphasis role="stringliteral">&quot;{0}_{1}&quot;</emphasis>,&#32;actionSetShortName,&#32;outActionName);
00676 
00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateActionPropertyWrapper(setClass,&#32;SteamVR_Input_Generator_Names.actionsClassName,&#32;outActionName,&#32;actionClassPropertyName,&#32;outAction);
00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00679 
00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Build&#32;the&#32;output&#32;file&#32;name.</emphasis>
00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;folderPath&#32;=&#32;GetSubFolderPath();
00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fullSourceFilePath&#32;=&#32;Path.Combine(folderPath,&#32;setClass.Name&#32;+&#32;<emphasis role="stringliteral">&quot;.cs&quot;</emphasis>);
00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateFile(fullSourceFilePath,&#32;compileUnit);
00684 
00685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;setClass;
00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00687 
00688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeMemberMethod&#32;CreateStaticMethod(CodeTypeDeclaration&#32;inputClass,&#32;<emphasis role="keywordtype">string</emphasis>&#32;methodName,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isPublic)
00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberMethod&#32;method&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMemberMethod();
00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;method.Name&#32;=&#32;methodName;
00692 
00693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isPublic)
00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;method.Attributes&#32;=&#32;MemberAttributes.Public&#32;|&#32;MemberAttributes.Static;
00695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;method.Attributes&#32;=&#32;MemberAttributes.Private&#32;|&#32;MemberAttributes.Static;
00697 
00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputClass.Members.Add(method);
00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;method;
00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00701 
00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeMemberMethod&#32;CreateStaticConstructorMethod(CodeTypeDeclaration&#32;inputClass)
00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeTypeConstructor&#32;method&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeTypeConstructor();
00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;method.Attributes&#32;=&#32;MemberAttributes.Static;
00706 
00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputClass.Members.Add(method);
00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;method;
00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00710 
00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeMemberField&#32;CreateField(CodeTypeDeclaration&#32;inputClass,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldName,&#32;Type&#32;fieldType,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isStatic)
00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fieldType&#32;==&#32;<emphasis role="keyword">null</emphasis>)
00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.Log(<emphasis role="stringliteral">&quot;null&#32;fieldType&quot;</emphasis>);
00715 
00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberField&#32;field&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMemberField();
00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;field.Name&#32;=&#32;fieldName;
00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;field.Type&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(fieldType);
00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;field.Attributes&#32;=&#32;MemberAttributes.Public;
00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isStatic)
00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;field.Attributes&#32;|=&#32;MemberAttributes.Static;
00722 
00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputClass.Members.Add(field);
00724 
00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;field;
00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00727 
00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeMemberField&#32;CreateFieldAndPropertyWrapper(CodeTypeDeclaration&#32;inputClass,&#32;<emphasis role="keywordtype">string</emphasis>&#32;name,&#32;<emphasis role="keywordtype">string</emphasis>&#32;type)
00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberField&#32;actionField&#32;=&#32;CreatePrivateField(inputClass,&#32;name,&#32;type,&#32;<emphasis role="keyword">true</emphasis>);
00731 
00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberProperty&#32;actionProperty&#32;=&#32;CreateStaticProperty(inputClass,&#32;name,&#32;type,&#32;actionField);
00733 
00734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;actionField;
00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00736 
00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeMemberProperty&#32;CreateStaticProperty(CodeTypeDeclaration&#32;inputClass,&#32;<emphasis role="keywordtype">string</emphasis>&#32;propertyName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;propertyType,&#32;CodeMemberField&#32;privateField)
00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberProperty&#32;<emphasis role="keyword">property</emphasis>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMemberProperty();
00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.Name&#32;=&#32;propertyName;
00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.Type&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(propertyType);
00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.Attributes&#32;=&#32;MemberAttributes.Public&#32;|&#32;MemberAttributes.Static;
00743 
00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeFieldReferenceExpression&#32;fieldReference&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(inputClass.Name),&#32;privateField.Name);
00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMethodInvokeExpression&#32;invokeExpression&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMethodInvokeExpression(fieldReference,&#32;<emphasis role="stringliteral">&quot;GetCopy&quot;</emphasis>);
00746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeExpression.Method.TypeArguments.Add(property.Type);
00747 
00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMethodReturnStatement&#32;returnStatement&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMethodReturnStatement(invokeExpression);
00749 
00750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.GetStatements.Add(returnStatement);
00751 
00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputClass.Members.Add(property);
00753 
00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;property;
00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00756 
00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeMemberProperty&#32;CreateActionPropertyWrapper(CodeTypeDeclaration&#32;addToClass,&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionClass,&#32;<emphasis role="keywordtype">string</emphasis>&#32;propertyName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionClassFieldName,&#32;SteamVR_Input_ActionFile_Action&#32;action)
00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;propertyType&#32;=&#32;GetTypeStringForAction(action);
00760 
00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberProperty&#32;<emphasis role="keyword">property</emphasis>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMemberProperty();
00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.Name&#32;=&#32;propertyName;
00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.Type&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(propertyType);
00764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.Attributes&#32;=&#32;MemberAttributes.Public;
00765 
00766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeFieldReferenceExpression&#32;fieldReference&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(actionClass),&#32;actionClassFieldName);
00767 
00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMethodReturnStatement&#32;returnStatement&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMethodReturnStatement(fieldReference);
00769 
00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.GetStatements.Add(returnStatement);
00771 
00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addToClass.Members.Add(property);
00773 
00774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;property;
00775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00776 
00777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;privateFieldPrefix&#32;=&#32;<emphasis role="stringliteral">&quot;p_&quot;</emphasis>;
00778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeMemberField&#32;CreatePrivateField(CodeTypeDeclaration&#32;inputClass,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldType,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isStatic)
00779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateField(inputClass,&#32;privateFieldPrefix&#32;+&#32;fieldName,&#32;fieldType,&#32;isStatic,&#32;<emphasis role="keyword">false</emphasis>);
00781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00782 
00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeMemberField&#32;CreateField(CodeTypeDeclaration&#32;inputClass,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldType,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isStatic,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isPublic&#32;=&#32;<emphasis role="keyword">true</emphasis>)
00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMemberField&#32;field&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMemberField();
00786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;field.Name&#32;=&#32;fieldName;
00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;field.Type&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(fieldType);
00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isPublic)
00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;field.Attributes&#32;=&#32;MemberAttributes.Public;
00790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;field.Attributes&#32;=&#32;MemberAttributes.Private;
00792 
00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isStatic)
00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;field.Attributes&#32;|=&#32;MemberAttributes.Static;
00795 
00796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputClass.Members.Add(field);
00797 
00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;field;
00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00800 
00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeMethodInvokeExpression&#32;AddStaticInvokeToMethod(CodeMemberMethod&#32;methodToAddTo,&#32;<emphasis role="keywordtype">string</emphasis>&#32;classToInvoke,&#32;<emphasis role="keywordtype">string</emphasis>&#32;invokeMethodName)
00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMethodInvokeExpression&#32;invokeMethod&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMethodInvokeExpression(<emphasis role="keyword">new</emphasis>&#32;CodeMethodReferenceExpression(
00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(classToInvoke),&#32;invokeMethodName));
00805 
00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;methodToAddTo.Statements.Add(invokeMethod);
00807 
00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;invokeMethod;
00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00810 
00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddAssignStatement(CodeMemberMethod&#32;methodToAddTo,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldToAssign,&#32;CodeArrayCreateExpression&#32;array)
00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;methodToAddTo.Statements.Add(<emphasis role="keyword">new</emphasis>&#32;CodeAssignStatement(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(typeof(SteamVR_Input)),&#32;fieldToAssign),&#32;array));
00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00815 
00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;createActionMethodName&#32;=&#32;<emphasis role="stringliteral">&quot;Create&quot;</emphasis>;
00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;createActionSetMethodName&#32;=&#32;<emphasis role="stringliteral">&quot;Create&quot;</emphasis>;
00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;getActionFromPathMethodName&#32;=&#32;<emphasis role="stringliteral">&quot;GetActionFromPath&quot;</emphasis>;
00819 
00820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//grab&#32;=&#32;SteamVR_Action.Create&lt;SteamVR_Action_Boolean&gt;(&quot;path&quot;);</emphasis>
00821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddAssignActionStatement(CodeMemberMethod&#32;methodToAddTo,&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionClassName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldToAssign,&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionPath,&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionType)
00822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMethodInvokeExpression&#32;invokeMethod&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMethodInvokeExpression(<emphasis role="keyword">new</emphasis>&#32;CodeMethodReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(typeof(SteamVR_Action).Name),&#32;createActionMethodName));
00824 
00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeMethod.Method.TypeArguments.Add(actionType);
00826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeMethod.Parameters.Add(<emphasis role="keyword">new</emphasis>&#32;CodePrimitiveExpression(actionPath));
00827 
00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;methodToAddTo.Statements.Add(<emphasis role="keyword">new</emphasis>&#32;CodeAssignStatement(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(actionClassName),&#32;fieldToAssign),&#32;<emphasis role="keyword">new</emphasis>&#32;CodeCastExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(actionType),&#32;invokeMethod)));
00829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddAssignActionSetStatement(CodeMemberMethod&#32;methodToAddTo,&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionClassName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldToAssign,&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionSetName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionSetType)
00831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMethodInvokeExpression&#32;invokeMethod&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMethodInvokeExpression(<emphasis role="keyword">new</emphasis>&#32;CodeMethodReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(typeof(SteamVR_ActionSet).Name),&#32;createActionSetMethodName));
00833 
00834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeMethod.Method.TypeArguments.Add(actionSetType);
00835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeMethod.Parameters.Add(<emphasis role="keyword">new</emphasis>&#32;CodePrimitiveExpression(actionSetName));
00836 
00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;methodToAddTo.Statements.Add(<emphasis role="keyword">new</emphasis>&#32;CodeAssignStatement(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(actionClassName),&#32;fieldToAssign),&#32;<emphasis role="keyword">new</emphasis>&#32;CodeCastExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(actionSetType),&#32;invokeMethod)));
00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddAssignLocalActionStatement(CodeMemberMethod&#32;methodToAddTo,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldToAssign,&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionPath,&#32;<emphasis role="keywordtype">string</emphasis>&#32;actionType,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create)
00840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMethodInvokeExpression&#32;invokeMethod;
00842 
00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(create)
00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeMethod&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMethodInvokeExpression(<emphasis role="keyword">new</emphasis>&#32;CodeMethodReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(typeof(SteamVR_Action).Name),&#32;createActionMethodName));
00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeMethod&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMethodInvokeExpression(<emphasis role="keyword">new</emphasis>&#32;CodeMethodReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(typeof(SteamVR_Input).Name),&#32;getActionFromPathMethodName));
00847 
00848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeMethod.Method.TypeArguments.Add(actionType);
00849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invokeMethod.Parameters.Add(<emphasis role="keyword">new</emphasis>&#32;CodePrimitiveExpression(actionPath));
00850 
00851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;methodToAddTo.Statements.Add(<emphasis role="keyword">new</emphasis>&#32;CodeAssignStatement(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeThisReferenceExpression(),&#32;fieldToAssign),&#32;<emphasis role="keyword">new</emphasis>&#32;CodeCastExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(actionType),&#32;invokeMethod)));
00852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddAssignNewInstanceStatement(CodeMemberMethod&#32;methodToAddTo,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldToAssign,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fieldType)
00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeObjectCreateExpression&#32;createExpression&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeObjectCreateExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReference(fieldType));
00856 
00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;methodToAddTo.Statements.Add(<emphasis role="keyword">new</emphasis>&#32;CodeAssignStatement(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeThisReferenceExpression(),&#32;fieldToAssign),&#32;createExpression));
00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00859 
00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CodeConditionStatement&#32;CreateStringCompareStatement(CodeMemberMethod&#32;methodToAddTo,&#32;<emphasis role="keywordtype">string</emphasis>&#32;action,&#32;<emphasis role="keywordtype">string</emphasis>&#32;paramName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;returnActionName)
00861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MethodInfo&#32;stringEqualsMethodInfo&#32;=&#32;GetMethodInfo&lt;string&gt;(<emphasis role="keyword">set</emphasis>&#32;=&gt;&#32;<emphasis role="keywordtype">string</emphasis>.Equals(<emphasis role="keyword">null</emphasis>,&#32;<emphasis role="keyword">null</emphasis>,&#32;StringComparison.CurrentCultureIgnoreCase));
00863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeTypeReferenceExpression&#32;stringType&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(typeof(<emphasis role="keywordtype">string</emphasis>));
00864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodePrimitiveExpression&#32;actionName&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodePrimitiveExpression(action);
00865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeVariableReferenceExpression&#32;pathName&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeVariableReferenceExpression(paramName);
00866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeVariableReferenceExpression&#32;caseInvariantName&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeVariableReferenceExpression(<emphasis role="stringliteral">&quot;StringComparison.CurrentCultureIgnoreCase&quot;</emphasis>);
00867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMethodInvokeExpression&#32;stringCompare&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMethodInvokeExpression(stringType,&#32;stringEqualsMethodInfo.Name,&#32;pathName,&#32;actionName,&#32;caseInvariantName);
00868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeMethodReturnStatement&#32;returnAction&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeMethodReturnStatement(<emphasis role="keyword">new</emphasis>&#32;CodeFieldReferenceExpression(<emphasis role="keyword">new</emphasis>&#32;CodeTypeReferenceExpression(typeof(SteamVR_Input)),&#32;returnActionName));
00869 
00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeConditionStatement&#32;condition&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CodeConditionStatement(stringCompare,&#32;returnAction);
00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;methodToAddTo.Statements.Add(condition);
00872 
00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;condition;
00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00875 &#32;&#32;&#32;&#32;}
00876 }
</programlisting></section>
