<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_leap_1_1_unity_1_1_pose">
<title>Leap.Unity.Pose Struct Reference</title>
<indexterm><primary>Leap.Unity.Pose</primary></indexterm>
<para>

<para>A position and rotation. You can multiply two poses; this acts like Matrix4x4 multiplication, but Poses always have unit scale. </para>
 
</para>
<para>Inheritance diagram for Leap.Unity.Pose:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_leap_1_1_unity_1_1_pose.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_leap_1_1_unity_1_1_pose_1a5e5882a2d009bc83f987a5b82d1c4f17">Pose</link> (Vector3 <link linkend="_struct_leap_1_1_unity_1_1_pose_1ad90ba514c97484e10d747d9bdf9b81a9">position</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_leap_1_1_unity_1_1_pose_1a2762b68801a572f5b4e2b3afecaa1439">Pose</link> (Quaternion <link linkend="_struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad">rotation</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_leap_1_1_unity_1_1_pose_1a5443bf51e7acbf3227e577a350c910a8">Pose</link> (Vector3 <link linkend="_struct_leap_1_1_unity_1_1_pose_1ad90ba514c97484e10d747d9bdf9b81a9">position</link>, Quaternion <link linkend="_struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad">rotation</link>)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_leap_1_1_unity_1_1_pose_1a91aece63d4aecbb41e9af8cf2795c63a">ApproxEquals</link> (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> other)</para>
</listitem>
            <listitem><para>override string <link linkend="_struct_leap_1_1_unity_1_1_pose_1a3e16f8168410ebf2585350a36b058a65">ToString</link> ()</para>
</listitem>
            <listitem><para>string <link linkend="_struct_leap_1_1_unity_1_1_pose_1a806409523b1d9b8325e0c58d660304a7">ToString</link> (string format)</para>
</listitem>
            <listitem><para>override bool <link linkend="_struct_leap_1_1_unity_1_1_pose_1ac1e5f3546934ffb7f8935240403eb382">Equals</link> (object obj)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_leap_1_1_unity_1_1_pose_1a8482a9c3754c412fd00ed41511343a12">Equals</link> (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> other)</para>
</listitem>
            <listitem><para>override int <link linkend="_struct_leap_1_1_unity_1_1_pose_1a6a907351d0a69845338c3464a6658d8b">GetHashCode</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> <link linkend="_struct_leap_1_1_unity_1_1_pose_1adc1395f4c9a4caef84c6986ce49c7ab7">operator *</link> (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> A, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> B)</para>

<para>Returns <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> B transformed by <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> A, like a transform hierarchy with A as the parent of B. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> <link linkend="_struct_leap_1_1_unity_1_1_pose_1a26dee98a2b5f124aad5f1c56c21a5e1b">operator+</link> (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> A, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> B)</para>

<para>Returns the accumulation of the two poses: The positions summed, and with rotation A.rotation * B.rotation. Note that this accumulates the poses without interpreting either pose as a parent space of the other; but also beware that rotations are noncommutative, so this operation is also noncommutative. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> <link linkend="_struct_leap_1_1_unity_1_1_pose_1a1f7c15fc1732e76b76068aa316f58dbd">operator *</link> (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> pose, Vector3 localPosition)</para>

<para>Transforms the right-hand-side Vector3 as a local-space position into world space as if this <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> were its reference frame. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> <link linkend="_struct_leap_1_1_unity_1_1_pose_1aac1241e7aec5379dc1aa001526532016">Lerp</link> (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> a, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> b, float t)</para>

<para>Returns a pose interpolated (Lerp for position, Slerp, NOT Lerp for rotation) between a and b by t from 0 to 1. This method clamps t between 0 and 1; if extrapolation is desired, see Extrapolate. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> <link linkend="_struct_leap_1_1_unity_1_1_pose_1a4a16c9cf3281db86bdb0160d80b4cf3a">LerpUnclamped</link> (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> a, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> b, float t)</para>

<para>As Lerp, but doesn&apos;t clamp t between 0 and 1. Values above one extrapolate forwards beyond b, while values less than zero extrapolate backwards past a. </para>
</listitem>
            <listitem><para>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> <link linkend="_struct_leap_1_1_unity_1_1_pose_1a2d4f86a6cbde7e36020570737e7cb4b2">LerpUnclampedTimed</link> (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> a, float aTime, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> b, float bTime, float extrapolateTime)</para>

<para>As LerpUnclamped, but extrapolates using time values for a and b, and a target time at which to determine the extrapolated pose. </para>
</listitem>
            <listitem><para>static bool <link linkend="_struct_leap_1_1_unity_1_1_pose_1a0f9beeec0e5acd83e1405ba0915a563f">operator==</link> (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> a, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> b)</para>
</listitem>
            <listitem><para>static bool <link linkend="_struct_leap_1_1_unity_1_1_pose_1a5eb039dbc9e70537da843e3eb92adcb4">operator !=</link> (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> a, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> b)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>Vector3 <link linkend="_struct_leap_1_1_unity_1_1_pose_1ad90ba514c97484e10d747d9bdf9b81a9">position</link></para>
</listitem>
            <listitem><para>Quaternion <link linkend="_struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad">rotation</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static readonly <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> <link linkend="_struct_leap_1_1_unity_1_1_pose_1ac98b12ebae014198abed5894475be71b">identity</link> = new <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>(Vector3.zero, Quaternion.identity)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Properties    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> <link linkend="_struct_leap_1_1_unity_1_1_pose_1a223dfc83da978c0ac8f02683acbdc070">inverse</link><computeroutput> [get]</computeroutput>
</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A position and rotation. You can multiply two poses; this acts like Matrix4x4 multiplication, but Poses always have unit scale. </para>


<para>
Definition at line <link linkend="__pose_8cs_source_1l00020">20</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a5e5882a2d009bc83f987a5b82d1c4f17"/>    <section>
    <title>Pose()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>Pose</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>Pose</secondary></indexterm>
<para><computeroutput>Leap.Unity.Pose.Pose (Vector3 position)</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00025">25</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a2762b68801a572f5b4e2b3afecaa1439"/>    <section>
    <title>Pose()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>Pose</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>Pose</secondary></indexterm>
<para><computeroutput>Leap.Unity.Pose.Pose (Quaternion rotation)</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00027">27</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a5443bf51e7acbf3227e577a350c910a8"/>    <section>
    <title>Pose()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>Pose</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>Pose</secondary></indexterm>
<para><computeroutput>Leap.Unity.Pose.Pose (Vector3 position, Quaternion rotation)</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00029">29</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a91aece63d4aecbb41e9af8cf2795c63a"/>    <section>
    <title>ApproxEquals()</title>
<indexterm><primary>ApproxEquals</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>ApproxEquals</secondary></indexterm>
<para><computeroutput>bool Leap.Unity.Pose.ApproxEquals (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> other)</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00072">72</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1ac1e5f3546934ffb7f8935240403eb382"/>    <section>
    <title>Equals()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Equals</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>Equals</secondary></indexterm>
<para><computeroutput>override bool Leap.Unity.Pose.Equals (object obj)</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00117">117</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a8482a9c3754c412fd00ed41511343a12"/>    <section>
    <title>Equals()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Equals</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>Equals</secondary></indexterm>
<para><computeroutput>bool Leap.Unity.Pose.Equals (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> other)</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00121">121</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a6a907351d0a69845338c3464a6658d8b"/>    <section>
    <title>GetHashCode()</title>
<indexterm><primary>GetHashCode</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>GetHashCode</secondary></indexterm>
<para><computeroutput>override int Leap.Unity.Pose.GetHashCode ( )</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00125">125</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1aac1241e7aec5379dc1aa001526532016"/>    <section>
    <title>Lerp()</title>
<indexterm><primary>Lerp</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>Lerp</secondary></indexterm>
<para><computeroutput>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> Leap.Unity.Pose.Lerp (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> a, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> b, float t)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Returns a pose interpolated (Lerp for position, Slerp, NOT Lerp for rotation) between a and b by t from 0 to 1. This method clamps t between 0 and 1; if extrapolation is desired, see Extrapolate. </para>
</para>
<para>
Definition at line <link linkend="__pose_8cs_source_1l00081">81</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a4a16c9cf3281db86bdb0160d80b4cf3a"/>    <section>
    <title>LerpUnclamped()</title>
<indexterm><primary>LerpUnclamped</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>LerpUnclamped</secondary></indexterm>
<para><computeroutput>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> Leap.Unity.Pose.LerpUnclamped (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> a, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> b, float t)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>As Lerp, but doesn&apos;t clamp t between 0 and 1. Values above one extrapolate forwards beyond b, while values less than zero extrapolate backwards past a. </para>
</para>
<para>
Definition at line <link linkend="__pose_8cs_source_1l00092">92</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a2d4f86a6cbde7e36020570737e7cb4b2"/>    <section>
    <title>LerpUnclampedTimed()</title>
<indexterm><primary>LerpUnclampedTimed</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>LerpUnclampedTimed</secondary></indexterm>
<para><computeroutput>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> Leap.Unity.Pose.LerpUnclampedTimed (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> a, float aTime, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> b, float bTime, float extrapolateTime)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>As LerpUnclamped, but extrapolates using time values for a and b, and a target time at which to determine the extrapolated pose. </para>
</para>
<para>
Definition at line <link linkend="__pose_8cs_source_1l00101">101</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a5eb039dbc9e70537da843e3eb92adcb4"/>    <section>
    <title>operator !=()</title>
<indexterm><primary>operator !=</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>operator !=</secondary></indexterm>
<para><computeroutput>static bool Leap.Unity.Pose.operator != (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> a, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> b)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00136">136</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1adc1395f4c9a4caef84c6986ce49c7ab7"/>    <section>
    <title>operator *()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator *</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>operator *</secondary></indexterm>
<para><computeroutput>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> Leap.Unity.Pose.operator * (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> A, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> B)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Returns <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> B transformed by <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> A, like a transform hierarchy with A as the parent of B. </para>
</para>
<para>
Definition at line <link linkend="__pose_8cs_source_1l00047">47</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a1f7c15fc1732e76b76068aa316f58dbd"/>    <section>
    <title>operator *()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator *</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>operator *</secondary></indexterm>
<para><computeroutput>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> Leap.Unity.Pose.operator * (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> pose, Vector3 localPosition)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Transforms the right-hand-side Vector3 as a local-space position into world space as if this <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> were its reference frame. </para>
</para>
<para>
Definition at line <link linkend="__pose_8cs_source_1l00067">67</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a26dee98a2b5f124aad5f1c56c21a5e1b"/>    <section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput>static <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> Leap.Unity.Pose.operator+ (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> A, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> B)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Returns the accumulation of the two poses: The positions summed, and with rotation A.rotation * B.rotation. Note that this accumulates the poses without interpreting either pose as a parent space of the other; but also beware that rotations are noncommutative, so this operation is also noncommutative. </para>
</para>
<para>
Definition at line <link linkend="__pose_8cs_source_1l00058">58</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a0f9beeec0e5acd83e1405ba0915a563f"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>static bool Leap.Unity.Pose.operator== (<link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> a, <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> b)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00132">132</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a3e16f8168410ebf2585350a36b058a65"/>    <section>
    <title>ToString()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ToString</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>ToString</secondary></indexterm>
<para><computeroutput>override string Leap.Unity.Pose.ToString ( )</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00107">107</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a806409523b1d9b8325e0c58d660304a7"/>    <section>
    <title>ToString()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ToString</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>ToString</secondary></indexterm>
<para><computeroutput>string Leap.Unity.Pose.ToString (string format)</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00112">112</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1ac98b12ebae014198abed5894475be71b"/>    <section>
    <title>identity</title>
<indexterm><primary>identity</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>identity</secondary></indexterm>
<para><computeroutput>readonly <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> Leap.Unity.Pose.identity = new <link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link>(Vector3.zero, Quaternion.identity)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00034">34</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1ad90ba514c97484e10d747d9bdf9b81a9"/>    <section>
    <title>position</title>
<indexterm><primary>position</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>position</secondary></indexterm>
<para><computeroutput>Vector3 Leap.Unity.Pose.position</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00022">22</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
    </section><anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad"/>    <section>
    <title>rotation</title>
<indexterm><primary>rotation</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>rotation</secondary></indexterm>
<para><computeroutput>Quaternion Leap.Unity.Pose.rotation</computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00023">23</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
</section>
</section>
<section>
<title>Property Documentation</title>
<anchor xml:id="_struct_leap_1_1_unity_1_1_pose_1a223dfc83da978c0ac8f02683acbdc070"/>    <section>
    <title>inverse</title>
<indexterm><primary>inverse</primary><secondary>Leap.Unity.Pose</secondary></indexterm>
<indexterm><primary>Leap.Unity.Pose</primary><secondary>inverse</secondary></indexterm>
<para><computeroutput><link linkend="_struct_leap_1_1_unity_1_1_pose">Pose</link> Leap.Unity.Pose.inverse<computeroutput>[get]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__pose_8cs_source_1l00036">36</link> of file <link linkend="__pose_8cs_source">Pose.cs</link>.</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/<link linkend="__pose_8cs">Pose.cs</link></section>
</section>
