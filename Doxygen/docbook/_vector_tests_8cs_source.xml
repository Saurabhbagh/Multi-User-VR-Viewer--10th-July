<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__vector_tests_8cs_source">
<title>VectorTests.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Editor/Tests/VectorTests.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00011 <emphasis role="keyword">using</emphasis>&#32;System;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_leap_c_sharp_1_1_tests">Leap.LeapCSharp.Tests</link>&#32;{
00014 &#32;&#32;[TestFixture()]
<anchor xml:id="__vector_tests_8cs_source_1l00015"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests">00015</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests">VectorTests</link>&#32;{
00016 &#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;thisVector&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>;
00017 &#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;thatVector&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>;
00018 &#32;&#32;&#32;&#32;<emphasis role="comment">//Vector&#32;otherVector&#32;=&#32;Vector.Left;</emphasis>
00019 
00020 &#32;&#32;&#32;&#32;[OneTimeSetUp]
<anchor xml:id="__vector_tests_8cs_source_1l00021"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a0c48c6a5ba72b700beb775313918c769">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a0c48c6a5ba72b700beb775313918c769">Init</link>()&#32;{&#32;}
00022 
00023 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00024"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1af9b57edc72c60333e898e660a0e0591e">00024</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1af9b57edc72c60333e898e660a0e0591e">Vector_Up</link>()&#32;{
00025 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>;
00026 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00027 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00028 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00029 &#32;&#32;&#32;&#32;}
00030 
00031 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00032"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6159c18ccab6432095cc32bdb920ca13">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6159c18ccab6432095cc32bdb920ca13">Vector_Down</link>()&#32;{
00033 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17">Down</link>;
00034 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00035 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(-1,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00036 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00037 &#32;&#32;&#32;&#32;}
00038 
00039 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00040"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6ea9133db5ccbd844a43c021847ca18b">00040</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6ea9133db5ccbd844a43c021847ca18b">Vector_Forward</link>()&#32;{
00041 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>;
00042 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00043 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00044 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(-1,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00045 &#32;&#32;&#32;&#32;}
00046 
00047 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00048"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a9da5309cbab72e326fb4804d30359474">00048</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a9da5309cbab72e326fb4804d30359474">Vector_Backward</link>()&#32;{
00049 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c">Backward</link>;
00050 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00051 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00052 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00053 &#32;&#32;&#32;&#32;}
00054 
00055 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00056"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a33f5f18600b7beafa3839a9710e280f2">00056</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a33f5f18600b7beafa3839a9710e280f2">Vector_Left</link>()&#32;{
00057 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881">Left</link>;
00058 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(-1,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00059 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00060 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00061 &#32;&#32;&#32;&#32;}
00062 
00063 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00064"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6ca70e2a038ac4363be3ee8190d81858">00064</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6ca70e2a038ac4363be3ee8190d81858">Vector_Right</link>()&#32;{
00065 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158">Right</link>;
00066 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00067 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00068 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00069 &#32;&#32;&#32;&#32;}
00070 
00071 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00072"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a10859fd21599d27a97aa2d435d07917f">00072</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a10859fd21599d27a97aa2d435d07917f">Vector_Zero</link>()&#32;{
00073 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a007c4ee68aa890118b7a2d24aa4d9a6b">Zero</link>;
00074 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00075 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00076 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00077 &#32;&#32;&#32;&#32;}
00078 
00079 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00080"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1aeeb569f385d4318f01ee10d3abacecee">00080</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1aeeb569f385d4318f01ee10d3abacecee">Vector_XAxis</link>()&#32;{
00081 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad62a202318bf591b431928859449b19c">XAxis</link>;
00082 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00083 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00084 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00085 &#32;&#32;&#32;&#32;}
00086 
00087 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00088"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a62558a7648adceef4485d9960aacf2a3">00088</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a62558a7648adceef4485d9960aacf2a3">Vector_YAxis</link>()&#32;{
00089 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1abf07de0f419b3de5776e046d35c0843e">YAxis</link>;
00090 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00091 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00092 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00093 &#32;&#32;&#32;&#32;}
00094 
00095 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00096"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1ab50fa4d4319b0a65fefff7ad9d7658be">00096</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1ab50fa4d4319b0a65fefff7ad9d7658be">Vector_ZAxis</link>()&#32;{
00097 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2b2f1a3a9334e812e832e3b1b6cd4384">ZAxis</link>;
00098 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00099 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00100 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00101 &#32;&#32;&#32;&#32;}
00102 
00103 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00104"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a4af3d975d3572ce1b986e04f33a0d3f1">00104</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a4af3d975d3572ce1b986e04f33a0d3f1">Vector_Constructor_1</link>()&#32;{
00105 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(0.5f,&#32;200.3f,&#32;67f);
00106 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0.5f,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00107 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(200.3f,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00108 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(67f,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00109 &#32;&#32;&#32;&#32;&#32;&#32;vec&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>();
00110 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00111 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00112 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00113 &#32;&#32;&#32;&#32;}
00114 
00115 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00116"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1aa0f506785e3ecc2850358f960168fed4">00116</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1aa0f506785e3ecc2850358f960168fed4">Vector_Constructor_2</link>()&#32;{
00117 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;baseVector&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(3,&#32;4,&#32;5);
00118 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(baseVector);
00119 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(3,&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>);
00120 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(4,&#32;vec.<link linkend="_struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d">y</link>,&#32;<emphasis role="stringliteral">&quot;y&quot;</emphasis>);
00121 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(5,&#32;vec.<link linkend="_struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658">z</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00122 &#32;&#32;&#32;&#32;&#32;&#32;vec.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>&#32;=&#32;12;
00123 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(3,&#32;baseVector.<link linkend="_struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828">x</link>,&#32;<emphasis role="stringliteral">&quot;z&quot;</emphasis>);
00124 &#32;&#32;&#32;&#32;}
00125 
00126 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00127"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a12b9148aad0254e6a0aa51f90d6ca07b">00127</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a12b9148aad0254e6a0aa51f90d6ca07b">Vector_Magnitude</link>()&#32;{
00128 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a007c4ee68aa890118b7a2d24aa4d9a6b">Zero</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;<emphasis role="stringliteral">&quot;Zero&#32;has&#32;0&#32;length&quot;</emphasis>);
00129 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;<emphasis role="stringliteral">&quot;Up&#32;has&#32;1&#32;length&quot;</emphasis>);
00130 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17">Down</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;<emphasis role="stringliteral">&quot;Down&#32;has&#32;1&#32;length&quot;</emphasis>);
00131 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881">Left</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;<emphasis role="stringliteral">&quot;Left&#32;has&#32;1&#32;length&quot;</emphasis>);
00132 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158">Right</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;<emphasis role="stringliteral">&quot;Right&#32;has&#32;1&#32;length&quot;</emphasis>);
00133 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;<emphasis role="stringliteral">&quot;Forward&#32;has&#32;1&#32;length&quot;</emphasis>);
00134 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c">Backward</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;<emphasis role="stringliteral">&quot;Backward&#32;has&#32;1&#32;length&quot;</emphasis>);
00135 
00136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;tooBig&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>).<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>;
00137 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(<emphasis role="keywordtype">float</emphasis>.IsInfinity(tooBig),&#32;<emphasis role="stringliteral">&quot;max&#32;value&#32;is&#32;too&#32;large&quot;</emphasis>);
00138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;tooSmall&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>).<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>;
00139 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(<emphasis role="keywordtype">float</emphasis>.IsInfinity(tooSmall),&#32;<emphasis role="stringliteral">&quot;min&#32;value&#32;is&#32;too&#32;large&quot;</emphasis>);
00140 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((<emphasis role="keywordtype">float</emphasis>)Math.Sqrt(3f),&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;1,&#32;1).<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;<emphasis role="stringliteral">&quot;(1,1,1)&#32;has&#32;sqrt(3)&#32;length&quot;</emphasis>);
00141 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((<emphasis role="keywordtype">float</emphasis>)Math.Sqrt(3f),&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-1,&#32;-1,&#32;-1).<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;<emphasis role="stringliteral">&quot;(-1,-1,-1)&#32;has&#32;sqrt(3)&#32;length&quot;</emphasis>);
00142 &#32;&#32;&#32;&#32;}
00143 
00144 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00145"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a31575f9e35f1950d4b0a5b6364e65bf8">00145</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a31575f9e35f1950d4b0a5b6364e65bf8">Vector_Magnitude_Squared</link>()&#32;{
00146 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a007c4ee68aa890118b7a2d24aa4d9a6b">Zero</link>.<link linkend="_struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143">MagnitudeSquared</link>,&#32;<emphasis role="stringliteral">&quot;Zero&#32;has&#32;0&#32;length&quot;</emphasis>);
00147 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>.<link linkend="_struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143">MagnitudeSquared</link>,&#32;<emphasis role="stringliteral">&quot;Up&#32;has&#32;1&#32;length&quot;</emphasis>);
00148 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17">Down</link>.<link linkend="_struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143">MagnitudeSquared</link>,&#32;<emphasis role="stringliteral">&quot;Down&#32;has&#32;1&#32;length&quot;</emphasis>);
00149 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881">Left</link>.<link linkend="_struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143">MagnitudeSquared</link>,&#32;<emphasis role="stringliteral">&quot;Left&#32;has&#32;1&#32;length&quot;</emphasis>);
00150 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158">Right</link>.<link linkend="_struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143">MagnitudeSquared</link>,&#32;<emphasis role="stringliteral">&quot;Right&#32;has&#32;1&#32;length&quot;</emphasis>);
00151 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>.<link linkend="_struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143">MagnitudeSquared</link>,&#32;<emphasis role="stringliteral">&quot;Forward&#32;has&#32;1&#32;length&quot;</emphasis>);
00152 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c">Backward</link>.<link linkend="_struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143">MagnitudeSquared</link>,&#32;<emphasis role="stringliteral">&quot;Backward&#32;has&#32;1&#32;length&quot;</emphasis>);
00153 
00154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;tooBig&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>).<link linkend="_struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143">MagnitudeSquared</link>;
00155 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(<emphasis role="keywordtype">float</emphasis>.IsInfinity(tooBig),&#32;<emphasis role="stringliteral">&quot;max&#32;value&#32;is&#32;too&#32;large&quot;</emphasis>);
00156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;tooSmall&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>).<link linkend="_struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143">MagnitudeSquared</link>;
00157 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(<emphasis role="keywordtype">float</emphasis>.IsInfinity(tooSmall),&#32;<emphasis role="stringliteral">&quot;min&#32;value&#32;is&#32;too&#32;large&quot;</emphasis>);
00158 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(3,&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;1,&#32;1).MagnitudeSquared,&#32;<emphasis role="stringliteral">&quot;(1,1,1)&#32;has&#32;3&#32;length&quot;</emphasis>);
00159 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(3,&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-1,&#32;-1,&#32;-1).MagnitudeSquared,&#32;<emphasis role="stringliteral">&quot;(-1,-1,-1)&#32;3&#32;length&quot;</emphasis>);
00160 &#32;&#32;&#32;&#32;}
00161 
00162 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00163"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1adaacfc7dece7179f4bf387f9c1071b5c">00163</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1adaacfc7dece7179f4bf387f9c1071b5c">Vector_DistanceTo</link>()&#32;{
00164 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;origin&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a007c4ee68aa890118b7a2d24aa4d9a6b">Zero</link>;
00165 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a007c4ee68aa890118b7a2d24aa4d9a6b">Zero</link>),&#32;<emphasis role="stringliteral">&quot;distance&#32;to&#32;0&#32;is&#32;0&quot;</emphasis>);
00166 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>),&#32;<emphasis role="stringliteral">&quot;distance&#32;to&#32;Up&#32;is&#32;1&quot;</emphasis>);
00167 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17">Down</link>),&#32;<emphasis role="stringliteral">&quot;distance&#32;to&#32;Down&#32;is&#32;1&quot;</emphasis>);
00168 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881">Left</link>),&#32;<emphasis role="stringliteral">&quot;distance&#32;to&#32;Left&#32;is&#32;1&quot;</emphasis>);
00169 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158">Right</link>),&#32;<emphasis role="stringliteral">&quot;distance&#32;to&#32;Right&#32;is&#32;1&quot;</emphasis>);
00170 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>),&#32;<emphasis role="stringliteral">&quot;distance&#32;to&#32;Forward&#32;is&#32;1&quot;</emphasis>);
00171 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c">Backward</link>),&#32;<emphasis role="stringliteral">&quot;distance&#32;to&#32;Backward&#32;is&#32;1&quot;</emphasis>);
00172 
00173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;tooBig&#32;=&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>));
00174 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(<emphasis role="keywordtype">float</emphasis>.IsInfinity(tooBig),&#32;<emphasis role="stringliteral">&quot;max&#32;value&#32;is&#32;too&#32;large&quot;</emphasis>);
00175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;tooSmall&#32;=&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>));
00176 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(<emphasis role="keywordtype">float</emphasis>.IsInfinity(tooSmall),&#32;<emphasis role="stringliteral">&quot;min&#32;value&#32;is&#32;too&#32;large&quot;</emphasis>);
00177 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((<emphasis role="keywordtype">float</emphasis>)Math.Sqrt(3f),&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;1,&#32;1)),&#32;<emphasis role="stringliteral">&quot;distance&#32;to&#32;(1,1,1)&#32;is&#32;sqrt(3)&quot;</emphasis>);
00178 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((<emphasis role="keywordtype">float</emphasis>)Math.Sqrt(3f),&#32;origin.<link linkend="_struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762">DistanceTo</link>(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-1,&#32;-1,&#32;-1)),&#32;<emphasis role="stringliteral">&quot;distance&#32;to&#32;(-1,-1,-1)&#32;is&#32;sqrt(3)&quot;</emphasis>);
00179 &#32;&#32;&#32;&#32;}
00180 
00181 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00182"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a437abd3b29a1475bd61d2ec6c6c27be4">00182</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a437abd3b29a1475bd61d2ec6c6c27be4">Vector_AngleTo</link>()&#32;{
00183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//The&#32;angle&#32;returned&#32;is&#32;always&#32;the&#32;smaller&#32;of&#32;the&#32;two&#32;conjugate&#32;angles.&#32;Thus&#32;A.angleTo(B)&#32;==&#32;B.angleTo(A)&#32;and&#32;is&#32;always&#32;a&#32;positive&#32;value&#32;less&#32;than&#32;or&#32;equal&#32;to&#32;pi&#32;radians&#32;(180&#32;degrees).</emphasis>
00184 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;-3,&#32;45).AngleTo(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;-3,&#32;45)),&#32;<emphasis role="stringliteral">&quot;angle&#32;to&#32;same&quot;</emphasis>);
00185 
00186 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(90&#32;*&#32;Constants.DEG_TO_RAD,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881">Left</link>),&#32;<emphasis role="stringliteral">&quot;Up-Left&quot;</emphasis>);
00187 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(90&#32;*&#32;Constants.DEG_TO_RAD,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158">Right</link>),&#32;<emphasis role="stringliteral">&quot;Up-Right&quot;</emphasis>);
00188 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(90&#32;*&#32;Constants.DEG_TO_RAD,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>),&#32;<emphasis role="stringliteral">&quot;Up-Forward&quot;</emphasis>);
00189 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(90&#32;*&#32;Constants.DEG_TO_RAD,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c">Backward</link>),&#32;<emphasis role="stringliteral">&quot;Up-Backward&quot;</emphasis>);
00190 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(90&#32;*&#32;Constants.DEG_TO_RAD,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17">Down</link>.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881">Left</link>),&#32;<emphasis role="stringliteral">&quot;Down-Left&quot;</emphasis>);
00191 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(90&#32;*&#32;Constants.DEG_TO_RAD,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17">Down</link>.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158">Right</link>),&#32;<emphasis role="stringliteral">&quot;Down-Right&quot;</emphasis>);
00192 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(90&#32;*&#32;Constants.DEG_TO_RAD,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17">Down</link>.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>),&#32;<emphasis role="stringliteral">&quot;Down-Forward&quot;</emphasis>);
00193 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(90&#32;*&#32;Constants.DEG_TO_RAD,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17">Down</link>.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c">Backward</link>),&#32;<emphasis role="stringliteral">&quot;Down-Backward&quot;</emphasis>);
00194 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_matrix">Matrix</link>&#32;rotator&#32;=&#32;<link linkend="_struct_leap_1_1_matrix">Matrix</link>.<link linkend="_struct_leap_1_1_matrix_1a54d2973a3dbf9699e9638f504768c81f">Identity</link>;
00195 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;baseVec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881">Left</link>;
00196 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(baseVec);
00197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
00198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;count&#32;&lt;=&#32;180;&#32;count++)&#32;{
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720">SetRotation</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>,&#32;count&#32;*&#32;Constants.DEG_TO_RAD);
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;rotated&#32;=&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6">TransformDirection</link>(vec);
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(count&#32;*&#32;Constants.DEG_TO_RAD,&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated),&#32;12&#32;*&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;0-180&#32;Angle&#32;is&#32;&quot;</emphasis>&#32;+&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated)&#32;*&#32;Constants.RAD_TO_DEG);
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(rotated.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(baseVec),&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated),&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;a&#32;to&#32;b&#32;==&#32;b&#32;to&#32;a&quot;</emphasis>);
00203 
00204 &#32;&#32;&#32;&#32;&#32;&#32;}
00205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;count&#32;&lt;=&#32;360;&#32;count++)&#32;{
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720">SetRotation</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>,&#32;count&#32;*&#32;Constants.DEG_TO_RAD);
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;rotated&#32;=&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6">TransformDirection</link>(vec);
00208 
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((360&#32;-&#32;count)&#32;*&#32;Constants.DEG_TO_RAD,&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated),&#32;12&#32;*&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;180-360&#32;Angle&#32;is&#32;&quot;</emphasis>&#32;+&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated)&#32;*&#32;Constants.RAD_TO_DEG);
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(rotated.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(baseVec),&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated),&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;a&#32;to&#32;b&#32;==&#32;b&#32;to&#32;a&quot;</emphasis>);
00211 &#32;&#32;&#32;&#32;&#32;&#32;}
00212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;count&#32;&lt;=&#32;540;&#32;count++)&#32;{
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720">SetRotation</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>,&#32;count&#32;*&#32;Constants.DEG_TO_RAD);
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;rotated&#32;=&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6">TransformDirection</link>(vec);
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((count&#32;-&#32;360)&#32;*&#32;Constants.DEG_TO_RAD,&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated),&#32;12&#32;*&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;360-540&#32;Angle&#32;is&#32;&quot;</emphasis>&#32;+&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated)&#32;*&#32;Constants.RAD_TO_DEG);
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(rotated.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(baseVec),&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated),&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;a&#32;to&#32;b&#32;==&#32;b&#32;to&#32;a&quot;</emphasis>);
00217 
00218 &#32;&#32;&#32;&#32;&#32;&#32;}
00219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;count&#32;&lt;=&#32;720;&#32;count++)&#32;{
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720">SetRotation</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>,&#32;count&#32;*&#32;Constants.DEG_TO_RAD);
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;rotated&#32;=&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6">TransformDirection</link>(vec);
00222 
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((720&#32;-&#32;count)&#32;*&#32;Constants.DEG_TO_RAD,&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated),&#32;12&#32;*&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;540-720&#32;Angle&#32;is&#32;&quot;</emphasis>&#32;+&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated)&#32;*&#32;Constants.RAD_TO_DEG);
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(rotated.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(baseVec),&#32;baseVec.<link linkend="_struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7">AngleTo</link>(rotated),&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;a&#32;to&#32;b&#32;==&#32;b&#32;to&#32;a&quot;</emphasis>);
00225 &#32;&#32;&#32;&#32;&#32;&#32;}
00226 &#32;&#32;&#32;&#32;}
00227 
00228 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00229"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a9dd3db807907c8a517f0cc825b0d38a2">00229</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a9dd3db807907c8a517f0cc825b0d38a2">Vector_Pitch</link>()&#32;{
00230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//If&#32;the&#32;vector&#32;points&#32;upward,&#32;the&#32;returned&#32;angle&#32;is&#32;between&#32;0&#32;and&#32;pi&#32;radians&#32;(180&#32;degrees);&#32;if&#32;it&#32;points&#32;downward,&#32;the&#32;angle&#32;is&#32;between&#32;0&#32;and&#32;-pi&#32;radians</emphasis>
00231 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_matrix">Matrix</link>&#32;rotator&#32;=&#32;<link linkend="_struct_leap_1_1_matrix">Matrix</link>.<link linkend="_struct_leap_1_1_matrix_1a54d2973a3dbf9699e9638f504768c81f">Identity</link>;
00232 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;baseVec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>;
00233 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(baseVec);
00234 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;axis&#32;=&#32;-<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad62a202318bf591b431928859449b19c">XAxis</link>;
00235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
00236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;count&#32;&lt;&#32;180;&#32;count++)&#32;{
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720">SetRotation</link>(axis,&#32;count&#32;*&#32;Constants.DEG_TO_RAD);
00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;rotated&#32;=&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6">TransformDirection</link>(vec);
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(count&#32;*&#32;Constants.DEG_TO_RAD,&#32;rotated.<link linkend="_struct_leap_1_1_vector_1acc5105f55edfdc7a3d5cc6cd6cb8dc8f">Pitch</link>,&#32;12&#32;*&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;0-180&#32;Pitch&#32;is&#32;&quot;</emphasis>&#32;+&#32;rotated.<link linkend="_struct_leap_1_1_vector_1acc5105f55edfdc7a3d5cc6cd6cb8dc8f">Pitch</link>&#32;*&#32;Constants.RAD_TO_DEG);
00240 &#32;&#32;&#32;&#32;&#32;&#32;}
00241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;count&#32;&lt;=&#32;360;&#32;count++)&#32;{
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720">SetRotation</link>(axis,&#32;count&#32;*&#32;Constants.DEG_TO_RAD);
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;rotated&#32;=&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6">TransformDirection</link>(vec);
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((-360&#32;+&#32;count)&#32;*&#32;Constants.DEG_TO_RAD,&#32;rotated.<link linkend="_struct_leap_1_1_vector_1acc5105f55edfdc7a3d5cc6cd6cb8dc8f">Pitch</link>,&#32;12&#32;*&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;180-360&#32;Pitch&#32;is&#32;&quot;</emphasis>&#32;+&#32;rotated.<link linkend="_struct_leap_1_1_vector_1acc5105f55edfdc7a3d5cc6cd6cb8dc8f">Pitch</link>&#32;*&#32;Constants.RAD_TO_DEG);
00245 &#32;&#32;&#32;&#32;&#32;&#32;}
00246 &#32;&#32;&#32;&#32;}
00247 
00248 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00249"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a2ffa62b560241d8c489d07c8f4d0fd39">00249</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a2ffa62b560241d8c489d07c8f4d0fd39">Vector_Yaw</link>()&#32;{
00250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//If&#32;the&#32;vector&#32;points&#32;to&#32;the&#32;right&#32;of&#32;the&#32;negative&#32;z-axis,&#32;then&#32;the&#32;returned&#32;angle&#32;is&#32;between&#32;0&#32;and&#32;pi&#32;radians&#32;(180&#32;degrees);&#32;if&#32;it&#32;points&#32;to&#32;the&#32;left,&#32;the&#32;angle&#32;is&#32;between&#32;0&#32;and&#32;-pi&#32;radians.</emphasis>
00251 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_matrix">Matrix</link>&#32;rotator&#32;=&#32;<link linkend="_struct_leap_1_1_matrix">Matrix</link>.<link linkend="_struct_leap_1_1_matrix_1a54d2973a3dbf9699e9638f504768c81f">Identity</link>;
00252 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;baseVec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>;
00253 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(baseVec);
00254 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;axis&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1abf07de0f419b3de5776e046d35c0843e">YAxis</link>;
00255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
00256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;count&#32;&lt;&#32;180;&#32;count++)&#32;{
00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720">SetRotation</link>(axis,&#32;count&#32;*&#32;Constants.DEG_TO_RAD);
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;rotated&#32;=&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6">TransformDirection</link>(vec);
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(count&#32;*&#32;Constants.DEG_TO_RAD,&#32;rotated.<link linkend="_struct_leap_1_1_vector_1ac6f5feaf332862e1ebc0d5b219e55eaa">Yaw</link>,&#32;12&#32;*&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;0-180&#32;Yaw&#32;is&#32;&quot;</emphasis>&#32;+&#32;rotated.<link linkend="_struct_leap_1_1_vector_1ac6f5feaf332862e1ebc0d5b219e55eaa">Yaw</link>&#32;*&#32;Constants.RAD_TO_DEG);
00260 &#32;&#32;&#32;&#32;&#32;&#32;}
00261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;count&#32;&lt;=&#32;360;&#32;count++)&#32;{
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720">SetRotation</link>(axis,&#32;count&#32;*&#32;Constants.DEG_TO_RAD);
00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;rotated&#32;=&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6">TransformDirection</link>(vec);
00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((-360&#32;+&#32;count)&#32;*&#32;Constants.DEG_TO_RAD,&#32;rotated.<link linkend="_struct_leap_1_1_vector_1ac6f5feaf332862e1ebc0d5b219e55eaa">Yaw</link>,&#32;12&#32;*&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;180-360&#32;Yaw&#32;is&#32;&quot;</emphasis>&#32;+&#32;rotated.<link linkend="_struct_leap_1_1_vector_1ac6f5feaf332862e1ebc0d5b219e55eaa">Yaw</link>&#32;*&#32;Constants.RAD_TO_DEG);
00265 &#32;&#32;&#32;&#32;&#32;&#32;}
00266 &#32;&#32;&#32;&#32;}
00267 
00268 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00269"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a824cd8e6c65420ec593e146e7027ca16">00269</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a824cd8e6c65420ec593e146e7027ca16">Vector_Roll</link>()&#32;{
00270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;vector&#32;points&#32;to&#32;the&#32;left&#32;of&#32;the&#32;y-axis,&#32;then&#32;the&#32;returned&#32;angle&#32;is&#32;between&#32;0&#32;and&#32;pi&#32;radians&#32;(180&#32;degrees);&#32;if&#32;it&#32;points&#32;to&#32;the&#32;right,&#32;the&#32;angle&#32;is&#32;between&#32;0&#32;and&#32;-pi&#32;radians.</emphasis>
00271 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_matrix">Matrix</link>&#32;rotator&#32;=&#32;<link linkend="_struct_leap_1_1_matrix">Matrix</link>.<link linkend="_struct_leap_1_1_matrix_1a54d2973a3dbf9699e9638f504768c81f">Identity</link>;
00272 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;baseVec&#32;=&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17">Down</link>;
00273 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;vec&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(baseVec);
00274 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;axis&#32;=&#32;-<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2b2f1a3a9334e812e832e3b1b6cd4384">ZAxis</link>;
00275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
00276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;count&#32;&lt;&#32;180;&#32;count++)&#32;{
00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720">SetRotation</link>(axis,&#32;count&#32;*&#32;Constants.DEG_TO_RAD);
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;rotated&#32;=&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6">TransformDirection</link>(vec);
00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(count&#32;*&#32;Constants.DEG_TO_RAD,&#32;rotated.<link linkend="_struct_leap_1_1_vector_1afa775e6c104537383493e027f6a462f7">Roll</link>,&#32;12&#32;*&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;0-180&#32;Roll&#32;is&#32;&quot;</emphasis>&#32;+&#32;rotated.<link linkend="_struct_leap_1_1_vector_1afa775e6c104537383493e027f6a462f7">Roll</link>&#32;*&#32;Constants.RAD_TO_DEG);
00280 &#32;&#32;&#32;&#32;&#32;&#32;}
00281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;count&#32;&lt;=&#32;360;&#32;count++)&#32;{
00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720">SetRotation</link>(axis,&#32;count&#32;*&#32;Constants.DEG_TO_RAD);
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;rotated&#32;=&#32;rotator.<link linkend="_struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6">TransformDirection</link>(vec);
00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((-360&#32;+&#32;count)&#32;*&#32;Constants.DEG_TO_RAD,&#32;rotated.<link linkend="_struct_leap_1_1_vector_1afa775e6c104537383493e027f6a462f7">Roll</link>,&#32;12&#32;*&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;180-360&#32;Roll&#32;is&#32;&quot;</emphasis>&#32;+&#32;rotated.<link linkend="_struct_leap_1_1_vector_1afa775e6c104537383493e027f6a462f7">Roll</link>&#32;*&#32;Constants.RAD_TO_DEG);
00285 &#32;&#32;&#32;&#32;&#32;&#32;}
00286 &#32;&#32;&#32;&#32;}
00287 
00288 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00289"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a95ef902b49770c997d4ac63c82469af4">00289</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a95ef902b49770c997d4ac63c82469af4">Vector_Dot</link>()&#32;{
00290 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>.<link linkend="_struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804">Dot</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525">Forward</link>),&#32;<emphasis role="stringliteral">&quot;Orthogonal&quot;</emphasis>);
00291 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>.<link linkend="_struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804">Dot</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>),&#32;<emphasis role="stringliteral">&quot;Parallel&quot;</emphasis>);
00292 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(-1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915">Up</link>.<link linkend="_struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804">Dot</link>(<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17">Down</link>),&#32;<emphasis role="stringliteral">&quot;Opposite&quot;</emphasis>);
00293 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c">Backward</link>.<link linkend="_struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804">Dot</link>(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(0,&#32;1,&#32;1)),&#32;<emphasis role="stringliteral">&quot;Hypoteneuse&#32;of&#32;right&#32;isoscelese&quot;</emphasis>);
00294 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual((<emphasis role="keywordtype">float</emphasis>)Math.Sqrt(2)&#32;/&#32;2,&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>.<link linkend="_struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c">Backward</link>.<link linkend="_struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804">Dot</link>(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(0,&#32;1,&#32;1).Normalized),&#32;<emphasis role="stringliteral">&quot;45&#32;degree&#32;unit&#32;vectors&quot;</emphasis>);
00295 &#32;&#32;&#32;&#32;}
00296 
00297 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00298"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a7ccc1b67410e1db3f7233d298713568d">00298</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a7ccc1b67410e1db3f7233d298713568d">Vector_Cross</link>()&#32;{
00299 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v1&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;2,&#32;3);
00300 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v2&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(3,&#32;2,&#32;1);
00301 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;expected&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-4,&#32;8,&#32;-4);
00302 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(expected,&#32;v1.<link linkend="_struct_leap_1_1_vector_1acdd326aa3bd6ac8eaf4d0c321db129cb">Cross</link>(v2),&#32;<emphasis role="stringliteral">&quot;v1&#32;x&#32;v2&quot;</emphasis>);
00303 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(-expected,&#32;v2.<link linkend="_struct_leap_1_1_vector_1acdd326aa3bd6ac8eaf4d0c321db129cb">Cross</link>(v1),&#32;<emphasis role="stringliteral">&quot;v1&#32;x&#32;v2&quot;</emphasis>);
00304 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;v1.<link linkend="_struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804">Dot</link>(v1.<link linkend="_struct_leap_1_1_vector_1acdd326aa3bd6ac8eaf4d0c321db129cb">Cross</link>(v2)),&#32;<emphasis role="stringliteral">&quot;Orthogonal&#32;with&#32;v1&quot;</emphasis>);
00305 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;v2.<link linkend="_struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804">Dot</link>(v1.<link linkend="_struct_leap_1_1_vector_1acdd326aa3bd6ac8eaf4d0c321db129cb">Cross</link>(v2)),&#32;<emphasis role="stringliteral">&quot;Orthogonal&#32;with&#32;v2&quot;</emphasis>);
00306 
00307 &#32;&#32;&#32;&#32;}
00308 
00309 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00310"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1af791ae55b3cdec41bf193f32f21d5995">00310</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1af791ae55b3cdec41bf193f32f21d5995">Vector_Normalized</link>()&#32;{
00311 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v1&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;2,&#32;3);
00312 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v2&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(0,&#32;0,&#32;0);
00313 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v3&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-4,&#32;8,&#32;-4);
00314 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v4&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(99999999,&#32;99999999,&#32;99999999);
00315 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v5&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-99999999,&#32;-99999999,&#32;-99999999);
00316 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1.0f,&#32;v1.<link linkend="_struct_leap_1_1_vector_1a14c14f9559420ad1f1a9e1b8884859c4">Normalized</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;small&quot;</emphasis>);
00317 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0.0f,&#32;v2.<link linkend="_struct_leap_1_1_vector_1a14c14f9559420ad1f1a9e1b8884859c4">Normalized</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;zero&quot;</emphasis>);
00318 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1.0f,&#32;v3.<link linkend="_struct_leap_1_1_vector_1a14c14f9559420ad1f1a9e1b8884859c4">Normalized</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;small&#32;negative&quot;</emphasis>);
00319 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1.0f,&#32;v4.<link linkend="_struct_leap_1_1_vector_1a14c14f9559420ad1f1a9e1b8884859c4">Normalized</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;large&quot;</emphasis>);
00320 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1.0f,&#32;v5.<link linkend="_struct_leap_1_1_vector_1a14c14f9559420ad1f1a9e1b8884859c4">Normalized</link>.<link linkend="_struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a">Magnitude</link>,&#32;Constants.EPSILON,&#32;<emphasis role="stringliteral">&quot;large&#32;negative&quot;</emphasis>);
00321 &#32;&#32;&#32;&#32;}
00322 
00323 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00324"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a831fe0bbe331497dd6be9b658aeb4198">00324</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a831fe0bbe331497dd6be9b658aeb4198">Vector_Plus</link>()&#32;{
00325 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v1&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;2,&#32;3);
00326 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v2&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-4,&#32;8,&#32;-4);
00327 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-3,&#32;10,&#32;-1),&#32;v1&#32;+&#32;v2);
00328 &#32;&#32;&#32;&#32;}
00329 
00330 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00331"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a458591b03503cc37248e456bf914b08c">00331</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a458591b03503cc37248e456bf914b08c">Vector_Minus</link>()&#32;{
00332 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v1&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;2,&#32;3);
00333 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v2&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-4,&#32;8,&#32;-4);
00334 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(5,&#32;-6,&#32;7),&#32;v1&#32;-&#32;v2);
00335 &#32;&#32;&#32;&#32;}
00336 
00337 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00338"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a779aa5664557f4570619d0efb6ea7506">00338</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a779aa5664557f4570619d0efb6ea7506">Vector_Negate</link>()&#32;{
00339 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v1&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;2,&#32;-3);
00340 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-1,&#32;-2,&#32;3),&#32;-v1);
00341 &#32;&#32;&#32;&#32;}
00342 
00343 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00344"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1abc55df5efcb4ca9db145115f877662df">00344</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1abc55df5efcb4ca9db145115f877662df">Vector_Times</link>()&#32;{
00345 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v1&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;2,&#32;-3);
00346 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(5.2f,&#32;10.4f,&#32;-15.6f),&#32;(v1&#32;*&#32;5.2f));
00347 &#32;&#32;&#32;&#32;}
00348 
00349 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00350"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1abcfe9f53b45373c49e54555a1a29af5b">00350</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1abcfe9f53b45373c49e54555a1a29af5b">Vector_Divide</link>()&#32;{
00351 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v1&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(25,&#32;150,&#32;-300);
00352 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(5f,&#32;30f,&#32;-60f),&#32;(v1&#32;/&#32;5.0f));
00353 &#32;&#32;&#32;&#32;}
00354 
00355 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00356"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1ad4a8f7fbb8f738bba7142e027446bcd5">00356</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1ad4a8f7fbb8f738bba7142e027446bcd5">Vector_Equals</link>()&#32;{
00357 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v1&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;2,&#32;3);
00358 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v2&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(0,&#32;0,&#32;0);
00359 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v3&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(1,&#32;2,&#32;3);
00360 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v1.<link linkend="_struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de">Equals</link>(v3),&#32;<emphasis role="stringliteral">&quot;simple&#32;integers&#32;1&quot;</emphasis>);
00361 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v3.<link linkend="_struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de">Equals</link>(v1),&#32;<emphasis role="stringliteral">&quot;simple&#32;integers&#32;2&quot;</emphasis>);
00362 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v1.<link linkend="_struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de">Equals</link>(v1),&#32;<emphasis role="stringliteral">&quot;simple&#32;integers&#32;3&quot;</emphasis>);
00363 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v1&#32;==&#32;v3,&#32;<emphasis role="stringliteral">&quot;simple&#32;integers&#32;4&quot;</emphasis>);
00364 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v3&#32;==&#32;v1,&#32;<emphasis role="stringliteral">&quot;simple&#32;integers&#32;5&quot;</emphasis>);
00365 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(v1.<link linkend="_struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de">Equals</link>(v2),&#32;<emphasis role="stringliteral">&quot;simple&#32;integers&#32;6&quot;</emphasis>);
00366 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(v2.<link linkend="_struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de">Equals</link>(v1),&#32;<emphasis role="stringliteral">&quot;simple&#32;integers&#32;7&quot;</emphasis>);
00367 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(v1&#32;==&#32;v2,&#32;<emphasis role="stringliteral">&quot;simple&#32;integers&#32;8&quot;</emphasis>);
00368 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(v2&#32;==&#32;v1,&#32;<emphasis role="stringliteral">&quot;simple&#32;integers&#32;9&quot;</emphasis>);
00369 
00370 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v4&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>);
00371 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v5&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_min_value">MinValue</link>);
00372 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v4&#32;==&#32;v5,&#32;<emphasis role="stringliteral">&quot;MinValue&quot;</emphasis>);
00373 
00374 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v6&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>);
00375 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v7&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>);
00376 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v6&#32;==&#32;v7,&#32;<emphasis role="stringliteral">&quot;MaxValue&quot;</emphasis>);
00377 
00378 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v8&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.Epsilon,&#32;<emphasis role="keywordtype">float</emphasis>.Epsilon,&#32;<emphasis role="keywordtype">float</emphasis>.Epsilon);
00379 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v9&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.Epsilon,&#32;<emphasis role="keywordtype">float</emphasis>.Epsilon,&#32;<emphasis role="keywordtype">float</emphasis>.Epsilon);
00380 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v8&#32;==&#32;v9,&#32;<emphasis role="stringliteral">&quot;Epsilon&quot;</emphasis>);
00381 
00382 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v10&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.PositiveInfinity,&#32;<emphasis role="keywordtype">float</emphasis>.PositiveInfinity,&#32;<emphasis role="keywordtype">float</emphasis>.NegativeInfinity);
00383 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v11&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.PositiveInfinity,&#32;<emphasis role="keywordtype">float</emphasis>.PositiveInfinity,&#32;<emphasis role="keywordtype">float</emphasis>.NegativeInfinity);
00384 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v10&#32;==&#32;v11,&#32;<emphasis role="stringliteral">&quot;Infinity&quot;</emphasis>);
00385 
00386 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v12&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.NaN,&#32;<emphasis role="keywordtype">float</emphasis>.NaN,&#32;<emphasis role="keywordtype">float</emphasis>.NaN);
00387 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v13&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.NaN,&#32;<emphasis role="keywordtype">float</emphasis>.NaN,&#32;<emphasis role="keywordtype">float</emphasis>.NaN);
00388 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(v12&#32;==&#32;v13,&#32;<emphasis role="stringliteral">&quot;NaN&quot;</emphasis>);
00389 
00390 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v14&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(5&#32;+&#32;<emphasis role="keywordtype">float</emphasis>.Epsilon,&#32;-124.34f&#32;+&#32;<emphasis role="keywordtype">float</emphasis>.Epsilon,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>&#32;-&#32;<emphasis role="keywordtype">float</emphasis>.Epsilon);
00391 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v15&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(5&#32;-&#32;<emphasis role="keywordtype">float</emphasis>.Epsilon,&#32;-124.34f&#32;-&#32;<emphasis role="keywordtype">float</emphasis>.Epsilon,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>);
00392 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v14&#32;==&#32;v15,&#32;<emphasis role="stringliteral">&quot;+-&#32;Epsilon&quot;</emphasis>);
00393 
00394 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v16&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(5&#32;+&#32;Constants.EPSILON,&#32;-124.34f&#32;+&#32;Constants.EPSILON,&#32;<emphasis role="keywordtype">float</emphasis>.MaxValue&#32;-&#32;Constants.EPSILON);
00395 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v17&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(5&#32;-&#32;Constants.EPSILON,&#32;-124.34f&#32;-&#32;Constants.EPSILON,&#32;<emphasis role="keywordtype">float</emphasis>.MaxValue);
00396 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(v16&#32;==&#32;v17,&#32;<emphasis role="stringliteral">&quot;+-&#32;Leap&#32;Epsilon&quot;</emphasis>);
00397 
00398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;epsilonMultiplier&#32;=&#32;11;&#32;<emphasis role="comment">//TODO&#32;figure&#32;out&#32;why&#32;this&#32;error&#32;is&#32;so&#32;high</emphasis>
00399 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v18&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(5&#32;+&#32;Constants.EPSILON&#32;*&#32;epsilonMultiplier,&#32;-124.34f&#32;+&#32;Constants.EPSILON&#32;*&#32;epsilonMultiplier,&#32;<emphasis role="keywordtype">float</emphasis>.MaxValue&#32;-&#32;Constants.EPSILON&#32;*&#32;epsilonMultiplier);
00400 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;v19&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(5,&#32;-124.34f,&#32;<emphasis role="keywordtype">float</emphasis>.<link linkend="_class_leap_1_1_unity_1_1_attributes_1_1_max_value">MaxValue</link>);
00401 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(v18&#32;==&#32;v19,&#32;<emphasis role="stringliteral">&quot;Diff&#32;&gt;&#32;Leap&#32;Epsilon&quot;</emphasis>);
00402 
00403 &#32;&#32;&#32;&#32;}
00404 
00405 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00406"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1afc10e5b06ee3c3f8f8c280c3ca7b11ae">00406</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1afc10e5b06ee3c3f8f8c280c3ca7b11ae">Vector_NotEqual</link>()&#32;{
00407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!!!Vector_NotEqual</emphasis>
00408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;vectorsNotEqual&#32;=&#32;thisVector&#32;!=&#32;thatVector;
00409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!!!END</emphasis>
00410 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(vectorsNotEqual);
00411 &#32;&#32;&#32;&#32;}
00412 
00413 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__vector_tests_8cs_source_1l00414"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a3d2ff59f317b5b2b3dd2bed12517cff9">00414</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a3d2ff59f317b5b2b3dd2bed12517cff9">Vector_IsValid</link>()&#32;{
00415 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;xInvalid&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.NaN,&#32;3f,&#32;45f);
00416 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(xInvalid.<link linkend="_struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb">IsValid</link>());
00417 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;yInvalid&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(32.1f,&#32;<emphasis role="keywordtype">float</emphasis>.NaN,&#32;45f);
00418 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(yInvalid.<link linkend="_struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb">IsValid</link>());
00419 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;zInvalid&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-345.32f,&#32;-78.67f,&#32;<emphasis role="keywordtype">float</emphasis>.NaN);
00420 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(zInvalid.<link linkend="_struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb">IsValid</link>());
00421 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;xInfinite&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.PositiveInfinity,&#32;3f,&#32;45f);
00422 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(xInfinite.<link linkend="_struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb">IsValid</link>());
00423 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;yInfinite&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(-23.7f,&#32;<emphasis role="keywordtype">float</emphasis>.NegativeInfinity,&#32;3f);
00424 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(yInfinite.<link linkend="_struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb">IsValid</link>());
00425 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;zInfinite&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(3f,&#32;45f,&#32;<emphasis role="keywordtype">float</emphasis>.PositiveInfinity);
00426 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(zInfinite.<link linkend="_struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb">IsValid</link>());
00427 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>&#32;mixed&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_leap_1_1_vector">Vector</link>(<emphasis role="keywordtype">float</emphasis>.NaN,&#32;<emphasis role="keywordtype">float</emphasis>.NegativeInfinity,&#32;<emphasis role="keywordtype">float</emphasis>.PositiveInfinity);
00428 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(mixed.<link linkend="_struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb">IsValid</link>());
00429 &#32;&#32;&#32;&#32;}
00430 &#32;&#32;}
00431 }
00432 
</programlisting></section>
