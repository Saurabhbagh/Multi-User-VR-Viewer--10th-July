<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__serializable_hash_set_editor_8cs_source">
<title>SerializableHashSetEditor.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Editor/SerializableHashSetEditor.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00012 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00013 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_editor">UnityEditor</link>;
00014 <emphasis role="keyword">using</emphasis>&#32;UnityEditorInternal;
00015 
00016 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00017 
00018 &#32;&#32;[CustomPropertyDrawer(typeof(SerializableHashSetBase),&#32;useForChildren:&#32;<emphasis role="keyword">true</emphasis>)]
<anchor xml:id="__serializable_hash_set_editor_8cs_source_1l00019"/><link linkend="_class_leap_1_1_unity_1_1_serializable_hash_set_editor">00019</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_serializable_hash_set_editor">SerializableHashSetEditor</link>&#32;:&#32;PropertyDrawer&#32;{
00020 
00021 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;ReorderableList&#32;_list;
00022 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;SerializedProperty&#32;_currProperty;
00023 
00024 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;Value&gt;&#32;_values&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Value&gt;();
00025 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>Value&#32;{
00026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index;
00027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDuplicate;
00028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;SerializedProperty&#32;value;
00029 
00030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Value(<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDuplicate,&#32;SerializedProperty&#32;value)&#32;{
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.index&#32;=&#32;index;
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.isDuplicate&#32;=&#32;isDuplicate;
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.value&#32;=&#32;value;
00034 &#32;&#32;&#32;&#32;&#32;&#32;}
00035 &#32;&#32;&#32;&#32;}
00036 
<anchor xml:id="__serializable_hash_set_editor_8cs_source_1l00037"/><link linkend="_class_leap_1_1_unity_1_1_serializable_hash_set_editor_1a2878791dde8b3aabe712d9ba3526749c">00037</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_serializable_hash_set_editor_1a2878791dde8b3aabe712d9ba3526749c">SerializableHashSetEditor</link>()&#32;{
00038 &#32;&#32;&#32;&#32;&#32;&#32;_list&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ReorderableList(_values,&#32;typeof(Value),
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;draggable:&#32;<emphasis role="keyword">true</emphasis>,
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;displayHeader:&#32;<emphasis role="keyword">true</emphasis>,
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;displayAddButton:&#32;<emphasis role="keyword">true</emphasis>,
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;displayRemoveButton:&#32;<emphasis role="keyword">true</emphasis>);
00043 
00044 &#32;&#32;&#32;&#32;&#32;&#32;_list.drawElementCallback&#32;=&#32;drawElementCallback;
00045 &#32;&#32;&#32;&#32;&#32;&#32;_list.elementHeightCallback&#32;=&#32;elementHeightCallback;
00046 &#32;&#32;&#32;&#32;&#32;&#32;_list.drawHeaderCallback&#32;=&#32;drawHeader;
00047 &#32;&#32;&#32;&#32;&#32;&#32;_list.onAddCallback&#32;=&#32;onAddCallback;
00048 &#32;&#32;&#32;&#32;&#32;&#32;_list.onRemoveCallback&#32;=&#32;onRemoveCallback;
00049 &#32;&#32;&#32;&#32;&#32;&#32;_list.onReorderCallback&#32;=&#32;onReorderCallback;
00050 &#32;&#32;&#32;&#32;}
00051 
<anchor xml:id="__serializable_hash_set_editor_8cs_source_1l00052"/><link linkend="_class_leap_1_1_unity_1_1_serializable_hash_set_editor_1adf9a92009da4406039ef0753826d173f">00052</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_serializable_hash_set_editor_1adf9a92009da4406039ef0753826d173f">OnGUI</link>(Rect&#32;position,&#32;SerializedProperty&#32;property,&#32;GUIContent&#32;label)&#32;{
00053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(property.hasMultipleDifferentValues)&#32;{
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.Box(position,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.LabelField(position,&#32;<emphasis role="stringliteral">&quot;Multi-object&#32;editing&#32;not&#32;supported&#32;for&#32;Serialized&#32;HashSets.&quot;</emphasis>,&#32;EditorStyles.miniLabel);
00056 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_currProperty&#32;=&#32;property;
00058 
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(property);
00060 
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUIUtility.labelWidth&#32;/=&#32;2;
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_list.DoList(position);
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUIUtility.labelWidth&#32;*=&#32;2;
00064 &#32;&#32;&#32;&#32;&#32;&#32;}
00065 &#32;&#32;&#32;&#32;}
00066 
<anchor xml:id="__serializable_hash_set_editor_8cs_source_1l00067"/><link linkend="_class_leap_1_1_unity_1_1_serializable_hash_set_editor_1aaf4c9ebaf338b9386ca150b875dbb432">00067</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_serializable_hash_set_editor_1aaf4c9ebaf338b9386ca150b875dbb432">GetPropertyHeight</link>(SerializedProperty&#32;property,&#32;GUIContent&#32;label)&#32;{
00068 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(property.hasMultipleDifferentValues)&#32;{
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;EditorGUIUtility.singleLineHeight;
00070 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(property);
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_list.GetHeight();
00073 &#32;&#32;&#32;&#32;&#32;&#32;}
00074 &#32;&#32;&#32;&#32;}
00075 
00076 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;updatePairsFromProperty(SerializedProperty&#32;property)&#32;{
00077 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;values&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;_values&quot;</emphasis>);
00078 
00079 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;dup&#32;=&#32;(fieldInfo.GetValue(property.serializedObject.targetObject)&#32;as&#32;<link linkend="_interface_leap_1_1_unity_1_1_i_can_report_duplicate_information">ICanReportDuplicateInformation</link>).GetDuplicationInformation();
00080 
00081 &#32;&#32;&#32;&#32;&#32;&#32;_values.Clear();
00082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;values.arraySize;
00083 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)&#32;{
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;value&#32;=&#32;values.GetArrayElementAtIndex(i);
00085 
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDup&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;dup.Count)&#32;{
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isDup&#32;=&#32;dup[i]&#32;&gt;&#32;1;
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00090 
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_values.Add(<emphasis role="keyword">new</emphasis>&#32;Value(i,&#32;isDup,&#32;value));
00092 &#32;&#32;&#32;&#32;&#32;&#32;}
00093 &#32;&#32;&#32;&#32;}
00094 
00095 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;drawHeader(Rect&#32;rect)&#32;{
00096 &#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.LabelField(rect,&#32;_currProperty.displayName);
00097 &#32;&#32;&#32;&#32;&#32;&#32;rect.x&#32;+=&#32;rect.width&#32;-&#32;110;
00098 &#32;&#32;&#32;&#32;&#32;&#32;rect.width&#32;=&#32;110;
00099 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GUI.Button(rect,&#32;<emphasis role="stringliteral">&quot;Clear&#32;Duplicates&quot;</emphasis>))&#32;{
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;markDirty(_currProperty);
00101 
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.RecordObject(_currProperty.serializedObject.targetObject,&#32;<emphasis role="stringliteral">&quot;Cleared&#32;duplicates&quot;</emphasis>);
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(fieldInfo.GetValue(_currProperty.serializedObject.targetObject)&#32;as&#32;ICanReportDuplicateInformation).ClearDuplicates();
00104 
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_currProperty.serializedObject.Update();
00106 
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;markDirty(_currProperty);
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(_currProperty);
00109 &#32;&#32;&#32;&#32;&#32;&#32;}
00110 &#32;&#32;&#32;&#32;}
00111 
00112 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;drawElementCallback(Rect&#32;rect,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isActive,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFocused)&#32;{
00113 &#32;&#32;&#32;&#32;&#32;&#32;Value&#32;value&#32;=&#32;_values[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>];
00114 
00115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value.isDuplicate)&#32;{
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.contentColor&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Color(1,&#32;0.7f,&#32;0);
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.color&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Color(1,&#32;0.7f,&#32;0.5f);
00118 &#32;&#32;&#32;&#32;&#32;&#32;}
00119 
00120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value.value.propertyType&#32;==&#32;SerializedPropertyType.ObjectReference&#32;&amp;&amp;&#32;value.value.objectReferenceValue&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.contentColor&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Color(1,&#32;0,&#32;0);
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.color&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Color(1,&#32;0,&#32;0);
00123 &#32;&#32;&#32;&#32;&#32;&#32;}
00124 
00125 &#32;&#32;&#32;&#32;&#32;&#32;drawProp(value.value,&#32;rect);
00126 
00127 &#32;&#32;&#32;&#32;&#32;&#32;GUI.contentColor&#32;=&#32;Color.white;
00128 &#32;&#32;&#32;&#32;&#32;&#32;GUI.color&#32;=&#32;Color.white;
00129 &#32;&#32;&#32;&#32;&#32;&#32;GUI.backgroundColor&#32;=&#32;Color.white;
00130 &#32;&#32;&#32;&#32;}
00131 
00132 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;onAddCallback(ReorderableList&#32;list)&#32;{
00133 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;values&#32;=&#32;_currProperty.FindPropertyRelative(<emphasis role="stringliteral">&quot;_values&quot;</emphasis>);
00134 
00135 &#32;&#32;&#32;&#32;&#32;&#32;values.arraySize++;
00136 
00137 &#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(_currProperty);
00138 &#32;&#32;&#32;&#32;}
00139 
00140 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;onRemoveCallback(ReorderableList&#32;list)&#32;{
00141 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;values&#32;=&#32;_currProperty.FindPropertyRelative(<emphasis role="stringliteral">&quot;_values&quot;</emphasis>);
00142 
00143 &#32;&#32;&#32;&#32;&#32;&#32;actuallyDeleteAt(values,&#32;list.index);
00144 
00145 &#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(_currProperty);
00146 &#32;&#32;&#32;&#32;}
00147 
00148 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;onReorderCallback(ReorderableList&#32;list)&#32;{
00149 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;values&#32;=&#32;_currProperty.FindPropertyRelative(<emphasis role="stringliteral">&quot;_values&quot;</emphasis>);
00150 
00151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;startIndex&#32;=&#32;-1,&#32;endIndex&#32;=&#32;-1;
00152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isForward&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00153 
00154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;_values.Count;&#32;i++)&#32;{
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;_values[i].index)&#32;{
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_values[i].index&#32;-&#32;i&#32;&gt;&#32;1)&#32;{
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isForward&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startIndex&#32;=&#32;i;
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00162 &#32;&#32;&#32;&#32;&#32;&#32;}
00163 
00164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;_values.Count;&#32;i--&#32;!=&#32;0;)&#32;{
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;_values[i].index)&#32;{
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endIndex&#32;=&#32;i;
00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00169 &#32;&#32;&#32;&#32;&#32;&#32;}
00170 
00171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isForward)&#32;{
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.MoveArrayElement(startIndex,&#32;endIndex);
00173 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.MoveArrayElement(endIndex,&#32;startIndex);
00175 &#32;&#32;&#32;&#32;&#32;&#32;}
00176 
00177 &#32;&#32;&#32;&#32;&#32;&#32;updatePairsFromProperty(_currProperty);
00178 &#32;&#32;&#32;&#32;}
00179 
00180 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;elementHeightCallback(<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
00181 &#32;&#32;&#32;&#32;&#32;&#32;Value&#32;value&#32;=&#32;_values[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>];
00182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;size&#32;=&#32;getSize(value.value);
00183 &#32;&#32;&#32;&#32;&#32;&#32;_list.elementHeight&#32;=&#32;size;
00184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;size;
00185 &#32;&#32;&#32;&#32;}
00186 
00187 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;getSize(SerializedProperty&#32;prop)&#32;{
00188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;size&#32;=&#32;0;
00189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prop.propertyType&#32;==&#32;SerializedPropertyType.Generic)&#32;{
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;copy&#32;=&#32;prop.Copy();
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;endProp&#32;=&#32;copy.GetEndProperty(<emphasis role="keyword">false</emphasis>);
00192 
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy.NextVisible(<emphasis role="keyword">true</emphasis>);
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!SerializedProperty.EqualContents(copy,&#32;endProp))&#32;{
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;EditorGUI.GetPropertyHeight(copy);
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy.NextVisible(<emphasis role="keyword">false</emphasis>);
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00198 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;EditorGUI.GetPropertyHeight(prop,&#32;GUIContent.none,&#32;<emphasis role="keyword">false</emphasis>);
00200 &#32;&#32;&#32;&#32;&#32;&#32;}
00201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;size;
00202 &#32;&#32;&#32;&#32;}
00203 
00204 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;drawProp(SerializedProperty&#32;prop,&#32;Rect&#32;r)&#32;{
00205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prop.propertyType&#32;==&#32;SerializedPropertyType.Generic)&#32;{
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;copy&#32;=&#32;prop.Copy();
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;endProp&#32;=&#32;copy.GetEndProperty(<emphasis role="keyword">false</emphasis>);
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy.NextVisible(<emphasis role="keyword">true</emphasis>);
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!SerializedProperty.EqualContents(copy,&#32;endProp))&#32;{
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.height&#32;=&#32;EditorGUI.GetPropertyHeight(copy);
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.PropertyField(r,&#32;copy,&#32;<emphasis role="keyword">true</emphasis>);
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.y&#32;+=&#32;r.height;
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy.NextVisible(<emphasis role="keyword">false</emphasis>);
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00215 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.height&#32;=&#32;EditorGUI.GetPropertyHeight(prop);
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.PropertyField(r,&#32;prop,&#32;GUIContent.none,&#32;<emphasis role="keyword">false</emphasis>);
00218 &#32;&#32;&#32;&#32;&#32;&#32;}
00219 &#32;&#32;&#32;&#32;}
00220 
00221 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;markDirty(SerializedProperty&#32;property)&#32;{
00222 &#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;values&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;_values&quot;</emphasis>);
00223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size&#32;=&#32;values.arraySize;
00224 
00225 &#32;&#32;&#32;&#32;&#32;&#32;values.InsertArrayElementAtIndex(size);
00226 &#32;&#32;&#32;&#32;&#32;&#32;actuallyDeleteAt(values,&#32;size);
00227 &#32;&#32;&#32;&#32;}
00228 
00229 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;actuallyDeleteAt(SerializedProperty&#32;property,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
00230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;arraySize&#32;=&#32;<emphasis role="keyword">property</emphasis>.arraySize;
00231 
00232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(property.arraySize&#32;==&#32;arraySize)&#32;{
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.DeleteArrayElementAtIndex(index);
00234 &#32;&#32;&#32;&#32;&#32;&#32;}
00235 &#32;&#32;&#32;&#32;}
00236 &#32;&#32;}
00237 }
</programlisting></section>
