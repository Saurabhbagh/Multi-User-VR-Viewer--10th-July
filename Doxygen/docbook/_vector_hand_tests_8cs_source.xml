<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__vector_hand_tests_8cs_source">
<title>VectorHandTests.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Encoding/Editor/VectorHandTests.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System.Linq;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00012 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00013 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00014 
00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_tests">Leap.Unity.Tests</link>&#32;{
00016 &#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Encoding;
00017 
<anchor xml:id="__vector_hand_tests_8cs_source_1l00018"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_vector_hand_tests">00018</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_vector_hand_tests">VectorHandTests</link>&#32;{
00019 
00020 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__vector_hand_tests_8cs_source_1l00021"/><link linkend="_class_leap_1_1_unity_1_1_tests_1_1_vector_hand_tests_1aa23ec5c3ff8970cbc68558254b215d56">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_tests_1_1_vector_hand_tests_1aa23ec5c3ff8970cbc68558254b215d56">EncodeDecodeTest</link>()&#32;{
00022 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;TOLERANCE&#32;=&#32;0.01f;&#32;<emphasis role="comment">//1&#32;cm&#32;for&#32;all&#32;positions</emphasis>
00023 
00024 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_frame">Frame</link>&#32;frame&#32;=&#32;TestHandFactory.MakeTestFrame(0,&#32;includeLeftHand:&#32;<emphasis role="keyword">true</emphasis>,&#32;includeRightHand:&#32;<emphasis role="keyword">true</emphasis>,&#32;unitType:&#32;TestHandFactory.UnitType.UnityUnits);
00025 
00026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;hand&#32;<emphasis role="keywordflow">in</emphasis>&#32;frame.Hands)&#32;{
00027 
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes;
00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_encoding_1_1_vector_hand">VectorHand</link>&#32;vHand&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_encoding_1_1_vector_hand">VectorHand</link>();
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bytes&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[vHand.<link linkend="_class_leap_1_1_unity_1_1_encoding_1_1_vector_hand_1a43a43bf6a938dda526d2114392447bba">numBytesRequired</link>];
00032 
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Encode&#32;the&#32;hand&#32;into&#32;the&#32;vHand&#32;representation</emphasis>
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vHand.<link linkend="_class_leap_1_1_unity_1_1_encoding_1_1_vector_hand_1aa949217613221d04f753a3df29c5dd75">Encode</link>(hand);
00035 
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Then&#32;convert&#32;the&#32;vHand&#32;into&#32;a&#32;binary&#32;representation</emphasis>
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vHand.<link linkend="_class_leap_1_1_unity_1_1_encoding_1_1_vector_hand_1a05ef96613b46f48f93ac66fe23294b23">FillBytes</link>(bytes);
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00039 
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_hand">Hand</link>&#32;result;
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_unity_1_1_encoding_1_1_vector_hand">VectorHand</link>&#32;vHand&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_encoding_1_1_vector_hand">VectorHand</link>();
00043 
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Convert&#32;the&#32;binary&#32;representation&#32;back&#32;into&#32;a&#32;vHand</emphasis>
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;0;
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vHand.<link linkend="_class_leap_1_1_unity_1_1_encoding_1_1_vector_hand_1a06142cb2d22e73457ebfdfdbbe8329d6">ReadBytes</link>(bytes,&#32;ref&#32;offset);
00047 
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Decode&#32;the&#32;vHand&#32;back&#32;into&#32;a&#32;normal&#32;Leap&#32;Hand</emphasis>
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_hand">Hand</link>();
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vHand.<link linkend="_class_leap_1_1_unity_1_1_encoding_1_1_vector_hand_1ae9ced40bf71da643264a1b750bd52e35">Decode</link>(result);
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00052 
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That(result.<link linkend="_class_leap_1_1_hand_1a783d6adaec7c3f3422e70bba4480b39d">IsLeft</link>,&#32;Is.EqualTo(hand.IsLeft));
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That((result.<link linkend="_class_leap_1_1_hand_1aaf0940b9108e92c22e33b9c6cd32921a">PalmPosition</link>&#32;-&#32;hand.PalmPosition).Magnitude,&#32;Is.LessThan(TOLERANCE));
00055 
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;resultFinger&#32;<emphasis role="keywordflow">in</emphasis>&#32;result.Fingers)&#32;{
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;finger&#32;=&#32;hand.Fingers.Single(f&#32;=&gt;&#32;f.Type&#32;==&#32;resultFinger.Type);
00058 
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;4;&#32;i++)&#32;{
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>&#32;resultBone&#32;=&#32;resultFinger.bones[i];
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_bone">Bone</link>&#32;bone&#32;=&#32;finger.bones[i];
00062 
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That((resultBone.<link linkend="_class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7">NextJoint</link>&#32;-&#32;bone.<link linkend="_class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7">NextJoint</link>).Magnitude,&#32;Is.LessThan(TOLERANCE));
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That((resultBone.<link linkend="_class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730">PrevJoint</link>&#32;-&#32;bone.<link linkend="_class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730">PrevJoint</link>).Magnitude,&#32;Is.LessThan(TOLERANCE));
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.That((resultBone.<link linkend="_class_leap_1_1_bone_1a820e1a7a9975c41ca14aec7c806b9c65">Center</link>&#32;-&#32;bone.<link linkend="_class_leap_1_1_bone_1a820e1a7a9975c41ca14aec7c806b9c65">Center</link>).Magnitude,&#32;Is.LessThan(TOLERANCE));
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00068 &#32;&#32;&#32;&#32;&#32;&#32;}
00069 &#32;&#32;&#32;&#32;}
00070 &#32;&#32;}
00071 }
</programlisting></section>
