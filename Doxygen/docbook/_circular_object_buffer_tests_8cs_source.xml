<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__circular_object_buffer_tests_8cs_source">
<title>CircularObjectBufferTests.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Editor/Tests/CircularObjectBufferTests.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;NUnit.Framework;
00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_leap_internal">LeapInternal</link>;
00012 
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00013"/><link linkend="_namespace_leap_1_1_leap_c_sharp_1_1_tests">00013</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_leap_c_sharp_1_1_tests">Leap.LeapCSharp.Tests</link>&#32;{
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00014"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">00014</link> &#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;{
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00015"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type_1aab9236ab72c05a1cab17cf5e6e85fb62">00015</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>&#32;=&#32;0;
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00016"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type_1ac463ae7d829bf72de0db032823598f29">00016</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type_1ac463ae7d829bf72de0db032823598f29">TestObjectType</link>()&#32;{&#32;<emphasis role="keywordtype">id</emphasis>&#32;=&#32;-1;&#32;}
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00017"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type_1acd7961dcf89ccd96fe01d6c3737822fe">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type_1acd7961dcf89ccd96fe01d6c3737822fe">TestObjectType</link>(<emphasis role="keywordtype">int</emphasis>&#32;t)&#32;{&#32;<emphasis role="keywordtype">id</emphasis>&#32;=&#32;t;&#32;}
00018 &#32;&#32;}
00019 
00020 &#32;&#32;[TestFixture]
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00021"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests">00021</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests">CircularObjectBufferTests</link>&#32;{
00022 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00023"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a0a4248865999053d090adeae5e5f3ef3">00023</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a0a4248865999053d090adeae5e5f3ef3">CreateTest</link>()&#32;{
00024 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_internal_1_1_circular_object_buffer">CircularObjectBuffer&lt;TestObjectType&gt;</link>&#32;ciq&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_internal_1_1_circular_object_buffer">CircularObjectBuffer&lt;TestObjectType&gt;</link>(100);
00025 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(100,&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae">Capacity</link>,&#32;<emphasis role="stringliteral">&quot;Capacity&#32;is&#32;the&#32;same&#32;as&#32;initialized&#32;value&quot;</emphasis>);
00026 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5">Count</link>,&#32;<emphasis role="stringliteral">&quot;Buffer&#32;starts&#32;with&#32;no&#32;items&quot;</emphasis>);
00027 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a897abcef25602b14de45a6eb13ed626b">IsEmpty</link>,&#32;<emphasis role="stringliteral">&quot;Buffer&#32;starts&#32;out&#32;empty&quot;</emphasis>);
00028 &#32;&#32;&#32;&#32;}
00029 
00030 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00031"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1af0dc9dbcd071c5ec27027637c7889af1">00031</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1af0dc9dbcd071c5ec27027637c7889af1">PutGetTest</link>()&#32;{
00032 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_internal_1_1_circular_object_buffer">CircularObjectBuffer&lt;TestObjectType&gt;</link>&#32;ciq&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_internal_1_1_circular_object_buffer">CircularObjectBuffer&lt;TestObjectType&gt;</link>(100);
00033 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;bar&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(1);
00034 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df">Put</link>(ref&#32;bar);
00035 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsFalse(ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a897abcef25602b14de45a6eb13ed626b">IsEmpty</link>,&#32;<emphasis role="stringliteral">&quot;Not&#32;empty.&quot;</emphasis>);
00036 
00037 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;=&#32;12345;&#32;++t)&#32;{
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;foo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(t);
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;mu&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(t);
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df">Put</link>(ref&#32;foo);
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;mu);
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(t,&#32;mu.id,&#32;<emphasis role="stringliteral">&quot;Got&#32;the&#32;same&#32;value&#32;that&#32;we&#32;put.&quot;</emphasis>);
00043 &#32;&#32;&#32;&#32;&#32;&#32;}
00044 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar);
00045 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;currentId&#32;=&#32;bar.id;
00046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae">Capacity</link>;&#32;t++)&#32;{
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Console.WriteLine(t&#32;+&#32;&quot;,&#32;&quot;&#32;+&#32;ciq.Get&#32;(t).id&#32;+&#32;&quot;,&#32;&quot;&#32;+&#32;currentId);</emphasis>
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;chew&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(t);
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;chew,&#32;t);
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(chew.id,&#32;currentId,&#32;<emphasis role="stringliteral">&quot;Older&#32;objects&#32;are&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;chew.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;currentId);
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentId--;
00052 &#32;&#32;&#32;&#32;&#32;&#32;}
00053 &#32;&#32;&#32;&#32;}
00054 
00055 &#32;&#32;&#32;&#32;[Test]
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00056"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a30b19aa15c293a086e154b0f50cf6603">00056</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a30b19aa15c293a086e154b0f50cf6603">OutOfBoundsTests</link>()&#32;{
00057 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_internal_1_1_circular_object_buffer">CircularObjectBuffer&lt;TestObjectType&gt;</link>&#32;ciq&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_internal_1_1_circular_object_buffer">CircularObjectBuffer&lt;TestObjectType&gt;</link>(100);
00058 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;foo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(1);
00059 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;=&#32;12345;&#32;++t)&#32;{
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;foo,&#32;t);
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(-1,&#32;foo.id,&#32;<emphasis role="stringliteral">&quot;Get&#32;default&#32;object&#32;from&#32;empty&#32;buffer&quot;</emphasis>);
00062 &#32;&#32;&#32;&#32;&#32;&#32;}
00063 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;bar&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(0);
00064 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df">Put</link>(ref&#32;bar);
00065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;1;&#32;t&#32;&lt;=&#32;12345;&#32;++t)&#32;{
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;foo,&#32;t);
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(-1,&#32;foo.id,&#32;<emphasis role="stringliteral">&quot;Get&#32;default&#32;object&#32;past&#32;last&#32;item&#32;in&#32;mostly&#32;empty&#32;buffer&quot;</emphasis>);
00068 &#32;&#32;&#32;&#32;&#32;&#32;}
00069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;=&#32;122;&#32;++t)&#32;{
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;mu&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(t);
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df">Put</link>(ref&#32;mu);
00072 &#32;&#32;&#32;&#32;&#32;&#32;}
00073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae">Capacity</link>;&#32;t&#32;&lt;=&#32;12345;&#32;++t)&#32;{
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;foo,&#32;t);
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(-1,&#32;foo.id,&#32;<emphasis role="stringliteral">&quot;Get&#32;default&#32;object&#32;past&#32;last&#32;item&#32;in&#32;full&#32;buffer&quot;</emphasis>);
00076 &#32;&#32;&#32;&#32;&#32;&#32;}
00077 &#32;&#32;&#32;&#32;}
00078 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00079"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a254416b11cf75a060289dd8fbd112c3a">00079</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a254416b11cf75a060289dd8fbd112c3a">OrderTests</link>()&#32;{
00080 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_internal_1_1_circular_object_buffer">CircularObjectBuffer&lt;TestObjectType&gt;</link>&#32;ciq&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_internal_1_1_circular_object_buffer">CircularObjectBuffer&lt;TestObjectType&gt;</link>(10);
00081 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(10,&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae">Capacity</link>,&#32;<emphasis role="stringliteral">&quot;Capacity&#32;is&#32;the&#32;same&#32;as&#32;initialized&#32;value&quot;</emphasis>);
00082 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5">Count</link>,&#32;<emphasis role="stringliteral">&quot;Buffer&#32;starts&#32;with&#32;no&#32;items&quot;</emphasis>);
00083 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;5;&#32;++t)&#32;{
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;foo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(t);
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df">Put</link>(ref&#32;foo);
00086 &#32;&#32;&#32;&#32;&#32;&#32;}
00087 
00088 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;bar&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(0);
00089 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(5,&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5">Count</link>,&#32;<emphasis role="stringliteral">&quot;Buffer&#32;has&#32;5&#32;items&quot;</emphasis>);
00090 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar,&#32;0);
00091 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(bar.id,&#32;4,&#32;<emphasis role="stringliteral">&quot;Objects&#32;are&#32;still&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;bar.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;4);
00092 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar,&#32;1);
00093 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(bar.id,&#32;3,&#32;<emphasis role="stringliteral">&quot;Objects&#32;are&#32;still&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;bar.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;3);
00094 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar,&#32;2);
00095 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(bar.id,&#32;2,&#32;<emphasis role="stringliteral">&quot;Objects&#32;are&#32;still&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;bar.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;2);
00096 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar,&#32;3);
00097 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(bar.id,&#32;1,&#32;<emphasis role="stringliteral">&quot;Objects&#32;are&#32;still&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;bar.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;1);
00098 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar,&#32;4);
00099 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(bar.id,&#32;0,&#32;<emphasis role="stringliteral">&quot;Objects&#32;are&#32;still&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;bar.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;0);
00100 &#32;&#32;&#32;&#32;}
00101 
00102 &#32;&#32;&#32;&#32;[Test()]
<anchor xml:id="__circular_object_buffer_tests_8cs_source_1l00103"/><link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a8848cce0f507da8c50da295bedfae991">00103</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a8848cce0f507da8c50da295bedfae991">ResizeTests</link>()&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_internal_1_1_circular_object_buffer">CircularObjectBuffer&lt;TestObjectType&gt;</link>&#32;ciq&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_internal_1_1_circular_object_buffer">CircularObjectBuffer&lt;TestObjectType&gt;</link>(10);
00105 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(10,&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae">Capacity</link>,&#32;<emphasis role="stringliteral">&quot;Capacity&#32;is&#32;the&#32;same&#32;as&#32;initialized&#32;value&quot;</emphasis>);
00106 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5">Count</link>,&#32;<emphasis role="stringliteral">&quot;Buffer&#32;starts&#32;with&#32;no&#32;items&quot;</emphasis>);
00107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;5;&#32;++t)&#32;{
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;foo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(t);
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df">Put</link>(ref&#32;foo);
00110 &#32;&#32;&#32;&#32;&#32;&#32;}
00111 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(5,&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5">Count</link>,&#32;<emphasis role="stringliteral">&quot;Buffer&#32;has&#32;5&#32;items&quot;</emphasis>);
00112 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a96e1c0d42e5ae980a605f69ac4565322">Resize</link>(15);
00113 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(15,&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae">Capacity</link>,&#32;<emphasis role="stringliteral">&quot;Capacity&#32;now&#32;is&#32;15&quot;</emphasis>);
00114 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(5,&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5">Count</link>,&#32;<emphasis role="stringliteral">&quot;Buffer&#32;still&#32;has&#32;5&#32;items&quot;</emphasis>);
00115 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;bar&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(0);
00116 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar,&#32;0);
00117 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(4,&#32;bar.id,&#32;<emphasis role="stringliteral">&quot;Objects&#32;are&#32;still&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;bar.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;4);
00118 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar,&#32;1);
00119 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(3,&#32;bar.id,&#32;<emphasis role="stringliteral">&quot;Objects&#32;are&#32;still&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;bar.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;3);
00120 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar,&#32;2);
00121 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(2,&#32;bar.id,&#32;<emphasis role="stringliteral">&quot;Objects&#32;are&#32;still&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;bar.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;2);
00122 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar,&#32;3);
00123 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(1,&#32;bar.id,&#32;<emphasis role="stringliteral">&quot;Objects&#32;are&#32;still&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;bar.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;1);
00124 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;bar,&#32;4);
00125 &#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(0,&#32;bar.id,&#32;<emphasis role="stringliteral">&quot;Objects&#32;are&#32;still&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;bar.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;0);
00126 
00127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;=&#32;12345;&#32;++t)&#32;{
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;foo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>(t);
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df">Put</link>(ref&#32;foo);
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;foo);
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(t,&#32;foo.id,&#32;<emphasis role="stringliteral">&quot;Got&#32;the&#32;same&#32;value&#32;that&#32;we&#32;put.&quot;</emphasis>);
00132 &#32;&#32;&#32;&#32;&#32;&#32;}
00133 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>&#32;mu&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type">TestObjectType</link>();
00134 &#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;mu);
00135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;currentId&#32;=&#32;mu.id;
00136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae">Capacity</link>;&#32;t++)&#32;{
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Console.WriteLine(t&#32;+&#32;&quot;,&#32;&quot;&#32;+&#32;ciq.Get&#32;(t).id&#32;+&#32;&quot;,&#32;&quot;&#32;+&#32;currentId);</emphasis>
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ciq.<link linkend="_class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1">Get</link>(out&#32;mu,&#32;t);
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Assert.AreEqual(mu.id,&#32;currentId,&#32;<emphasis role="stringliteral">&quot;Older&#32;objects&#32;are&#32;in&#32;order:&#32;&quot;</emphasis>&#32;+&#32;mu.id&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;currentId);
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentId--;
00141 &#32;&#32;&#32;&#32;&#32;&#32;}
00142 &#32;&#32;&#32;&#32;}
00143 &#32;&#32;}
00144 }
</programlisting></section>
