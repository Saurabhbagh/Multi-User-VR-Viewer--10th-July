<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__assert_helper_8cs_source">
<title>AssertHelper.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Utils/AssertHelper.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_unity_engine">UnityEngine</link>.Assertions;
00012 <emphasis role="keyword">using</emphasis>&#32;System;
00013 <emphasis role="keyword">using</emphasis>&#32;System.Linq;
00014 <emphasis role="keyword">using</emphasis>&#32;System.Diagnostics;
00015 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00016 
00017 <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>AssertHelper&#32;{
00018 
00019 &#32;&#32;[Conditional(<emphasis role="stringliteral">&quot;UNITY_EDITOR&quot;</emphasis>)]
00020 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AssertRuntimeOnly(<emphasis role="keywordtype">string</emphasis>&#32;message&#32;=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00021 &#32;&#32;&#32;&#32;message&#32;=&#32;message&#32;??&#32;<emphasis role="stringliteral">&quot;Assert&#32;failed&#32;because&#32;game&#32;was&#32;not&#32;in&#32;Play&#32;Mode.&quot;</emphasis>;
00022 &#32;&#32;&#32;&#32;Assert.IsTrue(<link linkend="_namespace_valve_1_1_v_r_1aecd07a81fe79a9f96c6787513e2d98e4ae498749f3c42246d50b15c81c101d988">Application</link>.isPlaying,&#32;message);
00023 &#32;&#32;}
00024 
00025 &#32;&#32;[Conditional(<emphasis role="stringliteral">&quot;UNITY_EDITOR&quot;</emphasis>)]
00026 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AssertEditorOnly(<emphasis role="keywordtype">string</emphasis>&#32;message&#32;=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
00027 &#32;&#32;&#32;&#32;message&#32;=&#32;message&#32;??&#32;<emphasis role="stringliteral">&quot;Assert&#32;failed&#32;because&#32;game&#32;was&#32;in&#32;Play&#32;Mode.&quot;</emphasis>;
00028 &#32;&#32;&#32;&#32;Assert.IsFalse(<link linkend="_namespace_valve_1_1_v_r_1aecd07a81fe79a9f96c6787513e2d98e4ae498749f3c42246d50b15c81c101d988">Application</link>.isPlaying,&#32;message);
00029 &#32;&#32;}
00030 
00031 &#32;&#32;[Conditional(<emphasis role="stringliteral">&quot;UNITY_ASSERTIONS&quot;</emphasis>)]
00032 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Implies(<emphasis role="keywordtype">bool</emphasis>&#32;condition,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result,&#32;<emphasis role="keywordtype">string</emphasis>&#32;message&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
00033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(condition)&#32;{
00034 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(result,&#32;message);
00035 &#32;&#32;&#32;&#32;}
00036 &#32;&#32;}
00037 
00038 &#32;&#32;[Conditional(<emphasis role="stringliteral">&quot;UNITY_ASSERTIONS&quot;</emphasis>)]
00039 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Implies(<emphasis role="keywordtype">bool</emphasis>&#32;condition,&#32;Func&lt;bool&gt;&#32;result,&#32;<emphasis role="keywordtype">string</emphasis>&#32;message&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(condition)&#32;{
00041 &#32;&#32;&#32;&#32;&#32;&#32;Implies(condition,&#32;result(),&#32;message);
00042 &#32;&#32;&#32;&#32;}
00043 &#32;&#32;}
00044 
00045 &#32;&#32;[Conditional(<emphasis role="stringliteral">&quot;UNITY_ASSERTIONS&quot;</emphasis>)]
00046 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Implies(<emphasis role="keywordtype">string</emphasis>&#32;conditionName,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;condition,&#32;<emphasis role="keywordtype">string</emphasis>&#32;resultName,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result)&#32;{
00047 &#32;&#32;&#32;&#32;Implies(condition,&#32;result,&#32;<emphasis role="stringliteral">&quot;When&#32;&quot;</emphasis>&#32;+&#32;conditionName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;is&#32;true,&#32;&quot;</emphasis>&#32;+&#32;resultName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;must&#32;always&#32;be&#32;true.&quot;</emphasis>);
00048 &#32;&#32;}
00049 
00050 &#32;&#32;[Conditional(<emphasis role="stringliteral">&quot;UNITY_ASSERTIONS&quot;</emphasis>)]
00051 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Implies(<emphasis role="keywordtype">string</emphasis>&#32;conditionName,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;condition,&#32;<emphasis role="keywordtype">string</emphasis>&#32;resultName,&#32;Func&lt;bool&gt;&#32;result)&#32;{
00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(condition)&#32;{
00053 &#32;&#32;&#32;&#32;&#32;&#32;Implies(conditionName,&#32;condition,&#32;resultName,&#32;result());
00054 &#32;&#32;&#32;&#32;}
00055 &#32;&#32;}
00056 
00057 &#32;&#32;[Conditional(<emphasis role="stringliteral">&quot;UNITY_ASSERTIONS&quot;</emphasis>)]
00058 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Contains&lt;T&gt;(T&#32;value,&#32;IEnumerable&lt;T&gt;&#32;collection,&#32;<emphasis role="keywordtype">string</emphasis>&#32;message&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
00059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!collection.Contains(value))&#32;{
00060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;result&#32;=&#32;<emphasis role="stringliteral">&quot;The&#32;value&#32;&quot;</emphasis>&#32;+&#32;value&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;was&#32;not&#32;found&#32;in&#32;the&#32;collection&#32;[&quot;</emphasis>;
00061 
00062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFirst&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(T&#32;v&#32;<emphasis role="keywordflow">in</emphasis>&#32;collection)&#32;{
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isFirst)&#32;{
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isFirst&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00068 
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;v.ToString();
00070 &#32;&#32;&#32;&#32;&#32;&#32;}
00071 
00072 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;<emphasis role="stringliteral">&quot;]\n&quot;</emphasis>&#32;+&#32;message;
00073 &#32;&#32;&#32;&#32;&#32;&#32;Assert.IsTrue(<emphasis role="keyword">false</emphasis>,&#32;result);
00074 &#32;&#32;&#32;&#32;}
00075 &#32;&#32;}
00076 }
</programlisting></section>
