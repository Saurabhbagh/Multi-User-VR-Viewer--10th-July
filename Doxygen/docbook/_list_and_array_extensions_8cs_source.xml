<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__list_and_array_extensions_8cs_source">
<title>ListAndArrayExtensions.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Utils/ListAndArrayExtensions.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00014 
00015 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>ListAndArrayExtensions&#32;{
00016 
00017 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T[]&#32;Fill&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;T[]&#32;array,&#32;T&#32;value)&#32;{
00018 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;array.Length;&#32;i++)&#32;{
00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array[i]&#32;=&#32;value;
00020 &#32;&#32;&#32;&#32;&#32;&#32;}
00021 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;array;
00022 &#32;&#32;&#32;&#32;}
00023 
00024 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T[]&#32;Fill&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;T[]&#32;array,&#32;Func&lt;T&gt;&#32;constructor)&#32;{
00025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;array.Length;&#32;i++)&#32;{
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array[i]&#32;=&#32;constructor();
00027 &#32;&#32;&#32;&#32;&#32;&#32;}
00028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;array;
00029 &#32;&#32;&#32;&#32;}
00030 
00031 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T[,]&#32;Fill&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;T[,]&#32;array,&#32;T&#32;value)&#32;{
00032 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;array.GetLength(0);&#32;i++)&#32;{
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;array.GetLength(1);&#32;j++)&#32;{
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array[i,&#32;j]&#32;=&#32;value;
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00036 &#32;&#32;&#32;&#32;&#32;&#32;}
00037 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;array;
00038 &#32;&#32;&#32;&#32;}
00039 
00040 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;T&gt;&#32;Fill&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;T&#32;value)&#32;{
00041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;list.Count;&#32;i++)&#32;{
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list[i]&#32;=&#32;value;
00043 &#32;&#32;&#32;&#32;&#32;&#32;}
00044 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;list;
00045 &#32;&#32;&#32;&#32;}
00046 
00047 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;T&gt;&#32;Fill&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count,&#32;T&#32;value)&#32;{
00048 &#32;&#32;&#32;&#32;&#32;&#32;list.Clear();
00049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)&#32;{
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.Add(value);
00051 &#32;&#32;&#32;&#32;&#32;&#32;}
00052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;list;
00053 &#32;&#32;&#32;&#32;}
00054 
00055 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;T&gt;&#32;FillEach&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;Func&lt;T&gt;&#32;generator)&#32;{
00056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;list.Count;&#32;i++)&#32;{
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list[i]&#32;=&#32;generator();
00058 &#32;&#32;&#32;&#32;&#32;&#32;}
00059 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;list;
00060 &#32;&#32;&#32;&#32;}
00061 
00062 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;T&gt;&#32;FillEach&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;Func&lt;int,&#32;T&gt;&#32;generator)&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;list.Count;&#32;i++)&#32;{
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list[i]&#32;=&#32;generator(i);
00065 &#32;&#32;&#32;&#32;&#32;&#32;}
00066 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;list;
00067 &#32;&#32;&#32;&#32;}
00068 
00069 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;T&gt;&#32;FillEach&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count,&#32;Func&lt;T&gt;&#32;generator)&#32;{
00070 &#32;&#32;&#32;&#32;&#32;&#32;list.Clear();
00071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)&#32;{
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.Add(generator());
00073 &#32;&#32;&#32;&#32;&#32;&#32;}
00074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;list;
00075 &#32;&#32;&#32;&#32;}
00076 
00077 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;T&gt;&#32;FillEach&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count,&#32;Func&lt;int,&#32;T&gt;&#32;generator)&#32;{
00078 &#32;&#32;&#32;&#32;&#32;&#32;list.Clear();
00079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)&#32;{
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.Add(generator(i));
00081 &#32;&#32;&#32;&#32;&#32;&#32;}
00082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;list;
00083 &#32;&#32;&#32;&#32;}
00084 
00085 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;T&gt;&#32;Append&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count,&#32;T&#32;value)&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.Add(value);
00088 &#32;&#32;&#32;&#32;&#32;&#32;}
00089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;list;
00090 &#32;&#32;&#32;&#32;}
00091 
00092 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;RemoveLast&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list)&#32;{
00093 &#32;&#32;&#32;&#32;&#32;&#32;T&#32;last&#32;=&#32;list[list.Count&#32;-&#32;1];
00094 &#32;&#32;&#32;&#32;&#32;&#32;list.RemoveAt(list.Count&#32;-&#32;1);
00095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;last;
00096 &#32;&#32;&#32;&#32;}
00097 
00102 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;RemoveUnordered&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;T&#32;element)&#32;{
00103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;list.Count;&#32;i++)&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list[i].Equals(element))&#32;{
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list[i]&#32;=&#32;list.RemoveLast();
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00108 &#32;&#32;&#32;&#32;&#32;&#32;}
00109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00110 &#32;&#32;&#32;&#32;}
00111 
00112 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RemoveAtUnordered&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
00113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(list.Count&#32;-&#32;1&#32;==&#32;index)&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.RemoveLast();
00115 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>]&#32;=&#32;list.RemoveLast();
00117 &#32;&#32;&#32;&#32;&#32;&#32;}
00118 &#32;&#32;&#32;&#32;}
00119 
00120 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;InsertUnordered&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;T&#32;element)&#32;{
00121 &#32;&#32;&#32;&#32;&#32;&#32;list.Add(list[index]);
00122 &#32;&#32;&#32;&#32;&#32;&#32;list[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>]&#32;=&#32;element;
00123 &#32;&#32;&#32;&#32;}
00124 
00132 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RemoveAtMany&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;List&lt;int&gt;&#32;sortedIndexes)&#32;{
00133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sortedIndexes.Count&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>;
00134 
00135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//If&#32;just&#32;removing&#32;one,&#32;might&#32;as&#32;well&#32;use&#32;built-in&#32;function</emphasis>
00136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sortedIndexes.Count&#32;==&#32;1)&#32;{
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.RemoveAt(sortedIndexes[0]);
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00139 &#32;&#32;&#32;&#32;&#32;&#32;}
00140 
00141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;to&#32;=&#32;sortedIndexes[0];
00142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;from&#32;=&#32;to;
00143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>&#32;=&#32;0;
00144 
00145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(from&#32;==&#32;sortedIndexes[index])&#32;{
00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;from++;
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>++;
00149 
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;==&#32;sortedIndexes.Count)&#32;{
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Copy&#32;remaining</emphasis>
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(from&#32;&lt;&#32;list.Count)&#32;{
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list[to++]&#32;=&#32;list[from++];
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00155 
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Remove&#32;the&#32;last&#32;elements&#32;on&#32;the&#32;end</emphasis>
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.RemoveRange(list.Count&#32;-&#32;index,&#32;index);
00158 
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00162 
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list[to++]&#32;=&#32;list[from++];
00164 &#32;&#32;&#32;&#32;&#32;&#32;}
00165 &#32;&#32;&#32;&#32;}
00166 
00174 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;InsertMany&lt;T&gt;(<emphasis role="keyword">this</emphasis>&#32;List&lt;T&gt;&#32;list,&#32;List&lt;int&gt;&#32;sortedIndexes,&#32;List&lt;T&gt;&#32;elements)&#32;{
00175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sortedIndexes.Count&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>;
00176 
00177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sortedIndexes.Count&#32;==&#32;1)&#32;{
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.Insert(sortedIndexes[0],&#32;elements[0]);
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00180 &#32;&#32;&#32;&#32;&#32;&#32;}
00181 
00182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;from&#32;=&#32;list.Count&#32;-&#32;1;
00183 
00184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//First&#32;expand&#32;array&#32;to&#32;be&#32;large&#32;enough&#32;to&#32;hold&#32;all&#32;the&#32;new&#32;elements</emphasis>
00185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;sortedIndexes.Count;&#32;i++)&#32;{
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list.Add(<emphasis role="keywordflow">default</emphasis>(T));
00187 &#32;&#32;&#32;&#32;&#32;&#32;}
00188 
00189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;to&#32;=&#32;list.Count&#32;-&#32;1;
00190 
00191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>&#32;=&#32;sortedIndexes.Count&#32;-&#32;1;
00192 
00193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(to&#32;==&#32;sortedIndexes[index])&#32;{
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list[to--]&#32;=&#32;elements[<link linkend="_namespace_valve_1_1_v_r_1ac40c4bdf0a3dcd6e69cad2d85f287c67a6a992d5529f459a44fee58c733255e86">index</link>--];
00196 
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;==&#32;-1)&#32;{
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00201 
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list[to--]&#32;=&#32;list[from--];
00203 &#32;&#32;&#32;&#32;&#32;&#32;}
00204 &#32;&#32;&#32;&#32;}
00205 &#32;&#32;}
00206 }
</programlisting></section>
