<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__transform_extensions_8cs_source">
<title>TransformExtensions.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap">Leap</link>&#32;{
00011 &#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System;
00012 
00013 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>TransformExtensions&#32;{
00014 
00021 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Frame&#32;Transform(<emphasis role="keyword">this</emphasis>&#32;Frame&#32;frame,&#32;LeapTransform&#32;transform)&#32;{
00022 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;frame.Hands.Count;&#32;i--&#32;!=&#32;0;)&#32;{
00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frame.Hands[i].Transform(transform);
00024 &#32;&#32;&#32;&#32;&#32;&#32;}
00025 
00026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;frame;
00027 &#32;&#32;&#32;&#32;}
00028 
00035 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Frame&#32;TransformedCopy(<emphasis role="keyword">this</emphasis>&#32;Frame&#32;frame,&#32;LeapTransform&#32;transform)&#32;{
00036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Frame().CopyFrom(frame).Transform(transform);
00037 &#32;&#32;&#32;&#32;}
00038 
00045 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_leap_1_1_unity_1_1_interaction_1a9752eb3e2905e8ebd134fff20c155e6baa78b1ac16c0cd02168097fc9a9bd7604">Hand</link>&#32;Transform(<emphasis role="keyword">this</emphasis>&#32;Hand&#32;hand,&#32;LeapTransform&#32;transform)&#32;{
00046 &#32;&#32;&#32;&#32;&#32;&#32;hand.PalmPosition&#32;=&#32;transform.TransformPoint(hand.PalmPosition);
00047 &#32;&#32;&#32;&#32;&#32;&#32;hand.StabilizedPalmPosition&#32;=&#32;transform.TransformPoint(hand.StabilizedPalmPosition);
00048 &#32;&#32;&#32;&#32;&#32;&#32;hand.PalmVelocity&#32;=&#32;transform.TransformVelocity(hand.PalmVelocity);
00049 &#32;&#32;&#32;&#32;&#32;&#32;hand.PalmNormal&#32;=&#32;transform.TransformDirection(hand.PalmNormal);
00050 &#32;&#32;&#32;&#32;&#32;&#32;hand.Direction&#32;=&#32;transform.TransformDirection(hand.Direction);
00051 &#32;&#32;&#32;&#32;&#32;&#32;hand.WristPosition&#32;=&#32;transform.TransformPoint(hand.WristPosition);
00052 &#32;&#32;&#32;&#32;&#32;&#32;hand.PalmWidth&#32;*=&#32;Math.Abs(transform.scale.x);
00053 &#32;&#32;&#32;&#32;&#32;&#32;hand.Rotation&#32;=&#32;transform.TransformQuaternion(hand.Rotation);
00054 
00055 &#32;&#32;&#32;&#32;&#32;&#32;hand.Arm.Transform(transform);
00056 
00057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;5;&#32;i--&#32;!=&#32;0;)&#32;{
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hand.Fingers[i].Transform(transform);
00059 &#32;&#32;&#32;&#32;&#32;&#32;}
00060 
00061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hand;
00062 &#32;&#32;&#32;&#32;}
00063 
00070 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_leap_1_1_unity_1_1_interaction_1a9752eb3e2905e8ebd134fff20c155e6baa78b1ac16c0cd02168097fc9a9bd7604">Hand</link>&#32;TransformedCopy(<emphasis role="keyword">this</emphasis>&#32;Hand&#32;hand,&#32;LeapTransform&#32;transform)&#32;{
00071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_leap_1_1_unity_1_1_interaction_1a9752eb3e2905e8ebd134fff20c155e6baa78b1ac16c0cd02168097fc9a9bd7604">Hand</link>().CopyFrom(hand).Transform(transform);
00072 &#32;&#32;&#32;&#32;}
00073 
00080 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Finger&#32;Transform(<emphasis role="keyword">this</emphasis>&#32;Finger&#32;finger,&#32;LeapTransform&#32;transform)&#32;{
00081 &#32;&#32;&#32;&#32;&#32;&#32;Bone&#32;nextBone&#32;=&#32;finger.bones[3];
00082 &#32;&#32;&#32;&#32;&#32;&#32;nextBone.NextJoint&#32;=&#32;transform.TransformPoint(nextBone.NextJoint);
00083 
00084 &#32;&#32;&#32;&#32;&#32;&#32;finger.TipPosition&#32;=&#32;nextBone.NextJoint;
00085 
00086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;3;&#32;i--&#32;!=&#32;0;)&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Bone&#32;bone&#32;=&#32;finger.bones[i];
00088 
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bone.NextJoint&#32;=&#32;nextBone.PrevJoint&#32;=&#32;transform.TransformPoint(bone.NextJoint);
00090 
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextBone.TransformGivenJoints(transform);
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextBone&#32;=&#32;bone;
00093 &#32;&#32;&#32;&#32;&#32;&#32;}
00094 
00095 &#32;&#32;&#32;&#32;&#32;&#32;nextBone.PrevJoint&#32;=&#32;transform.TransformPoint(nextBone.PrevJoint);
00096 &#32;&#32;&#32;&#32;&#32;&#32;nextBone.TransformGivenJoints(transform);
00097 
00098 &#32;&#32;&#32;&#32;&#32;&#32;finger.Direction&#32;=&#32;finger.bones[2].Direction;
00099 &#32;&#32;&#32;&#32;&#32;&#32;finger.Width&#32;*=&#32;Math.Abs(transform.scale.x);
00100 &#32;&#32;&#32;&#32;&#32;&#32;finger.Length&#32;*=&#32;Math.Abs(transform.scale.z);
00101 
00102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;finger;
00103 &#32;&#32;&#32;&#32;}
00104 
00111 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Finger&#32;TransformedCopy(<emphasis role="keyword">this</emphasis>&#32;Finger&#32;finger,&#32;LeapTransform&#32;transform)&#32;{
00112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Finger().CopyFrom(finger).Transform(transform);
00113 &#32;&#32;&#32;&#32;}
00114 
00121 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Bone&#32;Transform(<emphasis role="keyword">this</emphasis>&#32;Bone&#32;bone,&#32;LeapTransform&#32;transform)&#32;{
00122 &#32;&#32;&#32;&#32;&#32;&#32;bone.PrevJoint&#32;=&#32;transform.TransformPoint(bone.PrevJoint);
00123 &#32;&#32;&#32;&#32;&#32;&#32;bone.NextJoint&#32;=&#32;transform.TransformPoint(bone.NextJoint);
00124 
00125 &#32;&#32;&#32;&#32;&#32;&#32;bone.TransformGivenJoints(transform);
00126 
00127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bone;
00128 &#32;&#32;&#32;&#32;}
00129 
00136 &#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;TransformGivenJoints(<emphasis role="keyword">this</emphasis>&#32;Bone&#32;bone,&#32;LeapTransform&#32;transform)&#32;{
00137 &#32;&#32;&#32;&#32;&#32;&#32;bone.Length&#32;*=&#32;Math.Abs(transform.scale.z);
00138 &#32;&#32;&#32;&#32;&#32;&#32;bone.Center&#32;=&#32;(bone.PrevJoint&#32;+&#32;bone.NextJoint)&#32;/&#32;2.0f;
00139 
00140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bone.Length&#32;&lt;&#32;<emphasis role="keywordtype">float</emphasis>.Epsilon)&#32;{
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bone.Direction&#32;=&#32;Vector.Zero;
00142 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bone.Direction&#32;=&#32;(bone.NextJoint&#32;-&#32;bone.PrevJoint)&#32;/&#32;bone.Length;
00144 &#32;&#32;&#32;&#32;&#32;&#32;}
00145 
00146 &#32;&#32;&#32;&#32;&#32;&#32;bone.Width&#32;*=&#32;Math.Abs(transform.scale.x);
00147 &#32;&#32;&#32;&#32;&#32;&#32;bone.Rotation&#32;=&#32;transform.TransformQuaternion(bone.Rotation);
00148 &#32;&#32;&#32;&#32;}
00149 
00156 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Bone&#32;TransformedCopy(<emphasis role="keyword">this</emphasis>&#32;Bone&#32;bone,&#32;LeapTransform&#32;transform)&#32;{
00157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Bone().CopyFrom(bone).Transform(transform);
00158 &#32;&#32;&#32;&#32;}
00159 &#32;&#32;}
00160 }
</programlisting></section>
