<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__kabsch_solver_8cs_source">
<title>KabschSolver.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Modules/InteractionEngine/Scripts/Utility/KabschSolver.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_interaction">Leap.Unity.Interaction</link>&#32;{
00014 
<anchor xml:id="__kabsch_solver_8cs_source_1l00015"/><link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_kabsch_solver">00015</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_kabsch_solver">KabschSolver</link>&#32;{
00016 &#32;&#32;&#32;&#32;Vector3[]&#32;QuatBasis&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3[3];
00017 &#32;&#32;&#32;&#32;Vector3[]&#32;DataCovariance&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3[3];
00018 &#32;&#32;&#32;&#32;Quaternion&#32;OptimalRotation&#32;=&#32;Quaternion.identity;
<anchor xml:id="__kabsch_solver_8cs_source_1l00019"/><link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_kabsch_solver_1a6aac06a0dcbe2e7ac0a53b43b64bdcaf">00019</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Matrix4x4&#32;<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_kabsch_solver_1a6aac06a0dcbe2e7ac0a53b43b64bdcaf">SolveKabsch</link>(List&lt;Vector3&gt;&#32;inPoints,&#32;List&lt;Vector3&gt;&#32;refPoints)&#32;{
00020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inPoints.Count&#32;!=&#32;refPoints.Count)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;Matrix4x4.identity;&#32;}
00021 
00022 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Calculate&#32;the&#32;centroid&#32;offset&#32;and&#32;construct&#32;the&#32;centroid-shifted&#32;point&#32;matrices</emphasis>
00023 &#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;inCentroid&#32;=&#32;Vector3.zero;&#32;Vector3&#32;refCentroid&#32;=&#32;Vector3.zero;
00024 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;inPoints.Count;&#32;i++)&#32;{
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inCentroid&#32;+=&#32;inPoints[i];
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;refCentroid&#32;+=&#32;refPoints[i];
00027 &#32;&#32;&#32;&#32;&#32;&#32;}
00028 &#32;&#32;&#32;&#32;&#32;&#32;inCentroid&#32;/=&#32;inPoints.Count;
00029 &#32;&#32;&#32;&#32;&#32;&#32;refCentroid&#32;/=&#32;refPoints.Count;
00030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;inPoints.Count;&#32;i++)&#32;{
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inPoints[i]&#32;-=&#32;inCentroid;
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;refPoints[i]&#32;-=&#32;refCentroid;
00033 &#32;&#32;&#32;&#32;&#32;&#32;}
00034 
00035 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Calculate&#32;the&#32;covariance&#32;matrix,&#32;is&#32;a&#32;3x3&#32;Matrix&#32;and&#32;Calculate&#32;the&#32;optimal&#32;rotation</emphasis>
00036 &#32;&#32;&#32;&#32;&#32;&#32;extractRotation(TransposeMult(inPoints,&#32;refPoints,&#32;DataCovariance),&#32;ref&#32;OptimalRotation);
00037 
00038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
00039 &#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4.TRS(refCentroid,&#32;Quaternion.identity,&#32;Vector3.one)&#32;*
00040 &#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4.TRS(Vector3.zero,&#32;OptimalRotation,&#32;Vector3.one)&#32;*
00041 &#32;&#32;&#32;&#32;&#32;&#32;Matrix4x4.TRS(-inCentroid,&#32;Quaternion.identity,&#32;Vector3.one);
00042 &#32;&#32;&#32;&#32;}
00043 
00044 &#32;&#32;&#32;&#32;<emphasis role="comment">//https://animation.rwth-aachen.de/media/papers/2016-MIG-StableRotation.pdf</emphasis>
00045 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;extractRotation(Vector3[]&#32;A,&#32;ref&#32;Quaternion&#32;q)&#32;{
00046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;iter&#32;=&#32;0;&#32;iter&#32;&lt;&#32;9;&#32;iter++)&#32;{
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3[]&#32;R&#32;=&#32;<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_kabsch_solver_1a28fe7e92b8cb302758c2b5e86860af7b">MatrixFromQuaternion</link>(q,&#32;QuatBasis);
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;omega&#32;=&#32;(Vector3.Cross(R[0],&#32;A[0])&#32;+
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3.Cross(R[1],&#32;A[1])&#32;+
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3.Cross(R[2],&#32;A[2]))&#32;*
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1f&#32;/&#32;Mathf.Abs(Vector3.Dot(R[0],&#32;A[0])&#32;+
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3.Dot(R[1],&#32;A[1])&#32;+
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3.Dot(R[2],&#32;A[2])&#32;+&#32;0.000000001f));
00054 
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;w&#32;=&#32;Mathf.Clamp(omega.magnitude&#32;*&#32;50f,&#32;-10f,&#32;10f);&#32;<emphasis role="comment">//How&#32;aggressive&#32;each&#32;iteration&#32;should&#32;be</emphasis>
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(w&#32;&lt;&#32;0.000000001f)
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q&#32;=&#32;Quaternion.AngleAxis(w,&#32;(1f&#32;/&#32;w)&#32;*&#32;omega)&#32;*&#32;q;
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q&#32;=&#32;Quaternion.Lerp(q,&#32;q,&#32;0f);<emphasis role="comment">//Normalizes&#32;the&#32;Quaternion;&#32;critical&#32;for&#32;error&#32;suppression</emphasis>
00060 &#32;&#32;&#32;&#32;&#32;&#32;}
00061 &#32;&#32;&#32;&#32;}
00062 
00063 &#32;&#32;&#32;&#32;<emphasis role="comment">//Calculate&#32;Covariance&#32;Matrices&#32;--------------------------------------------------</emphasis>
00064 &#32;&#32;&#32;&#32;Vector3[]&#32;TransposeMult(List&lt;Vector3&gt;&#32;vec1,&#32;List&lt;Vector3&gt;&#32;vec2,&#32;Vector3[]&#32;covariance)&#32;{
00065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{&#32;<emphasis role="comment">//i&#32;is&#32;the&#32;row&#32;in&#32;this&#32;matrix</emphasis>
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;covariance[i]&#32;=&#32;Vector3.zero;
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{<emphasis role="comment">//j&#32;is&#32;the&#32;column&#32;in&#32;the&#32;other&#32;matrix</emphasis>
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;vec1.Count;&#32;k++)&#32;{<emphasis role="comment">//k&#32;is&#32;the&#32;column&#32;in&#32;this&#32;matrix</emphasis>
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;covariance[i][j]&#32;+=&#32;vec1[k][i]&#32;*&#32;vec2[k][j];
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00072 &#32;&#32;&#32;&#32;&#32;&#32;}
00073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;covariance;
00074 &#32;&#32;&#32;&#32;}
00075 
<anchor xml:id="__kabsch_solver_8cs_source_1l00076"/><link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_kabsch_solver_1a28fe7e92b8cb302758c2b5e86860af7b">00076</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3[]&#32;<link linkend="_class_leap_1_1_unity_1_1_interaction_1_1_kabsch_solver_1a28fe7e92b8cb302758c2b5e86860af7b">MatrixFromQuaternion</link>(Quaternion&#32;q,&#32;Vector3[]&#32;covariance)&#32;{
00077 &#32;&#32;&#32;&#32;&#32;&#32;covariance[0]&#32;=&#32;q&#32;*&#32;Vector3.right;
00078 &#32;&#32;&#32;&#32;&#32;&#32;covariance[1]&#32;=&#32;q&#32;*&#32;Vector3.up;
00079 &#32;&#32;&#32;&#32;&#32;&#32;covariance[2]&#32;=&#32;q&#32;*&#32;Vector3.forward;
00080 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;covariance;
00081 &#32;&#32;&#32;&#32;}
00082 &#32;&#32;}
00083 
00084 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>FromMatrixExtension&#32;{
00085 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;GetVector3(<emphasis role="keyword">this</emphasis>&#32;Matrix4x4&#32;m)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m.GetColumn(3);&#32;}
00086 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Quaternion&#32;GetQuaternion(<emphasis role="keyword">this</emphasis>&#32;Matrix4x4&#32;m)&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m.GetColumn(2)&#32;==&#32;m.GetColumn(1))&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.identity;&#32;}
00088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.LookRotation(m.GetColumn(2),&#32;m.GetColumn(1));
00089 &#32;&#32;&#32;&#32;}
00090 &#32;&#32;}
00091 }
</programlisting></section>
