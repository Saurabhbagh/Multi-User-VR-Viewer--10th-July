<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_interface_leap_1_1_unity_1_1_i_indexable_struct">
<title>Leap.Unity.IIndexableStruct&lt; T, ThisIndexableType &gt; Interface Template Reference</title>
<indexterm><primary>Leap.Unity.IIndexableStruct&lt; T, ThisIndexableType &gt;</primary></indexterm>
<para>

<para>This is a definition-friendly interface that new &quot;indexable&quot; struct definitions can implement to make it a little easier to implement foreach and Query() operations for their struct. (You can use the <link linkend="_struct_leap_1_1_unity_1_1_indexable_struct_enumerator">IndexableStructEnumerator</link> for this purpose, you just have to pass it type arguments that correspond to your struct type.) </para>
 
</para>
<simplesect>
    <title>Properties    </title>
        <itemizedlist>
            <listitem><para>T <link linkend="_interface_leap_1_1_unity_1_1_i_indexable_struct_1ad7283ee0dd67d3a6c03fd76050ec220b">this[int idx]</link><computeroutput> [get]</computeroutput>
</para>
</listitem>
            <listitem><para>int <link linkend="_interface_leap_1_1_unity_1_1_i_indexable_struct_1ad6584007443da506772ba213121443d5">Count</link><computeroutput> [get]</computeroutput>
</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>This is a definition-friendly interface that new &quot;indexable&quot; struct definitions can implement to make it a little easier to implement foreach and Query() operations for their struct. (You can use the <link linkend="_struct_leap_1_1_unity_1_1_indexable_struct_enumerator">IndexableStructEnumerator</link> for this purpose, you just have to pass it type arguments that correspond to your struct type.) </para>



<para>Unlike <link linkend="_interface_leap_1_1_unity_1_1_i_indexable">IIndexable</link>, <link linkend="_interface_leap_1_1_unity_1_1_i_indexable_struct">IIndexableStruct</link> cannot utilize extension methods to automatically give consumers of the interface access to foreach and <link linkend="_namespace_leap_1_1_unity_1_1_query">Query</link> operations because consumption of a struct via an interface parameter forces the struct to be boxed, which causes allocation. As such, <link linkend="_interface_leap_1_1_unity_1_1_i_indexable_struct">IIndexableStruct</link> does not directly implement <link linkend="_interface_leap_1_1_unity_1_1_i_indexable">IIndexable</link>.</para>

<para>(This all may change in C# 8 when we get traits, but <link linkend="_namespace_leap_1_1_unity">Unity</link> is still in the C# 4 stone age.) </para>
<simplesect><title>Type Constraints</title>
<para><emphasis role="strong">ThisIndexableType:struct</emphasis></para>
<para><emphasis role="strong">ThisIndexableType:<link linkend="_interface_leap_1_1_unity_1_1_i_indexable_struct">IIndexableStruct</link></emphasis></para>
<para><emphasis role="strong">ThisIndexableType:T</emphasis></para>
<para><emphasis role="strong">ThisIndexableType:ThisIndexableType</emphasis></para>
</simplesect>
<para>
Definition at line <link linkend="__i_indexable_struct_8cs_source_1l00030">30</link> of file <link linkend="__i_indexable_struct_8cs_source">IIndexableStruct.cs</link>.</para>
</section>
<section>
<title>Property Documentation</title>
<anchor xml:id="_interface_leap_1_1_unity_1_1_i_indexable_struct_1ad6584007443da506772ba213121443d5"/>    <section>
    <title>Count</title>
<indexterm><primary>Count</primary><secondary>Leap.Unity.IIndexableStruct&lt; T, ThisIndexableType &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.IIndexableStruct&lt; T, ThisIndexableType &gt;</primary><secondary>Count</secondary></indexterm>
<para><computeroutput>int <link linkend="_interface_leap_1_1_unity_1_1_i_indexable_struct">Leap.Unity.IIndexableStruct</link>&lt; T, ThisIndexableType &gt;.Count<computeroutput>[get]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__i_indexable_struct_8cs_source_1l00036">36</link> of file <link linkend="__i_indexable_struct_8cs_source">IIndexableStruct.cs</link>.</para>
    </section><anchor xml:id="_interface_leap_1_1_unity_1_1_i_indexable_struct_1ad7283ee0dd67d3a6c03fd76050ec220b"/>    <section>
    <title>this[int idx]</title>
<indexterm><primary>this[int idx]</primary><secondary>Leap.Unity.IIndexableStruct&lt; T, ThisIndexableType &gt;</secondary></indexterm>
<indexterm><primary>Leap.Unity.IIndexableStruct&lt; T, ThisIndexableType &gt;</primary><secondary>this[int idx]</secondary></indexterm>
<para><computeroutput>T <link linkend="_interface_leap_1_1_unity_1_1_i_indexable_struct">Leap.Unity.IIndexableStruct</link>&lt; T, ThisIndexableType &gt;.this[int idx]<computeroutput>[get]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__i_indexable_struct_8cs_source_1l00034">34</link> of file <link linkend="__i_indexable_struct_8cs_source">IIndexableStruct.cs</link>.</para>
</section>
<para>
The documentation for this interface was generated from the following file:</para>
O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/<link linkend="__i_indexable_struct_8cs">IIndexableStruct.cs</link></section>
</section>
