<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__query_value_generators_8cs_source">
<title>QueryValueGenerators.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryValueGenerators.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity_1_1_query">Leap.Unity.Query</link>&#32;{
00014 
00015 &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>Values&#32;{
00016 
00020 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Query&lt;T&gt;&#32;Single&lt;T&gt;(T&#32;value)&#32;{
00021 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;array&#32;=&#32;ArrayPool&lt;T&gt;.Spawn(1);
00022 &#32;&#32;&#32;&#32;&#32;&#32;array[0]&#32;=&#32;value;
00023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Query&lt;T&gt;(array,&#32;1);
00024 &#32;&#32;&#32;&#32;}
00025 
00030 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Query&lt;T&gt;&#32;Repeat&lt;T&gt;(T&#32;value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;times)&#32;{
00031 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;array&#32;=&#32;ArrayPool&lt;T&gt;.Spawn(times);
00032 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;times;&#32;i++)&#32;{
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array[i]&#32;=&#32;value;
00034 &#32;&#32;&#32;&#32;&#32;&#32;}
00035 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Query&lt;T&gt;(array,&#32;times);
00036 &#32;&#32;&#32;&#32;}
00037 
00041 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Query&lt;T&gt;&#32;Empty&lt;T&gt;()&#32;{
00042 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;array&#32;=&#32;ArrayPool&lt;T&gt;.Spawn(0);
00043 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Query&lt;T&gt;(array,&#32;0);
00044 &#32;&#32;&#32;&#32;}
00045 
00058 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Query&lt;int&gt;&#32;Range(<emphasis role="keywordtype">int</emphasis>&#32;from,&#32;<emphasis role="keywordtype">int</emphasis>&#32;to,&#32;<emphasis role="keywordtype">int</emphasis>&#32;step&#32;=&#32;1,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;endIsExclusive&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;{
00059 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(step&#32;&lt;=&#32;0)&#32;{
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;ArgumentException(<emphasis role="stringliteral">&quot;Step&#32;must&#32;be&#32;positive&#32;and&#32;non-zero.&quot;</emphasis>);
00061 &#32;&#32;&#32;&#32;&#32;&#32;}
00062 
00063 &#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;values&#32;=&#32;Pool&lt;List&lt;int&gt;&gt;.Spawn();
00064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;value&#32;=&#32;from;
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sign&#32;=&#32;Utils.Sign(to&#32;-&#32;from);
00067 
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sign&#32;!=&#32;0)&#32;{
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(Utils.Sign(to&#32;-&#32;value)&#32;==&#32;sign)&#32;{
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.Add(value);
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;+=&#32;step&#32;*&#32;sign;
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00074 
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!endIsExclusive&#32;&amp;&amp;&#32;value&#32;==&#32;to)&#32;{
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.Add(to);
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00078 
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Query&lt;int&gt;(values);
00080 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">finally</emphasis>&#32;{
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.Clear();
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pool&lt;List&lt;int&gt;&gt;.Recycle(values);
00083 &#32;&#32;&#32;&#32;&#32;&#32;}
00084 &#32;&#32;&#32;&#32;}
00085 &#32;&#32;}
00086 }
</programlisting></section>
