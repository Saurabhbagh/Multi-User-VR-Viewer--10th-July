<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__deque_8cs_source">
<title>Deque.cs</title>
<indexterm><primary>O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Deque.cs</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/******************************************************************************</emphasis>
00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;Leap&#32;Motion,&#32;Inc.&#32;2011-2018.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00003 <emphasis role="comment">&#32;*&#32;Leap&#32;Motion&#32;proprietary&#32;and&#32;confidential.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00004 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00005 <emphasis role="comment">&#32;*&#32;Use&#32;subject&#32;to&#32;the&#32;terms&#32;of&#32;the&#32;Leap&#32;Motion&#32;SDK&#32;Agreement&#32;available&#32;at&#32;&#32;&#32;&#32;&#32;*</emphasis>
00006 <emphasis role="comment">&#32;*&#32;https://developer.leapmotion.com/sdk_agreement,&#32;or&#32;another&#32;agreement&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00007 <emphasis role="comment">&#32;*&#32;between&#32;Leap&#32;Motion&#32;and&#32;you,&#32;your&#32;company&#32;or&#32;other&#32;organization.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
00008 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
00009 
00010 <emphasis role="keyword">using</emphasis>&#32;System;
00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="__balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23">UnityEngine</link>;
00012 
00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_leap_1_1_unity">Leap.Unity</link>&#32;{
00014 
<anchor xml:id="__deque_8cs_source_1l00015"/><link linkend="_class_leap_1_1_unity_1_1_deque">00015</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_leap_1_1_unity_1_1_deque">Deque</link>&lt;T&gt;&#32;{
00016 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;T[]&#32;_array;
00017 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;uint&#32;_front,&#32;_count;
00018 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;uint&#32;_indexMask;
00019 
<anchor xml:id="__deque_8cs_source_1l00020"/><link linkend="_class_leap_1_1_unity_1_1_deque_1af2f33588f51a6337080c2daf710c5a59">00020</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1af2f33588f51a6337080c2daf710c5a59">Deque</link>(<emphasis role="keywordtype">int</emphasis>&#32;minCapacity&#32;=&#32;8)&#32;{
00021 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minCapacity&#32;&lt;=&#32;0)&#32;{
00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;ArgumentException(<emphasis role="stringliteral">&quot;Capacity&#32;must&#32;be&#32;positive&#32;and&#32;nonzero.&quot;</emphasis>);
00023 &#32;&#32;&#32;&#32;&#32;&#32;}
00024 
00025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Find&#32;next&#32;highest&#32;power&#32;of&#32;two</emphasis>
00026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;capacity&#32;=&#32;Mathf.ClosestPowerOfTwo(minCapacity);
00027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(capacity&#32;&lt;&#32;minCapacity)&#32;{
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;capacity&#32;*=&#32;2;
00029 &#32;&#32;&#32;&#32;&#32;&#32;}
00030 
00031 &#32;&#32;&#32;&#32;&#32;&#32;_array&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;T[capacity];
00032 &#32;&#32;&#32;&#32;&#32;&#32;recalculateIndexMask();
00033 &#32;&#32;&#32;&#32;&#32;&#32;_front&#32;=&#32;0;
00034 &#32;&#32;&#32;&#32;&#32;&#32;_count&#32;=&#32;0;
00035 &#32;&#32;&#32;&#32;}
00036 
<anchor xml:id="__deque_8cs_source_1l00037"/><link linkend="_class_leap_1_1_unity_1_1_deque_1a045ee07203842538f5ba78cccd758e04">00037</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1a045ee07203842538f5ba78cccd758e04">Count</link>&#32;{
00038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)_count;
00040 &#32;&#32;&#32;&#32;&#32;&#32;}
00041 &#32;&#32;&#32;&#32;}
00042 
<anchor xml:id="__deque_8cs_source_1l00043"/><link linkend="_class_leap_1_1_unity_1_1_deque_1aaefa3c4fb909affdb5a8eee5affbe603">00043</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1aaefa3c4fb909affdb5a8eee5affbe603">Clear</link>()&#32;{
00044 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_count&#32;!=&#32;0)&#32;{
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Array.Clear(_array,&#32;0,&#32;_array.Length);
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_front&#32;=&#32;0;
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_count&#32;=&#32;0;
00048 &#32;&#32;&#32;&#32;&#32;&#32;}
00049 &#32;&#32;&#32;&#32;}
00050 
<anchor xml:id="__deque_8cs_source_1l00051"/><link linkend="_class_leap_1_1_unity_1_1_deque_1a4ee63cee34a27e19b6631b07b918103f">00051</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1a4ee63cee34a27e19b6631b07b918103f">PushBack</link>(T&#32;t)&#32;{
00052 &#32;&#32;&#32;&#32;&#32;&#32;doubleCapacityIfFull();
00053 &#32;&#32;&#32;&#32;&#32;&#32;++_count;
00054 &#32;&#32;&#32;&#32;&#32;&#32;_array[getBackIndex()]&#32;=&#32;t;
00055 &#32;&#32;&#32;&#32;}
00056 
<anchor xml:id="__deque_8cs_source_1l00057"/><link linkend="_class_leap_1_1_unity_1_1_deque_1ad138b4500ea49069cf1ca653124b42ec">00057</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1ad138b4500ea49069cf1ca653124b42ec">PushFront</link>(T&#32;t)&#32;{
00058 &#32;&#32;&#32;&#32;&#32;&#32;doubleCapacityIfFull();
00059 &#32;&#32;&#32;&#32;&#32;&#32;++_count;
00060 &#32;&#32;&#32;&#32;&#32;&#32;_front&#32;=&#32;(_front&#32;-&#32;1)&#32;&amp;&#32;_indexMask;
00061 &#32;&#32;&#32;&#32;&#32;&#32;_array[_front]&#32;=&#32;t;
00062 &#32;&#32;&#32;&#32;}
00063 
<anchor xml:id="__deque_8cs_source_1l00064"/><link linkend="_class_leap_1_1_unity_1_1_deque_1a88278111a5e6310bdcef74f0f7306260">00064</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1a88278111a5e6310bdcef74f0f7306260">PopBack</link>()&#32;{
00065 &#32;&#32;&#32;&#32;&#32;&#32;checkForEmpty(<emphasis role="stringliteral">&quot;pop&#32;back&quot;</emphasis>);
00066 
00067 &#32;&#32;&#32;&#32;&#32;&#32;_array[getBackIndex()]&#32;=&#32;<emphasis role="keywordflow">default</emphasis>(T);
00068 &#32;&#32;&#32;&#32;&#32;&#32;--_count;
00069 &#32;&#32;&#32;&#32;}
00070 
<anchor xml:id="__deque_8cs_source_1l00071"/><link linkend="_class_leap_1_1_unity_1_1_deque_1a3a469f3d2a550481a770ab90824c2ab5">00071</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1a3a469f3d2a550481a770ab90824c2ab5">PopFront</link>()&#32;{
00072 &#32;&#32;&#32;&#32;&#32;&#32;checkForEmpty(<emphasis role="stringliteral">&quot;pop&#32;front&quot;</emphasis>);
00073 
00074 &#32;&#32;&#32;&#32;&#32;&#32;_array[_front]&#32;=&#32;<emphasis role="keywordflow">default</emphasis>(T);
00075 &#32;&#32;&#32;&#32;&#32;&#32;--_count;
00076 &#32;&#32;&#32;&#32;&#32;&#32;_front&#32;=&#32;(_front&#32;+&#32;1)&#32;&amp;&#32;_indexMask;
00077 &#32;&#32;&#32;&#32;}
00078 
<anchor xml:id="__deque_8cs_source_1l00079"/><link linkend="_class_leap_1_1_unity_1_1_deque_1ac9dac7bc414537d08841c3134e036e96">00079</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1ac9dac7bc414537d08841c3134e036e96">PopBack</link>(out&#32;T&#32;back)&#32;{
00080 &#32;&#32;&#32;&#32;&#32;&#32;checkForEmpty(<emphasis role="stringliteral">&quot;pop&#32;back&quot;</emphasis>);
00081 
00082 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;backIndex&#32;=&#32;getBackIndex();
00083 &#32;&#32;&#32;&#32;&#32;&#32;back&#32;=&#32;_array[backIndex];
00084 &#32;&#32;&#32;&#32;&#32;&#32;_array[backIndex]&#32;=&#32;<emphasis role="keywordflow">default</emphasis>(T);
00085 &#32;&#32;&#32;&#32;&#32;&#32;--_count;
00086 &#32;&#32;&#32;&#32;}
00087 
<anchor xml:id="__deque_8cs_source_1l00088"/><link linkend="_class_leap_1_1_unity_1_1_deque_1a5074f34c072124f745e57c6440a51a4c">00088</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1a5074f34c072124f745e57c6440a51a4c">PopFront</link>(out&#32;T&#32;front)&#32;{
00089 &#32;&#32;&#32;&#32;&#32;&#32;checkForEmpty(<emphasis role="stringliteral">&quot;pop&#32;front&quot;</emphasis>);
00090 
00091 &#32;&#32;&#32;&#32;&#32;&#32;front&#32;=&#32;_array[_front];
00092 &#32;&#32;&#32;&#32;&#32;&#32;_array[_front]&#32;=&#32;<emphasis role="keywordflow">default</emphasis>(T);
00093 &#32;&#32;&#32;&#32;&#32;&#32;_front&#32;=&#32;(_front&#32;+&#32;1)&#32;&amp;&#32;_indexMask;
00094 &#32;&#32;&#32;&#32;&#32;&#32;--_count;
00095 &#32;&#32;&#32;&#32;}
00096 
<anchor xml:id="__deque_8cs_source_1l00097"/><link linkend="_class_leap_1_1_unity_1_1_deque_1a11098175933b4b40fe5304b6f3cf3f67">00097</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;T&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1a11098175933b4b40fe5304b6f3cf3f67">Front</link>&#32;{
00098 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checkForEmpty(<emphasis role="stringliteral">&quot;get&#32;front&quot;</emphasis>);
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_array[_front];
00101 &#32;&#32;&#32;&#32;&#32;&#32;}
00102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checkForEmpty(<emphasis role="stringliteral">&quot;set&#32;front&quot;</emphasis>);
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_array[_front]&#32;=&#32;value;
00105 &#32;&#32;&#32;&#32;&#32;&#32;}
00106 &#32;&#32;&#32;&#32;}
00107 
<anchor xml:id="__deque_8cs_source_1l00108"/><link linkend="_class_leap_1_1_unity_1_1_deque_1ad0f1295eca862d9e37d3a49fccf4ea72">00108</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;T&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1ad0f1295eca862d9e37d3a49fccf4ea72">Back</link>&#32;{
00109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checkForEmpty(<emphasis role="stringliteral">&quot;get&#32;back&quot;</emphasis>);
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_array[getBackIndex()];
00112 &#32;&#32;&#32;&#32;&#32;&#32;}
00113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checkForEmpty(<emphasis role="stringliteral">&quot;set&#32;back&quot;</emphasis>);
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_array[getBackIndex()]&#32;=&#32;value;
00116 &#32;&#32;&#32;&#32;&#32;&#32;}
00117 &#32;&#32;&#32;&#32;}
00118 
<anchor xml:id="__deque_8cs_source_1l00119"/><link linkend="_class_leap_1_1_unity_1_1_deque_1ac6ec12e1519aa5105be2972d19472f3a">00119</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;T&#32;<emphasis role="keyword">this</emphasis>[<emphasis role="keywordtype">int</emphasis>&#32;index]&#32;{
00120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;uindex&#32;=&#32;(uint)index;
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checkForValidIndex(uindex);
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_array[getIndex(uindex)];
00124 &#32;&#32;&#32;&#32;&#32;&#32;}
00125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;uindex&#32;=&#32;(uint)index;
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checkForValidIndex(uindex);
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_array[getIndex(uindex)]&#32;=&#32;value;
00129 &#32;&#32;&#32;&#32;&#32;&#32;}
00130 &#32;&#32;&#32;&#32;}
00131 
<anchor xml:id="__deque_8cs_source_1l00132"/><link linkend="_class_leap_1_1_unity_1_1_deque_1a2b65e86dacf65e14275e49d76737caab">00132</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;<link linkend="_class_leap_1_1_unity_1_1_deque_1a2b65e86dacf65e14275e49d76737caab">ToDebugString</link>()&#32;{
00133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;debug&#32;=&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
00134 &#32;&#32;&#32;&#32;&#32;&#32;uint&#32;back&#32;=&#32;getBackIndex();
00135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;_array.Length;&#32;i++)&#32;{
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isEmpty;
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_count&#32;==&#32;0)&#32;{
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isEmpty&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_count&#32;==&#32;1)&#32;{
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isEmpty&#32;=&#32;i&#32;!=&#32;_front;
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_front&#32;&lt;&#32;back)&#32;{
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isEmpty&#32;=&#32;(i&#32;&lt;&#32;_front)&#32;||&#32;(i&#32;&gt;&#32;back);
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isEmpty&#32;=&#32;(i&#32;&lt;&#32;_front)&#32;&amp;&amp;&#32;(i&#32;&gt;&#32;back);
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00146 
00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;element&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;_front)&#32;{
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element&#32;=&#32;<emphasis role="stringliteral">&quot;{&quot;</emphasis>;
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element&#32;=&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00153 
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isEmpty)&#32;{
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element&#32;+=&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>;
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element&#32;+=&#32;_array[i].ToString();
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00159 
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;back)&#32;{
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element&#32;+=&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>;
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00165 
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debug&#32;+=&#32;element;
00167 &#32;&#32;&#32;&#32;&#32;&#32;}
00168 &#32;&#32;&#32;&#32;&#32;&#32;debug&#32;+=&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
00169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;debug;
00170 &#32;&#32;&#32;&#32;}
00171 
00172 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;uint&#32;getBackIndex()&#32;{
00173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_front&#32;+&#32;_count&#32;-&#32;1)&#32;&amp;&#32;_indexMask;
00174 &#32;&#32;&#32;&#32;}
00175 
00176 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;uint&#32;getIndex(uint&#32;index)&#32;{
00177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_front&#32;+&#32;index)&#32;&amp;&#32;_indexMask;
00178 &#32;&#32;&#32;&#32;}
00179 
00180 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;doubleCapacityIfFull()&#32;{
00181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_count&#32;&gt;=&#32;_array.Length)&#32;{
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T[]&#32;newArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;T[_array.Length&#32;*&#32;2];
00183 
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;front&#32;=&#32;getBackIndex();
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_front&#32;&lt;=&#32;front)&#32;{
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//values&#32;do&#32;not&#32;wrap&#32;around,&#32;we&#32;can&#32;use&#32;a&#32;simple&#32;copy</emphasis>
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Array.Copy(_array,&#32;_front,&#32;newArray,&#32;0,&#32;_count);
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//values&#32;do&#32;wrap&#32;around,&#32;we&#32;need&#32;to&#32;use&#32;2&#32;copies</emphasis>
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;backOffset&#32;=&#32;(uint)_array.Length&#32;-&#32;_front;
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Array.Copy(_array,&#32;_front,&#32;newArray,&#32;0,&#32;backOffset);
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Array.Copy(_array,&#32;0,&#32;newArray,&#32;backOffset,&#32;_count&#32;-&#32;backOffset);
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00194 
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_front&#32;=&#32;0;
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_array&#32;=&#32;newArray;
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recalculateIndexMask();
00198 &#32;&#32;&#32;&#32;&#32;&#32;}
00199 &#32;&#32;&#32;&#32;}
00200 
00201 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;recalculateIndexMask()&#32;{
00202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//array&#32;length&#32;is&#32;always&#32;power&#32;of&#32;2,&#32;so&#32;length-1&#32;is&#32;the&#32;bitmask&#32;we&#32;need</emphasis>
00203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//8&#32;=&#32;1000</emphasis>
00204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//7&#32;=&#32;0111&#32;=&#32;mask&#32;for&#32;values&#32;0-7</emphasis>
00205 &#32;&#32;&#32;&#32;&#32;&#32;_indexMask&#32;=&#32;(uint)_array.Length&#32;-&#32;1;
00206 &#32;&#32;&#32;&#32;}
00207 
00208 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checkForValidIndex(uint&#32;index)&#32;{
00209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&gt;=&#32;_count)&#32;{
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;IndexOutOfRangeException(<emphasis role="stringliteral">&quot;The&#32;index&#32;&quot;</emphasis>&#32;+&#32;index&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;was&#32;out&#32;of&#32;range&#32;for&#32;the&#32;RingBuffer&#32;with&#32;size&#32;&quot;</emphasis>&#32;+&#32;_count&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>);
00211 &#32;&#32;&#32;&#32;&#32;&#32;}
00212 &#32;&#32;&#32;&#32;}
00213 
00214 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checkForEmpty(<emphasis role="keywordtype">string</emphasis>&#32;actionName)&#32;{
00215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_count&#32;==&#32;0)&#32;{
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;InvalidOperationException(<emphasis role="stringliteral">&quot;Cannot&#32;&quot;</emphasis>&#32;+&#32;actionName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;because&#32;the&#32;RingBuffer&#32;is&#32;empty.&quot;</emphasis>);
00217 &#32;&#32;&#32;&#32;&#32;&#32;}
00218 &#32;&#32;&#32;&#32;}
00219 &#32;&#32;}
00220 }
</programlisting></section>
