<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_transform_copy_test_8cs" kind="file" language="C#">
    <compoundname>TransformCopyTest.cs</compoundname>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity" prot="public">Leap::Unity::Tests::TransformCopyIdentity</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation" prot="public">Leap::Unity::Tests::TransformCopyTranslation</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity">Leap::Unity</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity_1_1_tests">Leap::Unity::Tests</innernamespace>
    <innernamespace refid="namespace_system_1_1_reflection">System::Reflection</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Linq;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Reflection;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_unity_1_1_tests" kindref="compound">Leap.Unity.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity" kindref="compound">TransformCopyIdentity</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref><sp/>{</highlight></codeline>
<codeline lineno="19" refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f" kindref="member">_originalFrame</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1aaad557351863e9bcb612237c4a47821f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1aaad557351863e9bcb612237c4a47821f" kindref="member">createFrame</ref>()<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f" kindref="member">_originalFrame</ref><sp/>=<sp/>TestHandFactory.MakeTestFrame(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f" kindref="member">_originalFrame</ref>.TransformedCopy(<ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref>.<ref refid="struct_leap_1_1_leap_transform_1a10de68df5cf1afa89c273a33d0629f16" kindref="member">Identity</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="27" refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1a62950c0fc6bd366858f269534f082c75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1a62950c0fc6bd366858f269534f082c75" kindref="member">IdsAreSame</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>.Count,<sp/>Is.EqualTo(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f" kindref="member">_originalFrame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>.Count));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>.Count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>oldHand<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f" kindref="member">_originalFrame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>[i];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>newHand<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>[i];</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(oldHand.<ref refid="class_leap_1_1_hand_1ac7bfb32524382f4c9e4fb830437fe72b" kindref="member">Id</ref>,<sp/>Is.EqualTo(newHand.<ref refid="class_leap_1_1_hand_1ac7bfb32524382f4c9e4fb830437fe72b" kindref="member">Id</ref>));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>5;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref><sp/>oldFinger<sp/>=<sp/>oldHand.<ref refid="class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6" kindref="member">Fingers</ref>[j];</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref><sp/>newFinger<sp/>=<sp/>newHand.<ref refid="class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6" kindref="member">Fingers</ref>[j];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(oldFinger.<ref refid="class_leap_1_1_finger_1a84df992a5e1b895acdc3b4c3da000950" kindref="member">Id</ref>,<sp/>Is.EqualTo(newFinger.<ref refid="class_leap_1_1_finger_1a84df992a5e1b895acdc3b4c3da000950" kindref="member">Id</ref>));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="44" refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1ab91a7a3434ce825ec1f68f7bd36df0a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1ab91a7a3434ce825ec1f68f7bd36df0a5" kindref="member">AreBinaryEqual</ref>()<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assertObjectsEqual(</highlight><highlight class="stringliteral">&quot;Frame&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_identity_1adf6db3ba0e146733605aa800eaba363f" kindref="member">_originalFrame</ref>,<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertObjectsEqual(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>objectName,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((a<sp/>==<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">)<sp/>!=<sp/>(b<sp/>==<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Fail(</highlight><highlight class="stringliteral">&quot;For<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>objectName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>one<sp/>object<sp/>was<sp/>null<sp/>an<sp/>the<sp/>other<sp/>was<sp/>not.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>typeA<sp/>=<sp/>a.GetType();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>typeB<sp/>=<sp/>b.GetType();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeA<sp/>!=<sp/>typeB)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Fail(</highlight><highlight class="stringliteral">&quot;For<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>objectName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>object<sp/>Type<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>typeA<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>equal<sp/>to<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>typeB<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeA.IsValueType)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(a,<sp/>Is.EqualTo(b),<sp/>objectName);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>is<sp/>IList)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IList<sp/>aList<sp/>=<sp/>a<sp/>as<sp/>IList;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IList<sp/>bList<sp/>=<sp/>b<sp/>as<sp/>IList;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(aList.Count,<sp/>Is.EqualTo(bList.Count),<sp/>objectName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.Count&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aList.Count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertObjectsEqual(objectName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>i<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,<sp/>aList[i],<sp/>bList[i]);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FieldInfo[]<sp/>fields<sp/>=<sp/>typeA.GetFields(BindingFlags.Public<sp/>|<sp/>BindingFlags.Instance);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(FieldInfo<sp/>field<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fields)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertObjectsEqual(objectName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>field.Name,<sp/>field.GetValue(a),<sp/>field.GetValue(b));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PropertyInfo[]<sp/>properties<sp/>=<sp/>typeA.GetProperties(BindingFlags.Public<sp/>|<sp/>BindingFlags.Instance);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(PropertyInfo<sp/>property<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>properties)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(property.GetIndexParameters().Length<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>propA;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>propA<sp/>=<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal">.GetValue(a,<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(Exception<sp/>exceptionA)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal">.GetValue(b,<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Fail(</highlight><highlight class="stringliteral">&quot;For<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>objectName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>one<sp/>property<sp/>threw<sp/>an<sp/>exception<sp/>where<sp/>the<sp/>other<sp/>did<sp/>not.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(Exception<sp/>exceptionB)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(exceptionA.GetType(),<sp/>Is.EqualTo(exceptionB.GetType()),<sp/></highlight><highlight class="stringliteral">&quot;For<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>objectName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>both<sp/>properties<sp/>threw<sp/>exceptions<sp/>but<sp/>their<sp/>types<sp/>were<sp/>different.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>propB<sp/>=<sp/></highlight><highlight class="keyword">property</highlight><highlight class="normal">.GetValue(b,<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertObjectsEqual(objectName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>property.Name,<sp/>propA,<sp/>propB);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation" kindref="compound">TransformCopyTranslation</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref><sp/>{</highlight></codeline>
<codeline lineno="108" refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1ada7696181bd158597d8bd4818f81c470" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1ada7696181bd158597d8bd4818f81c470" kindref="member">translation</ref><sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>;</highlight></codeline>
<codeline lineno="109" refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a0b65a9ec9a4d6c68e7023712b4eb4b11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a0b65a9ec9a4d6c68e7023712b4eb4b11" kindref="member">_originalFrame</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1abaa9e440cd40e50c4d4e46ab6eb3fbc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1abaa9e440cd40e50c4d4e46ab6eb3fbc4" kindref="member">createFrame</ref>()<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a0b65a9ec9a4d6c68e7023712b4eb4b11" kindref="member">_originalFrame</ref><sp/>=<sp/>TestHandFactory.MakeTestFrame(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref><sp/>forwardTransform<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref>(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1ada7696181bd158597d8bd4818f81c470" kindref="member">translation</ref>,<sp/><ref refid="struct_leap_1_1_leap_quaternion" kindref="compound">LeapQuaternion</ref>.<ref refid="struct_leap_1_1_leap_quaternion_1aa69693c6f2fd5545034b9c1c0af286b6" kindref="member">Identity</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a0b65a9ec9a4d6c68e7023712b4eb4b11" kindref="member">_originalFrame</ref>.TransformedCopy(forwardTransform);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="118" refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a054ff9a6408b4c0cce4bce27620ce67e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a054ff9a6408b4c0cce4bce27620ce67e" kindref="member">IsTranslated</ref>()<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>.Count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>oldHand<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1a0b65a9ec9a4d6c68e7023712b4eb4b11" kindref="member">_originalFrame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>[i];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>newHand<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>[i];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82" kindref="member">assertVectorsEqual</ref>(oldHand.<ref refid="class_leap_1_1_hand_1aaf0940b9108e92c22e33b9c6cd32921a" kindref="member">PalmPosition</ref><sp/>+<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1ada7696181bd158597d8bd4818f81c470" kindref="member">translation</ref>,<sp/>newHand.<ref refid="class_leap_1_1_hand_1aaf0940b9108e92c22e33b9c6cd32921a" kindref="member">PalmPosition</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Palm<sp/>Position&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>5;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref><sp/>oldFinger<sp/>=<sp/>oldHand.<ref refid="class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6" kindref="member">Fingers</ref>[j];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref><sp/>newFinger<sp/>=<sp/>newHand.<ref refid="class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6" kindref="member">Fingers</ref>[j];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82" kindref="member">assertVectorsEqual</ref>(oldFinger.<ref refid="class_leap_1_1_finger_1aae573cee6c1bdefd293838f133235b2d" kindref="member">TipPosition</ref><sp/>+<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_transform_copy_translation_1ada7696181bd158597d8bd4818f81c470" kindref="member">translation</ref>,<sp/>newFinger.<ref refid="class_leap_1_1_finger_1aae573cee6c1bdefd293838f133235b2d" kindref="member">TipPosition</ref>,<sp/>oldFinger.<ref refid="class_leap_1_1_finger_1a86fc4ed5138e26ac07ec0885f3627126" kindref="member">Type</ref>.<ref refid="class_leap_1_1_finger_1a35cbefd8df3c7bc8a1f0d45a45105fa0" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Editor/Tests/TransformCopyTest.cs"/>
  </compounddef>
</doxygen>
