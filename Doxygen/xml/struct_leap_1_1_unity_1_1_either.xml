<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_leap_1_1_unity_1_1_either" kind="struct" language="C#" prot="public">
    <compoundname>Leap::Unity::Either</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IEquatable&lt; Either&lt; A, B &gt;&gt;</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">IComparable</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">IComparable&lt; Either&lt; A, B &gt;&gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>A</type>
      </param>
      <param>
        <type>B</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_either_1a40ac2be2f7b6cf84befee547151bab6f" prot="public" static="no" mutable="no">
        <type>readonly bool</type>
        <definition>readonly bool Leap.Unity.Either&lt; A, B &gt;.isA</definition>
        <argsstring></argsstring>
        <name>isA</name>
        <briefdescription>
<para>Returns whether or not this <ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref> contains the first value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="24" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="struct_leap_1_1_unity_1_1_either_1a66c31b6f54097c6a442888bad3aa8b01" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool Leap.Unity.Either&lt; A, B &gt;.isB</definition>
        <argsstring></argsstring>
        <name>isB</name>
        <briefdescription>
<para>Returns whether or not this <ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref> contains the second value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="29" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="property" id="struct_leap_1_1_unity_1_1_either_1ac7c612037b34bbfb23251111dae09928" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>Maybe&lt; A &gt;</type>
        <definition>Maybe&lt;A&gt; Leap.Unity.Either&lt; A, B &gt;.a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <briefdescription>
<para>Returns a <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> that contains the value of A if it exists, or no value if it doesn&apos;t. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="42" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="42" bodyend="50"/>
      </memberdef>
      <memberdef kind="property" id="struct_leap_1_1_unity_1_1_either_1aaa579850040ea7c13ab798269e23fd0c" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>Maybe&lt; B &gt;</type>
        <definition>Maybe&lt;B&gt; Leap.Unity.Either&lt; A, B &gt;.b</definition>
        <argsstring></argsstring>
        <name>b</name>
        <briefdescription>
<para>Returns a <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> that contains the value of B if it exists, or no value if it doesn&apos;t. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="56" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="56" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_either_1a2e25b8b99cc1b581df0f0e5e866a41f1" prot="private" static="no" mutable="no">
        <type>readonly A</type>
        <definition>readonly A Leap.Unity.Either&lt; A, B &gt;._a</definition>
        <argsstring></argsstring>
        <name>_a</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="35" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_either_1a6ddf9d0c1fdc2f35ee98b487276c3146" prot="private" static="no" mutable="no">
        <type>readonly B</type>
        <definition>readonly B Leap.Unity.Either&lt; A, B &gt;._b</definition>
        <argsstring></argsstring>
        <name>_b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="36" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1aff7e724eb9b602c97e27bba85b4e3aa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Unity.Either&lt; A, B &gt;.Either</definition>
        <argsstring>(A a)</argsstring>
        <name>Either</name>
        <param>
          <type>A</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Constructs an <ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref> with a value of A. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="69" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="69" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1a42d1ab7f4e2bf0794752cc858affec7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Unity.Either&lt; A, B &gt;.Either</definition>
        <argsstring>(B b)</argsstring>
        <name>Either</name>
        <param>
          <type>B</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Constructs an <ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref> with a value of B. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="82" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="82" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1a4c0eaf284c03842b99f53ec3f059faac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Unity.Either&lt; A, B &gt;.Match</definition>
        <argsstring>(Action&lt; A &gt; ifA, Action&lt; B &gt; ifB)</argsstring>
        <name>Match</name>
        <param>
          <type>Action&lt; A &gt;</type>
          <declname>ifA</declname>
        </param>
        <param>
          <type>Action&lt; B &gt;</type>
          <declname>ifB</declname>
        </param>
        <briefdescription>
<para>Calls the first delegate with the value of A if it is present, else calls the second delegate with the value of B. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="96" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="96" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1a7ef635be83e9e5e874739d9f363692ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Leap.Unity.Either&lt; A, B &gt;.TryGetA</definition>
        <argsstring>(out A a)</argsstring>
        <name>TryGetA</name>
        <param>
          <type>out A</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>If this either contains the value of A, the out argument is filled with that value and this method returns true, else it returns false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="108" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1a2936191d85fa4d7dcb85c12ca2f2f471" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Leap.Unity.Either&lt; A, B &gt;.TryGetB</definition>
        <argsstring>(out B b)</argsstring>
        <name>TryGetB</name>
        <param>
          <type>out B</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>If this either contains the value of B, the out argument is filled with that value and this method returns true, else it returns false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="117" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1a033f69b0b8238d2f434d49d097e94788" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override int</type>
        <definition>override int Leap.Unity.Either&lt; A, B &gt;.GetHashCode</definition>
        <argsstring>()</argsstring>
        <name>GetHashCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="122" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="122" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1ab1a67555ab3c674e42abce4fd3365134" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Leap.Unity.Either&lt; A, B &gt;.Equals</definition>
        <argsstring>(object obj)</argsstring>
        <name>Equals</name>
        <param>
          <type>object</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="130" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1ae55d660db9359d936f67d988d7078cc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Leap.Unity.Either&lt; A, B &gt;.Equals</definition>
        <argsstring>(Either&lt; A, B &gt; other)</argsstring>
        <name>Equals</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="138" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="138" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1a1b677bf5b50b5b6e794821f17b201825" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Leap.Unity.Either&lt; A, B &gt;.CompareTo</definition>
        <argsstring>(object obj)</argsstring>
        <name>CompareTo</name>
        <param>
          <type>object</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="148" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="148" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1a91e207fc83d8fa9442a9dcfffcdbe2d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Leap.Unity.Either&lt; A, B &gt;.CompareTo</definition>
        <argsstring>(Either&lt; A, B &gt; other)</argsstring>
        <name>CompareTo</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="156" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="156" bodyend="184"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1ac635dd45bbe22cd73bb1c850d7294087" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Either&lt; A, B &gt;.operator==</definition>
        <argsstring>(Either&lt; A, B &gt; either0, Either&lt; A, B &gt; either1)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either0</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="186" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1ac30ec0b03336fd8a86a119c60889cebf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Either&lt; A, B &gt;.operator !=</definition>
        <argsstring>(Either&lt; A, B &gt; either0, Either&lt; A, B &gt; either1)</argsstring>
        <name>operator !=</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either0</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="190" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1ae6ef9429d3c8ef042af9ca7c798aeb76" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Either&lt; A, B &gt;.operator &gt;</definition>
        <argsstring>(Either&lt; A, B &gt; either0, Either&lt; A, B &gt; either1)</argsstring>
        <name>operator &gt;</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either0</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="194" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1ae181b781714ebcac842831560838a723" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Either&lt; A, B &gt;.operator &gt;=</definition>
        <argsstring>(Either&lt; A, B &gt; either0, Either&lt; A, B &gt; either1)</argsstring>
        <name>operator &gt;=</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either0</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="198" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1ab37b777230207b8c28d6dd31a3973d31" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Either&lt; A, B &gt;.operator&lt;</definition>
        <argsstring>(Either&lt; A, B &gt; either0, Either&lt; A, B &gt; either1)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either0</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="202" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1a8f0100a083842f17c4fb7264168a98bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Either&lt; A, B &gt;.operator&lt;=</definition>
        <argsstring>(Either&lt; A, B &gt; either0, Either&lt; A, B &gt; either1)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either0</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_either" kindref="compound">Either</ref>&lt; A, B &gt;</type>
          <declname>either1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="206" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1aad4cf5d2660fccc66c7fb8af73670645" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>implicit</type>
        <definition>static implicit Leap.Unity.Either&lt; A, B &gt;.operator Either&lt; A, B &gt;</definition>
        <argsstring>(A a)</argsstring>
        <name>operator Either&lt; A, B &gt;</name>
        <param>
          <type>A</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="210" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_either_1aad64b8a106656a151294f1e5f9c70aef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>implicit</type>
        <definition>static implicit Leap.Unity.Either&lt; A, B &gt;.operator Either&lt; A, B &gt;</definition>
        <argsstring>(B b)</argsstring>
        <name>operator Either&lt; A, B &gt;</name>
        <param>
          <type>B</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="214" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="214" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A data structure that represents either a value of type A or a value of type B. The value can never be both A and B. Neither A nor B can ever be null. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1092">
        <label>IComparable&lt; Either&lt; A, B &gt;&gt;</label>
      </node>
      <node id="1089">
        <label>Leap.Unity.Either&lt; A, B &gt;</label>
        <link refid="struct_leap_1_1_unity_1_1_either"/>
        <childnode refid="1090" relation="public-inheritance">
        </childnode>
        <childnode refid="1091" relation="public-inheritance">
        </childnode>
        <childnode refid="1092" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1090">
        <label>IEquatable&lt; Either&lt; A, B &gt;&gt;</label>
      </node>
      <node id="1091">
        <label>IComparable</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1096">
        <label>IComparable&lt; Either&lt; A, B &gt;&gt;</label>
      </node>
      <node id="1093">
        <label>Leap.Unity.Either&lt; A, B &gt;</label>
        <link refid="struct_leap_1_1_unity_1_1_either"/>
        <childnode refid="1094" relation="public-inheritance">
        </childnode>
        <childnode refid="1095" relation="public-inheritance">
        </childnode>
        <childnode refid="1096" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1094">
        <label>IEquatable&lt; Either&lt; A, B &gt;&gt;</label>
      </node>
      <node id="1095">
        <label>IComparable</label>
      </node>
    </collaborationgraph>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" line="19" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Either.cs" bodystart="19" bodyend="217"/>
    <listofallmembers>
      <member refid="struct_leap_1_1_unity_1_1_either_1a2e25b8b99cc1b581df0f0e5e866a41f1" prot="private" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>_a</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a6ddf9d0c1fdc2f35ee98b487276c3146" prot="private" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>_b</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1ac7c612037b34bbfb23251111dae09928" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>a</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1aaa579850040ea7c13ab798269e23fd0c" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>b</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a1b677bf5b50b5b6e794821f17b201825" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>CompareTo</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a91e207fc83d8fa9442a9dcfffcdbe2d4" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>CompareTo</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1aff7e724eb9b602c97e27bba85b4e3aa1" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>Either</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a42d1ab7f4e2bf0794752cc858affec7a" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>Either</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1ab1a67555ab3c674e42abce4fd3365134" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>Equals</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1ae55d660db9359d936f67d988d7078cc1" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>Equals</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a033f69b0b8238d2f434d49d097e94788" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>GetHashCode</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a40ac2be2f7b6cf84befee547151bab6f" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>isA</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a66c31b6f54097c6a442888bad3aa8b01" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>isB</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a4c0eaf284c03842b99f53ec3f059faac" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>Match</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1ac30ec0b03336fd8a86a119c60889cebf" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>operator !=</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1ae6ef9429d3c8ef042af9ca7c798aeb76" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>operator &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1ae181b781714ebcac842831560838a723" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>operator &gt;=</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1aad4cf5d2660fccc66c7fb8af73670645" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>operator Either&lt; A, B &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1aad64b8a106656a151294f1e5f9c70aef" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>operator Either&lt; A, B &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1ab37b777230207b8c28d6dd31a3973d31" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>operator&lt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a8f0100a083842f17c4fb7264168a98bd" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>operator&lt;=</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1ac635dd45bbe22cd73bb1c850d7294087" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>operator==</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a7ef635be83e9e5e874739d9f363692ef" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>TryGetA</name></member>
      <member refid="struct_leap_1_1_unity_1_1_either_1a2936191d85fa4d7dcb85c12ca2f2f471" prot="public" virt="non-virtual"><scope>Leap::Unity::Either</scope><name>TryGetB</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
