<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kind="class" language="C#" prot="public">
    <compoundname>Valve::VR::SteamVR_Action_Pose</compoundname>
    <basecompoundref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base" prot="public" virt="non-virtual">Valve.VR.SteamVR_Action_Pose_Base&lt; SteamVR_Action_Pose_Source_Map&lt; SteamVR_Action_Pose_Source &gt;, SteamVR_Action_Pose_Source &gt;</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">ISerializationCallbackReceiver</basecompoundref>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ae7a4fdfdb1267a24cd889cd2b017da31" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a3861a4b4b8ce246db2cc77e632a7f999" kindref="member">ActiveChangeHandler</ref></type>
        <definition>ActiveChangeHandler Valve.VR.SteamVR_Action_Pose.onActiveChange</definition>
        <argsstring></argsstring>
        <name>onActiveChange</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Event fires when the active state (ActionSet active and binding active) changes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="28" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1aba7e873fc9c7c419b9ed3f8bef4ddb42" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a3861a4b4b8ce246db2cc77e632a7f999" kindref="member">ActiveChangeHandler</ref></type>
        <definition>ActiveChangeHandler Valve.VR.SteamVR_Action_Pose.onActiveBindingChange</definition>
        <argsstring></argsstring>
        <name>onActiveBindingChange</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Event fires when the active state of the binding changes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="32" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a7728910e1c7e84dabcb1c279ba81104f" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ac9415e6ad971e70311f59ff1bfb4ea76" kindref="member">ChangeHandler</ref></type>
        <definition>ChangeHandler Valve.VR.SteamVR_Action_Pose.onChange</definition>
        <argsstring></argsstring>
        <name>onChange</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Event fires when the orientation of the pose changes more than the changeTolerance </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="36" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a3a642708b4ec292d5d30e701eac7c41d" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a243e7046a430c572e5be3d1b6b322b6d" kindref="member">UpdateHandler</ref></type>
        <definition>UpdateHandler Valve.VR.SteamVR_Action_Pose.onUpdate</definition>
        <argsstring></argsstring>
        <name>onUpdate</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Event fires when the action is updated </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="40" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a995b370f9b9a08c25a934eb2beb2c5cd" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a52e352705659c14685cf8a88ef4bafd6" kindref="member">TrackingChangeHandler</ref></type>
        <definition>TrackingChangeHandler Valve.VR.SteamVR_Action_Pose.onTrackingChanged</definition>
        <argsstring></argsstring>
        <name>onTrackingChanged</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Event fires when the state of the tracking has changed </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="44" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a058e7ac6982769f7b51e41a4e61ad7de" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a742270a6bddfea2afd7f535378ae7830" kindref="member">ValidPoseChangeHandler</ref></type>
        <definition>ValidPoseChangeHandler Valve.VR.SteamVR_Action_Pose.onValidPoseChanged</definition>
        <argsstring></argsstring>
        <name>onValidPoseChanged</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Event fires when the validity of the pose has changed </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="48" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a8d9a19a844746eff2dac4a0c75382ecc" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a40c6d9862680e8c99781b3a109d94b82" kindref="member">DeviceConnectedChangeHandler</ref></type>
        <definition>DeviceConnectedChangeHandler Valve.VR.SteamVR_Action_Pose.onDeviceConnectedChanged</definition>
        <argsstring></argsstring>
        <name>onDeviceConnectedChanged</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Event fires when the device bound to this pose is connected or disconnected </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="52" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="53" bodyend="53"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a3861a4b4b8ce246db2cc77e632a7f999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate void</type>
        <definition>delegate void Valve.VR.SteamVR_Action_Pose.ActiveChangeHandler</definition>
        <argsstring>(SteamVR_Action_Pose fromAction, SteamVR_Input_Sources fromSource, bool active)</argsstring>
        <name>ActiveChangeHandler</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref></type>
          <declname>fromAction</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>fromSource</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ac9415e6ad971e70311f59ff1bfb4ea76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate void</type>
        <definition>delegate void Valve.VR.SteamVR_Action_Pose.ChangeHandler</definition>
        <argsstring>(SteamVR_Action_Pose fromAction, SteamVR_Input_Sources fromSource)</argsstring>
        <name>ChangeHandler</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref></type>
          <declname>fromAction</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>fromSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a243e7046a430c572e5be3d1b6b322b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate void</type>
        <definition>delegate void Valve.VR.SteamVR_Action_Pose.UpdateHandler</definition>
        <argsstring>(SteamVR_Action_Pose fromAction, SteamVR_Input_Sources fromSource)</argsstring>
        <name>UpdateHandler</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref></type>
          <declname>fromAction</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>fromSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a52e352705659c14685cf8a88ef4bafd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate void</type>
        <definition>delegate void Valve.VR.SteamVR_Action_Pose.TrackingChangeHandler</definition>
        <argsstring>(SteamVR_Action_Pose fromAction, SteamVR_Input_Sources fromSource, ETrackingResult trackingState)</argsstring>
        <name>TrackingChangeHandler</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref></type>
          <declname>fromAction</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>fromSource</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1abe6feab98f33191b7c27b4292012e90a" kindref="member">ETrackingResult</ref></type>
          <declname>trackingState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a742270a6bddfea2afd7f535378ae7830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate void</type>
        <definition>delegate void Valve.VR.SteamVR_Action_Pose.ValidPoseChangeHandler</definition>
        <argsstring>(SteamVR_Action_Pose fromAction, SteamVR_Input_Sources fromSource, bool validPose)</argsstring>
        <name>ValidPoseChangeHandler</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref></type>
          <declname>fromAction</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>fromSource</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>validPose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a40c6d9862680e8c99781b3a109d94b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate void</type>
        <definition>delegate void Valve.VR.SteamVR_Action_Pose.DeviceConnectedChangeHandler</definition>
        <argsstring>(SteamVR_Action_Pose fromAction, SteamVR_Input_Sources fromSource, bool deviceConnected)</argsstring>
        <name>DeviceConnectedChangeHandler</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref></type>
          <declname>fromAction</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>fromSource</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deviceConnected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a402f4eeaffab4e2da4c6c1c07df93da5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.AddOnDeviceConnectedChanged</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, DeviceConnectedChangeHandler functionToCall)</argsstring>
        <name>AddOnDeviceConnectedChanged</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a40c6d9862680e8c99781b3a109d94b82" kindref="member">DeviceConnectedChangeHandler</ref></type>
          <declname>functionToCall</declname>
        </param>
        <briefdescription>
<para>Fires an event when a device is connected or disconnected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to add an event to. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functionToCall</parametername>
</parameternamelist>
<parameterdescription>
<para>The method you would like to be called when a device is connected. Should take a <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref> as a param</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="58" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a54898147219ffbaedaaac791123327b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.RemoveOnDeviceConnectedChanged</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, DeviceConnectedChangeHandler functionToStopCalling)</argsstring>
        <name>RemoveOnDeviceConnectedChanged</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a40c6d9862680e8c99781b3a109d94b82" kindref="member">DeviceConnectedChangeHandler</ref></type>
          <declname>functionToStopCalling</declname>
        </param>
        <briefdescription>
<para>Stops executing the function setup by the corresponding AddListener </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to remove an event from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functionToStopCalling</parametername>
</parameternamelist>
<parameterdescription>
<para>The method you would like to stop calling when a device is connected. Should take a <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref> as a param</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="66" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ae0f2f16ddb64f4acf9842851ce9f437c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.AddOnTrackingChanged</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, TrackingChangeHandler functionToCall)</argsstring>
        <name>AddOnTrackingChanged</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a52e352705659c14685cf8a88ef4bafd6" kindref="member">TrackingChangeHandler</ref></type>
          <declname>functionToCall</declname>
        </param>
        <briefdescription>
<para>Fires an event when the tracking of the device has changed </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to add an event to. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functionToCall</parametername>
</parameternamelist>
<parameterdescription>
<para>The method you would like to be called when tracking has changed. Should take a <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref> as a param</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="75" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a2683c19d679fb0e5ddf4c05ea9f5520e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.RemoveOnTrackingChanged</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, TrackingChangeHandler functionToStopCalling)</argsstring>
        <name>RemoveOnTrackingChanged</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a52e352705659c14685cf8a88ef4bafd6" kindref="member">TrackingChangeHandler</ref></type>
          <declname>functionToStopCalling</declname>
        </param>
        <briefdescription>
<para>Stops executing the function setup by the corresponding AddListener </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to remove an event from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functionToStopCalling</parametername>
</parameternamelist>
<parameterdescription>
<para>The method you would like to stop calling when tracking has changed. Should take a <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref> as a param</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="83" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a0f4a6917e9c8d7b74c7284c29c6589a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.AddOnValidPoseChanged</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, ValidPoseChangeHandler functionToCall)</argsstring>
        <name>AddOnValidPoseChanged</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a742270a6bddfea2afd7f535378ae7830" kindref="member">ValidPoseChangeHandler</ref></type>
          <declname>functionToCall</declname>
        </param>
        <briefdescription>
<para>Fires an event when the device now has a valid pose or no longer has a valid pose </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to add an event to. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functionToCall</parametername>
</parameternamelist>
<parameterdescription>
<para>The method you would like to be called when the pose has become valid or invalid. Should take a <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref> as a param</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="92" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a061ef630b883bc7c45f489c7f6cf5ca2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.RemoveOnValidPoseChanged</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, ValidPoseChangeHandler functionToStopCalling)</argsstring>
        <name>RemoveOnValidPoseChanged</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a742270a6bddfea2afd7f535378ae7830" kindref="member">ValidPoseChangeHandler</ref></type>
          <declname>functionToStopCalling</declname>
        </param>
        <briefdescription>
<para>Stops executing the function setup by the corresponding AddListener </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to remove an event from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functionToStopCalling</parametername>
</parameternamelist>
<parameterdescription>
<para>The method you would like to stop calling when the pose has become valid or invalid. Should take a <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose" kindref="compound">SteamVR_Action_Pose</ref> as a param</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="100" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a1b947e81f4b7afb3e397d16d753cdb99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.AddOnActiveChangeListener</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, ActiveChangeHandler functionToCall)</argsstring>
        <name>AddOnActiveChangeListener</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a3861a4b4b8ce246db2cc77e632a7f999" kindref="member">ActiveChangeHandler</ref></type>
          <declname>functionToCall</declname>
        </param>
        <briefdescription>
<para>Executes a function when this action&apos;s bound state changes </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="108" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a664b0d917e3abab308a6df857d707d0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.RemoveOnActiveChangeListener</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, ActiveChangeHandler functionToStopCalling)</argsstring>
        <name>RemoveOnActiveChangeListener</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a3861a4b4b8ce246db2cc77e632a7f999" kindref="member">ActiveChangeHandler</ref></type>
          <declname>functionToStopCalling</declname>
        </param>
        <briefdescription>
<para>Stops executing the function setup by the corresponding AddListener </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToStopCalling</parametername>
</parameternamelist>
<parameterdescription>
<para>The local function that you&apos;ve setup to receive update events</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="116" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a8743a27cc0bd757b4b5da8d2dce7e5f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.AddOnChangeListener</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, ChangeHandler functionToCall)</argsstring>
        <name>AddOnChangeListener</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ac9415e6ad971e70311f59ff1bfb4ea76" kindref="member">ChangeHandler</ref></type>
          <declname>functionToCall</declname>
        </param>
        <briefdescription>
<para>Executes a function when the state of this action (with the specified inputSource) changes </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToCall</parametername>
</parameternamelist>
<parameterdescription>
<para>A local function that receives the boolean action who&apos;s state has changed, the corresponding input source, and the new value</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="124" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a07b2100fe3b2f2a0649bbbef72b52563" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.RemoveOnChangeListener</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, ChangeHandler functionToStopCalling)</argsstring>
        <name>RemoveOnChangeListener</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ac9415e6ad971e70311f59ff1bfb4ea76" kindref="member">ChangeHandler</ref></type>
          <declname>functionToStopCalling</declname>
        </param>
        <briefdescription>
<para>Stops executing the function setup by the corresponding AddListener </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToStopCalling</parametername>
</parameternamelist>
<parameterdescription>
<para>The local function that you&apos;ve setup to receive on change events</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="132" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a3be9aaaa89040d6d76699c2528ad3c90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.AddOnUpdateListener</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, UpdateHandler functionToCall)</argsstring>
        <name>AddOnUpdateListener</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a243e7046a430c572e5be3d1b6b322b6d" kindref="member">UpdateHandler</ref></type>
          <declname>functionToCall</declname>
        </param>
        <briefdescription>
<para>Executes a function when the state of this action (with the specified inputSource) is updated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToCall</parametername>
</parameternamelist>
<parameterdescription>
<para>A local function that receives the boolean action who&apos;s state has changed, the corresponding input source, and the new value</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="140" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ae825ca07325b80170162b81d48f83070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Pose.RemoveOnUpdateListener</definition>
        <argsstring>(SteamVR_Input_Sources inputSource, UpdateHandler functionToStopCalling)</argsstring>
        <name>RemoveOnUpdateListener</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a243e7046a430c572e5be3d1b6b322b6d" kindref="member">UpdateHandler</ref></type>
          <declname>functionToStopCalling</declname>
        </param>
        <briefdescription>
<para>Stops executing the function setup by the corresponding AddListener </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToStopCalling</parametername>
</parameternamelist>
<parameterdescription>
<para>The local function that you&apos;ve setup to receive update events</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="148" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="148" bodyend="151"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a9dc6c8e613537665c5f7b76652053a6d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void ISerializationCallbackReceiver.</type>
        <definition>void ISerializationCallbackReceiver. Valve.VR.SteamVR_Action_Pose.OnBeforeSerialize</definition>
        <argsstring>()</argsstring>
        <name>OnBeforeSerialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="153" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1adc0f50c00515dcf7bc26b09658155b27" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void ISerializationCallbackReceiver.</type>
        <definition>void ISerializationCallbackReceiver. Valve.VR.SteamVR_Action_Pose.OnAfterDeserialize</definition>
        <argsstring>()</argsstring>
        <name>OnAfterDeserialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="155" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="155" bodyend="158"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1affeffcb59fcccfbd30d21960498a34d1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Valve.VR.SteamVR_Action_Pose.SetTrackingUniverseOrigin</definition>
        <argsstring>(ETrackingUniverseOrigin newOrigin)</argsstring>
        <name>SetTrackingUniverseOrigin</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a29be99a3c2f780157bd490db06a7f12f" kindref="member">ETrackingUniverseOrigin</ref></type>
          <declname>newOrigin</declname>
        </param>
        <briefdescription>
<para>Sets all pose and skeleton actions to use the specified universe origin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="163" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="163" bodyend="166"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Pose actions represent a position, rotation, and velocities inside the tracked space. <ref refid="class_valve_1_1_v_r_1_1_steam_v_r" kindref="compound">SteamVR</ref> keeps a log of past poses so you can retrieve old poses with GetPoseAtTimeOffset or GetVelocitiesAtTimeOffset. You can also pass in times in the future to these methods for <ref refid="class_valve_1_1_v_r_1_1_steam_v_r" kindref="compound">SteamVR</ref>&apos;s best prediction of where the pose will be at that time. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4779">
        <label>Valve.VR.SteamVR_Action_Pose</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose"/>
        <childnode refid="4780" relation="public-inheritance">
        </childnode>
        <childnode refid="4781" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4780">
        <label>SteamVR_Action_Pose_Base&lt; SteamVR_Action_Pose_Source_Map&lt; SteamVR_Action_Pose_Source &gt;, SteamVR_Action_Pose_Source &gt;</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base"/>
      </node>
      <node id="4781">
        <label>ISerializationCallbackReceiver</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4782">
        <label>Valve.VR.SteamVR_Action_Pose</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose"/>
        <childnode refid="4783" relation="public-inheritance">
        </childnode>
        <childnode refid="4784" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4783">
        <label>SteamVR_Action_Pose_Base&lt; SteamVR_Action_Pose_Source_Map&lt; SteamVR_Action_Pose_Source &gt;, SteamVR_Action_Pose_Source &gt;</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base"/>
      </node>
      <node id="4784">
        <label>ISerializationCallbackReceiver</label>
      </node>
    </collaborationgraph>
    <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" line="19" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Pose.cs" bodystart="18" bodyend="167"/>
    <listofallmembers>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a3861a4b4b8ce246db2cc77e632a7f999" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>ActiveChangeHandler</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a1b947e81f4b7afb3e397d16d753cdb99" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>AddOnActiveChangeListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a8743a27cc0bd757b4b5da8d2dce7e5f2" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>AddOnChangeListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a402f4eeaffab4e2da4c6c1c07df93da5" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>AddOnDeviceConnectedChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ae0f2f16ddb64f4acf9842851ce9f437c" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>AddOnTrackingChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a3be9aaaa89040d6d76699c2528ad3c90" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>AddOnUpdateListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a0f4a6917e9c8d7b74c7284c29c6589a8" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>AddOnValidPoseChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a84bf81feaa02463f8151e1ea25e16825" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>angularVelocity</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ac9415e6ad971e70311f59ff1bfb4ea76" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>ChangeHandler</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a40c6d9862680e8c99781b3a109d94b82" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>DeviceConnectedChangeHandler</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a352107e49074a23f2ece4ec51f7cbc2d" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>deviceIsConnected</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a9e11dfd61cb934d7562f7ead82bd3977" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetAngularVelocity</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a9a48969933cf18a41139748fc3fa1c58" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetDeviceIsConnected</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a1c0012123202777151db1e7364ca7abe" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetLastAngularVelocity</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a55d19b1a7931ed13d689a7c3acb31581" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetLastDeviceIsConnected</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1ab2e7b7757252e937fb6c007f36da7f57" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetLastLocalPosition</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a39183e3163c2c45a353137b92c9475ce" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetLastLocalRotation</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a0071aa67fdb7a1f25f261f58236f182d" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetLastPoseIsValid</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a3c4f99bc27df78ccb09f30f20503c20e" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetLastTrackingResult</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a21d4d04f961d37630361750444666774" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetLastVelocity</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1ab007b14bb04c5d6fc1564ac4ffac1772" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetLocalPosition</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a4cd01c8865799b4abdb3aa05c9bce7a1" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetLocalRotation</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a0edda26e08e24b20fe9f1bb2941ba4a6" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetPoseAtTimeOffset</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1ae83ce8dae5f87c106ccbd0860c8f1181" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetPoseIsValid</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1ac4aa642c201073f77df62ff087351ca2" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetTrackingResult</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a078b2d70fcd9796f0872f03c6eb4cd37" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetVelocitiesAtTimeOffset</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a827a230f97d4cb064be1b679440a3593" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>GetVelocity</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1ae6b3169314d9d47df2d7346bd3514d88" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>lastAngularVelocity</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a879054dc94cfe2303fd3656be573af3f" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>lastDeviceIsConnected</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1ad202da8c9e48c17edb7a9619e51d9628" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>lastLocalPosition</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1ae33de6962f9cf4dd2e217f87f21c00db" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>lastLocalRotation</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a88389de1985db0b02398dbbf1405eba9" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>lastPoseIsValid</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a6457af1bdc6f13c61d2171c320d660cb" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>lastTrackingState</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a46d9cbd329e828e28127f7af2d470e8c" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>lastVelocity</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a532487bde5fc10e4f520822eacaf9b6f" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>localPosition</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a6390b371b472fd2f7f4f501db7dacc96" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>localRotation</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1aba7e873fc9c7c419b9ed3f8bef4ddb42" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>onActiveBindingChange</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ae7a4fdfdb1267a24cd889cd2b017da31" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>onActiveChange</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1adc0f50c00515dcf7bc26b09658155b27" prot="private" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>OnAfterDeserialize</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a9dc6c8e613537665c5f7b76652053a6d" prot="private" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>OnBeforeSerialize</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a7728910e1c7e84dabcb1c279ba81104f" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>onChange</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a8d9a19a844746eff2dac4a0c75382ecc" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>onDeviceConnectedChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a995b370f9b9a08c25a934eb2beb2c5cd" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>onTrackingChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a3a642708b4ec292d5d30e701eac7c41d" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>onUpdate</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a058e7ac6982769f7b51e41a4e61ad7de" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>onValidPoseChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1af6eb7cf17442bd20ab60aad306b49240" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>poseIsValid</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a664b0d917e3abab308a6df857d707d0b" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>RemoveOnActiveChangeListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a07b2100fe3b2f2a0649bbbef72b52563" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>RemoveOnChangeListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a54898147219ffbaedaaac791123327b2" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>RemoveOnDeviceConnectedChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a2683c19d679fb0e5ddf4c05ea9f5520e" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>RemoveOnTrackingChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1ae825ca07325b80170162b81d48f83070" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>RemoveOnUpdateListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a061ef630b883bc7c45f489c7f6cf5ca2" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>RemoveOnValidPoseChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1affeffcb59fcccfbd30d21960498a34d1" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>SetTrackingUniverseOrigin</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a6fed3c51e6941259760bcd88bd17c2dc" prot="protected" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>SetUniverseOrigin</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a6d6534444612fba63fc9723f86745168" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>SteamVR_Action_Pose_Base</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a52e352705659c14685cf8a88ef4bafd6" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>TrackingChangeHandler</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1af04d371ae8e8552385b022d1aa788d32" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>trackingState</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a243e7046a430c572e5be3d1b6b322b6d" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>UpdateHandler</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1a95ffd5217a271d75ca471c9ccdf36215" prot="public" virt="virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>UpdateTransform</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1ad1269e7f3b8399dfe46e7fd85f8ed481" prot="public" virt="virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>UpdateValues</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose_1a742270a6bddfea2afd7f535378ae7830" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>ValidPoseChangeHandler</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base_1aaf2089c742c29110276191454cda9c7a" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Pose</scope><name>velocity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
