<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_valve_1_1_v_r_1_1_c_v_r_system" kind="class" language="C#" prot="public">
    <compoundname>Valve::VR::CVRSystem</compoundname>
    <innerclass refid="struct_valve_1_1_v_r_1_1_c_v_r_system_1_1_get_controller_state_union" prot="private">Valve::VR::CVRSystem::GetControllerStateUnion</innerclass>
    <innerclass refid="struct_valve_1_1_v_r_1_1_c_v_r_system_1_1_get_controller_state_with_pose_union" prot="private">Valve::VR::CVRSystem::GetControllerStateWithPoseUnion</innerclass>
    <innerclass refid="struct_valve_1_1_v_r_1_1_c_v_r_system_1_1_poll_next_event_union" prot="private">Valve::VR::CVRSystem::PollNextEventUnion</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a938817f7df43eeb0c9a2a63d65504a67" prot="private" static="no" mutable="no">
        <type><ref refid="struct_valve_1_1_v_r_1_1_i_v_r_system" kindref="compound">IVRSystem</ref></type>
        <definition>IVRSystem Valve.VR.CVRSystem.FnTable</definition>
        <argsstring></argsstring>
        <name>FnTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1728" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1728" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a333a8c988c5d3a5a8ff50cf9c812470b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>internal</type>
        <definition>internal Valve.VR.CVRSystem.CVRSystem</definition>
        <argsstring>(IntPtr pInterface)</argsstring>
        <name>CVRSystem</name>
        <param>
          <type>IntPtr</type>
          <declname>pInterface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1729" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1729" bodyend="1732"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1aed2e464e33bc44886f9bea98d78b1f87" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>internal delegate bool</type>
        <definition>internal delegate bool Valve.VR.CVRSystem._PollNextEventPacked</definition>
        <argsstring>(ref VREvent_t_Packed pEvent, uint uncbVREvent)</argsstring>
        <name>_PollNextEventPacked</name>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_v_r_event__t___packed" kindref="compound">VREvent_t_Packed</ref></type>
          <declname>pEvent</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>uncbVREvent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1889" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1aa22ada222dbd3adfd6654428b089d13d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>internal delegate bool</type>
        <definition>internal delegate bool Valve.VR.CVRSystem._GetControllerStatePacked</definition>
        <argsstring>(uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize)</argsstring>
        <name>_GetControllerStatePacked</name>
        <param>
          <type>uint</type>
          <declname>unControllerDeviceIndex</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_v_r_controller_state__t___packed" kindref="compound">VRControllerState_t_Packed</ref></type>
          <declname>pControllerState</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unControllerStateSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1935" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a527036de0b52ce3fe886f1478e587582" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>internal delegate bool</type>
        <definition>internal delegate bool Valve.VR.CVRSystem._GetControllerStateWithPosePacked</definition>
        <argsstring>(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose)</argsstring>
        <name>_GetControllerStateWithPosePacked</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a29be99a3c2f780157bd490db06a7f12f" kindref="member">ETrackingUniverseOrigin</ref></type>
          <declname>eOrigin</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unControllerDeviceIndex</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_v_r_controller_state__t___packed" kindref="compound">VRControllerState_t_Packed</ref></type>
          <declname>pControllerState</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unControllerStateSize</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref></type>
          <declname>pTrackedDevicePose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1966" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a51783a0590f7d858c6b7a073c961e910" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRSystem.GetRecommendedRenderTargetSize</definition>
        <argsstring>(ref uint pnWidth, ref uint pnHeight)</argsstring>
        <name>GetRecommendedRenderTargetSize</name>
        <param>
          <type>ref uint</type>
          <declname>pnWidth</declname>
        </param>
        <param>
          <type>ref uint</type>
          <declname>pnHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1733" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1733" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a8e06a8dc62a3d7d82a8672a024d4a3d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_valve_1_1_v_r_1_1_hmd_matrix44__t" kindref="compound">HmdMatrix44_t</ref></type>
        <definition>HmdMatrix44_t Valve.VR.CVRSystem.GetProjectionMatrix</definition>
        <argsstring>(EVREye eEye, float fNearZ, float fFarZ)</argsstring>
        <name>GetProjectionMatrix</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a8153d4a3e627e1cede046327087c1880" kindref="member">EVREye</ref></type>
          <declname>eEye</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fNearZ</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fFarZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1739" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1739" bodyend="1743"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a6154e9257dca79f7c208c3e737160d4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRSystem.GetProjectionRaw</definition>
        <argsstring>(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom)</argsstring>
        <name>GetProjectionRaw</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a8153d4a3e627e1cede046327087c1880" kindref="member">EVREye</ref></type>
          <declname>eEye</declname>
        </param>
        <param>
          <type>ref float</type>
          <declname>pfLeft</declname>
        </param>
        <param>
          <type>ref float</type>
          <declname>pfRight</declname>
        </param>
        <param>
          <type>ref float</type>
          <declname>pfTop</declname>
        </param>
        <param>
          <type>ref float</type>
          <declname>pfBottom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1744" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1744" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a9df1c714a1b2d358f98a4028122ccedb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.ComputeDistortion</definition>
        <argsstring>(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates)</argsstring>
        <name>ComputeDistortion</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a8153d4a3e627e1cede046327087c1880" kindref="member">EVREye</ref></type>
          <declname>eEye</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fU</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fV</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_distortion_coordinates__t" kindref="compound">DistortionCoordinates_t</ref></type>
          <declname>pDistortionCoordinates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1752" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1752" bodyend="1756"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a71db4b263545bd87e2972eef7a27dca3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_valve_1_1_v_r_1_1_hmd_matrix34__t" kindref="compound">HmdMatrix34_t</ref></type>
        <definition>HmdMatrix34_t Valve.VR.CVRSystem.GetEyeToHeadTransform</definition>
        <argsstring>(EVREye eEye)</argsstring>
        <name>GetEyeToHeadTransform</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a8153d4a3e627e1cede046327087c1880" kindref="member">EVREye</ref></type>
          <declname>eEye</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1757" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1757" bodyend="1761"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1afd1fefe2c93366053820330d68303ad7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.GetTimeSinceLastVsync</definition>
        <argsstring>(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter)</argsstring>
        <name>GetTimeSinceLastVsync</name>
        <param>
          <type>ref float</type>
          <declname>pfSecondsSinceLastVsync</declname>
        </param>
        <param>
          <type>ref ulong</type>
          <declname>pulFrameCounter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1762" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1762" bodyend="1768"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a7afe0eda4e65687842208f8ce905a64e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Valve.VR.CVRSystem.GetD3D9AdapterIndex</definition>
        <argsstring>()</argsstring>
        <name>GetD3D9AdapterIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1769" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1769" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a04a43b098747d72d59534db48ce7c293" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRSystem.GetDXGIOutputInfo</definition>
        <argsstring>(ref int pnAdapterIndex)</argsstring>
        <name>GetDXGIOutputInfo</name>
        <param>
          <type>ref int</type>
          <declname>pnAdapterIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1774" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1774" bodyend="1778"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a385592a6afe1b4695151161044f49e99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRSystem.GetOutputDevice</definition>
        <argsstring>(ref ulong pnDevice, ETextureType textureType, IntPtr pInstance)</argsstring>
        <name>GetOutputDevice</name>
        <param>
          <type>ref ulong</type>
          <declname>pnDevice</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a9481de640e411eef49c2f3fdca82eaa3" kindref="member">ETextureType</ref></type>
          <declname>textureType</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>pInstance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1779" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1779" bodyend="1783"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a9c4ab5e7989d6c1938159b7a1ec42b14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.IsDisplayOnDesktop</definition>
        <argsstring>()</argsstring>
        <name>IsDisplayOnDesktop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1784" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1784" bodyend="1788"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a4ade672a06d9ebb00320f2cc04314b52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.SetDisplayVisibility</definition>
        <argsstring>(bool bIsVisibleOnDesktop)</argsstring>
        <name>SetDisplayVisibility</name>
        <param>
          <type>bool</type>
          <declname>bIsVisibleOnDesktop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1789" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1789" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1abb17d53b9f9ac2fbb29cde9e0805826e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRSystem.GetDeviceToAbsoluteTrackingPose</definition>
        <argsstring>(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t [] pTrackedDevicePoseArray)</argsstring>
        <name>GetDeviceToAbsoluteTrackingPose</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a29be99a3c2f780157bd490db06a7f12f" kindref="member">ETrackingUniverseOrigin</ref></type>
          <declname>eOrigin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fPredictedSecondsToPhotonsFromNow</declname>
        </param>
        <param>
          <type><ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref> []</type>
          <declname>pTrackedDevicePoseArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1794" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1794" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1af904b763d37e3fd62655183a9d2756ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRSystem.ResetSeatedZeroPose</definition>
        <argsstring>()</argsstring>
        <name>ResetSeatedZeroPose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1798" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1798" bodyend="1801"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a117026af270ea0f9c11538c5e442b102" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_valve_1_1_v_r_1_1_hmd_matrix34__t" kindref="compound">HmdMatrix34_t</ref></type>
        <definition>HmdMatrix34_t Valve.VR.CVRSystem.GetSeatedZeroPoseToStandingAbsoluteTrackingPose</definition>
        <argsstring>()</argsstring>
        <name>GetSeatedZeroPoseToStandingAbsoluteTrackingPose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1802" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1802" bodyend="1806"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a018442755324a3f6a307f387678c2f72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_valve_1_1_v_r_1_1_hmd_matrix34__t" kindref="compound">HmdMatrix34_t</ref></type>
        <definition>HmdMatrix34_t Valve.VR.CVRSystem.GetRawZeroPoseToStandingAbsoluteTrackingPose</definition>
        <argsstring>()</argsstring>
        <name>GetRawZeroPoseToStandingAbsoluteTrackingPose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1807" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1807" bodyend="1811"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a52663d4f2298d80ebbb9e7a81df46dff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint Valve.VR.CVRSystem.GetSortedTrackedDeviceIndicesOfClass</definition>
        <argsstring>(ETrackedDeviceClass eTrackedDeviceClass, uint [] punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex)</argsstring>
        <name>GetSortedTrackedDeviceIndicesOfClass</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1aa1a3c2765fe53acb85372a57652c47a1" kindref="member">ETrackedDeviceClass</ref></type>
          <declname>eTrackedDeviceClass</declname>
        </param>
        <param>
          <type>uint []</type>
          <declname>punTrackedDeviceIndexArray</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unRelativeToTrackedDeviceIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1812" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1812" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a0daef57d1ec6478a14450cb05febca59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1a44a7a02e482d63dc5e0c0851a2ad775e" kindref="member">EDeviceActivityLevel</ref></type>
        <definition>EDeviceActivityLevel Valve.VR.CVRSystem.GetTrackedDeviceActivityLevel</definition>
        <argsstring>(uint unDeviceId)</argsstring>
        <name>GetTrackedDeviceActivityLevel</name>
        <param>
          <type>uint</type>
          <declname>unDeviceId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1817" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1817" bodyend="1821"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1ae8763c74f425d9eec719a555ea3995fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRSystem.ApplyTransform</definition>
        <argsstring>(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform)</argsstring>
        <name>ApplyTransform</name>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref></type>
          <declname>pOutputPose</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref></type>
          <declname>pTrackedDevicePose</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_hmd_matrix34__t" kindref="compound">HmdMatrix34_t</ref></type>
          <declname>pTransform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1822" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1822" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a44fda444e868474cbc41dd2fc1fe8d81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint Valve.VR.CVRSystem.GetTrackedDeviceIndexForControllerRole</definition>
        <argsstring>(ETrackedControllerRole unDeviceType)</argsstring>
        <name>GetTrackedDeviceIndexForControllerRole</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a7814f024ae1755837d784b5263e05792" kindref="member">ETrackedControllerRole</ref></type>
          <declname>unDeviceType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1826" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1826" bodyend="1830"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1ae337e057f5d2beb2993405773207d78a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1a7814f024ae1755837d784b5263e05792" kindref="member">ETrackedControllerRole</ref></type>
        <definition>ETrackedControllerRole Valve.VR.CVRSystem.GetControllerRoleForTrackedDeviceIndex</definition>
        <argsstring>(uint unDeviceIndex)</argsstring>
        <name>GetControllerRoleForTrackedDeviceIndex</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1831" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1831" bodyend="1835"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1ac397038d675df987d6da168edb72068d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1aa1a3c2765fe53acb85372a57652c47a1" kindref="member">ETrackedDeviceClass</ref></type>
        <definition>ETrackedDeviceClass Valve.VR.CVRSystem.GetTrackedDeviceClass</definition>
        <argsstring>(uint unDeviceIndex)</argsstring>
        <name>GetTrackedDeviceClass</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1836" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1836" bodyend="1840"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1aeba3d5d5d782b1a343ae1555b30c4c3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.IsTrackedDeviceConnected</definition>
        <argsstring>(uint unDeviceIndex)</argsstring>
        <name>IsTrackedDeviceConnected</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1841" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1841" bodyend="1845"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1af4e5f993f956f6a825bafb95f8c1f680" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.GetBoolTrackedDeviceProperty</definition>
        <argsstring>(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)</argsstring>
        <name>GetBoolTrackedDeviceProperty</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1ab060521ead7273986988fc4897e52482" kindref="member">ETrackedDeviceProperty</ref></type>
          <declname>prop</declname>
        </param>
        <param>
          <type>ref <ref refid="namespace_valve_1_1_v_r_1aab6684f03930a2d2cf22ed66b437e47b" kindref="member">ETrackedPropertyError</ref></type>
          <declname>pError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1846" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1846" bodyend="1850"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a6695017d8f8b2e6492fc003f7910a49e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Valve.VR.CVRSystem.GetFloatTrackedDeviceProperty</definition>
        <argsstring>(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)</argsstring>
        <name>GetFloatTrackedDeviceProperty</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1ab060521ead7273986988fc4897e52482" kindref="member">ETrackedDeviceProperty</ref></type>
          <declname>prop</declname>
        </param>
        <param>
          <type>ref <ref refid="namespace_valve_1_1_v_r_1aab6684f03930a2d2cf22ed66b437e47b" kindref="member">ETrackedPropertyError</ref></type>
          <declname>pError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1851" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1851" bodyend="1855"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1abe82e7c658121c24812c9cfc444a750c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Valve.VR.CVRSystem.GetInt32TrackedDeviceProperty</definition>
        <argsstring>(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)</argsstring>
        <name>GetInt32TrackedDeviceProperty</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1ab060521ead7273986988fc4897e52482" kindref="member">ETrackedDeviceProperty</ref></type>
          <declname>prop</declname>
        </param>
        <param>
          <type>ref <ref refid="namespace_valve_1_1_v_r_1aab6684f03930a2d2cf22ed66b437e47b" kindref="member">ETrackedPropertyError</ref></type>
          <declname>pError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1856" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1856" bodyend="1860"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a2cde74d7011dc5d9f2727c29f3a9e8c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ulong</type>
        <definition>ulong Valve.VR.CVRSystem.GetUint64TrackedDeviceProperty</definition>
        <argsstring>(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)</argsstring>
        <name>GetUint64TrackedDeviceProperty</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1ab060521ead7273986988fc4897e52482" kindref="member">ETrackedDeviceProperty</ref></type>
          <declname>prop</declname>
        </param>
        <param>
          <type>ref <ref refid="namespace_valve_1_1_v_r_1aab6684f03930a2d2cf22ed66b437e47b" kindref="member">ETrackedPropertyError</ref></type>
          <declname>pError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1861" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1861" bodyend="1865"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1af01c2051f20b88132e757879a4869e80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_valve_1_1_v_r_1_1_hmd_matrix34__t" kindref="compound">HmdMatrix34_t</ref></type>
        <definition>HmdMatrix34_t Valve.VR.CVRSystem.GetMatrix34TrackedDeviceProperty</definition>
        <argsstring>(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)</argsstring>
        <name>GetMatrix34TrackedDeviceProperty</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1ab060521ead7273986988fc4897e52482" kindref="member">ETrackedDeviceProperty</ref></type>
          <declname>prop</declname>
        </param>
        <param>
          <type>ref <ref refid="namespace_valve_1_1_v_r_1aab6684f03930a2d2cf22ed66b437e47b" kindref="member">ETrackedPropertyError</ref></type>
          <declname>pError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1866" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1866" bodyend="1870"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1abf54d8807c8b17fd968b0d46b405c56d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint Valve.VR.CVRSystem.GetArrayTrackedDeviceProperty</definition>
        <argsstring>(uint unDeviceIndex, ETrackedDeviceProperty prop, uint propType, IntPtr pBuffer, uint unBufferSize, ref ETrackedPropertyError pError)</argsstring>
        <name>GetArrayTrackedDeviceProperty</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1ab060521ead7273986988fc4897e52482" kindref="member">ETrackedDeviceProperty</ref></type>
          <declname>prop</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>propType</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>pBuffer</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unBufferSize</declname>
        </param>
        <param>
          <type>ref <ref refid="namespace_valve_1_1_v_r_1aab6684f03930a2d2cf22ed66b437e47b" kindref="member">ETrackedPropertyError</ref></type>
          <declname>pError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1871" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1871" bodyend="1875"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a7832bc9cd34345dacb66731bc39d8f2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint Valve.VR.CVRSystem.GetStringTrackedDeviceProperty</definition>
        <argsstring>(uint unDeviceIndex, ETrackedDeviceProperty prop, System.Text.StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError)</argsstring>
        <name>GetStringTrackedDeviceProperty</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1ab060521ead7273986988fc4897e52482" kindref="member">ETrackedDeviceProperty</ref></type>
          <declname>prop</declname>
        </param>
        <param>
          <type>System.Text.StringBuilder</type>
          <declname>pchValue</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unBufferSize</declname>
        </param>
        <param>
          <type>ref <ref refid="namespace_valve_1_1_v_r_1aab6684f03930a2d2cf22ed66b437e47b" kindref="member">ETrackedPropertyError</ref></type>
          <declname>pError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1876" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1876" bodyend="1880"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a416e8b65c6d1c54c84196346a17c9e90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Valve.VR.CVRSystem.GetPropErrorNameFromEnum</definition>
        <argsstring>(ETrackedPropertyError error)</argsstring>
        <name>GetPropErrorNameFromEnum</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1aab6684f03930a2d2cf22ed66b437e47b" kindref="member">ETrackedPropertyError</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1881" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1881" bodyend="1885"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a1680564a6dab625afe34b14d4920a263" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.PollNextEvent</definition>
        <argsstring>(ref VREvent_t pEvent, uint uncbVREvent)</argsstring>
        <name>PollNextEvent</name>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_v_r_event__t" kindref="compound">VREvent_t</ref></type>
          <declname>pEvent</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>uncbVREvent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1898" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1898" bodyend="1916"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a95d7cf29714d23acf0e6a6748370e788" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.PollNextEventWithPose</definition>
        <argsstring>(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose)</argsstring>
        <name>PollNextEventWithPose</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a29be99a3c2f780157bd490db06a7f12f" kindref="member">ETrackingUniverseOrigin</ref></type>
          <declname>eOrigin</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_v_r_event__t" kindref="compound">VREvent_t</ref></type>
          <declname>pEvent</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>uncbVREvent</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref></type>
          <declname>pTrackedDevicePose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1917" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1917" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1af1e8543cb021f7215c6252db5c0b5e3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Valve.VR.CVRSystem.GetEventTypeNameFromEnum</definition>
        <argsstring>(EVREventType eType)</argsstring>
        <name>GetEventTypeNameFromEnum</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1afe3398b9e5cb1ea06335142d1b9289f3" kindref="member">EVREventType</ref></type>
          <declname>eType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1922" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1922" bodyend="1926"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a8fe7073e6d0c927bc986388a935a48ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_valve_1_1_v_r_1_1_hidden_area_mesh__t" kindref="compound">HiddenAreaMesh_t</ref></type>
        <definition>HiddenAreaMesh_t Valve.VR.CVRSystem.GetHiddenAreaMesh</definition>
        <argsstring>(EVREye eEye, EHiddenAreaMeshType type)</argsstring>
        <name>GetHiddenAreaMesh</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a8153d4a3e627e1cede046327087c1880" kindref="member">EVREye</ref></type>
          <declname>eEye</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a2ed1af4858f23bc73d7358e8fcde5c64" kindref="member">EHiddenAreaMeshType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1927" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1927" bodyend="1931"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1ae999de6c51a207b9fe9e32e06ca34335" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.GetControllerState</definition>
        <argsstring>(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize)</argsstring>
        <name>GetControllerState</name>
        <param>
          <type>uint</type>
          <declname>unControllerDeviceIndex</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_v_r_controller_state__t" kindref="compound">VRControllerState_t</ref></type>
          <declname>pControllerState</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unControllerStateSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1944" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1944" bodyend="1962"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1af7c299caf58916815c437b40c6ce6e12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.GetControllerStateWithPose</definition>
        <argsstring>(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose)</argsstring>
        <name>GetControllerStateWithPose</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a29be99a3c2f780157bd490db06a7f12f" kindref="member">ETrackingUniverseOrigin</ref></type>
          <declname>eOrigin</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unControllerDeviceIndex</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_v_r_controller_state__t" kindref="compound">VRControllerState_t</ref></type>
          <declname>pControllerState</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unControllerStateSize</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref></type>
          <declname>pTrackedDevicePose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1975" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1975" bodyend="1993"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a4fab070ac7de10c813b4d042a1d51fca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRSystem.TriggerHapticPulse</definition>
        <argsstring>(uint unControllerDeviceIndex, uint unAxisId, ushort usDurationMicroSec)</argsstring>
        <name>TriggerHapticPulse</name>
        <param>
          <type>uint</type>
          <declname>unControllerDeviceIndex</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unAxisId</declname>
        </param>
        <param>
          <type>ushort</type>
          <declname>usDurationMicroSec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1994" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1994" bodyend="1997"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1acf572436320e18e574af8435fdb34c7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Valve.VR.CVRSystem.GetButtonIdNameFromEnum</definition>
        <argsstring>(EVRButtonId eButtonId)</argsstring>
        <name>GetButtonIdNameFromEnum</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a43fd11be1f2f7596cbb480b4a5dc2e87" kindref="member">EVRButtonId</ref></type>
          <declname>eButtonId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1998" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1998" bodyend="2002"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a67582b56e89890437a482f7259920ba8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Valve.VR.CVRSystem.GetControllerAxisTypeNameFromEnum</definition>
        <argsstring>(EVRControllerAxisType eAxisType)</argsstring>
        <name>GetControllerAxisTypeNameFromEnum</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1aaccda1681e581ff46f9d883a8b574a66" kindref="member">EVRControllerAxisType</ref></type>
          <declname>eAxisType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2003" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2003" bodyend="2007"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a911d8daa1d9b5d2d8cc9b7e36399187e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.IsInputAvailable</definition>
        <argsstring>()</argsstring>
        <name>IsInputAvailable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2008" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2008" bodyend="2012"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a7f9a259b909f4dc21263352a3d122806" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.IsSteamVRDrawingControllers</definition>
        <argsstring>()</argsstring>
        <name>IsSteamVRDrawingControllers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2013" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2013" bodyend="2017"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a5bdcaf6bcb7f5f0e2564033e5df476d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.ShouldApplicationPause</definition>
        <argsstring>()</argsstring>
        <name>ShouldApplicationPause</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2018" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2018" bodyend="2022"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a726687af31f242f9df5ea5a073150b8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRSystem.ShouldApplicationReduceRenderingWork</definition>
        <argsstring>()</argsstring>
        <name>ShouldApplicationReduceRenderingWork</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2023" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2023" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1acf1684d0053050eb05eb90e912900142" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint Valve.VR.CVRSystem.DriverDebugRequest</definition>
        <argsstring>(uint unDeviceIndex, string pchRequest, System.Text.StringBuilder pchResponseBuffer, uint unResponseBufferSize)</argsstring>
        <name>DriverDebugRequest</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <param>
          <type>string</type>
          <declname>pchRequest</declname>
        </param>
        <param>
          <type>System.Text.StringBuilder</type>
          <declname>pchResponseBuffer</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unResponseBufferSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2028" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2028" bodyend="2032"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1a807bef2cd4ed9817b4f1bfe06fafe6f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1a07c3927041d6bb490e61ca27612c41ff" kindref="member">EVRFirmwareError</ref></type>
        <definition>EVRFirmwareError Valve.VR.CVRSystem.PerformFirmwareUpdate</definition>
        <argsstring>(uint unDeviceIndex)</argsstring>
        <name>PerformFirmwareUpdate</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2033" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2033" bodyend="2037"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1ae9ec4861e040d13c4e5559e787e1a404" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRSystem.AcknowledgeQuit_Exiting</definition>
        <argsstring>()</argsstring>
        <name>AcknowledgeQuit_Exiting</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2038" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2038" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_system_1af777d49b28018b5f715a383136738d9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRSystem.AcknowledgeQuit_UserPrompt</definition>
        <argsstring>()</argsstring>
        <name>AcknowledgeQuit_UserPrompt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2042" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2042" bodyend="2045"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="1727" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="1726" bodyend="2046"/>
    <listofallmembers>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1aa22ada222dbd3adfd6654428b089d13d" prot="private" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>_GetControllerStatePacked</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a527036de0b52ce3fe886f1478e587582" prot="private" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>_GetControllerStateWithPosePacked</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1aed2e464e33bc44886f9bea98d78b1f87" prot="private" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>_PollNextEventPacked</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1ae9ec4861e040d13c4e5559e787e1a404" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>AcknowledgeQuit_Exiting</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1af777d49b28018b5f715a383136738d9b" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>AcknowledgeQuit_UserPrompt</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1ae8763c74f425d9eec719a555ea3995fd" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>ApplyTransform</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a9df1c714a1b2d358f98a4028122ccedb" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>ComputeDistortion</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a333a8c988c5d3a5a8ff50cf9c812470b" prot="private" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>CVRSystem</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1acf1684d0053050eb05eb90e912900142" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>DriverDebugRequest</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a938817f7df43eeb0c9a2a63d65504a67" prot="private" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>FnTable</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1abf54d8807c8b17fd968b0d46b405c56d" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetArrayTrackedDeviceProperty</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1af4e5f993f956f6a825bafb95f8c1f680" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetBoolTrackedDeviceProperty</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1acf572436320e18e574af8435fdb34c7a" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetButtonIdNameFromEnum</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a67582b56e89890437a482f7259920ba8" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetControllerAxisTypeNameFromEnum</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1ae337e057f5d2beb2993405773207d78a" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetControllerRoleForTrackedDeviceIndex</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1ae999de6c51a207b9fe9e32e06ca34335" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetControllerState</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1af7c299caf58916815c437b40c6ce6e12" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetControllerStateWithPose</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a7afe0eda4e65687842208f8ce905a64e" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetD3D9AdapterIndex</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1abb17d53b9f9ac2fbb29cde9e0805826e" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetDeviceToAbsoluteTrackingPose</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a04a43b098747d72d59534db48ce7c293" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetDXGIOutputInfo</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1af1e8543cb021f7215c6252db5c0b5e3d" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetEventTypeNameFromEnum</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a71db4b263545bd87e2972eef7a27dca3" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetEyeToHeadTransform</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a6695017d8f8b2e6492fc003f7910a49e" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetFloatTrackedDeviceProperty</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a8fe7073e6d0c927bc986388a935a48ca" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetHiddenAreaMesh</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1abe82e7c658121c24812c9cfc444a750c" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetInt32TrackedDeviceProperty</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1af01c2051f20b88132e757879a4869e80" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetMatrix34TrackedDeviceProperty</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a385592a6afe1b4695151161044f49e99" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetOutputDevice</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a8e06a8dc62a3d7d82a8672a024d4a3d3" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetProjectionMatrix</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a6154e9257dca79f7c208c3e737160d4f" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetProjectionRaw</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a416e8b65c6d1c54c84196346a17c9e90" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetPropErrorNameFromEnum</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a018442755324a3f6a307f387678c2f72" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetRawZeroPoseToStandingAbsoluteTrackingPose</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a51783a0590f7d858c6b7a073c961e910" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetRecommendedRenderTargetSize</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a117026af270ea0f9c11538c5e442b102" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetSeatedZeroPoseToStandingAbsoluteTrackingPose</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a52663d4f2298d80ebbb9e7a81df46dff" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetSortedTrackedDeviceIndicesOfClass</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a7832bc9cd34345dacb66731bc39d8f2a" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetStringTrackedDeviceProperty</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1afd1fefe2c93366053820330d68303ad7" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetTimeSinceLastVsync</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a0daef57d1ec6478a14450cb05febca59" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetTrackedDeviceActivityLevel</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1ac397038d675df987d6da168edb72068d" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetTrackedDeviceClass</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a44fda444e868474cbc41dd2fc1fe8d81" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetTrackedDeviceIndexForControllerRole</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a2cde74d7011dc5d9f2727c29f3a9e8c1" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>GetUint64TrackedDeviceProperty</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a9c4ab5e7989d6c1938159b7a1ec42b14" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>IsDisplayOnDesktop</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a911d8daa1d9b5d2d8cc9b7e36399187e" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>IsInputAvailable</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a7f9a259b909f4dc21263352a3d122806" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>IsSteamVRDrawingControllers</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1aeba3d5d5d782b1a343ae1555b30c4c3f" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>IsTrackedDeviceConnected</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a807bef2cd4ed9817b4f1bfe06fafe6f9" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>PerformFirmwareUpdate</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a1680564a6dab625afe34b14d4920a263" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>PollNextEvent</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a95d7cf29714d23acf0e6a6748370e788" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>PollNextEventWithPose</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1af904b763d37e3fd62655183a9d2756ee" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>ResetSeatedZeroPose</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a4ade672a06d9ebb00320f2cc04314b52" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>SetDisplayVisibility</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a5bdcaf6bcb7f5f0e2564033e5df476d9" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>ShouldApplicationPause</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a726687af31f242f9df5ea5a073150b8e" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>ShouldApplicationReduceRenderingWork</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_system_1a4fab070ac7de10c813b4d042a1d51fca" prot="public" virt="non-virtual"><scope>Valve::VR::CVRSystem</scope><name>TriggerHapticPulse</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
