<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_from_then_tests_8cs" kind="file" language="C#">
    <compoundname>FromThenTests.cs</compoundname>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests" prot="public">Leap::Unity::Tests::FromThenTests</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity">Leap::Unity</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity_1_1_tests">Leap::Unity::Tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Linq;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="_balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23" kindref="member">UnityEngine</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_unity_1_1_tests" kindref="compound">Leap.Unity.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests" kindref="compound">FromThenTests</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1acd954e7e0d9b9f0f093ad937b37977bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1acd954e7e0d9b9f0f093ad937b37977bb" kindref="member">EPSILON</ref><sp/>=<sp/>0.0006f;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#region<sp/>Vector3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/>VEC_A<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3(0.5f,<sp/><sp/>0.2f,<sp/><sp/>0.8f);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/>VEC_B<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3(0.13f,<sp/>0.98f,<sp/>3000f);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="35" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a7cdf13e129d1e3721a6d66047162a040" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a7cdf13e129d1e3721a6d66047162a040" kindref="member">FromVecAToVecB</ref>()<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreVector3sEqual(VEC_A.Then(VEC_B.From(VEC_A)),<sp/>VEC_B));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="40" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a7c4872b9db928bb3a7ef3f3fb44b5965" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a7c4872b9db928bb3a7ef3f3fb44b5965" kindref="member">ToVecBFromVecA</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreVector3sEqual(VEC_A.Then(VEC_A.To(VEC_B)),<sp/>VEC_B));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="45" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ab3937e24eca9eef96c0bfb6fb8453ac7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ab3937e24eca9eef96c0bfb6fb8453ac7" kindref="member">FromVecBToVecA</ref>()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreVector3sEqual(VEC_B.Then(VEC_A.From(VEC_B)),<sp/>VEC_A));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="50" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5e8fb810e064bbf2bf636fb0e6bd883d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5e8fb810e064bbf2bf636fb0e6bd883d" kindref="member">ToVecAFromVecB</ref>()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreVector3sEqual(VEC_B.Then(VEC_B.To(VEC_A)),<sp/>VEC_A));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AreVector3sEqual(Vector3<sp/>a,<sp/>Vector3<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a<sp/>-<sp/>b).magnitude<sp/>&lt;<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1acd954e7e0d9b9f0f093ad937b37977bb" kindref="member">EPSILON</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#region<sp/>Quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Quaternion<sp/>QUAT_A<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Quaternion.AngleAxis(90f,<sp/>Vector3.up);<sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Quaternion<sp/>QUAT_B<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Quaternion.AngleAxis(43f,<sp/>Vector3.one.normalized);<sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="70" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1aa961d130b906ffede0c2ddc6dda9ea23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1aa961d130b906ffede0c2ddc6dda9ea23" kindref="member">FromQuatAToQuatB</ref>()<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreQuaternionsEqual(QUAT_A.Then(QUAT_B.From(QUAT_A)),<sp/>QUAT_B));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="75" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5e156d5526c6eac53248cf13b6d4af58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5e156d5526c6eac53248cf13b6d4af58" kindref="member">ToQuatAFromQuatB</ref>()<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreQuaternionsEqual(QUAT_A.Then(QUAT_A.To(QUAT_B)),<sp/>QUAT_B));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="80" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a341af363c80bd833e3f3db5f65e3eb6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a341af363c80bd833e3f3db5f65e3eb6d" kindref="member">FromQuatBToQuatA</ref>()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreQuaternionsEqual(QUAT_B.Then(QUAT_A.From(QUAT_B)),<sp/>QUAT_A));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="85" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ad06f16219a12cd095c0477548a01cfd4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ad06f16219a12cd095c0477548a01cfd4" kindref="member">ToQuatBFromQuatA</ref>()<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreQuaternionsEqual(QUAT_B.Then(QUAT_B.To(QUAT_A)),<sp/>QUAT_A));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AreQuaternionsEqual(Quaternion<sp/>a,<sp/>Quaternion<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a.ToAngleAxisVector()<sp/>-<sp/>b.ToAngleAxisVector()).magnitude<sp/>&lt;<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1acd954e7e0d9b9f0f093ad937b37977bb" kindref="member">EPSILON</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#region<sp/>Pose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368" kindref="member">POSE_A</ref><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref>(VEC_A,<sp/>QUAT_A);<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998" kindref="member">POSE_B</ref><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref>(VEC_B,<sp/>QUAT_B);<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="105" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a318538bbbf16d193449f22667dd06c02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a318538bbbf16d193449f22667dd06c02" kindref="member">FromPoseAToPoseB</ref>()<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(ArePosesEqual(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998" kindref="member">POSE_B</ref>.Then(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368" kindref="member">POSE_A</ref>.From(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998" kindref="member">POSE_B</ref>)),<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368" kindref="member">POSE_A</ref>));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="110" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a23fce4ff8ac27a902bb42f67d03b06ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a23fce4ff8ac27a902bb42f67d03b06ec" kindref="member">ToPoseAFromPoseB</ref>()<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(ArePosesEqual(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998" kindref="member">POSE_B</ref>.Then(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998" kindref="member">POSE_B</ref>.To(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368" kindref="member">POSE_A</ref>)),<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368" kindref="member">POSE_A</ref>));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="115" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1aa52a61764a2e5538ffc20672fbd525b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1aa52a61764a2e5538ffc20672fbd525b3" kindref="member">FromPoseBToPoseA</ref>()<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(ArePosesEqual(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368" kindref="member">POSE_A</ref>.Then(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998" kindref="member">POSE_B</ref>.From(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368" kindref="member">POSE_A</ref>)),<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998" kindref="member">POSE_B</ref>));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="120" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a509f04a79a3457852d987aeac2c5e3ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a509f04a79a3457852d987aeac2c5e3ed" kindref="member">ToPoseBFromPoseA</ref>()<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(ArePosesEqual(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368" kindref="member">POSE_A</ref>.Then(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a07ad350a3a62ca2c6113148971648368" kindref="member">POSE_A</ref>.To(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998" kindref="member">POSE_B</ref>)),<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a5c306c3df80368dca4fce2e03a2ab998" kindref="member">POSE_B</ref>));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ArePosesEqual(<ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref><sp/>a,<sp/><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AreVector3sEqual(a.<ref refid="struct_leap_1_1_unity_1_1_pose_1ad90ba514c97484e10d747d9bdf9b81a9" kindref="member">position</ref>,<sp/>b.<ref refid="struct_leap_1_1_unity_1_1_pose_1ad90ba514c97484e10d747d9bdf9b81a9" kindref="member">position</ref>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>AreQuaternionsEqual(a.<ref refid="struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad" kindref="member">rotation</ref>,<sp/>b.<ref refid="struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad" kindref="member">rotation</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#region<sp/>Matrix4x4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Matrix4x4<sp/>MAT_A<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matrix4x4.TRS(Vector3.right<sp/>*<sp/>100f,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quaternion.AngleAxis(77f,<sp/>Vector3.one),</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3.one<sp/>*<sp/>35f);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Matrix4x4<sp/>MAT_B<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Matrix4x4.TRS(Vector3.one<sp/>*<sp/>20f,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quaternion.AngleAxis(24f,<sp/>Vector3.up),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3.one<sp/>*<sp/>2f);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="150" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a1777b74b2ac9383c7dbd57a398731c8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a1777b74b2ac9383c7dbd57a398731c8b" kindref="member">FromMatrixBToMatrixA</ref>()<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreMatricesEqual(MAT_B.Then(MAT_A.From(MAT_B)),<sp/>MAT_A));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="155" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a4668cdb3c7583cb15e85f6195c887353" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1a4668cdb3c7583cb15e85f6195c887353" kindref="member">ToMatrixAFromMatrixB</ref>()<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreMatricesEqual(MAT_B.Then(MAT_B.To(MAT_A)),<sp/>MAT_A));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="160" refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ab7340c746f1644dd306c8c2bd0fb8494" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_from_then_tests_1ab7340c746f1644dd306c8c2bd0fb8494" kindref="member">FromMatrixAToMatrixB</ref>()<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(AreMatricesEqual(MAT_A.Then(MAT_B.From(MAT_A)),<sp/>MAT_B));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AreMatricesEqual(Matrix4x4<sp/>a,<sp/>Matrix4x4<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AreVector3sEqual(a.GetVector3(),<sp/>b.GetVector3())</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>AreQuaternionsEqual(a.GetQuaternion(),<sp/>b.GetQuaternion());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Editor/Tests/FromThenTests.cs"/>
  </compounddef>
</doxygen>
