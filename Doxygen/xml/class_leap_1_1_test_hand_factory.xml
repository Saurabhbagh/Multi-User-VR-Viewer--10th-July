<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_leap_1_1_test_hand_factory" kind="class" language="C#" prot="public">
    <compoundname>Leap::TestHandFactory</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_leap_1_1_test_hand_factory_1a3135eb05e452acd52a448af8c74c9acb" prot="public" static="no" strong="yes">
        <type></type>
        <name>UnitType</name>
        <enumvalue id="class_leap_1_1_test_hand_factory_1a3135eb05e452acd52a448af8c74c9acbab37e048e8d96ecf746eb2d5c3391633f" prot="public">
          <name>LeapUnits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_leap_1_1_test_hand_factory_1a3135eb05e452acd52a448af8c74c9acba41f0a9ebd0e10494d6a72992e4d9cc24" prot="public">
          <name>UnityUnits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="21" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="class_leap_1_1_test_hand_factory_1aa6ce993c527c1fa6cf5d4252e77f1737" prot="public" static="no" strong="yes">
        <type></type>
        <name>TestHandPose</name>
        <enumvalue id="class_leap_1_1_test_hand_factory_1aa6ce993c527c1fa6cf5d4252e77f1737a3d58b642241ff6c77d66a6ae1952cd45" prot="public">
          <name>HeadMountedA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_leap_1_1_test_hand_factory_1aa6ce993c527c1fa6cf5d4252e77f1737ad004f646a1f1a5fd22f5a69679a34a80" prot="public">
          <name>HeadMountedB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_leap_1_1_test_hand_factory_1aa6ce993c527c1fa6cf5d4252e77f1737a559c71326ce10949ff9c049c0e9c133f" prot="public">
          <name>DesktopModeA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="113" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="113" bodyend="117"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1add92640c7fa66d833d61c7daacb37adf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
        <definition>static Frame Leap.TestHandFactory.MakeTestFrame</definition>
        <argsstring>(int frameId, bool includeLeftHand=true, bool includeRightHand=true, TestHandPose handPose=TestHandPose.HeadMountedA, UnitType unitType=UnitType.LeapUnits)</argsstring>
        <name>MakeTestFrame</name>
        <param>
          <type>int</type>
          <declname>frameId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeLeftHand</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>includeRightHand</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>TestHandPose</type>
          <declname>handPose</declname>
          <defval>TestHandPose.HeadMountedA</defval>
        </param>
        <param>
          <type>UnitType</type>
          <declname>unitType</declname>
          <defval>UnitType.LeapUnits</defval>
        </param>
        <briefdescription>
<para>Creates a test <ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref> that contains two Hands (by default). You can also optionally specify a TestHandPose to produce a frame with a different test pose. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="30" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="30" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1aaa3d085ba4bafd5e87e5cdfba74b352d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref></type>
        <definition>static Hand Leap.TestHandFactory.MakeTestHand</definition>
        <argsstring>(bool isLeft, LeapTransform leftHandTransform, int frameId=0, int handId=0, UnitType unitType=UnitType.LeapUnits)</argsstring>
        <name>MakeTestHand</name>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>leftHandTransform</declname>
        </param>
        <param>
          <type>int</type>
          <declname>frameId</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>handId</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>UnitType</type>
          <declname>unitType</declname>
          <defval>UnitType.LeapUnits</defval>
        </param>
        <briefdescription>
<para>Returns a test <ref refid="namespace_leap" kindref="compound">Leap</ref> <ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref> object transformed by the leftHandTransform argument. If the <ref refid="namespace_leap" kindref="compound">Leap</ref> hand is a right hand, the position and rotation of the <ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref> will be mirrored along the X axis (so you can provide <ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref> to construct both left and right hands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="53" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="53" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1ad1df4ea8be3c2d34bc21cf9d5e3f18c0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref></type>
        <definition>static Hand Leap.TestHandFactory.MakeTestHand</definition>
        <argsstring>(bool isLeft, int frameId=0, int handId=0, UnitType unitType=UnitType.LeapUnits)</argsstring>
        <name>MakeTestHand</name>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <param>
          <type>int</type>
          <declname>frameId</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>handId</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>UnitType</type>
          <declname>unitType</declname>
          <defval>UnitType.LeapUnits</defval>
        </param>
        <briefdescription>
<para>Returns a test <ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="92" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1a5147b9ff62c15d9ca36758d4912455c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref></type>
        <definition>static Hand Leap.TestHandFactory.MakeTestHand</definition>
        <argsstring>(bool isLeft, TestHandPose pose, int frameId=0, int handId=0, UnitType unitType=UnitType.LeapUnits)</argsstring>
        <name>MakeTestHand</name>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <param>
          <type>TestHandPose</type>
          <declname>pose</declname>
        </param>
        <param>
          <type>int</type>
          <declname>frameId</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>handId</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>UnitType</type>
          <declname>unitType</declname>
          <defval>UnitType.LeapUnits</defval>
        </param>
        <briefdescription>
<para>Returns a test <ref refid="namespace_leap" kindref="compound">Leap</ref> <ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref> object in the argument TestHandPose. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="101" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="101" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1a57b96eb18439eb205520b7707b66f7a3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
        <definition>static LeapTransform Leap.TestHandFactory.GetTestPoseLeftHandTransform</definition>
        <argsstring>(TestHandPose pose)</argsstring>
        <name>GetTestPoseLeftHandTransform</name>
        <param>
          <type>TestHandPose</type>
          <declname>pose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="119" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="119" bodyend="138"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1a8422111b0d5af7fd7b61f956eb477717" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref></type>
        <definition>static Hand Leap.TestHandFactory.makeLeapSpaceTestHand</definition>
        <argsstring>(int frameId, int handId, bool isLeft)</argsstring>
        <name>makeLeapSpaceTestHand</name>
        <param>
          <type>int</type>
          <declname>frameId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>handId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="144" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="144" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1add8ba7d1f0f86e837411980cca8e761d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_leap_quaternion" kindref="compound">LeapQuaternion</ref></type>
        <definition>static LeapQuaternion Leap.TestHandFactory.angleAxis</definition>
        <argsstring>(float angle, Vector axis)</argsstring>
        <name>angleAxis</name>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref></type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="180" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="180" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1a59632f6ca07c52635b70f325de61294e" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_leap_quaternion" kindref="compound">LeapQuaternion</ref></type>
        <definition>static LeapQuaternion Leap.TestHandFactory.rotationBetween</definition>
        <argsstring>(Vector fromDirection, Vector toDirection)</argsstring>
        <name>rotationBetween</name>
        <param>
          <type><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref></type>
          <declname>fromDirection</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref></type>
          <declname>toDirection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="192" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1a1b9dfedaebc8ccfcf318644459e35189" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref></type>
        <definition>static Finger Leap.TestHandFactory.makeThumb</definition>
        <argsstring>(int frameId, int handId, bool isLeft)</argsstring>
        <name>makeThumb</name>
        <param>
          <type>int</type>
          <declname>frameId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>handId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="198" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="198" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1a04acaa683ed97d63acd64e39ae45c6a4" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref></type>
        <definition>static Finger Leap.TestHandFactory.makeIndexFinger</definition>
        <argsstring>(int frameId, int handId, bool isLeft)</argsstring>
        <name>makeIndexFinger</name>
        <param>
          <type>int</type>
          <declname>frameId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>handId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="206" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="206" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1a3e9bd47ab5aa57f45b8c879edbb5d846" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref></type>
        <definition>static Finger Leap.TestHandFactory.makeMiddleFinger</definition>
        <argsstring>(int frameId, int handId, bool isLeft)</argsstring>
        <name>makeMiddleFinger</name>
        <param>
          <type>int</type>
          <declname>frameId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>handId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="214" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="214" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1aaa58cb38379faf5c5929c1f729ae60a9" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref></type>
        <definition>static Finger Leap.TestHandFactory.makeRingFinger</definition>
        <argsstring>(int frameId, int handId, bool isLeft)</argsstring>
        <name>makeRingFinger</name>
        <param>
          <type>int</type>
          <declname>frameId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>handId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="222" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="222" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1a2ce4a57c423802935752db4baa593907" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref></type>
        <definition>static Finger Leap.TestHandFactory.makePinky</definition>
        <argsstring>(int frameId, int handId, bool isLeft)</argsstring>
        <name>makePinky</name>
        <param>
          <type>int</type>
          <declname>frameId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>handId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="230" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="230" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1a9e73f7c79b761c4cc9e2cdb205ab05ab" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref></type>
        <definition>static Finger Leap.TestHandFactory.makeFinger</definition>
        <argsstring>(Finger.FingerType name, Vector position, Vector forward, Vector up, float[] jointLengths, int frameId, int handId, int fingerId, bool isLeft)</argsstring>
        <name>makeFinger</name>
        <param>
          <type><ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">Finger.FingerType</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref></type>
          <declname>up</declname>
        </param>
        <param>
          <type>float []</type>
          <declname>jointLengths</declname>
        </param>
        <param>
          <type>int</type>
          <declname>frameId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>handId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fingerId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="239" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="239" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_test_hand_factory_1a01068caa99e5c8a297925ff72ddc984a" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref></type>
        <definition>static Bone Leap.TestHandFactory.makeBone</definition>
        <argsstring>(Bone.BoneType name, Vector proximalPosition, float length, float width, Vector direction, Vector up, bool isLeft)</argsstring>
        <name>makeBone</name>
        <param>
          <type><ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">Bone.BoneType</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref></type>
          <declname>proximalPosition</declname>
        </param>
        <param>
          <type>float</type>
          <declname>length</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref></type>
          <declname>up</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="278" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="278" bodyend="291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" line="17" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Hands/TestHandFactory.cs" bodystart="17" bodyend="295"/>
    <listofallmembers>
      <member refid="class_leap_1_1_test_hand_factory_1add8ba7d1f0f86e837411980cca8e761d" prot="private" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>angleAxis</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a57b96eb18439eb205520b7707b66f7a3" prot="public" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>GetTestPoseLeftHandTransform</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a01068caa99e5c8a297925ff72ddc984a" prot="private" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>makeBone</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a9e73f7c79b761c4cc9e2cdb205ab05ab" prot="private" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>makeFinger</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a04acaa683ed97d63acd64e39ae45c6a4" prot="private" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>makeIndexFinger</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a8422111b0d5af7fd7b61f956eb477717" prot="private" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>makeLeapSpaceTestHand</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a3e9bd47ab5aa57f45b8c879edbb5d846" prot="private" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>makeMiddleFinger</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a2ce4a57c423802935752db4baa593907" prot="private" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>makePinky</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1aaa58cb38379faf5c5929c1f729ae60a9" prot="private" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>makeRingFinger</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1add92640c7fa66d833d61c7daacb37adf" prot="public" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>MakeTestFrame</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1aaa3d085ba4bafd5e87e5cdfba74b352d" prot="public" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>MakeTestHand</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1ad1df4ea8be3c2d34bc21cf9d5e3f18c0" prot="public" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>MakeTestHand</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a5147b9ff62c15d9ca36758d4912455c2" prot="public" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>MakeTestHand</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a1b9dfedaebc8ccfcf318644459e35189" prot="private" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>makeThumb</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a59632f6ca07c52635b70f325de61294e" prot="private" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>rotationBetween</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1aa6ce993c527c1fa6cf5d4252e77f1737" prot="public" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>TestHandPose</name></member>
      <member refid="class_leap_1_1_test_hand_factory_1a3135eb05e452acd52a448af8c74c9acb" prot="public" virt="non-virtual"><scope>Leap::TestHandFactory</scope><name>UnitType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
