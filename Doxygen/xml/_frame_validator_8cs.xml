<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_frame_validator_8cs" kind="file" language="C#">
    <compoundname>FrameValidator.cs</compoundname>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" prot="public">Leap::Unity::Tests::FrameValidator</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity">Leap::Unity</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity_1_1_tests">Leap::Unity::Tests</innernamespace>
    <innernamespace refid="namespace_n_unit_1_1_framework">NUnit::Framework</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Linq;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="namespace_leap_1_1_unity_1_1_tests" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_unity_1_1_tests" kindref="compound">Leap.Unity.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">abstract</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref><sp/>{</highlight></codeline>
<codeline lineno="16" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d" kindref="member">TOLERANCE</ref><sp/>=<sp/>0.0001f;</highlight></codeline>
<codeline lineno="17" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa3a5c6d3225a94d925a57a2c4f332107" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref>[]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa3a5c6d3225a94d925a57a2c4f332107" kindref="member">_fingers</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref>.TYPE_INDEX,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref>.TYPE_MIDDLE,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref>.TYPE_PINKY,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref>.TYPE_RING,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref>.TYPE_THUMB</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a841c73eaa5d5f6c83bfafb4ee87351b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref>[]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a841c73eaa5d5f6c83bfafb4ee87351b8" kindref="member">_bones</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref>.TYPE_DISTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref>.TYPE_INTERMEDIATE,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref>.TYPE_METACARPAL,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref>.TYPE_PROXIMAL</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>[SetUp]</highlight></codeline>
<codeline lineno="35" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1acd752e5e046ca556db0336d60df08941" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1acd752e5e046ca556db0336d60df08941" kindref="member">Setup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref><sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ae397067480c6fd2183160f048094e466" kindref="member">createFrame</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>[SetUp]</highlight></codeline>
<codeline lineno="40" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1af7d4444c63569def2bd38930563238ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1af7d4444c63569def2bd38930563238ee" kindref="member">Teardown</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref><sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">abstract</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ae397067480c6fd2183160f048094e466" kindref="member">createFrame</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="47" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ac68295024dab243f9b07c3dde5b6ef83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ac68295024dab243f9b07c3dde5b6ef83" kindref="member">HandsAreUnique</ref>()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>existDuplicates<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>.GroupBy(h<sp/>=&gt;<sp/>h.Id).Any(g<sp/>=&gt;<sp/>g.Count()<sp/>&gt;<sp/>1);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(existDuplicates,<sp/>Is.False);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="53" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab5dccd3893a86f0942bbabfb598c8617" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab5dccd3893a86f0942bbabfb598c8617" kindref="member">HandsHaveFiveFingers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>hand<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(hand.<ref refid="class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6" kindref="member">Fingers</ref>.Count,<sp/>Is.EqualTo(5));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="60" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a918c59aec010758d457bc76c841bb2ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a918c59aec010758d457bc76c841bb2ea" kindref="member">FingersHaveFourBones</ref>([ValueSource(typeof(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref>),<sp/></highlight><highlight class="stringliteral">&quot;_fingers&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref><sp/>fingerType,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ValueSource(typeof(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref>),<sp/></highlight><highlight class="stringliteral">&quot;_bones&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref><sp/>boneType)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>hand<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref><sp/>bone<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7" kindref="member">getBone</ref>(hand,<sp/>fingerType,<sp/>boneType);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(bone,<sp/>Is.Not.Null);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="69" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a7938771f1e92c2be05903222ad872182" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a7938771f1e92c2be05903222ad872182" kindref="member">BoneLength</ref>([ValueSource(typeof(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref>),<sp/></highlight><highlight class="stringliteral">&quot;_fingers&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref><sp/>fingerType,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ValueSource(typeof(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref>),<sp/></highlight><highlight class="stringliteral">&quot;_bones&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref><sp/>boneType)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>hand<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref><sp/>bone<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7" kindref="member">getBone</ref>(hand,<sp/>fingerType,<sp/>boneType);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>apparentLength<sp/>=<sp/>bone.<ref refid="class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7" kindref="member">NextJoint</ref>.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(bone.<ref refid="class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730" kindref="member">PrevJoint</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>actualLength<sp/>=<sp/>bone.<ref refid="class_leap_1_1_bone_1ab10b9823a94b21069ded7fe9cbf92dc8" kindref="member">Length</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(actualLength,<sp/>Is.EqualTo(apparentLength).Within(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d" kindref="member">TOLERANCE</ref>));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="80" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1afa4f4cab5e0011f2b69b2d7f4f361fb0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1afa4f4cab5e0011f2b69b2d7f4f361fb0" kindref="member">JointsMatch</ref>([ValueSource(typeof(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref>),<sp/></highlight><highlight class="stringliteral">&quot;_fingers&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref><sp/>fingerType,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ValueSource(typeof(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref>),<sp/></highlight><highlight class="stringliteral">&quot;_bones&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref><sp/>boneType)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>hand<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref><sp/>prevBone<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7" kindref="member">getBone</ref>(hand,<sp/>fingerType,<sp/>boneType<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref><sp/>bone<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7" kindref="member">getBone</ref>(hand,<sp/>fingerType,<sp/>boneType);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref><sp/>nextBone<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7" kindref="member">getBone</ref>(hand,<sp/>fingerType,<sp/>boneType<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevBone<sp/>!=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82" kindref="member">assertVectorsEqual</ref>(prevBone.<ref refid="class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7" kindref="member">NextJoint</ref>,<sp/>bone.<ref refid="class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730" kindref="member">PrevJoint</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextBone<sp/>!=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82" kindref="member">assertVectorsEqual</ref>(nextBone.<ref refid="class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730" kindref="member">PrevJoint</ref>,<sp/>bone.<ref refid="class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7" kindref="member">NextJoint</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="98" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a3c1a4a5978be1544fc8b0570f4b31218" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a3c1a4a5978be1544fc8b0570f4b31218" kindref="member">CenterIsBetweenJoints</ref>([ValueSource(typeof(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref>),<sp/></highlight><highlight class="stringliteral">&quot;_fingers&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref><sp/>fingerType,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ValueSource(typeof(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref>),<sp/></highlight><highlight class="stringliteral">&quot;_bones&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref><sp/>boneType)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>hand<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref><sp/>bone<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7" kindref="member">getBone</ref>(hand,<sp/>fingerType,<sp/>boneType);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>jointAverage<sp/>=<sp/>(bone.<ref refid="class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7" kindref="member">NextJoint</ref><sp/>+<sp/>bone.<ref refid="class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730" kindref="member">PrevJoint</ref>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82" kindref="member">assertVectorsEqual</ref>(jointAverage,<sp/>bone.<ref refid="class_leap_1_1_bone_1a820e1a7a9975c41ca14aec7c806b9c65" kindref="member">Center</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="109" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad4790f2f0631567aaced9032c3bd5f4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad4790f2f0631567aaced9032c3bd5f4f" kindref="member">DirectionMatchesJoints</ref>([ValueSource(typeof(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref>),<sp/></highlight><highlight class="stringliteral">&quot;_fingers&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref><sp/>fingerType,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ValueSource(typeof(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator" kindref="compound">FrameValidator</ref>),<sp/></highlight><highlight class="stringliteral">&quot;_bones&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref><sp/>boneType)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>hand<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref><sp/>bone<sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7" kindref="member">getBone</ref>(hand,<sp/>fingerType,<sp/>boneType);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>joints<sp/>are<sp/>at<sp/>the<sp/>same<sp/>position<sp/>this<sp/>test<sp/>is<sp/>meaningless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bone.<ref refid="class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7" kindref="member">NextJoint</ref>.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(bone.<ref refid="class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730" kindref="member">PrevJoint</ref>)<sp/>&lt;<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d" kindref="member">TOLERANCE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>jointDirection<sp/>=<sp/>(bone.<ref refid="class_leap_1_1_bone_1ac0923c0228d11208289b81ff8ed208b7" kindref="member">NextJoint</ref><sp/>-<sp/>bone.<ref refid="class_leap_1_1_bone_1a9bf9d79aa10edd70baa3d27e8bac0730" kindref="member">PrevJoint</ref>).Normalized;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82" kindref="member">assertVectorsEqual</ref>(jointDirection,<sp/>bone.<ref refid="class_leap_1_1_bone_1a15e47cfdff3b474b9da055ae15aec82e" kindref="member">Direction</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="125" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a5c9a107fa1376dbb6eeb458330e35fcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a5c9a107fa1376dbb6eeb458330e35fcf" kindref="member">RotationIsValid</ref>()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>hand<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ab0fd118aae62aad4db938a4e919f237b" kindref="member">_frame</ref>.<ref refid="class_leap_1_1_frame_1af0281471fb3831307b40a1124565d069" kindref="member">Hands</ref>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(hand.<ref refid="class_leap_1_1_hand_1ad1f22c3baf75294e2aa4d834d87fec20" kindref="member">Rotation</ref>.<ref refid="struct_leap_1_1_leap_quaternion_1ad55818738b16d017e907cb9ac9fc975f" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1a829eb479c186cf2791b4983128f460b7" kindref="member">getBone</ref>(<ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref><sp/>hand,<sp/><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.<ref refid="class_leap_1_1_finger_1ae75e8d46a01aff0bd5c6d6fb99e2f2ba" kindref="member">FingerType</ref><sp/>fingerType,<sp/><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref>.<ref refid="class_leap_1_1_bone_1a21054e31cefa7b75f25a026006fdbb1b" kindref="member">BoneType</ref><sp/>boneType)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boneType<sp/>&lt;<sp/>0<sp/>||<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)boneType<sp/>&gt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref><sp/>finger<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>hand.<ref refid="class_leap_1_1_hand_1ac9f68349507bfa13e3ac24738382bea6" kindref="member">Fingers</ref>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finger.<ref refid="class_leap_1_1_finger_1a86fc4ed5138e26ac07ec0885f3627126" kindref="member">Type</ref><sp/>!=<sp/>fingerType)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>finger.<ref refid="class_leap_1_1_finger_1a5ae2d74471ca480d76820478067bda64" kindref="member">Bone</ref>(boneType);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1ad7ea32888c180b40f2c0a01bbbb97a82" kindref="member">assertVectorsEqual</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>a,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>b,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>vectorName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Vector&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(a.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/>Is.EqualTo(b.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>).Within(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d" kindref="member">TOLERANCE</ref>),<sp/>vectorName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(a.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/>Is.EqualTo(b.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>).Within(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d" kindref="member">TOLERANCE</ref>),<sp/>vectorName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(a.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/>Is.EqualTo(b.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>).Within(<ref refid="class_leap_1_1_unity_1_1_tests_1_1_frame_validator_1aa8c9adab76646f9e1d8fefa1d909102d" kindref="member">TOLERANCE</ref>),<sp/>vectorName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Editor/Tests/FrameValidator.cs"/>
  </compounddef>
</doxygen>
