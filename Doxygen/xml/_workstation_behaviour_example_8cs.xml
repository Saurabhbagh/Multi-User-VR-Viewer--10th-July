<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_workstation_behaviour_example_8cs" kind="file" language="C#">
    <compoundname>WorkstationBehaviourExample.cs</compoundname>
    <innerclass refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example" prot="public">Leap::Unity::Examples::WorkstationBehaviourExample</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity">Leap::Unity</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity_1_1_examples">Leap::Unity::Examples</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_leap" kindref="compound">Leap</ref>.<ref refid="namespace_leap_1_1_unity" kindref="compound">Unity</ref>.<ref refid="namespace_leap_1_1_unity_1_1_animation" kindref="compound">Animation</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_leap" kindref="compound">Leap</ref>.<ref refid="namespace_leap_1_1_unity" kindref="compound">Unity</ref>.<ref refid="namespace_leap_1_1_unity_1_1_interaction" kindref="compound">Interaction</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="_balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23" kindref="member">UnityEngine</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_unity_1_1_examples" kindref="compound">Leap.Unity.Examples</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>[RequireComponent(typeof(<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour" kindref="compound">InteractionBehaviour</ref>))]</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>[RequireComponent(typeof(<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour" kindref="compound">AnchorableBehaviour</ref>))]</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>[AddComponentMenu(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="38" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example" kindref="compound">WorkstationBehaviourExample</ref><sp/>:<sp/>MonoBehaviour<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af6897cc2e4142a3b82cddbc2b599c6e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af6897cc2e4142a3b82cddbc2b599c6e7" kindref="member">MAX_SPEED_AS_WORKSTATION</ref><sp/>=<sp/>0.005F;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a4643c3dd568f8e77904018de48eb4318" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a4643c3dd568f8e77904018de48eb4318" kindref="member">MIN_SPEED_TO_ACTIVATE_TRAVELING</ref><sp/>=<sp/>0.5F;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour" kindref="compound">TransformTweenBehaviour</ref><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75" kindref="member">workstationModeTween</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour" kindref="compound">InteractionBehaviour</ref><sp/>_intObj;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour" kindref="compound">AnchorableBehaviour</ref><sp/>_anchObj;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_wasKinematicBeforeActivation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af8dc40bc97d0162d01fdcb5a446da67a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af8dc40bc97d0162d01fdcb5a446da67a" kindref="member">isTraveling</ref><sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_travelTween.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1a9a3bab65cf734fb04f4c7c7525719891" kindref="member">isValid</ref><sp/>&amp;&amp;<sp/>_travelTween.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1a0af0e03e8197661737ace80ef03636c6" kindref="member">isRunning</ref>;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref><sp/>{<sp/>Closed,<sp/>Traveling,<sp/>Opening,<sp/>Open,<sp/>Closing<sp/>}</highlight></codeline>
<codeline lineno="68" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a84dc1a1d33dd9fbba06cc75fb3577323" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a84dc1a1d33dd9fbba06cc75fb3577323" kindref="member">workstationState</ref><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75" kindref="member">workstationModeTween</ref><sp/>==<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref>.Closed;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75" kindref="member">workstationModeTween</ref>.<ref refid="class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1ad285758e0b274c88f5371930ff965dc8" kindref="member">tween</ref>.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1ae0123854170a23519792c97c8620645c" kindref="member">progress</ref><sp/>==<sp/>0F<sp/>&amp;&amp;<sp/>!<ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af8dc40bc97d0162d01fdcb5a446da67a" kindref="member">isTraveling</ref>)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref>.Closed;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af8dc40bc97d0162d01fdcb5a446da67a" kindref="member">isTraveling</ref>)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref>.Traveling;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75" kindref="member">workstationModeTween</ref>.<ref refid="class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1ad285758e0b274c88f5371930ff965dc8" kindref="member">tween</ref>.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1ae0123854170a23519792c97c8620645c" kindref="member">progress</ref><sp/>!=<sp/>1F</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75" kindref="member">workstationModeTween</ref>.<ref refid="class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1ad285758e0b274c88f5371930ff965dc8" kindref="member">tween</ref>.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1ae88d2317428932c7de52a00298005696" kindref="member">direction</ref><sp/>==<sp/><ref refid="namespace_leap_1_1_unity_1_1_animation_1ab080d4756e4d3d6a2fc9cd9a7f4e695a" kindref="member">Direction</ref>.Forward)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref>.Opening;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75" kindref="member">workstationModeTween</ref>.<ref refid="class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1ad285758e0b274c88f5371930ff965dc8" kindref="member">tween</ref>.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1ae0123854170a23519792c97c8620645c" kindref="member">progress</ref><sp/>==<sp/>1F)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref>.Open;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref>.Closing;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnValidate()<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>refreshRequiredComponents();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Awake()<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initWorkstationPoseFunctions();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Start()<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>refreshRequiredComponents();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_anchObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour_1aaa63f2fc2253c8a559150fb0127730f5" kindref="member">tryAnchorNearestOnGraspEnd</ref>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.LogWarning(</highlight><highlight class="stringliteral">&quot;WorkstationBehaviour<sp/>expects<sp/>its<sp/>AnchorableBehaviour&apos;s<sp/>tryAnchorNearestOnGraspEnd<sp/>property<sp/>to<sp/>be<sp/>enabled.&quot;</highlight><highlight class="normal">,<sp/>this.gameObject);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OnDestroy()<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1aac5b0f2f21a26369d70314363e18af3f" kindref="member">OnGraspedMovement</ref><sp/>-=<sp/>onGraspedMovement;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_anchObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour_1a29a27e344ab1105d4fa8657de3fe5dab" kindref="member">OnPostTryAnchorOnGraspEnd</ref><sp/>-=<sp/>onPostObjectGraspEnd;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a03eb8612fb58f2bf1b79798ebe7a443c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a03eb8612fb58f2bf1b79798ebe7a443c" kindref="member">ActivateWorkstation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a84dc1a1d33dd9fbba06cc75fb3577323" kindref="member">workstationState</ref><sp/>!=<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref>.Open)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wasKinematicBeforeActivation<sp/>=<sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.isKinematic;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.isKinematic<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75" kindref="member">workstationModeTween</ref>.<ref refid="class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1a3c59a5aa9be4cdbd0bd087400d8e3921" kindref="member">PlayForward</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ada103d493d83340b94fbfaf377ff91ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ada103d493d83340b94fbfaf377ff91ee" kindref="member">DeactivateWorkstation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.isKinematic<sp/>=<sp/>_wasKinematicBeforeActivation;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1adbc6d2fc02014c49f40507fdeece6e75" kindref="member">workstationModeTween</ref>.<ref refid="class_leap_1_1_unity_1_1_animation_1_1_transform_tween_behaviour_1aff7a741293c6403f3b383703c0828684" kindref="member">PlayBackward</ref>();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refreshRequiredComponents()<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_intObj<sp/>=<sp/>GetComponent&lt;InteractionBehaviour&gt;();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_anchObj<sp/>=<sp/>GetComponent&lt;AnchorableBehaviour&gt;();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1aac5b0f2f21a26369d70314363e18af3f" kindref="member">OnGraspedMovement</ref><sp/>+=<sp/>onGraspedMovement;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_anchObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour_1a29a27e344ab1105d4fa8657de3fe5dab" kindref="member">OnPostTryAnchorOnGraspEnd</ref><sp/>+=<sp/>onPostObjectGraspEnd;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>onGraspedMovement(Vector3<sp/>preSolvePos,<sp/>Quaternion<sp/>preSolveRot,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>curPos,<sp/>Quaternion<sp/>curRot,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;InteractionController&gt;<sp/>controllers)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>workstation<sp/>is<sp/>not<sp/>fully<sp/>open<sp/>when<sp/>grasped,<sp/>close<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a84dc1a1d33dd9fbba06cc75fb3577323" kindref="member">workstationState</ref><sp/>==<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref>.Opening)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ada103d493d83340b94fbfaf377ff91ee" kindref="member">DeactivateWorkstation</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>velocity<sp/>of<sp/>the<sp/>object<sp/>while<sp/>grasped<sp/>is<sp/>too<sp/>large,<sp/>exit<sp/>workstation<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.velocity.magnitude<sp/>&gt;<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af6897cc2e4142a3b82cddbc2b599c6e7" kindref="member">MAX_SPEED_AS_WORKSTATION</ref></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.isKinematic<sp/>&amp;&amp;<sp/>((preSolvePos<sp/>-<sp/>curPos).magnitude<sp/>/<sp/>Time.fixedDeltaTime)<sp/>&gt;<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1af6897cc2e4142a3b82cddbc2b599c6e7" kindref="member">MAX_SPEED_AS_WORKSTATION</ref>))<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ada103d493d83340b94fbfaf377ff91ee" kindref="member">DeactivateWorkstation</ref>();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock<sp/>our<sp/>upward<sp/>axis<sp/>while<sp/>workstation<sp/>mode<sp/>is<sp/>open.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a84dc1a1d33dd9fbba06cc75fb3577323" kindref="member">workstationState</ref><sp/>==<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ae21c3ce4f1aac3e1920073e0e674cbcc" kindref="member">WorkstationState</ref>.Open)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.rotation<sp/>=<sp/>(Quaternion.FromToRotation(_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.rotation<sp/>*<sp/>Vector3.up,<sp/>Vector3.up))<sp/>*<sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.rotation;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_intObj.<ref refid="interface_leap_1_1_unity_1_1_interaction_1_1_i_interaction_behaviour_1a2ff1423c8145ae05a1cc8506d6932136" kindref="member">transform</ref>.rotation<sp/>=<sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.rotation;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>onPostObjectGraspEnd()<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_anchObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour_1ab82e05ed50e6b2de8cad02a53efec6d4" kindref="member">preferredAnchor</ref><sp/>==<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>a<sp/>good<sp/>position<sp/>and<sp/>rotation<sp/>for<sp/>workstation<sp/>mode<sp/>and<sp/>begin<sp/>traveling<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>targetPosition;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>the<sp/>current<sp/>position<sp/>if<sp/>our<sp/>velocity<sp/>is<sp/>small.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.velocity.magnitude<sp/>&lt;<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a4643c3dd568f8e77904018de48eb4318" kindref="member">MIN_SPEED_TO_ACTIVATE_TRAVELING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetPosition<sp/>=<sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.position;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetPosition<sp/>=<sp/>determineWorkstationPosition();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quaternion<sp/>targetRotation<sp/>=<sp/>determineWorkstationRotation(targetPosition);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beginTraveling(_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.position,<sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.velocity,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.rotation,<sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.angularVelocity,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetPosition,<sp/>targetRotation);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>workstation<sp/>is<sp/>not<sp/>active<sp/>or<sp/>being<sp/>deactivated<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>attaching<sp/>to<sp/>an<sp/>anchor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1ada103d493d83340b94fbfaf377ff91ee" kindref="member">DeactivateWorkstation</ref>();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#region<sp/>Traveling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>MAX_TRAVEL_SPEED<sp/>=<sp/>4.00F;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween" kindref="compound">Tween</ref><sp/>_travelTween;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_initTravelTime<sp/>=<sp/>0F;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector3<sp/><sp/><sp/><sp/>_initTravelPosition<sp/>=<sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector3<sp/><sp/><sp/><sp/>_initTravelVelocity<sp/>=<sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Quaternion<sp/>_initTravelRotation<sp/>=<sp/>Quaternion.identity;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector3<sp/><sp/><sp/><sp/>_initTravelAngVelocity<sp/>=<sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector3<sp/><sp/><sp/><sp/>_effGravity<sp/>=<sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector3<sp/><sp/><sp/><sp/>_travelTargetPosition;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Quaternion<sp/>_travelTargetRotation;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector2<sp/>_minMaxWorkstationTravelTime<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector2(0.05F,<sp/>1.00F);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector2<sp/>_minMaxTravelTimeFromThrowSpeed<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector2(0.30F,<sp/>8.00F);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beginTraveling(Vector3<sp/>initPosition,<sp/>Vector3<sp/>initVelocity,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quaternion<sp/>initRotation,<sp/>Vector3<sp/>initAngVelocity,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>targetPosition,<sp/>Quaternion<sp/>targetRotation)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_initTravelTime<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Time.time;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_initTravelPosition<sp/><sp/><sp/><sp/>=<sp/>initPosition;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_initTravelVelocity<sp/><sp/><sp/><sp/>=<sp/>initVelocity;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_initTravelRotation<sp/><sp/><sp/><sp/>=<sp/>initRotation;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_initTravelAngVelocity<sp/>=<sp/>initAngVelocity;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velMagnitude<sp/>=<sp/>_initTravelVelocity.magnitude;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(velMagnitude<sp/>&gt;<sp/>MAX_TRAVEL_SPEED)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>capSpeedMultiplier<sp/>=<sp/>MAX_TRAVEL_SPEED<sp/>/<sp/>velMagnitude;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_initTravelVelocity<sp/>*=<sp/>capSpeedMultiplier;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_effGravity<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Vector3.Lerp(Vector3.zero,<sp/><ref refid="namespace_leap_1_1_unity_1a186e5eb0a2b743f1f6b79346f0ab8ad0a50ae99e9c35446c2580e4b540b0fd104" kindref="member">Physics</ref>.gravity,<sp/>initVelocity.magnitude.Map(0.80F,<sp/>3F,<sp/>0F,<sp/>0.70F));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_travelTargetPosition<sp/>=<sp/>targetPosition;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_travelTargetRotation<sp/>=<sp/>targetRotation;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>single-use<sp/>Tween<sp/>that<sp/>will<sp/>last<sp/>a<sp/>specific<sp/>duration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>specify<sp/>a<sp/>custom<sp/>callback<sp/>as<sp/>it<sp/>progresses<sp/>to<sp/>update<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>object&apos;s<sp/>position<sp/>and<sp/>rotation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_travelTween<sp/>=<sp/><ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween" kindref="compound">Tween</ref>.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1a7238365f2fb16c95082dc5d71b8f5139" kindref="member">Single</ref>()</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1a233ad9426dc52f71fd5ac36500946d76" kindref="member">OverTime</ref>(_initTravelVelocity.magnitude.Map(_minMaxTravelTimeFromThrowSpeed.x,<sp/>_minMaxTravelTimeFromThrowSpeed.y,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_minMaxWorkstationTravelTime.x,<sp/>_minMaxWorkstationTravelTime.y))</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.OnProgress(onTravelTweenProgress)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1a6444cd8ffe0160d1431e091f3c4d8649" kindref="member">OnReachEnd</ref>(<ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a03eb8612fb58f2bf1b79798ebe7a443c" kindref="member">ActivateWorkstation</ref>)<sp/></highlight><highlight class="comment">//<sp/>When<sp/>the<sp/>tween<sp/>is<sp/>finished,<sp/>open<sp/>workstation<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1a00ec83a05cb0637fc0bcc24e8703c572" kindref="member">Play</ref>();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>onTravelTweenProgress(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>progress)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curTime<sp/>=<sp/>Time.time;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/><sp/><sp/><sp/>extrapolatedPosition<sp/>=<sp/>evaluatePosition(_initTravelPosition,<sp/>_initTravelVelocity,<sp/>_effGravity,<sp/>_initTravelTime,<sp/>curTime);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Quaternion<sp/>extrapolatedRotation<sp/>=<sp/>evaluateRotation(_initTravelRotation,<sp/>_initTravelAngVelocity,<sp/>_initTravelTime,<sp/>curTime);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Interpolate<sp/>from<sp/>the<sp/>position<sp/>and<sp/>rotation<sp/>that<sp/>the<sp/>object<sp/>would<sp/>naturally<sp/>have<sp/>over<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(by<sp/>movement<sp/>due<sp/>to<sp/>inertia<sp/>and<sp/>by<sp/>acceleration<sp/>due<sp/>to<sp/>gravity)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>target<sp/>position<sp/>and<sp/>rotation<sp/>over<sp/>the<sp/>lifetime<sp/>of<sp/>the<sp/>tween.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.position<sp/>=<sp/><sp/><sp/><sp/><sp/>Vector3.Lerp(extrapolatedPosition,<sp/>_travelTargetPosition,<sp/>progress);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.rotation<sp/>=<sp/>Quaternion.Slerp(extrapolatedRotation,<sp/>_travelTargetRotation,<sp/>progress);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cancelTraveling()<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>traveling<sp/>was<sp/>halted<sp/>mid-travel-tween,<sp/>halt<sp/>the<sp/>tween.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_travelTween.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1a9a3bab65cf734fb04f4c7c7525719891" kindref="member">isValid</ref>)<sp/>{<sp/>_travelTween.<ref refid="struct_leap_1_1_unity_1_1_animation_1_1_tween_1ad5f8092aec0bf5f7f301b9dbeef5a666" kindref="member">Stop</ref>();<sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector3<sp/>evaluatePosition(Vector3<sp/>initialPosition,<sp/>Vector3<sp/>initialVelocity,<sp/>Vector3<sp/>gravity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>initialTime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeToEvaluate)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>timeToEvaluate<sp/>-<sp/>initialTime;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initialPosition<sp/>+<sp/>(initialVelocity<sp/>*<sp/>t)<sp/>+<sp/>(0.5f<sp/>*<sp/>gravity<sp/>*<sp/>t<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Quaternion<sp/>evaluateRotation(Quaternion<sp/>initialRotation,<sp/>Vector3<sp/>angularVelocity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>initialTime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeToEvaluate)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>timeToEvaluate<sp/>-<sp/>initialTime;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Quaternion.Euler(angularVelocity<sp/>*<sp/>t)<sp/>*<sp/>initialRotation;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#region<sp/>Workstation<sp/>Pose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>delegate<sp/>Vector3<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa1eb03a23e58150cbb75aee152bb4d33" kindref="member">WorkstationPositionFunc</ref>(Vector3<sp/>userEyePosition,<sp/>Quaternion<sp/>userEyeRotation,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>workstationObjInitPosition,<sp/>Vector3<sp/>workstationObjInitVelocity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>workstationObjRadius,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;Vector3&gt;<sp/>otherWorkstationPositions,<sp/>List&lt;float&gt;<sp/>otherWorkstationRadii);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>delegate<sp/>Quaternion<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a96412e8fc922be4561a1017293783c9a" kindref="member">WorkstationRotationFunc</ref>(Vector3<sp/>userEyePosition,<sp/>Vector3<sp/>targetWorkstationPosition);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1acaf79ab190ba66fba74bb2eba58998ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa1eb03a23e58150cbb75aee152bb4d33" kindref="member">WorkstationPositionFunc</ref><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1acaf79ab190ba66fba74bb2eba58998ca" kindref="member">workstationPositionFunc</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa4075ce7f97ba3a7c7184940e0add199" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a96412e8fc922be4561a1017293783c9a" kindref="member">WorkstationRotationFunc</ref><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa4075ce7f97ba3a7c7184940e0add199" kindref="member">workstationRotationFunc</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>List&lt;Vector3&gt;<sp/>_otherStationObjPositions<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;Vector3&gt;();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>List&lt;float&gt;<sp/>_otherStationObjRadii<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;float&gt;();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Called<sp/>on<sp/>Awake();<sp/>possible<sp/>to<sp/>override<sp/>the<sp/>default<sp/>functions<sp/>in<sp/>a<sp/>MonoBehaviour&apos;s<sp/>Start().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initWorkstationPoseFunctions()<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1acaf79ab190ba66fba74bb2eba58998ca" kindref="member">workstationPositionFunc</ref><sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a45e1d9a2aff57e76f3f41de59aa40a35" kindref="member">DefaultDetermineWorkstationPosition</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa4075ce7f97ba3a7c7184940e0add199" kindref="member">workstationRotationFunc</ref><sp/>=<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a608204dd046521635b6b3fa83b63d734" kindref="member">DefaultDetermineWorkstationRotation</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector3<sp/>determineWorkstationPosition()<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1acaf79ab190ba66fba74bb2eba58998ca" kindref="member">workstationPositionFunc</ref>(Camera.main.transform.position,<sp/>Camera.main.transform.rotation,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.position,<sp/>_intObj.<ref refid="class_leap_1_1_unity_1_1_interaction_1_1_interaction_behaviour_1a4f54f1794944882d8cf51bd641a5341c" kindref="member">rigidbody</ref>.velocity,<sp/>0.30F,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_otherStationObjPositions,<sp/>_otherStationObjRadii);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Quaternion<sp/>determineWorkstationRotation(Vector3<sp/>workstationPosition)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1aa4075ce7f97ba3a7c7184940e0add199" kindref="member">workstationRotationFunc</ref>(Camera.main.transform.position,<sp/>workstationPosition);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a45e1d9a2aff57e76f3f41de59aa40a35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a45e1d9a2aff57e76f3f41de59aa40a35" kindref="member">DefaultDetermineWorkstationPosition</ref>(Vector3<sp/>userEyePosition,<sp/>Quaternion<sp/>userEyeRotation,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>workstationObjInitPosition,<sp/>Vector3<sp/>workstationObjInitVelocity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>workstationObjRadius,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;Vector3&gt;<sp/>otherWorkstationPositions,<sp/>List&lt;float&gt;<sp/>otherWorkstationRadii)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>velocity<sp/>away<sp/>from<sp/>the<sp/>camera<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>towardsCamera<sp/>=<sp/>(userEyePosition<sp/>-<sp/>workstationObjInitPosition).normalized;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>towardsCameraness<sp/>=<sp/>Mathf.Clamp01(Vector3.Dot(towardsCamera,<sp/>workstationObjInitVelocity.normalized));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>workstationObjInitVelocity<sp/>=<sp/>workstationObjInitVelocity<sp/>+<sp/>Vector3.Lerp(Vector3.zero,<sp/>-towardsCamera<sp/>*<sp/>2.00F,<sp/>towardsCameraness);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>velocity<sp/>direction<sp/>on<sp/>the<sp/>XZ<sp/>plane.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>groundPlaneVelocity<sp/>=<sp/>Vector3.ProjectOnPlane(workstationObjInitVelocity,<sp/>Vector3.up);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>groundPlaneDirectedness<sp/>=<sp/>groundPlaneVelocity.magnitude.Map(0.003F,<sp/>0.40F,<sp/>0F,<sp/>1F);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>groundPlaneDirection<sp/>=<sp/>groundPlaneVelocity.normalized;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>camera<sp/>&quot;forward&quot;<sp/>direction<sp/>on<sp/>the<sp/>XZ<sp/>plane.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>cameraGroundPlaneForward<sp/>=<sp/>Vector3.ProjectOnPlane(userEyeRotation<sp/>*<sp/>Vector3.forward,<sp/>Vector3.up);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cameraGroundPlaneDirectedness<sp/>=<sp/>cameraGroundPlaneForward.magnitude.Map(0.001F,<sp/>0.01F,<sp/>0F,<sp/>1F);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>alternateCameraDirection<sp/>=<sp/>(userEyeRotation<sp/>*<sp/>Vector3.forward).y<sp/>&gt;<sp/>0F<sp/>?<sp/>userEyeRotation<sp/>*<sp/>Vector3.down<sp/>:<sp/>userEyeRotation<sp/>*<sp/>Vector3.up;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cameraGroundPlaneForward<sp/>=<sp/>Vector3.Slerp(alternateCameraDirection,<sp/>cameraGroundPlaneForward,<sp/>cameraGroundPlaneDirectedness);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cameraGroundPlaneForward<sp/>=<sp/>cameraGroundPlaneForward.normalized;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>a<sp/>placement<sp/>direction<sp/>based<sp/>on<sp/>the<sp/>camera<sp/>and<sp/>throw<sp/>directions<sp/>on<sp/>the<sp/>XZ<sp/>plane.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>placementDirection<sp/>=<sp/>Vector3.Slerp(cameraGroundPlaneForward,<sp/>groundPlaneDirection,<sp/>groundPlaneDirectedness);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>a<sp/>placement<sp/>position<sp/>along<sp/>the<sp/>placement<sp/>direction<sp/>between<sp/>min<sp/>and<sp/>max<sp/>placement<sp/>distances.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minPlacementDistance<sp/>=<sp/>0.25F;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxPlacementDistance<sp/>=<sp/>0.51F;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>placementPosition<sp/>=<sp/>userEyePosition<sp/>+<sp/>placementDirection<sp/>*<sp/>Mathf.Lerp(minPlacementDistance,<sp/>maxPlacementDistance,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(groundPlaneDirectedness<sp/>*<sp/>workstationObjInitVelocity.magnitude)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Map(0F,<sp/>1.50F,<sp/>0F,<sp/>1F));</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>move<sp/>far<sp/>if<sp/>the<sp/>initial<sp/>velocity<sp/>is<sp/>small.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>overallDirectedness<sp/>=<sp/>workstationObjInitVelocity.magnitude.Map(0.00F,<sp/>3.00F,<sp/>0F,<sp/>1F);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>placementPosition<sp/>=<sp/>Vector3.Lerp(workstationObjInitPosition,<sp/>placementPosition,<sp/>overallDirectedness<sp/>*<sp/>overallDirectedness);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforce<sp/>placement<sp/>height.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>placementHeightFromCamera<sp/>=<sp/>-0.30F;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>placementPosition.y<sp/>=<sp/>userEyePosition.y<sp/>+<sp/>placementHeightFromCamera;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforce<sp/>minimum<sp/>placement<sp/>away<sp/>from<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector2<sp/>cameraXZ<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector2(userEyePosition.x,<sp/>userEyePosition.z);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector2<sp/>stationXZ<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector2(placementPosition.x,<sp/>placementPosition.z);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>placementDist<sp/>=<sp/>Vector2.Distance(cameraXZ,<sp/>stationXZ);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(placementDist<sp/>&lt;<sp/>minPlacementDistance)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distanceLeft<sp/>=<sp/>(minPlacementDistance<sp/>-<sp/>placementDist)<sp/>+<sp/>workstationObjRadius;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector2<sp/>xzDisplacement<sp/>=<sp/>(stationXZ<sp/>-<sp/>cameraXZ).normalized<sp/>*<sp/>distanceLeft;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>placementPosition<sp/>+=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3(xzDisplacement[0],<sp/>0F,<sp/>xzDisplacement[1]);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placementPosition;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a608204dd046521635b6b3fa83b63d734" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Quaternion<sp/><ref refid="class_leap_1_1_unity_1_1_examples_1_1_workstation_behaviour_example_1a608204dd046521635b6b3fa83b63d734" kindref="member">DefaultDetermineWorkstationRotation</ref>(Vector3<sp/>userEyePos,<sp/>Vector3<sp/>workstationPosition)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>toCamera<sp/>=<sp/>userEyePos<sp/>-<sp/>workstationPosition;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toCamera.y<sp/>=<sp/>0F;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Quaternion<sp/>placementRotation<sp/>=<sp/>Quaternion.LookRotation(toCamera.normalized,<sp/>Vector3.up);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placementRotation;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Modules/InteractionEngine/Examples/6. Dynamic UI/Scripts/WorkstationBehaviourExample.cs"/>
  </compounddef>
</doxygen>
