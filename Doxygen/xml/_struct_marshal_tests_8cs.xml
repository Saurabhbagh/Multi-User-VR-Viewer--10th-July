<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_struct_marshal_tests_8cs" kind="file" language="C#">
    <compoundname>StructMarshalTests.cs</compoundname>
    <innerclass refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct" prot="public">Leap::LeapCSharp::Tests::TestMarshaledStruct</innerclass>
    <innerclass refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests" prot="public">Leap::LeapCSharp::Tests::StructMarshalTests</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_leap_c_sharp">Leap::LeapCSharp</innernamespace>
    <innernamespace refid="namespace_leap_1_1_leap_c_sharp_1_1_tests">Leap::LeapCSharp::Tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Runtime.InteropServices;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_leap_internal" kindref="compound">LeapInternal</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_leap_c_sharp_1_1_tests" kindref="compound">Leap.LeapCSharp.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>[StructLayout(LayoutKind.Sequential)]</highlight></codeline>
<codeline lineno="18" refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct" kindref="compound">TestMarshaledStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="19" refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1a46b6e7994957bd6b633533479298e2b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1a46b6e7994957bd6b633533479298e2b1" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="20" refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1ae3963be967349ef673366fe28fa59892" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1ae3963be967349ef673366fe28fa59892" kindref="member">TestMarshaledStruct</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t)<sp/>{<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>t;<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>[TestFixture()]</highlight></codeline>
<codeline lineno="24" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests" kindref="compound">StructMarshalTests</ref><sp/>{</highlight></codeline>
<codeline lineno="25" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a0e96ac2a4de8582ad6623d1459d7fda4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a0e96ac2a4de8582ad6623d1459d7fda4" kindref="member">ARRAY_SIZE</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="26" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1af0bc3ff18803ea59b5adcd7348aaa504" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1af0bc3ff18803ea59b5adcd7348aaa504" kindref="member">ARRAY_TEST_INDEX</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="27" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1aca4bb42c952b27e8fb216d3927d3991b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1aca4bb42c952b27e8fb216d3927d3991b" kindref="member">TEST_ID</ref><sp/>=<sp/>23;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_size;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>IntPtr<sp/>_ptr;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct" kindref="compound">TestMarshaledStruct</ref><sp/>_testStruct;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>[SetUp]</highlight></codeline>
<codeline lineno="34" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1ad9685e37feb15c81d7766a7959609227" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1ad9685e37feb15c81d7766a7959609227" kindref="member">Setup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_size<sp/>=<sp/>Marshal.SizeOf(typeof(<ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct" kindref="compound">TestMarshaledStruct</ref>));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//For<sp/>each<sp/>test,<sp/>allocate<sp/>a<sp/>chunk<sp/>of<sp/>memory<sp/>large<sp/>enough<sp/>for<sp/>[ARRAY_SIZE]<sp/>structs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ptr<sp/>=<sp/>Marshal.AllocHGlobal(_size<sp/>*<sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a0e96ac2a4de8582ad6623d1459d7fda4" kindref="member">ARRAY_SIZE</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_testStruct<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct" kindref="compound">TestMarshaledStruct</ref>(<ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1aca4bb42c952b27e8fb216d3927d3991b" kindref="member">TEST_ID</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>[TearDown]</highlight></codeline>
<codeline lineno="42" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1ab8fd65b7761b7a0423173f81affe129f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1ab8fd65b7761b7a0423173f81affe129f" kindref="member">Teardown</ref>()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Marshal.FreeHGlobal(_ptr);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ptr<sp/>=<sp/>IntPtr.Zero;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_testStruct<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct" kindref="compound">TestMarshaledStruct</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="50" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a3c10a893a23723f291d2130e45002781" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a3c10a893a23723f291d2130e45002781" kindref="member">SizeTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reportedSize<sp/>=<sp/>StructMarshal&lt;TestMarshaledStruct&gt;.Size;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_size,<sp/>Is.EqualTo(reportedSize),<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>must<sp/>match<sp/>Marshal.SizeOf.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="56" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a77668a08f998c376bda76f5d5fc3a932" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a77668a08f998c376bda76f5d5fc3a932" kindref="member">PtrToStructTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Marshal.StructureToPtr(_testStruct,<sp/>_ptr,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct" kindref="compound">TestMarshaledStruct</ref><sp/>output;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StructMarshal&lt;TestMarshaledStruct&gt;.PtrToStruct(_ptr,<sp/>out<sp/>output);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_testStruct.<ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1a46b6e7994957bd6b633533479298e2b1" kindref="member">id</ref>,<sp/>Is.EqualTo(output.id),<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>must<sp/>match<sp/>output.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="65" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a76c6c258ce0841fbebd04e4363a9c13c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1a76c6c258ce0841fbebd04e4363a9c13c" kindref="member">ArrayElementToStructTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Marshal.StructureToPtr(_testStruct,<sp/>(IntPtr)((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)_ptr<sp/>+<sp/>_size<sp/>*<sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1af0bc3ff18803ea59b5adcd7348aaa504" kindref="member">ARRAY_TEST_INDEX</ref>),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct" kindref="compound">TestMarshaledStruct</ref><sp/>output;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StructMarshal&lt;TestMarshaledStruct&gt;.ArrayElementToStruct(_ptr,<sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_struct_marshal_tests_1af0bc3ff18803ea59b5adcd7348aaa504" kindref="member">ARRAY_TEST_INDEX</ref>,<sp/>out<sp/>output);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_testStruct.<ref refid="struct_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_marshaled_struct_1a46b6e7994957bd6b633533479298e2b1" kindref="member">id</ref>,<sp/>Is.EqualTo(output.id),<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>must<sp/>match<sp/>output.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Editor/Tests/StructMarshalTests.cs"/>
  </compounddef>
</doxygen>
