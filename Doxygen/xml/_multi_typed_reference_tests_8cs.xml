<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_multi_typed_reference_tests_8cs" kind="file" language="C#">
    <compoundname>MultiTypedReferenceTests.cs</compoundname>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests" prot="public">Leap::Unity::Tests::MultiTypedReferenceTests</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class" prot="public">Leap::Unity::Tests::MultiTypedReferenceTests::BaseClass</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" prot="public">Leap::Unity::Tests::MultiTypedReferenceTests::A</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b" prot="public">Leap::Unity::Tests::MultiTypedReferenceTests::B</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_c" prot="public">Leap::Unity::Tests::MultiTypedReferenceTests::C</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_d" prot="public">Leap::Unity::Tests::MultiTypedReferenceTests::D</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_invalid_class" prot="public">Leap::Unity::Tests::MultiTypedReferenceTests::InvalidClass</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_reference_class" prot="private">Leap::Unity::Tests::MultiTypedReferenceTests::ReferenceClass</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity">Leap::Unity</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity_1_1_tests">Leap::Unity::Tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_unity_1_1_tests" kindref="compound">Leap.Unity.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests" kindref="compound">MultiTypedReferenceTests</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="17" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="18" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b" kindref="compound">B</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="19" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_c" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_c" kindref="compound">C</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="20" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_d" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_d" kindref="compound">D</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_invalid_class" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_invalid_class" kindref="compound">InvalidClass</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ReferenceClass<sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_multi_typed_reference" kindref="compound">MultiTypedReference</ref>&lt;BaseClass,<sp/>A,<sp/>B,<sp/>C,<sp/>D&gt;<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>ReferenceClass<sp/>_ref;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>[SetUp]</highlight></codeline>
<codeline lineno="29" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a521a157d884252bc41c6d83250641e2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a521a157d884252bc41c6d83250641e2e" kindref="member">Setup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ReferenceClass();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>[TearDown]</highlight></codeline>
<codeline lineno="34" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1aa080a2a3bc977eaf3b40964fae60860c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1aa080a2a3bc977eaf3b40964fae60860c" kindref="member">Teardown</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Clear();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="40" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a3cecddcc8983dc022fe31872dff40af3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a3cecddcc8983dc022fe31872dff40af3" kindref="member">SetTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref>&gt;());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="46" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a1463a97bc1f1fe51ae14089727566a10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a1463a97bc1f1fe51ae14089727566a10" kindref="member">SetNullTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref>&gt;());</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.Null);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="54" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a8f04e00a4092e378462b39dd15b735c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a8f04e00a4092e378462b39dd15b735c6" kindref="member">SwitchTypeTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref>&gt;());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b" kindref="compound">B</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b" kindref="compound">B</ref>&gt;());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="62" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a96db2691ce3ea40dacc1e7074b34be46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a96db2691ce3ea40dacc1e7074b34be46" kindref="member">ClearTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref>&gt;());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Clear();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.Null);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="70" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1ac9875ba9bfdb9832143b3fabf832d3d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1ac9875ba9bfdb9832143b3fabf832d3d1" kindref="member">AddInvalidTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_invalid_class" kindref="compound">InvalidClass</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>Throws.ArgumentException);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="77" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a2d87c654b7b44ad14bd65fea7b0a9f1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1a2d87c654b7b44ad14bd65fea7b0a9f1c" kindref="member">CanAddAllTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref>();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_a" kindref="compound">A</ref>&gt;());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b" kindref="compound">B</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_b" kindref="compound">B</ref>&gt;());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_c" kindref="compound">C</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_c" kindref="compound">C</ref>&gt;());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ref.Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_d" kindref="compound">D</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_ref.Value,<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_reference_tests_1_1_d" kindref="compound">D</ref>&gt;());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Editor/Tests/MultiTypedReferenceTests.cs"/>
  </compounddef>
</doxygen>
