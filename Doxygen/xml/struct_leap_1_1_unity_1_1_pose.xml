<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_leap_1_1_unity_1_1_pose" kind="struct" language="C#" prot="public">
    <compoundname>Leap::Unity::Pose</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IEquatable&lt; Pose &gt;</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_pose_1ad90ba514c97484e10d747d9bdf9b81a9" prot="public" static="no" mutable="no">
        <type>Vector3</type>
        <definition>Vector3 Leap.Unity.Pose.position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="22" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad" prot="public" static="no" mutable="no">
        <type>Quaternion</type>
        <definition>Quaternion Leap.Unity.Pose.rotation</definition>
        <argsstring></argsstring>
        <name>rotation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="23" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_pose_1ac98b12ebae014198abed5894475be71b" prot="public" static="yes" mutable="no">
        <type>readonly <ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
        <definition>readonly Pose Leap.Unity.Pose.identity</definition>
        <argsstring></argsstring>
        <name>identity</name>
        <initializer>= new <ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref>(Vector3.zero, Quaternion.identity)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="34" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="struct_leap_1_1_unity_1_1_pose_1a223dfc83da978c0ac8f02683acbdc070" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
        <definition>Pose Leap.Unity.Pose.inverse</definition>
        <argsstring></argsstring>
        <name>inverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="36" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="36" bodyend="41"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a5e5882a2d009bc83f987a5b82d1c4f17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Unity.Pose.Pose</definition>
        <argsstring>(Vector3 position)</argsstring>
        <name>Pose</name>
        <param>
          <type>Vector3</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="25" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="25" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a2762b68801a572f5b4e2b3afecaa1439" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Unity.Pose.Pose</definition>
        <argsstring>(Quaternion rotation)</argsstring>
        <name>Pose</name>
        <param>
          <type>Quaternion</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="27" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="27" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a5443bf51e7acbf3227e577a350c910a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Unity.Pose.Pose</definition>
        <argsstring>(Vector3 position, Quaternion rotation)</argsstring>
        <name>Pose</name>
        <param>
          <type>Vector3</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Quaternion</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="29" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a91aece63d4aecbb41e9af8cf2795c63a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Leap.Unity.Pose.ApproxEquals</definition>
        <argsstring>(Pose other)</argsstring>
        <name>ApproxEquals</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="72" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a3e16f8168410ebf2585350a36b058a65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override string</type>
        <definition>override string Leap.Unity.Pose.ToString</definition>
        <argsstring>()</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="107" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a806409523b1d9b8325e0c58d660304a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Leap.Unity.Pose.ToString</definition>
        <argsstring>(string format)</argsstring>
        <name>ToString</name>
        <param>
          <type>string</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="112" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1ac1e5f3546934ffb7f8935240403eb382" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Leap.Unity.Pose.Equals</definition>
        <argsstring>(object obj)</argsstring>
        <name>Equals</name>
        <param>
          <type>object</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="117" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a8482a9c3754c412fd00ed41511343a12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Leap.Unity.Pose.Equals</definition>
        <argsstring>(Pose other)</argsstring>
        <name>Equals</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="121" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a6a907351d0a69845338c3464a6658d8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override int</type>
        <definition>override int Leap.Unity.Pose.GetHashCode</definition>
        <argsstring>()</argsstring>
        <name>GetHashCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="125" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="125" bodyend="130"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1adc1395f4c9a4caef84c6986ce49c7ab7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
        <definition>static Pose Leap.Unity.Pose.operator *</definition>
        <argsstring>(Pose A, Pose B)</argsstring>
        <name>operator *</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref> B transformed by <ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref> A, like a transform hierarchy with A as the parent of B. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="47" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a26dee98a2b5f124aad5f1c56c21a5e1b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
        <definition>static Pose Leap.Unity.Pose.operator+</definition>
        <argsstring>(Pose A, Pose B)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Returns the accumulation of the two poses: The positions summed, and with rotation A.rotation * B.rotation. Note that this accumulates the poses without interpreting either pose as a parent space of the other; but also beware that rotations are noncommutative, so this operation is also noncommutative. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="58" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a1f7c15fc1732e76b76068aa316f58dbd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
        <definition>static Pose Leap.Unity.Pose.operator *</definition>
        <argsstring>(Pose pose, Vector3 localPosition)</argsstring>
        <name>operator *</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>pose</declname>
        </param>
        <param>
          <type>Vector3</type>
          <declname>localPosition</declname>
        </param>
        <briefdescription>
<para>Transforms the right-hand-side Vector3 as a local-space position into world space as if this <ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref> were its reference frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="67" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1aac1241e7aec5379dc1aa001526532016" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
        <definition>static Pose Leap.Unity.Pose.Lerp</definition>
        <argsstring>(Pose a, Pose b, float t)</argsstring>
        <name>Lerp</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Returns a pose interpolated (Lerp for position, Slerp, NOT Lerp for rotation) between a and b by t from 0 to 1. This method clamps t between 0 and 1; if extrapolation is desired, see Extrapolate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="81" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a4a16c9cf3281db86bdb0160d80b4cf3a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
        <definition>static Pose Leap.Unity.Pose.LerpUnclamped</definition>
        <argsstring>(Pose a, Pose b, float t)</argsstring>
        <name>LerpUnclamped</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>As Lerp, but doesn&apos;t clamp t between 0 and 1. Values above one extrapolate forwards beyond b, while values less than zero extrapolate backwards past a. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="92" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a2d4f86a6cbde7e36020570737e7cb4b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
        <definition>static Pose Leap.Unity.Pose.LerpUnclampedTimed</definition>
        <argsstring>(Pose a, float aTime, Pose b, float bTime, float extrapolateTime)</argsstring>
        <name>LerpUnclampedTimed</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>aTime</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>bTime</declname>
        </param>
        <param>
          <type>float</type>
          <declname>extrapolateTime</declname>
        </param>
        <briefdescription>
<para>As LerpUnclamped, but extrapolates using time values for a and b, and a target time at which to determine the extrapolated pose. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="101" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a0f9beeec0e5acd83e1405ba0915a563f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Pose.operator==</definition>
        <argsstring>(Pose a, Pose b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="132" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_pose_1a5eb039dbc9e70537da843e3eb92adcb4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Pose.operator !=</definition>
        <argsstring>(Pose a, Pose b)</argsstring>
        <name>operator !=</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_pose" kindref="compound">Pose</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="136" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="136" bodyend="138"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A position and rotation. You can multiply two poses; this acts like Matrix4x4 multiplication, but Poses always have unit scale. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3895">
        <label>IEquatable&lt; Pose &gt;</label>
      </node>
      <node id="3894">
        <label>Leap.Unity.Pose</label>
        <link refid="struct_leap_1_1_unity_1_1_pose"/>
        <childnode refid="3895" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3897">
        <label>IEquatable&lt; Pose &gt;</label>
      </node>
      <node id="3896">
        <label>Leap.Unity.Pose</label>
        <link refid="struct_leap_1_1_unity_1_1_pose"/>
        <childnode refid="3897" relation="public-inheritance">
        </childnode>
        <childnode refid="3896" relation="usage">
          <edgelabel>identity</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" line="20" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pose.cs" bodystart="20" bodyend="140"/>
    <listofallmembers>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a91aece63d4aecbb41e9af8cf2795c63a" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>ApproxEquals</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1ac1e5f3546934ffb7f8935240403eb382" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>Equals</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a8482a9c3754c412fd00ed41511343a12" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>Equals</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a6a907351d0a69845338c3464a6658d8b" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>GetHashCode</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1ac98b12ebae014198abed5894475be71b" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>identity</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a223dfc83da978c0ac8f02683acbdc070" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>inverse</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1aac1241e7aec5379dc1aa001526532016" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>Lerp</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a4a16c9cf3281db86bdb0160d80b4cf3a" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>LerpUnclamped</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a2d4f86a6cbde7e36020570737e7cb4b2" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>LerpUnclampedTimed</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a5eb039dbc9e70537da843e3eb92adcb4" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>operator !=</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1adc1395f4c9a4caef84c6986ce49c7ab7" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>operator *</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a1f7c15fc1732e76b76068aa316f58dbd" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>operator *</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a26dee98a2b5f124aad5f1c56c21a5e1b" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>operator+</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a0f9beeec0e5acd83e1405ba0915a563f" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>operator==</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a5e5882a2d009bc83f987a5b82d1c4f17" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>Pose</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a2762b68801a572f5b4e2b3afecaa1439" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>Pose</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a5443bf51e7acbf3227e577a350c910a8" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>Pose</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1ad90ba514c97484e10d747d9bdf9b81a9" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>position</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a59e70598d0ebe38d79a55b88b51734ad" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>rotation</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a3e16f8168410ebf2585350a36b058a65" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>ToString</name></member>
      <member refid="struct_leap_1_1_unity_1_1_pose_1a806409523b1d9b8325e0c58d660304a7" prot="public" virt="non-virtual"><scope>Leap::Unity::Pose</scope><name>ToString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
