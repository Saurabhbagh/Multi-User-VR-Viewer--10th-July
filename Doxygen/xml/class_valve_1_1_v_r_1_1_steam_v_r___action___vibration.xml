<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration" kind="class" language="C#" prot="public">
    <compoundname>Valve::VR::SteamVR_Action_Vibration</compoundname>
    <basecompoundref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___out" prot="public" virt="non-virtual">Valve.VR.SteamVR_Action_Out&lt; SteamVR_Action_Vibration_Source_Map, SteamVR_Action_Vibration_Source &gt;</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">ISerializationCallbackReceiver</basecompoundref>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7e76205f9a2f175a2b5a6ad240e1b70a" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7706b3c9b71de3bea16a3fab8a882f0b" kindref="member">ActiveChangeHandler</ref></type>
        <definition>ActiveChangeHandler Valve.VR.SteamVR_Action_Vibration.onActiveChange</definition>
        <argsstring></argsstring>
        <name>onActiveChange</name>
        <briefdescription>
<para><bold>[<ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> This event fires whenever a change happens in the action </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="24" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7a363819140be9e1483eb47fa145255f" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7706b3c9b71de3bea16a3fab8a882f0b" kindref="member">ActiveChangeHandler</ref></type>
        <definition>ActiveChangeHandler Valve.VR.SteamVR_Action_Vibration.onActiveBindingChange</definition>
        <argsstring></argsstring>
        <name>onActiveBindingChange</name>
        <briefdescription>
<para><bold>[<ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> This event fires whenever a change happens in the action </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="28" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a01bd50ca9598959946e12dc9a22bd05d" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1ac075e9e8f3e9eea89be32c403e6f86d5" kindref="member">ExecuteHandler</ref></type>
        <definition>ExecuteHandler Valve.VR.SteamVR_Action_Vibration.onExecute</definition>
        <argsstring></argsstring>
        <name>onExecute</name>
        <briefdescription>
<para><bold>[<ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> This event fires whenever this action is executed </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="32" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="33" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7706b3c9b71de3bea16a3fab8a882f0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate void</type>
        <definition>delegate void Valve.VR.SteamVR_Action_Vibration.ActiveChangeHandler</definition>
        <argsstring>(SteamVR_Action_Vibration fromAction, SteamVR_Input_Sources fromSource, bool active)</argsstring>
        <name>ActiveChangeHandler</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration" kindref="compound">SteamVR_Action_Vibration</ref></type>
          <declname>fromAction</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>fromSource</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1ac075e9e8f3e9eea89be32c403e6f86d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>delegate void</type>
        <definition>delegate void Valve.VR.SteamVR_Action_Vibration.ExecuteHandler</definition>
        <argsstring>(SteamVR_Action_Vibration fromAction, SteamVR_Input_Sources fromSource, float secondsFromNow, float durationSeconds, float frequency, float amplitude)</argsstring>
        <name>ExecuteHandler</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration" kindref="compound">SteamVR_Action_Vibration</ref></type>
          <declname>fromAction</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>fromSource</declname>
        </param>
        <param>
          <type>float</type>
          <declname>secondsFromNow</declname>
        </param>
        <param>
          <type>float</type>
          <declname>durationSeconds</declname>
        </param>
        <param>
          <type>float</type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a8fafb6f9a381a3e3084686eb1cd9d1f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Valve.VR.SteamVR_Action_Vibration.SteamVR_Action_Vibration</definition>
        <argsstring>()</argsstring>
        <name>SteamVR_Action_Vibration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="36" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1adf68478c0b7a984b01228ba17d1ce196" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Vibration.Execute</definition>
        <argsstring>(float secondsFromNow, float durationSeconds, float frequency, float amplitude, SteamVR_Input_Sources inputSource)</argsstring>
        <name>Execute</name>
        <param>
          <type>float</type>
          <declname>secondsFromNow</declname>
        </param>
        <param>
          <type>float</type>
          <declname>durationSeconds</declname>
        </param>
        <param>
          <type>float</type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Trigger the haptics at a certain time for a certain length </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>secondsFromNow</parametername>
</parameternamelist>
<parameterdescription>
<para>How long from the current time to execute the action (in seconds - can be 0)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>durationSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>How long the haptic action should last (in seconds)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>How often the haptic motor should bounce (0 - 320 in hz. The lower end being more useful)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>How intense the haptic action should be (0 - 1)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to execute the haptic action. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="47" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1afce165e6e31e7a65b14d978976cd028c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Vibration.AddOnActiveChangeListener</definition>
        <argsstring>(ActiveChangeHandler functionToCall, SteamVR_Input_Sources inputSource)</argsstring>
        <name>AddOnActiveChangeListener</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7706b3c9b71de3bea16a3fab8a882f0b" kindref="member">ActiveChangeHandler</ref></type>
          <declname>functionToCall</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Executes a function when the <emphasis>functional</emphasis> active state of this action (with the specified inputSource) changes. This happens when the action is bound or unbound, or when the ActionSet changes state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToCall</parametername>
</parameternamelist>
<parameterdescription>
<para>A local function that receives the boolean action who&apos;s active state changes and the corresponding input source</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="57" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a60f0e8aeed560759d517a576ff56bfa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Vibration.RemoveOnActiveChangeListener</definition>
        <argsstring>(ActiveChangeHandler functionToStopCalling, SteamVR_Input_Sources inputSource)</argsstring>
        <name>RemoveOnActiveChangeListener</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7706b3c9b71de3bea16a3fab8a882f0b" kindref="member">ActiveChangeHandler</ref></type>
          <declname>functionToStopCalling</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Stops executing a function when the <emphasis>functional</emphasis> active state of this action (with the specified inputSource) changes. This happens when the action is bound or unbound, or when the ActionSet changes state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToStopCalling</parametername>
</parameternamelist>
<parameterdescription>
<para>The local function that you&apos;ve setup to receive update events</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="66" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1accfc5869c3abe1a5f4911c182679aef3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Vibration.AddOnActiveBindingChangeListener</definition>
        <argsstring>(ActiveChangeHandler functionToCall, SteamVR_Input_Sources inputSource)</argsstring>
        <name>AddOnActiveBindingChangeListener</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7706b3c9b71de3bea16a3fab8a882f0b" kindref="member">ActiveChangeHandler</ref></type>
          <declname>functionToCall</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Executes a function when the active state of this action (with the specified inputSource) changes. This happens when the action is bound or unbound </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToCall</parametername>
</parameternamelist>
<parameterdescription>
<para>A local function that receives the boolean action who&apos;s active state changes and the corresponding input source</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="74" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a2f792bbebfd9c63d77a0c220bf2f22c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Vibration.RemoveOnActiveBindingChangeListener</definition>
        <argsstring>(ActiveChangeHandler functionToStopCalling, SteamVR_Input_Sources inputSource)</argsstring>
        <name>RemoveOnActiveBindingChangeListener</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7706b3c9b71de3bea16a3fab8a882f0b" kindref="member">ActiveChangeHandler</ref></type>
          <declname>functionToStopCalling</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Stops executing the function setup by the corresponding AddListener </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToStopCalling</parametername>
</parameternamelist>
<parameterdescription>
<para>The local function that you&apos;ve setup to receive update events</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="82" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a9500575c412d448cd6f142429627b995" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Vibration.AddOnExecuteListener</definition>
        <argsstring>(ExecuteHandler functionToCall, SteamVR_Input_Sources inputSource)</argsstring>
        <name>AddOnExecuteListener</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1ac075e9e8f3e9eea89be32c403e6f86d5" kindref="member">ExecuteHandler</ref></type>
          <declname>functionToCall</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Executes a function when the execute method of this action (with the specified inputSource) is called. This happens when the action is bound or unbound </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToCall</parametername>
</parameternamelist>
<parameterdescription>
<para>A local function that receives the boolean action who&apos;s active state changes and the corresponding input source</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="90" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a93047e7c0b65262fdab01a25dae48d52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action_Vibration.RemoveOnExecuteListener</definition>
        <argsstring>(ExecuteHandler functionToStopCalling, SteamVR_Input_Sources inputSource)</argsstring>
        <name>RemoveOnExecuteListener</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1ac075e9e8f3e9eea89be32c403e6f86d5" kindref="member">ExecuteHandler</ref></type>
          <declname>functionToStopCalling</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Stops executing the function setup by the corresponding AddListener </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functionToStopCalling</parametername>
</parameternamelist>
<parameterdescription>
<para>The local function that you&apos;ve setup to receive update events</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="98" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1ab4a746a1c972e2a301f82c326dbea34b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override float</type>
        <definition>override float Valve.VR.SteamVR_Action_Vibration.GetTimeLastChanged</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetTimeLastChanged</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Returns the last time this action was executed </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="107" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a1dd64911f3d1caa2b78123bd178b0f7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Valve.VR.SteamVR_Action_Vibration.IsUpdating</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>IsUpdating</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="121" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="121" bodyend="124"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a64324479b2504aae4d0681dd3aae2580" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void ISerializationCallbackReceiver.</type>
        <definition>void ISerializationCallbackReceiver. Valve.VR.SteamVR_Action_Vibration.OnBeforeSerialize</definition>
        <argsstring>()</argsstring>
        <name>OnBeforeSerialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="112" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1ab5eec2c0e8c73a47dc58cde9e47c9b11" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void ISerializationCallbackReceiver.</type>
        <definition>void ISerializationCallbackReceiver. Valve.VR.SteamVR_Action_Vibration.OnAfterDeserialize</definition>
        <argsstring>()</argsstring>
        <name>OnAfterDeserialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="116" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="116" bodyend="119"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Vibration actions are used to trigger haptic feedback in vr controllers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5019">
        <label>Valve.VR.SteamVR_Action_Vibration</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration"/>
        <childnode refid="5020" relation="public-inheritance">
        </childnode>
        <childnode refid="5021" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5020">
        <label>SteamVR_Action_Out&lt; SteamVR_Action_Vibration_Source_Map, SteamVR_Action_Vibration_Source &gt;</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___out"/>
      </node>
      <node id="5021">
        <label>ISerializationCallbackReceiver</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5022">
        <label>Valve.VR.SteamVR_Action_Vibration</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration"/>
        <childnode refid="5023" relation="public-inheritance">
        </childnode>
        <childnode refid="5024" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5023">
        <label>SteamVR_Action_Out&lt; SteamVR_Action_Vibration_Source_Map, SteamVR_Action_Vibration_Source &gt;</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___out"/>
      </node>
      <node id="5024">
        <label>ISerializationCallbackReceiver</label>
      </node>
    </collaborationgraph>
    <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" line="19" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action_Vibration.cs" bodystart="18" bodyend="125"/>
    <listofallmembers>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7706b3c9b71de3bea16a3fab8a882f0b" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>ActiveChangeHandler</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1accfc5869c3abe1a5f4911c182679aef3" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>AddOnActiveBindingChangeListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1afce165e6e31e7a65b14d978976cd028c" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>AddOnActiveChangeListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a9500575c412d448cd6f142429627b995" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>AddOnExecuteListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1adf68478c0b7a984b01228ba17d1ce196" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>Execute</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1ac075e9e8f3e9eea89be32c403e6f86d5" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>ExecuteHandler</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1ab4a746a1c972e2a301f82c326dbea34b" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>GetTimeLastChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a1dd64911f3d1caa2b78123bd178b0f7b" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>IsUpdating</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7a363819140be9e1483eb47fa145255f" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>onActiveBindingChange</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a7e76205f9a2f175a2b5a6ad240e1b70a" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>onActiveChange</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1ab5eec2c0e8c73a47dc58cde9e47c9b11" prot="private" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>OnAfterDeserialize</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a64324479b2504aae4d0681dd3aae2580" prot="private" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>OnBeforeSerialize</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a01bd50ca9598959946e12dc9a22bd05d" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>onExecute</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a2f792bbebfd9c63d77a0c220bf2f22c0" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>RemoveOnActiveBindingChangeListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a60f0e8aeed560759d517a576ff56bfa7" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>RemoveOnActiveChangeListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a93047e7c0b65262fdab01a25dae48d52" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>RemoveOnExecuteListener</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action___vibration_1a8fafb6f9a381a3e3084686eb1cd9d1f2" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action_Vibration</scope><name>SteamVR_Action_Vibration</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
