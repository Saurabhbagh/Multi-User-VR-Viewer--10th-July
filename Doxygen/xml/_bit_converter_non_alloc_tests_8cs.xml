<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_bit_converter_non_alloc_tests_8cs" kind="file" language="C#">
    <compoundname>BitConverterNonAllocTests.cs</compoundname>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests" prot="public">Leap::Unity::Tests::BitConverterTests</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity">Leap::Unity</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity_1_1_tests">Leap::Unity::Tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Linq;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_unity_1_1_tests" kindref="compound">Leap.Unity.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests" kindref="compound">BitConverterTests</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[]<sp/>_bytes;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>[<ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a38158c62ddfc36d84fbf916abd532e9e" kindref="member">SetUp</ref>]</highlight></codeline>
<codeline lineno="21" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a38158c62ddfc36d84fbf916abd532e9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a38158c62ddfc36d84fbf916abd532e9e" kindref="member">SetUp</ref>()<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_bytes<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">[128];</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_bytes.Length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bytes[i]<sp/>=<sp/>(byte)<ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>.Random.Range(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">.MinValue,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">.MaxValue);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="29" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a199ab962faeb0c63a86d308e844f6b78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a199ab962faeb0c63a86d308e844f6b78" kindref="member">TestToUInt16</ref>()<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UInt16<sp/>expected<sp/>=<sp/>BitConverter.ToUInt16(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UInt16<sp/>actual<sp/>=<sp/>BitConverterNonAlloc.ToUInt16(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(actual,<sp/>Is.EqualTo(expected));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="37" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a942697952b353d2a70bf6922681fc84d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a942697952b353d2a70bf6922681fc84d" kindref="member">TestFromUInt16</ref>()<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UInt16<sp/>value<sp/>=<sp/>(UInt16)<ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>.Random.Range(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MinValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>actual<sp/>=<sp/>BitConverter.GetBytes(value);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitConverterNonAlloc.GetBytes(value,<sp/>_bytes,<sp/>ref<sp/>offset);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(offset,<sp/>Is.EqualTo(actual.Length));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_bytes.Take(offset),<sp/>Is.EquivalentTo(actual));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="49" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a9eae1df51bd67e944cd6187e24c9970d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a9eae1df51bd67e944cd6187e24c9970d" kindref="member">TestToInt16</ref>()<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int16<sp/>expected<sp/>=<sp/>BitConverter.ToInt16(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int16<sp/>actual<sp/>=<sp/>BitConverterNonAlloc.ToInt16(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(actual,<sp/>Is.EqualTo(expected));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="57" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a250870475d05bc5878cfd30061f4792a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a250870475d05bc5878cfd30061f4792a" kindref="member">TestFromInt16</ref>()<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int16<sp/>value<sp/>=<sp/>(Int16)<ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>.Random.Range(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MinValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>actual<sp/>=<sp/>BitConverter.GetBytes(value);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitConverterNonAlloc.GetBytes(value,<sp/>_bytes,<sp/>ref<sp/>offset);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(offset,<sp/>Is.EqualTo(actual.Length));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_bytes.Take(offset),<sp/>Is.EquivalentTo(actual));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="69" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a78fec5203b5dc47a33a5735782bec30b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a78fec5203b5dc47a33a5735782bec30b" kindref="member">TestToUInt32</ref>()<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UInt32<sp/>expected<sp/>=<sp/>BitConverter.ToUInt32(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UInt32<sp/>actual<sp/>=<sp/>BitConverterNonAlloc.ToUInt32(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(actual,<sp/>Is.EqualTo(expected));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="77" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1aa374fcee30c22855e6f4b132532567d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1aa374fcee30c22855e6f4b132532567d5" kindref="member">TestFromUInt32</ref>()<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UInt32<sp/>value<sp/>=<sp/>(UInt32)<ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>.Random.Range(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MinValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>actual<sp/>=<sp/>BitConverter.GetBytes(value);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitConverterNonAlloc.GetBytes(value,<sp/>_bytes,<sp/>ref<sp/>offset);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(offset,<sp/>Is.EqualTo(actual.Length));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_bytes.Take(offset),<sp/>Is.EquivalentTo(actual));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="89" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a24f16755780736d9ba92617517d32cfb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a24f16755780736d9ba92617517d32cfb" kindref="member">TestToInt32</ref>()<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int32<sp/>expected<sp/>=<sp/>BitConverter.ToInt32(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int32<sp/>actual<sp/>=<sp/>BitConverterNonAlloc.ToInt32(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(actual,<sp/>Is.EqualTo(expected));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="97" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a6d4ac3673264676a8b0afad153f773b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a6d4ac3673264676a8b0afad153f773b4" kindref="member">TestFromInt32</ref>()<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int32<sp/>value<sp/>=<sp/>(Int32)<ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>.Random.Range(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MinValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>actual<sp/>=<sp/>BitConverter.GetBytes(value);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitConverterNonAlloc.GetBytes(value,<sp/>_bytes,<sp/>ref<sp/>offset);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(offset,<sp/>Is.EqualTo(actual.Length));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_bytes.Take(offset),<sp/>Is.EquivalentTo(actual));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="109" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1ac10e4316cfdbc3172d9c402bc427833c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1ac10e4316cfdbc3172d9c402bc427833c" kindref="member">TestToUInt64</ref>()<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UInt64<sp/>expected<sp/>=<sp/>BitConverter.ToUInt64(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UInt64<sp/>actual<sp/>=<sp/>BitConverterNonAlloc.ToUInt64(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(actual,<sp/>Is.EqualTo(expected));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="117" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1ade521f67ff9ce1d65c1cad2c8b625817" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1ade521f67ff9ce1d65c1cad2c8b625817" kindref="member">TestFromUInt64</ref>()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UInt64<sp/>value<sp/>=<sp/>(UInt64)<ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>.Random.Range(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MinValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>actual<sp/>=<sp/>BitConverter.GetBytes(value);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitConverterNonAlloc.GetBytes(value,<sp/>_bytes,<sp/>ref<sp/>offset);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(offset,<sp/>Is.EqualTo(actual.Length));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_bytes.Take(offset),<sp/>Is.EquivalentTo(actual));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="129" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a176e7913bf26bd19f3dfe341e1883390" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a176e7913bf26bd19f3dfe341e1883390" kindref="member">TestToInt64</ref>()<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int64<sp/>expected<sp/>=<sp/>BitConverter.ToInt64(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int64<sp/>actual<sp/>=<sp/>BitConverterNonAlloc.ToInt64(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(actual,<sp/>Is.EqualTo(expected));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="137" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a5fb887344c07c258e439cfc2ff349af8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a5fb887344c07c258e439cfc2ff349af8" kindref="member">TestFromInt64</ref>()<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int64<sp/>value<sp/>=<sp/>(Int64)<ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>.Random.Range(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MinValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>actual<sp/>=<sp/>BitConverter.GetBytes(value);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitConverterNonAlloc.GetBytes(value,<sp/>_bytes,<sp/>ref<sp/>offset);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(offset,<sp/>Is.EqualTo(actual.Length));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_bytes.Take(offset),<sp/>Is.EquivalentTo(actual));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="149" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a36aae47dba48abf476acdb660cd4c51b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a36aae47dba48abf476acdb660cd4c51b" kindref="member">TestToSingle</ref>()<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Single<sp/>expected<sp/>=<sp/>BitConverter.ToSingle(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Single<sp/>actual<sp/>=<sp/>BitConverterNonAlloc.ToSingle(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(actual,<sp/>Is.EqualTo(expected));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="157" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a828348650fb61975c8ff55e2afb20b4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a828348650fb61975c8ff55e2afb20b4b" kindref="member">TestFromSingle</ref>()<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Single<sp/>value<sp/>=<sp/>(Single)<ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>.Random.Range(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MinValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>actual<sp/>=<sp/>BitConverter.GetBytes(value);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitConverterNonAlloc.GetBytes(value,<sp/>_bytes,<sp/>ref<sp/>offset);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(offset,<sp/>Is.EqualTo(actual.Length));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_bytes.Take(offset),<sp/>Is.EquivalentTo(actual));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="169" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a22cf885ce832a5d32331aaf7c0ccb9ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a22cf885ce832a5d32331aaf7c0ccb9ca" kindref="member">TestToDouble</ref>()<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Double<sp/>expected<sp/>=<sp/>BitConverter.ToDouble(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Double<sp/>actual<sp/>=<sp/>BitConverterNonAlloc.ToDouble(_bytes,<sp/>0);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(actual,<sp/>Is.EqualTo(expected));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="177" refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a06356676d9aaa8eea43e4c753218981c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_bit_converter_tests_1a06356676d9aaa8eea43e4c753218981c" kindref="member">TestFromDouble</ref>()<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Double<sp/>value<sp/>=<sp/>(Double)<ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>.Random.Range(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MinValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>actual<sp/>=<sp/>BitConverter.GetBytes(value);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitConverterNonAlloc.GetBytes(value,<sp/>_bytes,<sp/>ref<sp/>offset);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(offset,<sp/>Is.EqualTo(actual.Length));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_bytes.Take(offset),<sp/>Is.EquivalentTo(actual));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Utils/Editor/BitConverterNonAllocTests.cs"/>
  </compounddef>
</doxygen>
