<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_leap_1_1_transform_extensions" kind="class" language="C#" prot="public">
    <compoundname>Leap::TransformExtensions</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_leap_1_1_transform_extensions_1a490fca711767b912202c11e5fc822e7a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
        <definition>static Frame Leap.TransformExtensions.Transform</definition>
        <argsstring>(this Frame frame, LeapTransform transform)</argsstring>
        <name>Transform</name>
        <param>
          <type>this <ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does an in-place rigid transformation of a <ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref> containing the desired translation, rotation, and scale to be applied to the <ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" line="21" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" bodystart="21" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_transform_extensions_1adfac55b1d9d895f6f3758b51532c163d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
        <definition>static Frame Leap.TransformExtensions.TransformedCopy</definition>
        <argsstring>(this Frame frame, LeapTransform transform)</argsstring>
        <name>TransformedCopy</name>
        <param>
          <type>this <ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new frame that is a copy of a frame, with an additional rigid transformation applied to it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformation to be applied to the copied frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" line="35" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_transform_extensions_1a036b1899cc7ba679f9b1e7c92d48d718" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref></type>
        <definition>static Hand Leap.TransformExtensions.Transform</definition>
        <argsstring>(this Hand hand, LeapTransform transform)</argsstring>
        <name>Transform</name>
        <param>
          <type>this <ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref></type>
          <declname>hand</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does an in-place rigid transformation of a <ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref> containing the desired translation, rotation, and scale to be applied to the <ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" line="45" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" bodystart="45" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_transform_extensions_1a8be865b83138ce2978e0397c5acfe697" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref></type>
        <definition>static Hand Leap.TransformExtensions.TransformedCopy</definition>
        <argsstring>(this Hand hand, LeapTransform transform)</argsstring>
        <name>TransformedCopy</name>
        <param>
          <type>this <ref refid="class_leap_1_1_hand" kindref="compound">Hand</ref></type>
          <declname>hand</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new hand that is a copy of a hand, with an additional rigid transformation applied to it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformation to be applied to the copied hand. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" line="70" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_transform_extensions_1a1b269c7bc13f163aa13967c28e25d5db" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref></type>
        <definition>static Finger Leap.TransformExtensions.Transform</definition>
        <argsstring>(this Finger finger, LeapTransform transform)</argsstring>
        <name>Transform</name>
        <param>
          <type>this <ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref></type>
          <declname>finger</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does an in-place rigid transformation of a <ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref> containing the desired translation, rotation, and scale to be applied to the <ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" line="80" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" bodystart="80" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_transform_extensions_1a796cf8aef7469f923eb945e8ec907e6c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref></type>
        <definition>static Finger Leap.TransformExtensions.TransformedCopy</definition>
        <argsstring>(this Finger finger, LeapTransform transform)</argsstring>
        <name>TransformedCopy</name>
        <param>
          <type>this <ref refid="class_leap_1_1_finger" kindref="compound">Finger</ref></type>
          <declname>finger</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new finger that is a copy of a finger, with an additional rigid transformation applied to it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformation to be applied to the copied finger. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" line="111" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_transform_extensions_1a640b4021a07fd00e6c3b652b89490bf9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref></type>
        <definition>static Bone Leap.TransformExtensions.Transform</definition>
        <argsstring>(this Bone bone, LeapTransform transform)</argsstring>
        <name>Transform</name>
        <param>
          <type>this <ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref></type>
          <declname>bone</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   Does an in-place rigid transformation of a Bone.

   @param transform A LeapTransform containing the desired translation, rotation, and scale
</verbatim><itemizedlist>
<listitem><para>* to be applied to the bone. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" line="121" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" bodystart="121" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_transform_extensions_1af33edb1f8b47fdf5e8301466da517924" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref></type>
        <definition>static Bone Leap.TransformExtensions.TransformedCopy</definition>
        <argsstring>(this Bone bone, LeapTransform transform)</argsstring>
        <name>TransformedCopy</name>
        <param>
          <type>this <ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref></type>
          <declname>bone</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new bone that is a copy of a bone, with an additional rigid transformation applied to it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformation to be applied to the copied bone. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" line="156" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" bodystart="156" bodyend="158"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_leap_1_1_transform_extensions_1a0360a20b01a9cbccffb98c2de760b37d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>internal void</type>
        <definition>static internal void Leap.TransformExtensions.TransformGivenJoints</definition>
        <argsstring>(this Bone bone, LeapTransform transform)</argsstring>
        <name>TransformGivenJoints</name>
        <param>
          <type>this <ref refid="class_leap_1_1_bone" kindref="compound">Bone</ref></type>
          <declname>bone</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   Does an in-place rigid transformation of a Bone, assuming the joints have already been transformed.

   @param transform A LeapTransform containing the desired translation, rotation, and scale
</verbatim><itemizedlist>
<listitem><para>* to be applied to the bone. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" line="136" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" bodystart="136" bodyend="148"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" line="13" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/TransformExtensions.cs" bodystart="13" bodyend="159"/>
    <listofallmembers>
      <member refid="class_leap_1_1_transform_extensions_1a490fca711767b912202c11e5fc822e7a" prot="public" virt="non-virtual"><scope>Leap::TransformExtensions</scope><name>Transform</name></member>
      <member refid="class_leap_1_1_transform_extensions_1a036b1899cc7ba679f9b1e7c92d48d718" prot="public" virt="non-virtual"><scope>Leap::TransformExtensions</scope><name>Transform</name></member>
      <member refid="class_leap_1_1_transform_extensions_1a1b269c7bc13f163aa13967c28e25d5db" prot="public" virt="non-virtual"><scope>Leap::TransformExtensions</scope><name>Transform</name></member>
      <member refid="class_leap_1_1_transform_extensions_1a640b4021a07fd00e6c3b652b89490bf9" prot="public" virt="non-virtual"><scope>Leap::TransformExtensions</scope><name>Transform</name></member>
      <member refid="class_leap_1_1_transform_extensions_1adfac55b1d9d895f6f3758b51532c163d" prot="public" virt="non-virtual"><scope>Leap::TransformExtensions</scope><name>TransformedCopy</name></member>
      <member refid="class_leap_1_1_transform_extensions_1a8be865b83138ce2978e0397c5acfe697" prot="public" virt="non-virtual"><scope>Leap::TransformExtensions</scope><name>TransformedCopy</name></member>
      <member refid="class_leap_1_1_transform_extensions_1a796cf8aef7469f923eb945e8ec907e6c" prot="public" virt="non-virtual"><scope>Leap::TransformExtensions</scope><name>TransformedCopy</name></member>
      <member refid="class_leap_1_1_transform_extensions_1af33edb1f8b47fdf5e8301466da517924" prot="public" virt="non-virtual"><scope>Leap::TransformExtensions</scope><name>TransformedCopy</name></member>
      <member refid="class_leap_1_1_transform_extensions_1a0360a20b01a9cbccffb98c2de760b37d" prot="private" virt="non-virtual"><scope>Leap::TransformExtensions</scope><name>TransformGivenJoints</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
