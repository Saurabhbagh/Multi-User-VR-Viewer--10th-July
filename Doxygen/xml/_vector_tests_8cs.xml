<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_vector_tests_8cs" kind="file" language="C#">
    <compoundname>VectorTests.cs</compoundname>
    <innerclass refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests" prot="public">Leap::LeapCSharp::Tests::VectorTests</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_leap_c_sharp">Leap::LeapCSharp</innernamespace>
    <innernamespace refid="namespace_leap_1_1_leap_c_sharp_1_1_tests">Leap::LeapCSharp::Tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_leap_c_sharp_1_1_tests" kindref="compound">Leap.LeapCSharp.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>[TestFixture()]</highlight></codeline>
<codeline lineno="15" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests" kindref="compound">VectorTests</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>thisVector<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>thatVector<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Vector<sp/>otherVector<sp/>=<sp/>Vector.Left;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>[OneTimeSetUp]</highlight></codeline>
<codeline lineno="21" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a0c48c6a5ba72b700beb775313918c769" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a0c48c6a5ba72b700beb775313918c769" kindref="member">Init</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="24" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1af9b57edc72c60333e898e660a0e0591e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1af9b57edc72c60333e898e660a0e0591e" kindref="member">Vector_Up</ref>()<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="32" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6159c18ccab6432095cc32bdb920ca13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6159c18ccab6432095cc32bdb920ca13" kindref="member">Vector_Down</ref>()<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17" kindref="member">Down</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(-1,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="40" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6ea9133db5ccbd844a43c021847ca18b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6ea9133db5ccbd844a43c021847ca18b" kindref="member">Vector_Forward</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(-1,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="48" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a9da5309cbab72e326fb4804d30359474" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a9da5309cbab72e326fb4804d30359474" kindref="member">Vector_Backward</ref>()<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c" kindref="member">Backward</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="56" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a33f5f18600b7beafa3839a9710e280f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a33f5f18600b7beafa3839a9710e280f2" kindref="member">Vector_Left</ref>()<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881" kindref="member">Left</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(-1,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="64" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6ca70e2a038ac4363be3ee8190d81858" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a6ca70e2a038ac4363be3ee8190d81858" kindref="member">Vector_Right</ref>()<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158" kindref="member">Right</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="72" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a10859fd21599d27a97aa2d435d07917f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a10859fd21599d27a97aa2d435d07917f" kindref="member">Vector_Zero</ref>()<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a007c4ee68aa890118b7a2d24aa4d9a6b" kindref="member">Zero</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="80" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1aeeb569f385d4318f01ee10d3abacecee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1aeeb569f385d4318f01ee10d3abacecee" kindref="member">Vector_XAxis</ref>()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad62a202318bf591b431928859449b19c" kindref="member">XAxis</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="88" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a62558a7648adceef4485d9960aacf2a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a62558a7648adceef4485d9960aacf2a3" kindref="member">Vector_YAxis</ref>()<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1abf07de0f419b3de5776e046d35c0843e" kindref="member">YAxis</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="96" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1ab50fa4d4319b0a65fefff7ad9d7658be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1ab50fa4d4319b0a65fefff7ad9d7658be" kindref="member">Vector_ZAxis</ref>()<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2b2f1a3a9334e812e832e3b1b6cd4384" kindref="member">ZAxis</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="104" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a4af3d975d3572ce1b986e04f33a0d3f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a4af3d975d3572ce1b986e04f33a0d3f1" kindref="member">Vector_Constructor_1</ref>()<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(0.5f,<sp/>200.3f,<sp/>67f);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0.5f,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(200.3f,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(67f,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="116" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1aa0f506785e3ecc2850358f960168fed4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1aa0f506785e3ecc2850358f960168fed4" kindref="member">Vector_Constructor_2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>baseVector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(3,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(baseVector);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(3,<sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(4,<sp/>vec.<ref refid="struct_leap_1_1_vector_1a458897a143435a1292796d8dfb1d760d" kindref="member">y</ref>,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(5,<sp/>vec.<ref refid="struct_leap_1_1_vector_1afd2f32c0771e6e15fcef62f0fbf57658" kindref="member">z</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref><sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(3,<sp/>baseVector.<ref refid="struct_leap_1_1_vector_1aa567a19970c776ccb9ebe9a09cb14828" kindref="member">x</ref>,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="127" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a12b9148aad0254e6a0aa51f90d6ca07b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a12b9148aad0254e6a0aa51f90d6ca07b" kindref="member">Vector_Magnitude</ref>()<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a007c4ee68aa890118b7a2d24aa4d9a6b" kindref="member">Zero</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Zero<sp/>has<sp/>0<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Up<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17" kindref="member">Down</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Down<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881" kindref="member">Left</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Left<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158" kindref="member">Right</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Right<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Forward<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c" kindref="member">Backward</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Backward<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tooBig<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>).<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.IsInfinity(tooBig),<sp/></highlight><highlight class="stringliteral">&quot;max<sp/>value<sp/>is<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tooSmall<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>).<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.IsInfinity(tooSmall),<sp/></highlight><highlight class="stringliteral">&quot;min<sp/>value<sp/>is<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)Math.Sqrt(3f),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>1,<sp/>1).<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/></highlight><highlight class="stringliteral">&quot;(1,1,1)<sp/>has<sp/>sqrt(3)<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)Math.Sqrt(3f),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-1,<sp/>-1,<sp/>-1).<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/></highlight><highlight class="stringliteral">&quot;(-1,-1,-1)<sp/>has<sp/>sqrt(3)<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="145" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a31575f9e35f1950d4b0a5b6364e65bf8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a31575f9e35f1950d4b0a5b6364e65bf8" kindref="member">Vector_Magnitude_Squared</ref>()<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a007c4ee68aa890118b7a2d24aa4d9a6b" kindref="member">Zero</ref>.<ref refid="struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143" kindref="member">MagnitudeSquared</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Zero<sp/>has<sp/>0<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>.<ref refid="struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143" kindref="member">MagnitudeSquared</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Up<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17" kindref="member">Down</ref>.<ref refid="struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143" kindref="member">MagnitudeSquared</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Down<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881" kindref="member">Left</ref>.<ref refid="struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143" kindref="member">MagnitudeSquared</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Left<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158" kindref="member">Right</ref>.<ref refid="struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143" kindref="member">MagnitudeSquared</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Right<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>.<ref refid="struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143" kindref="member">MagnitudeSquared</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Forward<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c" kindref="member">Backward</ref>.<ref refid="struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143" kindref="member">MagnitudeSquared</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Backward<sp/>has<sp/>1<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tooBig<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>).<ref refid="struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143" kindref="member">MagnitudeSquared</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.IsInfinity(tooBig),<sp/></highlight><highlight class="stringliteral">&quot;max<sp/>value<sp/>is<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tooSmall<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>).<ref refid="struct_leap_1_1_vector_1aec7fdb9c75f451a3c0a28fddfba97143" kindref="member">MagnitudeSquared</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.IsInfinity(tooSmall),<sp/></highlight><highlight class="stringliteral">&quot;min<sp/>value<sp/>is<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(3,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>1,<sp/>1).MagnitudeSquared,<sp/></highlight><highlight class="stringliteral">&quot;(1,1,1)<sp/>has<sp/>3<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(3,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-1,<sp/>-1,<sp/>-1).MagnitudeSquared,<sp/></highlight><highlight class="stringliteral">&quot;(-1,-1,-1)<sp/>3<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="163" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1adaacfc7dece7179f4bf387f9c1071b5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1adaacfc7dece7179f4bf387f9c1071b5c" kindref="member">Vector_DistanceTo</ref>()<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>origin<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a007c4ee68aa890118b7a2d24aa4d9a6b" kindref="member">Zero</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a007c4ee68aa890118b7a2d24aa4d9a6b" kindref="member">Zero</ref>),<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>to<sp/>0<sp/>is<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>),<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>to<sp/>Up<sp/>is<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17" kindref="member">Down</ref>),<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>to<sp/>Down<sp/>is<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881" kindref="member">Left</ref>),<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>to<sp/>Left<sp/>is<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158" kindref="member">Right</ref>),<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>to<sp/>Right<sp/>is<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>),<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>to<sp/>Forward<sp/>is<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c" kindref="member">Backward</ref>),<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>to<sp/>Backward<sp/>is<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tooBig<sp/>=<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.IsInfinity(tooBig),<sp/></highlight><highlight class="stringliteral">&quot;max<sp/>value<sp/>is<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tooSmall<sp/>=<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.IsInfinity(tooSmall),<sp/></highlight><highlight class="stringliteral">&quot;min<sp/>value<sp/>is<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)Math.Sqrt(3f),<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>1,<sp/>1)),<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>to<sp/>(1,1,1)<sp/>is<sp/>sqrt(3)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)Math.Sqrt(3f),<sp/>origin.<ref refid="struct_leap_1_1_vector_1a9a192946523c91fc5aec3541cc09b762" kindref="member">DistanceTo</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-1,<sp/>-1,<sp/>-1)),<sp/></highlight><highlight class="stringliteral">&quot;distance<sp/>to<sp/>(-1,-1,-1)<sp/>is<sp/>sqrt(3)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="182" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a437abd3b29a1475bd61d2ec6c6c27be4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a437abd3b29a1475bd61d2ec6c6c27be4" kindref="member">Vector_AngleTo</ref>()<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>angle<sp/>returned<sp/>is<sp/>always<sp/>the<sp/>smaller<sp/>of<sp/>the<sp/>two<sp/>conjugate<sp/>angles.<sp/>Thus<sp/>A.angleTo(B)<sp/>==<sp/>B.angleTo(A)<sp/>and<sp/>is<sp/>always<sp/>a<sp/>positive<sp/>value<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>pi<sp/>radians<sp/>(180<sp/>degrees).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>-3,<sp/>45).AngleTo(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>-3,<sp/>45)),<sp/></highlight><highlight class="stringliteral">&quot;angle<sp/>to<sp/>same&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(90<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881" kindref="member">Left</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Up-Left&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(90<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158" kindref="member">Right</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Up-Right&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(90<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Up-Forward&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(90<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c" kindref="member">Backward</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Up-Backward&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(90<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17" kindref="member">Down</ref>.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881" kindref="member">Left</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Down-Left&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(90<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17" kindref="member">Down</ref>.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1aa2cefa3d6f93e552fcd95621e82da158" kindref="member">Right</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Down-Right&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(90<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17" kindref="member">Down</ref>.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Down-Forward&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(90<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17" kindref="member">Down</ref>.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c" kindref="member">Backward</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Down-Backward&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_matrix" kindref="compound">Matrix</ref><sp/>rotator<sp/>=<sp/><ref refid="struct_leap_1_1_matrix" kindref="compound">Matrix</ref>.<ref refid="struct_leap_1_1_matrix_1a54d2973a3dbf9699e9638f504768c81f" kindref="member">Identity</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>baseVec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a62b9bbd54a4b89f695a106f42fcff881" kindref="member">Left</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(baseVec);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>count<sp/>&lt;=<sp/>180;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720" kindref="member">SetRotation</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>,<sp/>count<sp/>*<sp/>Constants.DEG_TO_RAD);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>rotated<sp/>=<sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6" kindref="member">TransformDirection</ref>(vec);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(count<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated),<sp/>12<sp/>*<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;0-180<sp/>Angle<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated)<sp/>*<sp/>Constants.RAD_TO_DEG);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(rotated.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(baseVec),<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated),<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>to<sp/>b<sp/>==<sp/>b<sp/>to<sp/>a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>count<sp/>&lt;=<sp/>360;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720" kindref="member">SetRotation</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>,<sp/>count<sp/>*<sp/>Constants.DEG_TO_RAD);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>rotated<sp/>=<sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6" kindref="member">TransformDirection</ref>(vec);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((360<sp/>-<sp/>count)<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated),<sp/>12<sp/>*<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;180-360<sp/>Angle<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated)<sp/>*<sp/>Constants.RAD_TO_DEG);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(rotated.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(baseVec),<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated),<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>to<sp/>b<sp/>==<sp/>b<sp/>to<sp/>a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>count<sp/>&lt;=<sp/>540;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720" kindref="member">SetRotation</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>,<sp/>count<sp/>*<sp/>Constants.DEG_TO_RAD);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>rotated<sp/>=<sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6" kindref="member">TransformDirection</ref>(vec);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((count<sp/>-<sp/>360)<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated),<sp/>12<sp/>*<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;360-540<sp/>Angle<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated)<sp/>*<sp/>Constants.RAD_TO_DEG);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(rotated.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(baseVec),<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated),<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>to<sp/>b<sp/>==<sp/>b<sp/>to<sp/>a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>count<sp/>&lt;=<sp/>720;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720" kindref="member">SetRotation</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>,<sp/>count<sp/>*<sp/>Constants.DEG_TO_RAD);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>rotated<sp/>=<sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6" kindref="member">TransformDirection</ref>(vec);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((720<sp/>-<sp/>count)<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated),<sp/>12<sp/>*<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;540-720<sp/>Angle<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated)<sp/>*<sp/>Constants.RAD_TO_DEG);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(rotated.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(baseVec),<sp/>baseVec.<ref refid="struct_leap_1_1_vector_1a5833741990af0c182a41c75053d628b7" kindref="member">AngleTo</ref>(rotated),<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>to<sp/>b<sp/>==<sp/>b<sp/>to<sp/>a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="229" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a9dd3db807907c8a517f0cc825b0d38a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a9dd3db807907c8a517f0cc825b0d38a2" kindref="member">Vector_Pitch</ref>()<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>vector<sp/>points<sp/>upward,<sp/>the<sp/>returned<sp/>angle<sp/>is<sp/>between<sp/>0<sp/>and<sp/>pi<sp/>radians<sp/>(180<sp/>degrees);<sp/>if<sp/>it<sp/>points<sp/>downward,<sp/>the<sp/>angle<sp/>is<sp/>between<sp/>0<sp/>and<sp/>-pi<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_matrix" kindref="compound">Matrix</ref><sp/>rotator<sp/>=<sp/><ref refid="struct_leap_1_1_matrix" kindref="compound">Matrix</ref>.<ref refid="struct_leap_1_1_matrix_1a54d2973a3dbf9699e9638f504768c81f" kindref="member">Identity</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>baseVec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(baseVec);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>axis<sp/>=<sp/>-<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad62a202318bf591b431928859449b19c" kindref="member">XAxis</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>count<sp/>&lt;<sp/>180;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720" kindref="member">SetRotation</ref>(axis,<sp/>count<sp/>*<sp/>Constants.DEG_TO_RAD);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>rotated<sp/>=<sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6" kindref="member">TransformDirection</ref>(vec);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(count<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/>rotated.<ref refid="struct_leap_1_1_vector_1acc5105f55edfdc7a3d5cc6cd6cb8dc8f" kindref="member">Pitch</ref>,<sp/>12<sp/>*<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;0-180<sp/>Pitch<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>rotated.<ref refid="struct_leap_1_1_vector_1acc5105f55edfdc7a3d5cc6cd6cb8dc8f" kindref="member">Pitch</ref><sp/>*<sp/>Constants.RAD_TO_DEG);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>count<sp/>&lt;=<sp/>360;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720" kindref="member">SetRotation</ref>(axis,<sp/>count<sp/>*<sp/>Constants.DEG_TO_RAD);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>rotated<sp/>=<sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6" kindref="member">TransformDirection</ref>(vec);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((-360<sp/>+<sp/>count)<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/>rotated.<ref refid="struct_leap_1_1_vector_1acc5105f55edfdc7a3d5cc6cd6cb8dc8f" kindref="member">Pitch</ref>,<sp/>12<sp/>*<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;180-360<sp/>Pitch<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>rotated.<ref refid="struct_leap_1_1_vector_1acc5105f55edfdc7a3d5cc6cd6cb8dc8f" kindref="member">Pitch</ref><sp/>*<sp/>Constants.RAD_TO_DEG);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="249" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a2ffa62b560241d8c489d07c8f4d0fd39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a2ffa62b560241d8c489d07c8f4d0fd39" kindref="member">Vector_Yaw</ref>()<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>vector<sp/>points<sp/>to<sp/>the<sp/>right<sp/>of<sp/>the<sp/>negative<sp/>z-axis,<sp/>then<sp/>the<sp/>returned<sp/>angle<sp/>is<sp/>between<sp/>0<sp/>and<sp/>pi<sp/>radians<sp/>(180<sp/>degrees);<sp/>if<sp/>it<sp/>points<sp/>to<sp/>the<sp/>left,<sp/>the<sp/>angle<sp/>is<sp/>between<sp/>0<sp/>and<sp/>-pi<sp/>radians.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_matrix" kindref="compound">Matrix</ref><sp/>rotator<sp/>=<sp/><ref refid="struct_leap_1_1_matrix" kindref="compound">Matrix</ref>.<ref refid="struct_leap_1_1_matrix_1a54d2973a3dbf9699e9638f504768c81f" kindref="member">Identity</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>baseVec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(baseVec);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>axis<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1abf07de0f419b3de5776e046d35c0843e" kindref="member">YAxis</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>count<sp/>&lt;<sp/>180;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720" kindref="member">SetRotation</ref>(axis,<sp/>count<sp/>*<sp/>Constants.DEG_TO_RAD);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>rotated<sp/>=<sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6" kindref="member">TransformDirection</ref>(vec);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(count<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/>rotated.<ref refid="struct_leap_1_1_vector_1ac6f5feaf332862e1ebc0d5b219e55eaa" kindref="member">Yaw</ref>,<sp/>12<sp/>*<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;0-180<sp/>Yaw<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>rotated.<ref refid="struct_leap_1_1_vector_1ac6f5feaf332862e1ebc0d5b219e55eaa" kindref="member">Yaw</ref><sp/>*<sp/>Constants.RAD_TO_DEG);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>count<sp/>&lt;=<sp/>360;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720" kindref="member">SetRotation</ref>(axis,<sp/>count<sp/>*<sp/>Constants.DEG_TO_RAD);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>rotated<sp/>=<sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6" kindref="member">TransformDirection</ref>(vec);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((-360<sp/>+<sp/>count)<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/>rotated.<ref refid="struct_leap_1_1_vector_1ac6f5feaf332862e1ebc0d5b219e55eaa" kindref="member">Yaw</ref>,<sp/>12<sp/>*<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;180-360<sp/>Yaw<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>rotated.<ref refid="struct_leap_1_1_vector_1ac6f5feaf332862e1ebc0d5b219e55eaa" kindref="member">Yaw</ref><sp/>*<sp/>Constants.RAD_TO_DEG);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="269" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a824cd8e6c65420ec593e146e7027ca16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a824cd8e6c65420ec593e146e7027ca16" kindref="member">Vector_Roll</ref>()<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>vector<sp/>points<sp/>to<sp/>the<sp/>left<sp/>of<sp/>the<sp/>y-axis,<sp/>then<sp/>the<sp/>returned<sp/>angle<sp/>is<sp/>between<sp/>0<sp/>and<sp/>pi<sp/>radians<sp/>(180<sp/>degrees);<sp/>if<sp/>it<sp/>points<sp/>to<sp/>the<sp/>right,<sp/>the<sp/>angle<sp/>is<sp/>between<sp/>0<sp/>and<sp/>-pi<sp/>radians.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_matrix" kindref="compound">Matrix</ref><sp/>rotator<sp/>=<sp/><ref refid="struct_leap_1_1_matrix" kindref="compound">Matrix</ref>.<ref refid="struct_leap_1_1_matrix_1a54d2973a3dbf9699e9638f504768c81f" kindref="member">Identity</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>baseVec<sp/>=<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17" kindref="member">Down</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>vec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(baseVec);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>axis<sp/>=<sp/>-<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2b2f1a3a9334e812e832e3b1b6cd4384" kindref="member">ZAxis</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>count<sp/>&lt;<sp/>180;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720" kindref="member">SetRotation</ref>(axis,<sp/>count<sp/>*<sp/>Constants.DEG_TO_RAD);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>rotated<sp/>=<sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6" kindref="member">TransformDirection</ref>(vec);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(count<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/>rotated.<ref refid="struct_leap_1_1_vector_1afa775e6c104537383493e027f6a462f7" kindref="member">Roll</ref>,<sp/>12<sp/>*<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;0-180<sp/>Roll<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>rotated.<ref refid="struct_leap_1_1_vector_1afa775e6c104537383493e027f6a462f7" kindref="member">Roll</ref><sp/>*<sp/>Constants.RAD_TO_DEG);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>count<sp/>&lt;=<sp/>360;<sp/>count++)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a16f32d54d64ff6ed670844ede0dd7720" kindref="member">SetRotation</ref>(axis,<sp/>count<sp/>*<sp/>Constants.DEG_TO_RAD);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>rotated<sp/>=<sp/>rotator.<ref refid="struct_leap_1_1_matrix_1a64110864a06e02eb50977596633d39a6" kindref="member">TransformDirection</ref>(vec);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((-360<sp/>+<sp/>count)<sp/>*<sp/>Constants.DEG_TO_RAD,<sp/>rotated.<ref refid="struct_leap_1_1_vector_1afa775e6c104537383493e027f6a462f7" kindref="member">Roll</ref>,<sp/>12<sp/>*<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;180-360<sp/>Roll<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>rotated.<ref refid="struct_leap_1_1_vector_1afa775e6c104537383493e027f6a462f7" kindref="member">Roll</ref><sp/>*<sp/>Constants.RAD_TO_DEG);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="289" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a95ef902b49770c997d4ac63c82469af4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a95ef902b49770c997d4ac63c82469af4" kindref="member">Vector_Dot</ref>()<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>.<ref refid="struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804" kindref="member">Dot</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a2ec88fe91f8086e18e78ee2dcc078525" kindref="member">Forward</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Orthogonal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>.<ref refid="struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804" kindref="member">Dot</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Parallel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(-1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad90a5266422b507db81c857829b9a915" kindref="member">Up</ref>.<ref refid="struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804" kindref="member">Dot</ref>(<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1a5f080cc88e908cd5d4c3e593767cdb17" kindref="member">Down</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Opposite&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c" kindref="member">Backward</ref>.<ref refid="struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804" kindref="member">Dot</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(0,<sp/>1,<sp/>1)),<sp/></highlight><highlight class="stringliteral">&quot;Hypoteneuse<sp/>of<sp/>right<sp/>isoscelese&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)Math.Sqrt(2)<sp/>/<sp/>2,<sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>.<ref refid="struct_leap_1_1_vector_1ad8dd1ac8e87611c590c9dcc58f8fdf8c" kindref="member">Backward</ref>.<ref refid="struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804" kindref="member">Dot</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(0,<sp/>1,<sp/>1).Normalized),<sp/></highlight><highlight class="stringliteral">&quot;45<sp/>degree<sp/>unit<sp/>vectors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="298" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a7ccc1b67410e1db3f7233d298713568d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a7ccc1b67410e1db3f7233d298713568d" kindref="member">Vector_Cross</ref>()<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(3,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>expected<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-4,<sp/>8,<sp/>-4);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(expected,<sp/>v1.<ref refid="struct_leap_1_1_vector_1acdd326aa3bd6ac8eaf4d0c321db129cb" kindref="member">Cross</ref>(v2),<sp/></highlight><highlight class="stringliteral">&quot;v1<sp/>x<sp/>v2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(-expected,<sp/>v2.<ref refid="struct_leap_1_1_vector_1acdd326aa3bd6ac8eaf4d0c321db129cb" kindref="member">Cross</ref>(v1),<sp/></highlight><highlight class="stringliteral">&quot;v1<sp/>x<sp/>v2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>v1.<ref refid="struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804" kindref="member">Dot</ref>(v1.<ref refid="struct_leap_1_1_vector_1acdd326aa3bd6ac8eaf4d0c321db129cb" kindref="member">Cross</ref>(v2)),<sp/></highlight><highlight class="stringliteral">&quot;Orthogonal<sp/>with<sp/>v1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>v2.<ref refid="struct_leap_1_1_vector_1a9177e8852525449bc0817f77de9a9804" kindref="member">Dot</ref>(v1.<ref refid="struct_leap_1_1_vector_1acdd326aa3bd6ac8eaf4d0c321db129cb" kindref="member">Cross</ref>(v2)),<sp/></highlight><highlight class="stringliteral">&quot;Orthogonal<sp/>with<sp/>v2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="310" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1af791ae55b3cdec41bf193f32f21d5995" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1af791ae55b3cdec41bf193f32f21d5995" kindref="member">Vector_Normalized</ref>()<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-4,<sp/>8,<sp/>-4);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v4<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(99999999,<sp/>99999999,<sp/>99999999);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v5<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-99999999,<sp/>-99999999,<sp/>-99999999);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1.0f,<sp/>v1.<ref refid="struct_leap_1_1_vector_1a14c14f9559420ad1f1a9e1b8884859c4" kindref="member">Normalized</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;small&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0.0f,<sp/>v2.<ref refid="struct_leap_1_1_vector_1a14c14f9559420ad1f1a9e1b8884859c4" kindref="member">Normalized</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1.0f,<sp/>v3.<ref refid="struct_leap_1_1_vector_1a14c14f9559420ad1f1a9e1b8884859c4" kindref="member">Normalized</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;small<sp/>negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1.0f,<sp/>v4.<ref refid="struct_leap_1_1_vector_1a14c14f9559420ad1f1a9e1b8884859c4" kindref="member">Normalized</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1.0f,<sp/>v5.<ref refid="struct_leap_1_1_vector_1a14c14f9559420ad1f1a9e1b8884859c4" kindref="member">Normalized</ref>.<ref refid="struct_leap_1_1_vector_1afd51a6a7664efda2e5dde7a5e6a5313a" kindref="member">Magnitude</ref>,<sp/>Constants.EPSILON,<sp/></highlight><highlight class="stringliteral">&quot;large<sp/>negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="324" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a831fe0bbe331497dd6be9b658aeb4198" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a831fe0bbe331497dd6be9b658aeb4198" kindref="member">Vector_Plus</ref>()<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-4,<sp/>8,<sp/>-4);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-3,<sp/>10,<sp/>-1),<sp/>v1<sp/>+<sp/>v2);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="331" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a458591b03503cc37248e456bf914b08c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a458591b03503cc37248e456bf914b08c" kindref="member">Vector_Minus</ref>()<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-4,<sp/>8,<sp/>-4);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(5,<sp/>-6,<sp/>7),<sp/>v1<sp/>-<sp/>v2);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="338" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a779aa5664557f4570619d0efb6ea7506" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a779aa5664557f4570619d0efb6ea7506" kindref="member">Vector_Negate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>2,<sp/>-3);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-1,<sp/>-2,<sp/>3),<sp/>-v1);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="344" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1abc55df5efcb4ca9db145115f877662df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1abc55df5efcb4ca9db145115f877662df" kindref="member">Vector_Times</ref>()<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>2,<sp/>-3);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(5.2f,<sp/>10.4f,<sp/>-15.6f),<sp/>(v1<sp/>*<sp/>5.2f));</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="350" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1abcfe9f53b45373c49e54555a1a29af5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1abcfe9f53b45373c49e54555a1a29af5b" kindref="member">Vector_Divide</ref>()<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(25,<sp/>150,<sp/>-300);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(5f,<sp/>30f,<sp/>-60f),<sp/>(v1<sp/>/<sp/>5.0f));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="356" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1ad4a8f7fbb8f738bba7142e027446bcd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1ad4a8f7fbb8f738bba7142e027446bcd5" kindref="member">Vector_Equals</ref>()<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v1.<ref refid="struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de" kindref="member">Equals</ref>(v3),<sp/></highlight><highlight class="stringliteral">&quot;simple<sp/>integers<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v3.<ref refid="struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de" kindref="member">Equals</ref>(v1),<sp/></highlight><highlight class="stringliteral">&quot;simple<sp/>integers<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v1.<ref refid="struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de" kindref="member">Equals</ref>(v1),<sp/></highlight><highlight class="stringliteral">&quot;simple<sp/>integers<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v1<sp/>==<sp/>v3,<sp/></highlight><highlight class="stringliteral">&quot;simple<sp/>integers<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v3<sp/>==<sp/>v1,<sp/></highlight><highlight class="stringliteral">&quot;simple<sp/>integers<sp/>5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(v1.<ref refid="struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de" kindref="member">Equals</ref>(v2),<sp/></highlight><highlight class="stringliteral">&quot;simple<sp/>integers<sp/>6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(v2.<ref refid="struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de" kindref="member">Equals</ref>(v1),<sp/></highlight><highlight class="stringliteral">&quot;simple<sp/>integers<sp/>7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(v1<sp/>==<sp/>v2,<sp/></highlight><highlight class="stringliteral">&quot;simple<sp/>integers<sp/>8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(v2<sp/>==<sp/>v1,<sp/></highlight><highlight class="stringliteral">&quot;simple<sp/>integers<sp/>9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v4<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v5<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_min_value" kindref="compound">MinValue</ref>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v4<sp/>==<sp/>v5,<sp/></highlight><highlight class="stringliteral">&quot;MinValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v6<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v7<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v6<sp/>==<sp/>v7,<sp/></highlight><highlight class="stringliteral">&quot;MaxValue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v8<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v9<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v8<sp/>==<sp/>v9,<sp/></highlight><highlight class="stringliteral">&quot;Epsilon&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v10<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.PositiveInfinity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.PositiveInfinity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NegativeInfinity);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v11<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.PositiveInfinity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.PositiveInfinity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NegativeInfinity);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v10<sp/>==<sp/>v11,<sp/></highlight><highlight class="stringliteral">&quot;Infinity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v12<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NaN,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NaN,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NaN);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v13<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NaN,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NaN,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NaN);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(v12<sp/>==<sp/>v13,<sp/></highlight><highlight class="stringliteral">&quot;NaN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v14<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(5<sp/>+<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon,<sp/>-124.34f<sp/>+<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref><sp/>-<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v15<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(5<sp/>-<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon,<sp/>-124.34f<sp/>-<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.Epsilon,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v14<sp/>==<sp/>v15,<sp/></highlight><highlight class="stringliteral">&quot;+-<sp/>Epsilon&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v16<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(5<sp/>+<sp/>Constants.EPSILON,<sp/>-124.34f<sp/>+<sp/>Constants.EPSILON,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue<sp/>-<sp/>Constants.EPSILON);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v17<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(5<sp/>-<sp/>Constants.EPSILON,<sp/>-124.34f<sp/>-<sp/>Constants.EPSILON,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(v16<sp/>==<sp/>v17,<sp/></highlight><highlight class="stringliteral">&quot;+-<sp/>Leap<sp/>Epsilon&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilonMultiplier<sp/>=<sp/>11;<sp/></highlight><highlight class="comment">//TODO<sp/>figure<sp/>out<sp/>why<sp/>this<sp/>error<sp/>is<sp/>so<sp/>high</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v18<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(5<sp/>+<sp/>Constants.EPSILON<sp/>*<sp/>epsilonMultiplier,<sp/>-124.34f<sp/>+<sp/>Constants.EPSILON<sp/>*<sp/>epsilonMultiplier,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.MaxValue<sp/>-<sp/>Constants.EPSILON<sp/>*<sp/>epsilonMultiplier);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>v19<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(5,<sp/>-124.34f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(v18<sp/>==<sp/>v19,<sp/></highlight><highlight class="stringliteral">&quot;Diff<sp/>&gt;<sp/>Leap<sp/>Epsilon&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="406" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1afc10e5b06ee3c3f8f8c280c3ca7b11ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1afc10e5b06ee3c3f8f8c280c3ca7b11ae" kindref="member">Vector_NotEqual</ref>()<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!Vector_NotEqual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vectorsNotEqual<sp/>=<sp/>thisVector<sp/>!=<sp/>thatVector;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(vectorsNotEqual);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="414" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a3d2ff59f317b5b2b3dd2bed12517cff9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_vector_tests_1a3d2ff59f317b5b2b3dd2bed12517cff9" kindref="member">Vector_IsValid</ref>()<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>xInvalid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NaN,<sp/>3f,<sp/>45f);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(xInvalid.<ref refid="struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>yInvalid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(32.1f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NaN,<sp/>45f);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(yInvalid.<ref refid="struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>zInvalid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-345.32f,<sp/>-78.67f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NaN);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(zInvalid.<ref refid="struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>xInfinite<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.PositiveInfinity,<sp/>3f,<sp/>45f);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(xInfinite.<ref refid="struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>yInfinite<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(-23.7f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NegativeInfinity,<sp/>3f);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(yInfinite.<ref refid="struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>zInfinite<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(3f,<sp/>45f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.PositiveInfinity);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(zInfinite.<ref refid="struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>mixed<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NaN,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.NegativeInfinity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">.PositiveInfinity);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(mixed.<ref refid="struct_leap_1_1_vector_1aae57324c0e393fc8f8b799092964efbb" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Editor/Tests/VectorTests.cs"/>
  </compounddef>
</doxygen>
