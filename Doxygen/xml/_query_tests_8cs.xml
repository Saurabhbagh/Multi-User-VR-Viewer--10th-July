<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_query_tests_8cs" kind="file" language="C#">
    <compoundname>QueryTests.cs</compoundname>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests" prot="public">Leap::Unity::Tests::QueryTests</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" prot="public">Leap::Unity::Tests::QueryTests::QueryArg</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator" prot="public">Leap::Unity::Tests::QueryTests::TestEnumerator</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity">Leap::Unity</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity_1_1_tests">Leap::Unity::Tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Linq;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="_balloon_8cs_1a7d67e097df9376eb709b6a23aa3c7d23" kindref="member">UnityEngine</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_unity_1_1_tests" kindref="compound">Leap.Unity.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Query;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests" kindref="compound">QueryTests</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="23" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1c19b93c5718249f0a53a473c6180fb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1c19b93c5718249f0a53a473c6180fb9" kindref="member">AllTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().All(i<sp/>=&gt;<sp/>i<sp/>&lt;<sp/>5),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().All(i<sp/>=&gt;<sp/>i<sp/>&lt;<sp/>5)));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().All(i<sp/>=&gt;<sp/>i<sp/>!=<sp/>8),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().All(i<sp/>=&gt;<sp/>i<sp/>!=<sp/>8)));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="32" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1abc698ee6c3cf73420bcc9d98f4ea35d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1abc698ee6c3cf73420bcc9d98f4ea35d5" kindref="member">AnyTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Any(i<sp/>=&gt;<sp/>i<sp/>==<sp/>4),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Query().Any(i<sp/>=&gt;<sp/>i<sp/>==<sp/>4)));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="38" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6447332ac378b460ab1384afdb151f26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6447332ac378b460ab1384afdb151f26" kindref="member">Array2DTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WIDTH<sp/>=<sp/>23;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HEIGHT<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[,]<sp/>array<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[WIDTH,<sp/>HEIGHT];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>WIDTH;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>HEIGHT;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array[i,<sp/>j]<sp/>=<sp/>counter++;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(array.Query().Count(),<sp/>Is.EqualTo(WIDTH<sp/>*<sp/>HEIGHT));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>value<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>Enumerable.Range(0,<sp/>WIDTH<sp/>*<sp/>HEIGHT))<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(array.Query().Contains(value));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="57" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a839082e5ff9fd18472ac343612a53e33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a839082e5ff9fd18472ac343612a53e33" kindref="member">AverageTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg0)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Ignore(</highlight><highlight class="stringliteral">&quot;Ignore<sp/>empty<sp/>queries<sp/>for<sp/>average<sp/>test.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Select(t<sp/>=&gt;<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)t).Average(),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Average()).Within(0.001).Percent);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="68" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ac249029ca844b0885fd8488b2d35c0b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ac249029ca844b0885fd8488b2d35c0b0" kindref="member">CastTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[]<sp/>objs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[]<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;These&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Are&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;All&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Strings&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs.Cast&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;().SequenceEqual(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objs.Query().Cast&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;().ToList()));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="76" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aba795b21c7c5b21ce0e665dd3e0a1e70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aba795b21c7c5b21ce0e665dd3e0a1e70" kindref="member">ConcatTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg0,<sp/>[ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg1)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Concat(arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>()).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Concat(arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>()).ToList()));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Concat(arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>()).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Concat(arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>()).ToList()));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="85" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4d763e6e0917742da84fce7bd5a9d008" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4d763e6e0917742da84fce7bd5a9d008" kindref="member">ContainsTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Contains(3),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Contains(3)));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Contains(9),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Contains(9)));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="94" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ae07891711ed2aba14f29f0769dee281f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ae07891711ed2aba14f29f0769dee281f" kindref="member">CountTests</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Count(),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Count()));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Count(i<sp/>=&gt;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Count(i<sp/>=&gt;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0)));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="103" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a7f6724647f757d5d2d62f3e4b2d3ccc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a7f6724647f757d5d2d62f3e4b2d3ccc8" kindref="member">DistinctTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Distinct().OrderBy(t<sp/>=&gt;<sp/>t).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Distinct().OrderBy(t<sp/>=&gt;<sp/>t).ToList()));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="109" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad54707c01c325e5af9184a40da2f19d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad54707c01c325e5af9184a40da2f19d0" kindref="member">ElementAtTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg,<sp/>[Values(0,<sp/>3,<sp/>100)]<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>list<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>list.Count)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().ElementAt(index),<sp/>Throws.InstanceOf&lt;IndexOutOfRangeException&gt;());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().ElementAt(index),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().ElementAt(index)));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="121" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a71d64345aedbf5a5556dcc154af06218" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a71d64345aedbf5a5556dcc154af06218" kindref="member">EnumeratorTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator" kindref="compound">TestEnumerator</ref>().<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>().IndexOf(3),<sp/>3);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="126" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a0573ebf5ac67a01f925590baa34c96d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a0573ebf5ac67a01f925590baa34c96d6" kindref="member">FirstTests</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>list<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().First(),<sp/>Throws.InvalidOperationException);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().First(),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().First()));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.Where(i<sp/>=&gt;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0).Count()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Where(i<sp/>=&gt;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0).First(),<sp/>Throws.InvalidOperationException);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().First(i<sp/>=&gt;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().First(i<sp/>=&gt;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0)));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="145" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a2140f1aa85ae7639e9919aaa2fdc7d4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a2140f1aa85ae7639e9919aaa2fdc7d4b" kindref="member">FirstOrDefaultTests</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().FirstOrDefault(),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().FirstOrDefault()));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().FirstOrDefault(i<sp/>=&gt;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().FirstOrDefault(i<sp/>=&gt;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0)));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().FirstOrDefault(i<sp/>=&gt;<sp/>i<sp/>&gt;<sp/>10),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().FirstOrDefault(i<sp/>=&gt;<sp/>i<sp/>&gt;<sp/>10)));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="157" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa95430f50d25682e20764f3b131a299d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa95430f50d25682e20764f3b131a299d" kindref="member">FoldTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>list<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Fold((a,<sp/>b)<sp/>=&gt;<sp/>a<sp/>+<sp/>b),<sp/>Throws.InvalidOperationException);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Fold((a,<sp/>b)<sp/>=&gt;<sp/>a<sp/>+<sp/>b),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Sum()));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="169" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6d5935d2f07cd029f690bbbf146553a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6d5935d2f07cd029f690bbbf146553a8" kindref="member">ForeachTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg0,<sp/>[ValueSource(</highlight><highlight class="stringliteral">&quot;list1&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg1)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>actual<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>item<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Concat(arg1.ToQuery()))<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual.Add(item);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(actual,<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Concat(arg1.ToList()).ToList()));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="179" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a74bff637aa940161e7781b930cc12e54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a74bff637aa940161e7781b930cc12e54" kindref="member">IndexOfTests</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().IndexOf(3),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().IndexOf(3)));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().IndexOf(100),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().IndexOf(100)));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="188" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa4a662a8acf5c66e247b4f02b3430739" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa4a662a8acf5c66e247b4f02b3430739" kindref="member">LastTests</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>list<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Last(),<sp/>Throws.InvalidOperationException);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Last(),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Last()));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().LastOrDefault(),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().LastOrDefault()));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="203" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aef878cd4eb6220f4a0596cf796ffcd78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aef878cd4eb6220f4a0596cf796ffcd78" kindref="member">MaxTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Ignore(</highlight><highlight class="stringliteral">&quot;Ignore<sp/>empty<sp/>queries<sp/>for<sp/>max<sp/>tests.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Max(),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Max()));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="214" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a669814dda36f3656ccb56a00c19f632c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a669814dda36f3656ccb56a00c19f632c" kindref="member">MinTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Ignore(</highlight><highlight class="stringliteral">&quot;Ignore<sp/>empty<sp/>queries<sp/>for<sp/>min<sp/>tests.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Min(),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Min()));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="225" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1e678d24f8674a66cbf7d3f94e112d58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1e678d24f8674a66cbf7d3f94e112d58" kindref="member">MultiFirstTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>q<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q.FirstOrDefault();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>q.FirstOrDefault(),<sp/>Throws.InvalidOperationException);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="234" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a918d08deb5b680f74921bcffb6a3fb9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a918d08deb5b680f74921bcffb6a3fb9d" kindref="member">MultiForeachTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>b<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>q<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>item<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>q)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Add(item);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>item<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>q)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.Add(item);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>Throws.InvalidOperationException);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="251" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ac5467e4132f5be56dc162ffdcba0d085" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ac5467e4132f5be56dc162ffdcba0d085" kindref="member">OfTypeTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[]<sp/>objs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[]<sp/>{<sp/>0,<sp/>0.4f,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>7u,<sp/>0.4,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs.OfType&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;().ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objs.Query().OfType&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;().ToList()));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs.OfType&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objs.Query().OfType(typeof(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)).Cast&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;().ToList()));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="262" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a7ea493534f3b6a7dc1d376d5c6cd4d70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a7ea493534f3b6a7dc1d376d5c6cd4d70" kindref="member">OrderByTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().OrderBy(i<sp/>=&gt;<sp/>i).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().OrderBy(i<sp/>=&gt;<sp/>i).ToList()));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="268" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a2bbb69deffc98452e8b387438485c01f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a2bbb69deffc98452e8b387438485c01f" kindref="member">OrderByDescendingTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().OrderByDescending(i<sp/>=&gt;<sp/>i).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().OrderByDescending(i<sp/>=&gt;<sp/>i).ToList()));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>[Pairwise]</highlight></codeline>
<codeline lineno="275" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ae009f348590b2db73ccbeb78f7b642cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ae009f348590b2db73ccbeb78f7b642cb" kindref="member">RangeFromTo</ref>([Values(0,<sp/>1,<sp/>100,<sp/>-1,<sp/>-100)]<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startValue,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Values(0,<sp/>1,<sp/>100,<sp/>-1,<sp/>-100)]<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endValue,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Values(1,<sp/>2,<sp/>10)]<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Values(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>endIsExclusive)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>expected<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>startValue;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signStep<sp/>=<sp/>endValue<sp/>&gt;<sp/>startValue<sp/>?<sp/>step<sp/>:<sp/>-step;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Mathf.Abs(startValue<sp/>-<sp/>endValue)<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected.Add(value);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>signStep;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endIsExclusive)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected.Remove(endValue);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected<sp/>=<sp/>expected.Where(i<sp/>=&gt;<sp/>i<sp/>&gt;=<sp/>Mathf.Min(startValue,<sp/>endValue)).</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Where(i<sp/>=&gt;<sp/>i<sp/>&lt;=<sp/>Mathf.Max(startValue,<sp/>endValue)).</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ToList();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(Values.Range(startValue,<sp/>endValue,<sp/>step,<sp/>endIsExclusive).ToList(),<sp/>Is.EquivalentTo(expected));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="299" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad81f80eef768928fe3ce68cad67ec93f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad81f80eef768928fe3ce68cad67ec93f" kindref="member">Repeat</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg,<sp/>[Values(0,<sp/>1,<sp/>2,<sp/>3,<sp/>100)]<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repetitions)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>list<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>repetitions;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.AddRange(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>());</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Repeat(repetitions).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="310" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a86da088c148763716146ec948dcbbd9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a86da088c148763716146ec948dcbbd9d" kindref="member">ReverseTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expected<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected.Reverse();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Reverse().ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="319" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad3e9e03a9711e7d6d1e1400b1f69c3b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad3e9e03a9711e7d6d1e1400b1f69c3b9" kindref="member">SelectTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Select(i<sp/>=&gt;<sp/>i<sp/>*<sp/>23).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Select(i<sp/>=&gt;<sp/>i<sp/>*<sp/>23).ToList()));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="325" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad189d8d7213ac96c7f8bf5eb26b608e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad189d8d7213ac96c7f8bf5eb26b608e0" kindref="member">SelectManyTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg0,<sp/>[ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg1)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().SelectMany(i<sp/>=&gt;<sp/>arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Select(j<sp/>=&gt;<sp/>j<sp/>*<sp/>i)).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().SelectMany(i<sp/>=&gt;<sp/>arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Select(j<sp/>=&gt;<sp/>j<sp/>*<sp/>i)).ToList()));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().SelectMany(i<sp/>=&gt;<sp/>arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Select(j<sp/>=&gt;<sp/>j<sp/>*<sp/>i).ToList()).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().SelectMany(i<sp/>=&gt;<sp/>arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Select(j<sp/>=&gt;<sp/>j<sp/>*<sp/>i)).ToList()));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="334" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4c0a09f667832d9f452ce5a4e484eee0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4c0a09f667832d9f452ce5a4e484eee0" kindref="member">SelectManyEmptyTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>{<sp/>}.Query().SelectMany(i<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>{<sp/>}.Query()).ToList();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="339" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a3b596b7da3d74c138b4dcffcab921840" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a3b596b7da3d74c138b4dcffcab921840" kindref="member">SingleTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>array<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>{<sp/>5<sp/>};</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(array.Single(),<sp/>Is.EqualTo(array.Query().Single()));</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>{<sp/>}.Query().Single();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>Throws.InvalidOperationException);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>{<sp/>0,<sp/>1<sp/>}.Query().Single();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>Throws.InvalidOperationException);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="353" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a8c78407cd4d023a664b06cdbc90fb36d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a8c78407cd4d023a664b06cdbc90fb36d" kindref="member">SkipTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Skip(3).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Skip(3).ToList()));</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="359" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1004cfd5e1d18bb4ff27c370eae01ec8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a1004cfd5e1d18bb4ff27c370eae01ec8" kindref="member">SkipWhileTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().SkipWhile(i<sp/>=&gt;<sp/>i<sp/>&lt;<sp/>4).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().SkipWhile(i<sp/>=&gt;<sp/>i<sp/>&lt;<sp/>4).ToList()));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="365" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ab85c5fe055b651124deddaa512648c8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ab85c5fe055b651124deddaa512648c8d" kindref="member">SortTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expected<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected.Sort();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Sort().ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="374" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4aee7357957aabbb0585cafeff7df189" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a4aee7357957aabbb0585cafeff7df189" kindref="member">SortDescendingTests</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>expected<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected.Sort();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected.Reverse();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().SortDescending().ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="384" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad29d20b0c9c0262b198dbc55e9c83237" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1ad29d20b0c9c0262b198dbc55e9c83237" kindref="member">SumTests</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.Ignore(</highlight><highlight class="stringliteral">&quot;Ignore<sp/>empty<sp/>queries<sp/>for<sp/>sum<sp/>tests.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Sum(),<sp/>Is.EqualTo(</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Sum()));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="395" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1afb330f57ceaa257a37d3e5fdde110e68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1afb330f57ceaa257a37d3e5fdde110e68" kindref="member">TakeTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Take(4).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Take(4).ToList()));</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="401" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a8ed6ce829e8eaee9939300d6da3ead4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a8ed6ce829e8eaee9939300d6da3ead4e" kindref="member">TakeWhileTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().TakeWhile(i<sp/>=&gt;<sp/>i<sp/>&lt;<sp/>4).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().TakeWhile(i<sp/>=&gt;<sp/>i<sp/>&lt;<sp/>4).ToList()));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="407" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6dbf45b48855e817e5ed3c71d522507a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a6dbf45b48855e817e5ed3c71d522507a" kindref="member">WithPreviousTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>list<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious().Count(),<sp/>Is.EqualTo(0));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(includeStart:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).Count(),<sp/>Is.EqualTo(0));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious().Count(),<sp/>Is.EqualTo(0));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(includeStart:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).Count(),<sp/>Is.EqualTo(1));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious().Count(p<sp/>=&gt;<sp/>p.hasPrev),<sp/>Is.EqualTo(list.Count<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(includeStart:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).Count(p<sp/>=&gt;<sp/>!p.hasPrev),<sp/>Is.EqualTo(1));</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(includeStart:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).Count(p<sp/>=&gt;<sp/>p.hasPrev),<sp/>Is.EqualTo(list.Count<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>pair<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious())<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(pair.prev,<sp/>Is.EqualTo(list[index]));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index++;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="429" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a88b251c46c9a85ea40c3eb67d50c70e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a88b251c46c9a85ea40c3eb67d50c70e5" kindref="member">WithPreviousOffsetTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>list<sp/>=<sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(offset:<sp/>4).Count(),<sp/>Is.EqualTo(0));</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(offset:<sp/>4,<sp/>includeStart:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).Count(),<sp/>Is.EqualTo(0));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(offset:<sp/>4).Count(),<sp/>Is.EqualTo(0));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(offset:<sp/>4,<sp/>includeStart:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).Count(),<sp/>Is.EqualTo(1));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(offset:<sp/>4).Count(),<sp/>Is.EqualTo(Mathf.Max(0,<sp/>list.Count<sp/>-<sp/>4)));</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(offset:<sp/>list.Count<sp/>+<sp/>1).Count(),<sp/>Is.EqualTo(0));</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithPrevious(offset:<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">.<ref refid="class_leap_1_1_unity_1_1_attributes_1_1_max_value" kindref="compound">MaxValue</ref>).Count(),<sp/>Is.EqualTo(0));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(Values.Range(0,<sp/>10).WithPrevious(offset:<sp/>2).All(i<sp/>=&gt;<sp/>i.value<sp/>-<sp/>i.prev<sp/>==<sp/>2));</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="447" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa39732c88269e10d894ab1233a252215" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1aa39732c88269e10d894ab1233a252215" kindref="member">WhereTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Where(i<sp/>=&gt;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>().Where(i<sp/>=&gt;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0).ToList()));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="453" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a786f6275e4a09958d102bdf47bcf5cd7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a786f6275e4a09958d102bdf47bcf5cd7" kindref="member">WithIndicesTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>item<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().WithIndices())<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(item.index,<sp/>Is.EqualTo(index));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(item.value,<sp/>Is.EqualTo(arg.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>()[index]));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index++;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="463" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a533a30e78ecc23326b974002ffda3b87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1a533a30e78ecc23326b974002ffda3b87" kindref="member">ZipTest</ref>([ValueSource(</highlight><highlight class="stringliteral">&quot;list0&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg0,<sp/>[ValueSource(</highlight><highlight class="stringliteral">&quot;list1&quot;</highlight><highlight class="normal">)]<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>arg1)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>list0<sp/>=<sp/>arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>list1<sp/>=<sp/>arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;string&gt;<sp/>expected<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;string&gt;();</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Mathf.Min(list0.Count,<sp/>list1.Count);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected.Add(list0[i].ToString()<sp/>+<sp/>list1[i].ToString());</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Zip(arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>(),<sp/>(a,<sp/>b)<sp/>=&gt;<sp/>a.ToString()<sp/>+<sp/>b.ToString()).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(arg0.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>().Zip(arg1.<ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>(),<sp/>(a,<sp/>b)<sp/>=&gt;<sp/>a.ToString()<sp/>+<sp/>b.ToString()).ToList(),<sp/>Is.EquivalentTo(</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>IEnumerable&lt;QueryArg&gt;<sp/>list0<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>values<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;()<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>9,<sp/>1,<sp/>900,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">.MinValue,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">.MaxValue<sp/>};</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>lengths<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;()<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">.MaxValue</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>length<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lengths)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>list<sp/>=<sp/>values.Take(length).ToList();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yield<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QueryArg(list,<sp/>list.Count);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yield<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QueryArg(list,<sp/>list.Count<sp/>*<sp/>10<sp/>+<sp/>10);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>IEnumerable&lt;QueryArg&gt;<sp/>list1<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>values<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;()<sp/>{<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>1,<sp/>1,<sp/>9,<sp/>300,<sp/>6,<sp/>900,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">.MaxValue<sp/>};</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;int&gt;<sp/>lengths<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;()<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">.MaxValue</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>length<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lengths)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>list<sp/>=<sp/>values.Take(length).ToList();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yield<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QueryArg(list,<sp/>list.Count);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yield<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QueryArg(list,<sp/>list.Count<sp/>*<sp/>10<sp/>+<sp/>10);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg" kindref="compound">QueryArg</ref><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>_array;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_count;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1a54345172c89f2fe8e331c487fde69f67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1a54345172c89f2fe8e331c487fde69f67" kindref="member">QueryArg</ref>(List&lt;int&gt;<sp/>values,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>capacity)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_array<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[capacity];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values.CopyTo(_array);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_count<sp/>=<sp/>values.Count;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query&lt;int&gt;</ref><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1ab360ee1123e16be93d47af1bd1acd48a" kindref="member">ToQuery</ref>()<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[]<sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[_array.Length];</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_array.CopyTo(copy,<sp/>0);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query&lt;int&gt;</ref>(copy,<sp/>_count);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>List&lt;int&gt;<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1aea1ae78b9078dd2239e520e7ce4c8965" kindref="member">ToList</ref>()<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;int&gt;(_array.Take(_count));</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1a2570909fa1bdd4d951f8b470e7542015" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_query_arg_1a2570909fa1bdd4d951f8b470e7542015" kindref="member">ToString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_array.Length<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>Utils.ToArrayString(_array.Take(_count));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator" kindref="compound">TestEnumerator</ref><sp/>:<sp/>IEnumerator&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_curr<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1a34d69ed8f0700eaa4fed75af9f45f331" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1a34d69ed8f0700eaa4fed75af9f45f331" kindref="member">Current</ref><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_curr;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1aeb5e63de66e4a20bc5dc3fae66458096" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1aeb5e63de66e4a20bc5dc3fae66458096" kindref="member">MoveNext</ref>()<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_curr++;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_curr<sp/>!=<sp/>10);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>IEnumerator.Current<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="556" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1a9e00375db31ee7eb1ab65b72a9b84f5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1a9e00375db31ee7eb1ab65b72a9b84f5a" kindref="member">Dispose</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="557" refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1ac9dc19068f6d4f49439216f4cdbe7834" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_query_tests_1_1_test_enumerator_1ac9dc19068f6d4f49439216f4cdbe7834" kindref="member">Reset</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Editor/QueryTests.cs"/>
  </compounddef>
</doxygen>
