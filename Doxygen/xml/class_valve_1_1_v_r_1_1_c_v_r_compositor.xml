<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_valve_1_1_v_r_1_1_c_v_r_compositor" kind="class" language="C#" prot="public">
    <compoundname>Valve::VR::CVRCompositor</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a733a485fe36ad8a6facd1f71095ad7e7" prot="private" static="no" mutable="no">
        <type><ref refid="struct_valve_1_1_v_r_1_1_i_v_r_compositor" kindref="compound">IVRCompositor</ref></type>
        <definition>IVRCompositor Valve.VR.CVRCompositor.FnTable</definition>
        <argsstring></argsstring>
        <name>FnTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2479" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2479" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a1a32522a94ac47677eb5dc3521511da3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>internal</type>
        <definition>internal Valve.VR.CVRCompositor.CVRCompositor</definition>
        <argsstring>(IntPtr pInterface)</argsstring>
        <name>CVRCompositor</name>
        <param>
          <type>IntPtr</type>
          <declname>pInterface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2480" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2480" bodyend="2483"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a6449a49b452246bc9275562c06ff98c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.SetTrackingSpace</definition>
        <argsstring>(ETrackingUniverseOrigin eOrigin)</argsstring>
        <name>SetTrackingSpace</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a29be99a3c2f780157bd490db06a7f12f" kindref="member">ETrackingUniverseOrigin</ref></type>
          <declname>eOrigin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2484" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2484" bodyend="2487"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a37b4fe9a440cd92ad46659a5f809ecbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1a29be99a3c2f780157bd490db06a7f12f" kindref="member">ETrackingUniverseOrigin</ref></type>
        <definition>ETrackingUniverseOrigin Valve.VR.CVRCompositor.GetTrackingSpace</definition>
        <argsstring>()</argsstring>
        <name>GetTrackingSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2488" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2488" bodyend="2492"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a4c8b57832b7579ed1485d6b1282bfc18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1ac34ee1034fda668ccd45f57676ded81b" kindref="member">EVRCompositorError</ref></type>
        <definition>EVRCompositorError Valve.VR.CVRCompositor.WaitGetPoses</definition>
        <argsstring>(TrackedDevicePose_t [] pRenderPoseArray, TrackedDevicePose_t [] pGamePoseArray)</argsstring>
        <name>WaitGetPoses</name>
        <param>
          <type><ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref> []</type>
          <declname>pRenderPoseArray</declname>
        </param>
        <param>
          <type><ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref> []</type>
          <declname>pGamePoseArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2493" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2493" bodyend="2497"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a6d410c16e1f6335e331b5610ded87500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1ac34ee1034fda668ccd45f57676ded81b" kindref="member">EVRCompositorError</ref></type>
        <definition>EVRCompositorError Valve.VR.CVRCompositor.GetLastPoses</definition>
        <argsstring>(TrackedDevicePose_t [] pRenderPoseArray, TrackedDevicePose_t [] pGamePoseArray)</argsstring>
        <name>GetLastPoses</name>
        <param>
          <type><ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref> []</type>
          <declname>pRenderPoseArray</declname>
        </param>
        <param>
          <type><ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref> []</type>
          <declname>pGamePoseArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2498" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2498" bodyend="2502"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1aeeee06f40622e4a4bea086266d4b73b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1ac34ee1034fda668ccd45f57676ded81b" kindref="member">EVRCompositorError</ref></type>
        <definition>EVRCompositorError Valve.VR.CVRCompositor.GetLastPoseForTrackedDeviceIndex</definition>
        <argsstring>(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose)</argsstring>
        <name>GetLastPoseForTrackedDeviceIndex</name>
        <param>
          <type>uint</type>
          <declname>unDeviceIndex</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref></type>
          <declname>pOutputPose</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_tracked_device_pose__t" kindref="compound">TrackedDevicePose_t</ref></type>
          <declname>pOutputGamePose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2503" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2503" bodyend="2507"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a7976402c028a04424c1c8c2afc7352cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1ac34ee1034fda668ccd45f57676ded81b" kindref="member">EVRCompositorError</ref></type>
        <definition>EVRCompositorError Valve.VR.CVRCompositor.Submit</definition>
        <argsstring>(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags)</argsstring>
        <name>Submit</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a8153d4a3e627e1cede046327087c1880" kindref="member">EVREye</ref></type>
          <declname>eEye</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_texture__t" kindref="compound">Texture_t</ref></type>
          <declname>pTexture</declname>
        </param>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_v_r_texture_bounds__t" kindref="compound">VRTextureBounds_t</ref></type>
          <declname>pBounds</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1ad103abad1c8abaa4b384eccf2605265f" kindref="member">EVRSubmitFlags</ref></type>
          <declname>nSubmitFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2508" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2508" bodyend="2512"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1ad8a809c0934f27e815138b1b5b1c3ac6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.ClearLastSubmittedFrame</definition>
        <argsstring>()</argsstring>
        <name>ClearLastSubmittedFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2513" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2513" bodyend="2516"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1af0edf4a5daeb306c684e8fce57fbb4d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.PostPresentHandoff</definition>
        <argsstring>()</argsstring>
        <name>PostPresentHandoff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2517" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2517" bodyend="2520"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a71bfd8b0a546740f5a6f5cc5bcb1e8a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRCompositor.GetFrameTiming</definition>
        <argsstring>(ref Compositor_FrameTiming pTiming, uint unFramesAgo)</argsstring>
        <name>GetFrameTiming</name>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_compositor___frame_timing" kindref="compound">Compositor_FrameTiming</ref></type>
          <declname>pTiming</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unFramesAgo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2521" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2521" bodyend="2525"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a56223c23cb5c7c73a1e312c4d38416f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint Valve.VR.CVRCompositor.GetFrameTimings</definition>
        <argsstring>(Compositor_FrameTiming [] pTiming)</argsstring>
        <name>GetFrameTimings</name>
        <param>
          <type><ref refid="struct_valve_1_1_v_r_1_1_compositor___frame_timing" kindref="compound">Compositor_FrameTiming</ref> []</type>
          <declname>pTiming</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2526" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2526" bodyend="2530"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1aee1331fd25c50a38f937bcac4480bcd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Valve.VR.CVRCompositor.GetFrameTimeRemaining</definition>
        <argsstring>()</argsstring>
        <name>GetFrameTimeRemaining</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2531" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2531" bodyend="2535"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a47169fba7086633b916298a44925c873" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.GetCumulativeStats</definition>
        <argsstring>(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes)</argsstring>
        <name>GetCumulativeStats</name>
        <param>
          <type>ref <ref refid="struct_valve_1_1_v_r_1_1_compositor___cumulative_stats" kindref="compound">Compositor_CumulativeStats</ref></type>
          <declname>pStats</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>nStatsSizeInBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2536" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2536" bodyend="2539"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a3fbfe2e11f720a212192694e79d3171e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.FadeToColor</definition>
        <argsstring>(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground)</argsstring>
        <name>FadeToColor</name>
        <param>
          <type>float</type>
          <declname>fSeconds</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fRed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fGreen</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fBlue</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fAlpha</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bBackground</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2540" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2540" bodyend="2543"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1af73cb9a5be70dc579ba8f08200c8e602" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_valve_1_1_v_r_1_1_hmd_color__t" kindref="compound">HmdColor_t</ref></type>
        <definition>HmdColor_t Valve.VR.CVRCompositor.GetCurrentFadeColor</definition>
        <argsstring>(bool bBackground)</argsstring>
        <name>GetCurrentFadeColor</name>
        <param>
          <type>bool</type>
          <declname>bBackground</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2544" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2544" bodyend="2548"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a5a3244fc83b8da0ac59d8e9099947684" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.FadeGrid</definition>
        <argsstring>(float fSeconds, bool bFadeIn)</argsstring>
        <name>FadeGrid</name>
        <param>
          <type>float</type>
          <declname>fSeconds</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bFadeIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2549" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2549" bodyend="2552"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a2d0070dfc0c115fd4901bc0cd03893dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Valve.VR.CVRCompositor.GetCurrentGridAlpha</definition>
        <argsstring>()</argsstring>
        <name>GetCurrentGridAlpha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2553" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2553" bodyend="2557"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a45eec10604e2c3578b6fa7b16f05d072" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1ac34ee1034fda668ccd45f57676ded81b" kindref="member">EVRCompositorError</ref></type>
        <definition>EVRCompositorError Valve.VR.CVRCompositor.SetSkyboxOverride</definition>
        <argsstring>(Texture_t [] pTextures)</argsstring>
        <name>SetSkyboxOverride</name>
        <param>
          <type><ref refid="struct_valve_1_1_v_r_1_1_texture__t" kindref="compound">Texture_t</ref> []</type>
          <declname>pTextures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2558" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2558" bodyend="2562"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a307b9e6e784e7654e1f6a209ba283bdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.ClearSkyboxOverride</definition>
        <argsstring>()</argsstring>
        <name>ClearSkyboxOverride</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2563" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2563" bodyend="2566"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1ae669a3f67583f54b0800ad402abc9a4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.CompositorBringToFront</definition>
        <argsstring>()</argsstring>
        <name>CompositorBringToFront</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2567" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2567" bodyend="2570"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a911ea002d43e94430f1c832fbf2809cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.CompositorGoToBack</definition>
        <argsstring>()</argsstring>
        <name>CompositorGoToBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2571" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2571" bodyend="2574"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a29223e5d21d6b16ad657d830c3ee0aad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.CompositorQuit</definition>
        <argsstring>()</argsstring>
        <name>CompositorQuit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2575" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2575" bodyend="2578"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a8d9c2a37367803beea6f015e65d37cf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRCompositor.IsFullscreen</definition>
        <argsstring>()</argsstring>
        <name>IsFullscreen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2579" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2579" bodyend="2583"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a7029fd08d6f8b4e2f725ca7488039601" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint Valve.VR.CVRCompositor.GetCurrentSceneFocusProcess</definition>
        <argsstring>()</argsstring>
        <name>GetCurrentSceneFocusProcess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2584" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2584" bodyend="2588"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a562621ffd7698e2c7dbdaf653a73ff00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint Valve.VR.CVRCompositor.GetLastFrameRenderer</definition>
        <argsstring>()</argsstring>
        <name>GetLastFrameRenderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2589" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2589" bodyend="2593"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a6b732598f98df9faaef2687f95e72582" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRCompositor.CanRenderScene</definition>
        <argsstring>()</argsstring>
        <name>CanRenderScene</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2594" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2594" bodyend="2598"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1af78edd931b782d5e579515cb4f3fa1b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.ShowMirrorWindow</definition>
        <argsstring>()</argsstring>
        <name>ShowMirrorWindow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2599" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2599" bodyend="2602"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a083c0219863318019461d31b512de406" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.HideMirrorWindow</definition>
        <argsstring>()</argsstring>
        <name>HideMirrorWindow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2603" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2603" bodyend="2606"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a70ed72ae8e8e200649b4bff2e54d0f5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRCompositor.IsMirrorWindowVisible</definition>
        <argsstring>()</argsstring>
        <name>IsMirrorWindowVisible</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2607" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2607" bodyend="2611"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1ab099eb9b5f55c98faf732ba9130af86e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.CompositorDumpImages</definition>
        <argsstring>()</argsstring>
        <name>CompositorDumpImages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2612" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2612" bodyend="2615"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1ae18c2535546a02e4232b221ae6e29ced" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRCompositor.ShouldAppRenderWithLowResources</definition>
        <argsstring>()</argsstring>
        <name>ShouldAppRenderWithLowResources</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2616" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2616" bodyend="2620"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1aa8d3addc5e840e029af92349f4bfee99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.ForceInterleavedReprojectionOn</definition>
        <argsstring>(bool bOverride)</argsstring>
        <name>ForceInterleavedReprojectionOn</name>
        <param>
          <type>bool</type>
          <declname>bOverride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2621" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2621" bodyend="2624"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1ac898f49a56bea56a40856b0a28e2245b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.ForceReconnectProcess</definition>
        <argsstring>()</argsstring>
        <name>ForceReconnectProcess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2625" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2625" bodyend="2628"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a1fa8f68ecca3092ff6bb5262dddb7d16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.SuspendRendering</definition>
        <argsstring>(bool bSuspend)</argsstring>
        <name>SuspendRendering</name>
        <param>
          <type>bool</type>
          <declname>bSuspend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2629" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2629" bodyend="2632"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a4f2dd54d640a7035332b10f5fb0a58ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1ac34ee1034fda668ccd45f57676ded81b" kindref="member">EVRCompositorError</ref></type>
        <definition>EVRCompositorError Valve.VR.CVRCompositor.GetMirrorTextureD3D11</definition>
        <argsstring>(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView)</argsstring>
        <name>GetMirrorTextureD3D11</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a8153d4a3e627e1cede046327087c1880" kindref="member">EVREye</ref></type>
          <declname>eEye</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>pD3D11DeviceOrResource</declname>
        </param>
        <param>
          <type>ref IntPtr</type>
          <declname>ppD3D11ShaderResourceView</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2633" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2633" bodyend="2637"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a68315ad4dd077f5f48917ec1ab9502d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.ReleaseMirrorTextureD3D11</definition>
        <argsstring>(IntPtr pD3D11ShaderResourceView)</argsstring>
        <name>ReleaseMirrorTextureD3D11</name>
        <param>
          <type>IntPtr</type>
          <declname>pD3D11ShaderResourceView</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2638" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2638" bodyend="2641"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a619e42191292bab5ef28e27141101888" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1ac34ee1034fda668ccd45f57676ded81b" kindref="member">EVRCompositorError</ref></type>
        <definition>EVRCompositorError Valve.VR.CVRCompositor.GetMirrorTextureGL</definition>
        <argsstring>(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle)</argsstring>
        <name>GetMirrorTextureGL</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a8153d4a3e627e1cede046327087c1880" kindref="member">EVREye</ref></type>
          <declname>eEye</declname>
        </param>
        <param>
          <type>ref uint</type>
          <declname>pglTextureId</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>pglSharedTextureHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2642" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2642" bodyend="2647"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a2f9575f73ab285f0b944b4c4757b07ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRCompositor.ReleaseSharedGLTexture</definition>
        <argsstring>(uint glTextureId, IntPtr glSharedTextureHandle)</argsstring>
        <name>ReleaseSharedGLTexture</name>
        <param>
          <type>uint</type>
          <declname>glTextureId</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>glSharedTextureHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2648" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2648" bodyend="2652"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a9f44c2f5cafe863f930abc4d11da7fec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.LockGLSharedTextureForAccess</definition>
        <argsstring>(IntPtr glSharedTextureHandle)</argsstring>
        <name>LockGLSharedTextureForAccess</name>
        <param>
          <type>IntPtr</type>
          <declname>glSharedTextureHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2653" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2653" bodyend="2656"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a59a5f3ef4b8f461efb78a6050e50d07f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.UnlockGLSharedTextureForAccess</definition>
        <argsstring>(IntPtr glSharedTextureHandle)</argsstring>
        <name>UnlockGLSharedTextureForAccess</name>
        <param>
          <type>IntPtr</type>
          <declname>glSharedTextureHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2657" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2657" bodyend="2660"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a523c233f1c331d3ea933d232ea30a240" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint Valve.VR.CVRCompositor.GetVulkanInstanceExtensionsRequired</definition>
        <argsstring>(System.Text.StringBuilder pchValue, uint unBufferSize)</argsstring>
        <name>GetVulkanInstanceExtensionsRequired</name>
        <param>
          <type>System.Text.StringBuilder</type>
          <declname>pchValue</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unBufferSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2661" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2661" bodyend="2665"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a1b8bff776ef6b0c4440d8c9735875cc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint Valve.VR.CVRCompositor.GetVulkanDeviceExtensionsRequired</definition>
        <argsstring>(IntPtr pPhysicalDevice, System.Text.StringBuilder pchValue, uint unBufferSize)</argsstring>
        <name>GetVulkanDeviceExtensionsRequired</name>
        <param>
          <type>IntPtr</type>
          <declname>pPhysicalDevice</declname>
        </param>
        <param>
          <type>System.Text.StringBuilder</type>
          <declname>pchValue</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>unBufferSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2666" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2666" bodyend="2670"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a2c85589e4811758a11387e005218b55b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.CVRCompositor.SetExplicitTimingMode</definition>
        <argsstring>(EVRCompositorTimingMode eTimingMode)</argsstring>
        <name>SetExplicitTimingMode</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a9fcb102e844540a2246475933f824463" kindref="member">EVRCompositorTimingMode</ref></type>
          <declname>eTimingMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2671" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2671" bodyend="2674"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a0e8337d82a7bad865f61247681800e54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_valve_1_1_v_r_1ac34ee1034fda668ccd45f57676ded81b" kindref="member">EVRCompositorError</ref></type>
        <definition>EVRCompositorError Valve.VR.CVRCompositor.SubmitExplicitTimingData</definition>
        <argsstring>()</argsstring>
        <name>SubmitExplicitTimingData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2675" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2675" bodyend="2679"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a67073ace392a3be7d0ccbf1781f0d2cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.CVRCompositor.IsMotionSmoothingEnabled</definition>
        <argsstring>()</argsstring>
        <name>IsMotionSmoothingEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2680" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2680" bodyend="2684"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" line="2478" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Plugins/openvr_api.cs" bodystart="2477" bodyend="2685"/>
    <listofallmembers>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a6b732598f98df9faaef2687f95e72582" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>CanRenderScene</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1ad8a809c0934f27e815138b1b5b1c3ac6" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>ClearLastSubmittedFrame</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a307b9e6e784e7654e1f6a209ba283bdc" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>ClearSkyboxOverride</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1ae669a3f67583f54b0800ad402abc9a4c" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>CompositorBringToFront</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1ab099eb9b5f55c98faf732ba9130af86e" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>CompositorDumpImages</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a911ea002d43e94430f1c832fbf2809cd" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>CompositorGoToBack</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a29223e5d21d6b16ad657d830c3ee0aad" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>CompositorQuit</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a1a32522a94ac47677eb5dc3521511da3" prot="private" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>CVRCompositor</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a5a3244fc83b8da0ac59d8e9099947684" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>FadeGrid</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a3fbfe2e11f720a212192694e79d3171e" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>FadeToColor</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a733a485fe36ad8a6facd1f71095ad7e7" prot="private" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>FnTable</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1aa8d3addc5e840e029af92349f4bfee99" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>ForceInterleavedReprojectionOn</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1ac898f49a56bea56a40856b0a28e2245b" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>ForceReconnectProcess</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a47169fba7086633b916298a44925c873" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetCumulativeStats</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1af73cb9a5be70dc579ba8f08200c8e602" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetCurrentFadeColor</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a2d0070dfc0c115fd4901bc0cd03893dd" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetCurrentGridAlpha</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a7029fd08d6f8b4e2f725ca7488039601" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetCurrentSceneFocusProcess</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1aee1331fd25c50a38f937bcac4480bcd5" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetFrameTimeRemaining</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a71bfd8b0a546740f5a6f5cc5bcb1e8a8" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetFrameTiming</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a56223c23cb5c7c73a1e312c4d38416f4" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetFrameTimings</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a562621ffd7698e2c7dbdaf653a73ff00" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetLastFrameRenderer</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1aeeee06f40622e4a4bea086266d4b73b4" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetLastPoseForTrackedDeviceIndex</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a6d410c16e1f6335e331b5610ded87500" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetLastPoses</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a4f2dd54d640a7035332b10f5fb0a58ee" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetMirrorTextureD3D11</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a619e42191292bab5ef28e27141101888" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetMirrorTextureGL</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a37b4fe9a440cd92ad46659a5f809ecbd" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetTrackingSpace</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a1b8bff776ef6b0c4440d8c9735875cc2" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetVulkanDeviceExtensionsRequired</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a523c233f1c331d3ea933d232ea30a240" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>GetVulkanInstanceExtensionsRequired</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a083c0219863318019461d31b512de406" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>HideMirrorWindow</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a8d9c2a37367803beea6f015e65d37cf8" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>IsFullscreen</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a70ed72ae8e8e200649b4bff2e54d0f5d" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>IsMirrorWindowVisible</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a67073ace392a3be7d0ccbf1781f0d2cd" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>IsMotionSmoothingEnabled</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a9f44c2f5cafe863f930abc4d11da7fec" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>LockGLSharedTextureForAccess</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1af0edf4a5daeb306c684e8fce57fbb4d2" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>PostPresentHandoff</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a68315ad4dd077f5f48917ec1ab9502d8" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>ReleaseMirrorTextureD3D11</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a2f9575f73ab285f0b944b4c4757b07ba" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>ReleaseSharedGLTexture</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a2c85589e4811758a11387e005218b55b" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>SetExplicitTimingMode</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a45eec10604e2c3578b6fa7b16f05d072" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>SetSkyboxOverride</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a6449a49b452246bc9275562c06ff98c6" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>SetTrackingSpace</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1ae18c2535546a02e4232b221ae6e29ced" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>ShouldAppRenderWithLowResources</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1af78edd931b782d5e579515cb4f3fa1b9" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>ShowMirrorWindow</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a7976402c028a04424c1c8c2afc7352cf" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>Submit</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a0e8337d82a7bad865f61247681800e54" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>SubmitExplicitTimingData</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a1fa8f68ecca3092ff6bb5262dddb7d16" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>SuspendRendering</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a59a5f3ef4b8f461efb78a6050e50d07f" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>UnlockGLSharedTextureForAccess</name></member>
      <member refid="class_valve_1_1_v_r_1_1_c_v_r_compositor_1a4c8b57832b7579ed1485d6b1282bfc18" prot="public" virt="non-virtual"><scope>Valve::VR::CVRCompositor</scope><name>WaitGetPoses</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
