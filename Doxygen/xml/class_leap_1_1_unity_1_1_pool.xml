<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_leap_1_1_unity_1_1_pool" kind="class" language="C#" prot="public">
    <compoundname>Leap::Unity::Pool</compoundname>
    <templateparamlist>
      <param>
        <type>T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_leap_1_1_unity_1_1_pool_1a63a4b8d034f573cfe4f1b9195e040c03" prot="private" static="yes" mutable="no">
        <type>Stack&lt; T &gt;</type>
        <definition>Stack&lt;T&gt; Leap.Unity.Pool&lt; T &gt;._pool</definition>
        <argsstring></argsstring>
        <name>_pool</name>
        <initializer>= new Stack&lt;T&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pool.cs" line="69" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pool.cs" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_pool_1aa064b6aab7c7da0f0265fb5e656f7815" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>static T Leap.Unity.Pool&lt; T &gt;.Spawn</definition>
        <argsstring>()</argsstring>
        <name>Spawn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pool.cs" line="71" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pool.cs" bodystart="71" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_pool_1a43b230cb265e898618fcbb89e0ac9f93" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Leap.Unity.Pool&lt; T &gt;.Recycle</definition>
        <argsstring>(T t)</argsstring>
        <name>Recycle</name>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pool.cs" line="88" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pool.cs" bodystart="88" bodyend="99"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A very lightweight pool implementation. When you call Spawn, an object of type T will be returned. If the pool was not empty, the T will be taken from the pool. If the pool was empty, a new T will be constructed and returned instead. Calling recycle will return a T to the pool. </para>
    </briefdescription>
    <detaileddescription>
<para>It is not required to implement the <ref refid="interface_leap_1_1_unity_1_1_i_poolable" kindref="compound">IPoolable</ref> interface to use the Pool class, which allows you to pool types such as List or Dictionary, types which you have no control over. But make sure that you clean up these objects before you recycle them! </para>
<para>Example workflow for types you DO NOT have control over: <programlisting><codeline><highlight class="normal">//<sp/>&quot;<sp/>//<sp/>(XML<sp/>fix<sp/>for<sp/>Visual<sp/>Studio)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>obj<sp/>=<sp/>Pool\&lt;T\&gt;.Spawn();</highlight></codeline>
<codeline><highlight class="normal">obj.Init(stuff);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Do<sp/>something<sp/>with<sp/>obj</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">obj.Clear();</highlight></codeline>
<codeline><highlight class="normal">Pool\&lt;T\&gt;.Recycle(obj);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&quot;<sp/>//<sp/>(Close<sp/>XML<sp/>fix<sp/>for<sp/>Visual<sp/>Studio)</highlight></codeline>
</programlisting> </para>
<para>Example workflow for types you DO have control over: <programlisting><codeline><highlight class="normal">//<sp/>&quot;<sp/>//<sp/>(XML<sp/>fix<sp/>for<sp/>Visual<sp/>Studio)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">var<sp/>obj<sp/>=<sp/>Pool\&lt;T\&gt;.Spawn();</highlight></codeline>
<codeline><highlight class="normal">obj.Init(stuff);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Do<sp/>something<sp/>with<sp/>obj</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">obj.Dispose();<sp/>//<sp/>e.g.<sp/>call<sp/>Recycle(this)<sp/>in<sp/>the<sp/>Dispose()<sp/>implementation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>&quot;<sp/>//<sp/>(Close<sp/>XML<sp/>fix<sp/>for<sp/>Visual<sp/>Studio)</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pool.cs" line="67" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Pool.cs" bodystart="67" bodyend="100"/>
    <listofallmembers>
      <member refid="class_leap_1_1_unity_1_1_pool_1a63a4b8d034f573cfe4f1b9195e040c03" prot="private" virt="non-virtual"><scope>Leap::Unity::Pool</scope><name>_pool</name></member>
      <member refid="class_leap_1_1_unity_1_1_pool_1a43b230cb265e898618fcbb89e0ac9f93" prot="public" virt="non-virtual"><scope>Leap::Unity::Pool</scope><name>Recycle</name></member>
      <member refid="class_leap_1_1_unity_1_1_pool_1aa064b6aab7c7da0f0265fb5e656f7815" prot="public" virt="non-virtual"><scope>Leap::Unity::Pool</scope><name>Spawn</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
