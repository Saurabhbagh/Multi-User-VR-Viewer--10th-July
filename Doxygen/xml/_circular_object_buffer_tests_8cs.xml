<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_circular_object_buffer_tests_8cs" kind="file" language="C#">
    <compoundname>CircularObjectBufferTests.cs</compoundname>
    <innerclass refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" prot="public">Leap::LeapCSharp::Tests::TestObjectType</innerclass>
    <innerclass refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests" prot="public">Leap::LeapCSharp::Tests::CircularObjectBufferTests</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_leap_c_sharp">Leap::LeapCSharp</innernamespace>
    <innernamespace refid="namespace_leap_1_1_leap_c_sharp_1_1_tests">Leap::LeapCSharp::Tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_leap_internal" kindref="compound">LeapInternal</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="namespace_leap_1_1_leap_c_sharp_1_1_tests" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_leap_c_sharp_1_1_tests" kindref="compound">Leap.LeapCSharp.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="14" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>{</highlight></codeline>
<codeline lineno="15" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type_1aab9236ab72c05a1cab17cf5e6e85fb62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="16" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type_1ac463ae7d829bf72de0db032823598f29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type_1ac463ae7d829bf72de0db032823598f29" kindref="member">TestObjectType</ref>()<sp/>{<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="17" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type_1acd7961dcf89ccd96fe01d6c3737822fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type_1acd7961dcf89ccd96fe01d6c3737822fe" kindref="member">TestObjectType</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t)<sp/>{<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>t;<sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>[TestFixture]</highlight></codeline>
<codeline lineno="21" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests" kindref="compound">CircularObjectBufferTests</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="23" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a0a4248865999053d090adeae5e5f3ef3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a0a4248865999053d090adeae5e5f3ef3" kindref="member">CreateTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_internal_1_1_circular_object_buffer" kindref="compound">CircularObjectBuffer&lt;TestObjectType&gt;</ref><sp/>ciq<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_internal_1_1_circular_object_buffer" kindref="compound">CircularObjectBuffer&lt;TestObjectType&gt;</ref>(100);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(100,<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae" kindref="member">Capacity</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Capacity<sp/>is<sp/>the<sp/>same<sp/>as<sp/>initialized<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5" kindref="member">Count</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>starts<sp/>with<sp/>no<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsTrue(ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a897abcef25602b14de45a6eb13ed626b" kindref="member">IsEmpty</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>starts<sp/>out<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="31" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1af0dc9dbcd071c5ec27027637c7889af1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1af0dc9dbcd071c5ec27027637c7889af1" kindref="member">PutGetTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_internal_1_1_circular_object_buffer" kindref="compound">CircularObjectBuffer&lt;TestObjectType&gt;</ref><sp/>ciq<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_internal_1_1_circular_object_buffer" kindref="compound">CircularObjectBuffer&lt;TestObjectType&gt;</ref>(100);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>bar<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(1);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df" kindref="member">Put</ref>(ref<sp/>bar);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.IsFalse(ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a897abcef25602b14de45a6eb13ed626b" kindref="member">IsEmpty</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>empty.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;=<sp/>12345;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>foo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(t);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>mu<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(t);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df" kindref="member">Put</ref>(ref<sp/>foo);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>mu);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(t,<sp/>mu.id,<sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>the<sp/>same<sp/>value<sp/>that<sp/>we<sp/>put.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentId<sp/>=<sp/>bar.id;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae" kindref="member">Capacity</ref>;<sp/>t++)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Console.WriteLine(t<sp/>+<sp/>&quot;,<sp/>&quot;<sp/>+<sp/>ciq.Get<sp/>(t).id<sp/>+<sp/>&quot;,<sp/>&quot;<sp/>+<sp/>currentId);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>chew<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(t);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>chew,<sp/>t);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(chew.id,<sp/>currentId,<sp/></highlight><highlight class="stringliteral">&quot;Older<sp/>objects<sp/>are<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>chew.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>currentId);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentId--;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="56" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a30b19aa15c293a086e154b0f50cf6603" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a30b19aa15c293a086e154b0f50cf6603" kindref="member">OutOfBoundsTests</ref>()<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_internal_1_1_circular_object_buffer" kindref="compound">CircularObjectBuffer&lt;TestObjectType&gt;</ref><sp/>ciq<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_internal_1_1_circular_object_buffer" kindref="compound">CircularObjectBuffer&lt;TestObjectType&gt;</ref>(100);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>foo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(1);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;=<sp/>12345;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>foo,<sp/>t);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(-1,<sp/>foo.id,<sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>default<sp/>object<sp/>from<sp/>empty<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>bar<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(0);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df" kindref="member">Put</ref>(ref<sp/>bar);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>1;<sp/>t<sp/>&lt;=<sp/>12345;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>foo,<sp/>t);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(-1,<sp/>foo.id,<sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>default<sp/>object<sp/>past<sp/>last<sp/>item<sp/>in<sp/>mostly<sp/>empty<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;=<sp/>122;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>mu<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(t);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df" kindref="member">Put</ref>(ref<sp/>mu);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae" kindref="member">Capacity</ref>;<sp/>t<sp/>&lt;=<sp/>12345;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>foo,<sp/>t);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(-1,<sp/>foo.id,<sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>default<sp/>object<sp/>past<sp/>last<sp/>item<sp/>in<sp/>full<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="79" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a254416b11cf75a060289dd8fbd112c3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a254416b11cf75a060289dd8fbd112c3a" kindref="member">OrderTests</ref>()<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_internal_1_1_circular_object_buffer" kindref="compound">CircularObjectBuffer&lt;TestObjectType&gt;</ref><sp/>ciq<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_internal_1_1_circular_object_buffer" kindref="compound">CircularObjectBuffer&lt;TestObjectType&gt;</ref>(10);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(10,<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae" kindref="member">Capacity</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Capacity<sp/>is<sp/>the<sp/>same<sp/>as<sp/>initialized<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5" kindref="member">Count</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>starts<sp/>with<sp/>no<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>5;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>foo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(t);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df" kindref="member">Put</ref>(ref<sp/>foo);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>bar<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(5,<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5" kindref="member">Count</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>has<sp/>5<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar,<sp/>0);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(bar.id,<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;Objects<sp/>are<sp/>still<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bar.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar,<sp/>1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(bar.id,<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;Objects<sp/>are<sp/>still<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bar.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar,<sp/>2);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(bar.id,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Objects<sp/>are<sp/>still<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bar.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar,<sp/>3);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(bar.id,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Objects<sp/>are<sp/>still<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bar.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar,<sp/>4);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(bar.id,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Objects<sp/>are<sp/>still<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bar.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>0);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="103" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a8848cce0f507da8c50da295bedfae991" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_circular_object_buffer_tests_1a8848cce0f507da8c50da295bedfae991" kindref="member">ResizeTests</ref>()<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_internal_1_1_circular_object_buffer" kindref="compound">CircularObjectBuffer&lt;TestObjectType&gt;</ref><sp/>ciq<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_internal_1_1_circular_object_buffer" kindref="compound">CircularObjectBuffer&lt;TestObjectType&gt;</ref>(10);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(10,<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae" kindref="member">Capacity</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Capacity<sp/>is<sp/>the<sp/>same<sp/>as<sp/>initialized<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5" kindref="member">Count</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>starts<sp/>with<sp/>no<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>5;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>foo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(t);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df" kindref="member">Put</ref>(ref<sp/>foo);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(5,<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5" kindref="member">Count</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>has<sp/>5<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a96e1c0d42e5ae980a605f69ac4565322" kindref="member">Resize</ref>(15);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(15,<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae" kindref="member">Capacity</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Capacity<sp/>now<sp/>is<sp/>15&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(5,<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a06a299b4010edacd5c7f4187f9d0c9f5" kindref="member">Count</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>still<sp/>has<sp/>5<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>bar<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(0);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar,<sp/>0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(4,<sp/>bar.id,<sp/></highlight><highlight class="stringliteral">&quot;Objects<sp/>are<sp/>still<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bar.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar,<sp/>1);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(3,<sp/>bar.id,<sp/></highlight><highlight class="stringliteral">&quot;Objects<sp/>are<sp/>still<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bar.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar,<sp/>2);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(2,<sp/>bar.id,<sp/></highlight><highlight class="stringliteral">&quot;Objects<sp/>are<sp/>still<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bar.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar,<sp/>3);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(1,<sp/>bar.id,<sp/></highlight><highlight class="stringliteral">&quot;Objects<sp/>are<sp/>still<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bar.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>bar,<sp/>4);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(0,<sp/>bar.id,<sp/></highlight><highlight class="stringliteral">&quot;Objects<sp/>are<sp/>still<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>bar.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>0);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;=<sp/>12345;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>foo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>(t);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1a46ea828b5e827dd3b542eb60bc9f52df" kindref="member">Put</ref>(ref<sp/>foo);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>foo);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(t,<sp/>foo.id,<sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>the<sp/>same<sp/>value<sp/>that<sp/>we<sp/>put.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref><sp/>mu<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_test_object_type" kindref="compound">TestObjectType</ref>();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>mu);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentId<sp/>=<sp/>mu.id;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ae41572e934feeb6effe84c31a24521ae" kindref="member">Capacity</ref>;<sp/>t++)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Console.WriteLine(t<sp/>+<sp/>&quot;,<sp/>&quot;<sp/>+<sp/>ciq.Get<sp/>(t).id<sp/>+<sp/>&quot;,<sp/>&quot;<sp/>+<sp/>currentId);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ciq.<ref refid="class_leap_internal_1_1_circular_object_buffer_1ab16fbaf0f16bf53132679713e636a3c1" kindref="member">Get</ref>(out<sp/>mu,<sp/>t);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert.AreEqual(mu.id,<sp/>currentId,<sp/></highlight><highlight class="stringliteral">&quot;Older<sp/>objects<sp/>are<sp/>in<sp/>order:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>mu.id<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>currentId);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentId--;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Editor/Tests/CircularObjectBufferTests.cs"/>
  </compounddef>
</doxygen>
