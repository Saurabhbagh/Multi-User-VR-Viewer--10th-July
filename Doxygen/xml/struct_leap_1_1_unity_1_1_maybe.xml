<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_leap_1_1_unity_1_1_maybe" kind="struct" language="C#" prot="public">
    <compoundname>Leap::Unity::Maybe</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IEquatable&lt; Maybe&lt; T &gt;&gt;</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">IComparable</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">IComparable&lt; Maybe&lt; T &gt;&gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_maybe_1a1d87252438e4b54f16ac630407a90dd6" prot="public" static="yes" mutable="no">
        <type>readonly NoneType</type>
        <definition>readonly NoneType Leap.Unity.Maybe&lt; T &gt;.None</definition>
        <argsstring></argsstring>
        <name>None</name>
        <initializer>= new NoneType()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="16" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_maybe_1a19088d15b992f977574f85c300265093" prot="public" static="yes" mutable="no">
        <type>readonly Maybe&lt; T &gt;</type>
        <definition>readonly Maybe&lt;T&gt; Leap.Unity.Maybe&lt; T &gt;.None</definition>
        <argsstring></argsstring>
        <name>None</name>
        <initializer>= new Maybe&lt;T&gt;()</initializer>
        <briefdescription>
<para>Returns a <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> for this type that represents no value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="65" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_maybe_1a55d188243423034235a9799010c342a6" prot="public" static="no" mutable="no">
        <type>readonly bool</type>
        <definition>readonly bool Leap.Unity.Maybe&lt; T &gt;.hasValue</definition>
        <argsstring></argsstring>
        <name>hasValue</name>
        <briefdescription>
<para>Returns whether or not this <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> contains a value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="70" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="struct_leap_1_1_unity_1_1_maybe_1a8f0faa3cc0b45a3610e9db9e5d9142d8" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>T</type>
        <definition>T Leap.Unity.Maybe&lt; T &gt;.valueOrDefault</definition>
        <argsstring></argsstring>
        <name>valueOrDefault</name>
        <briefdescription>
<para>Gets the value, or the type&apos;s default if it doesn&apos;t exist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="75" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="75" bodyend="83"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_maybe_1a64b2fb60103c3500b408936a60563ee6" prot="private" static="no" mutable="no">
        <type>readonly T</type>
        <definition>readonly T Leap.Unity.Maybe&lt; T &gt;._t</definition>
        <argsstring></argsstring>
        <name>_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="85" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1aa3134f0ad7b257ab30a50d4d9259f66f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Maybe&lt; T &gt;</type>
        <definition>static Maybe&lt;T&gt; Leap.Unity.Maybe&lt; T &gt;.Some&lt; T &gt;</definition>
        <argsstring>(T value)</argsstring>
        <name>Some&lt; T &gt;</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="18" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="18" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a4364655c16c800a5185edf19f7c61872" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Leap.Unity.Maybe&lt; T &gt;.MatchAll&lt; A, B &gt;</definition>
        <argsstring>(Maybe&lt; A &gt; maybeA, Maybe&lt; B &gt; maybeB, Action&lt; A, B &gt; action)</argsstring>
        <name>MatchAll&lt; A, B &gt;</name>
        <param>
          <type>Maybe&lt; A &gt;</type>
          <declname>maybeA</declname>
        </param>
        <param>
          <type>Maybe&lt; B &gt;</type>
          <declname>maybeB</declname>
        </param>
        <param>
          <type>Action&lt; A, B &gt;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="22" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a12c37046de032bd97c7ce2c609297eb3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Leap.Unity.Maybe&lt; T &gt;.MatchAll&lt; A, B, C &gt;</definition>
        <argsstring>(Maybe&lt; A &gt; maybeA, Maybe&lt; B &gt; maybeB, Maybe&lt; C &gt; maybeC, Action&lt; A, B, C &gt; action)</argsstring>
        <name>MatchAll&lt; A, B, C &gt;</name>
        <param>
          <type>Maybe&lt; A &gt;</type>
          <declname>maybeA</declname>
        </param>
        <param>
          <type>Maybe&lt; B &gt;</type>
          <declname>maybeB</declname>
        </param>
        <param>
          <type>Maybe&lt; C &gt;</type>
          <declname>maybeC</declname>
        </param>
        <param>
          <type>Action&lt; A, B, C &gt;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="30" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="30" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a36f13934e29498f7383597a289d17ee1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Leap.Unity.Maybe&lt; T &gt;.MatchAll&lt; A, B, C, D &gt;</definition>
        <argsstring>(Maybe&lt; A &gt; maybeA, Maybe&lt; B &gt; maybeB, Maybe&lt; C &gt; maybeC, Maybe&lt; D &gt; maybeD, Action&lt; A, B, C, D &gt; action)</argsstring>
        <name>MatchAll&lt; A, B, C, D &gt;</name>
        <param>
          <type>Maybe&lt; A &gt;</type>
          <declname>maybeA</declname>
        </param>
        <param>
          <type>Maybe&lt; B &gt;</type>
          <declname>maybeB</declname>
        </param>
        <param>
          <type>Maybe&lt; C &gt;</type>
          <declname>maybeC</declname>
        </param>
        <param>
          <type>Maybe&lt; D &gt;</type>
          <declname>maybeD</declname>
        </param>
        <param>
          <type>Action&lt; A, B, C, D &gt;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="40" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="40" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a2b98b31ce164c7716d913c30ce430aad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Maybe&lt; T &gt;</type>
        <definition>static Maybe&lt;T&gt; Leap.Unity.Maybe&lt; T &gt;.Some</definition>
        <argsstring>(T t)</argsstring>
        <name>Some</name>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> given a specific value. This value needs to always be non-null if the type is a reference type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="105" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="105" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1ac6de88bcbc004f0baae55189e084ebaa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Maybe&lt; T &gt;.operator==</definition>
        <argsstring>(Maybe&lt; T &gt; maybe0, Maybe&lt; T &gt; maybe1)</argsstring>
        <name>operator==</name>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe0</declname>
        </param>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="244" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a9b460ebcd929545260979e6fead834cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Maybe&lt; T &gt;.operator !=</definition>
        <argsstring>(Maybe&lt; T &gt; maybe0, Maybe&lt; T &gt; maybe1)</argsstring>
        <name>operator !=</name>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe0</declname>
        </param>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="248" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1ab5c4fd4afd685482eaf7a1c83cb3b2cc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Maybe&lt; T &gt;.operator &gt;</definition>
        <argsstring>(Maybe&lt; T &gt; maybe0, Maybe&lt; T &gt; maybe1)</argsstring>
        <name>operator &gt;</name>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe0</declname>
        </param>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="252" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1ad9e0a05a1b1256c8fb44ee53a75c09ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Maybe&lt; T &gt;.operator &gt;=</definition>
        <argsstring>(Maybe&lt; T &gt; maybe0, Maybe&lt; T &gt; maybe1)</argsstring>
        <name>operator &gt;=</name>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe0</declname>
        </param>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="256" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1ac7b68762ce54e825d4d4354844e5c72d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Maybe&lt; T &gt;.operator&lt;</definition>
        <argsstring>(Maybe&lt; T &gt; maybe0, Maybe&lt; T &gt; maybe1)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe0</declname>
        </param>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="260" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="260" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a799897d2cc6af35be391dff73eda1d2b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Leap.Unity.Maybe&lt; T &gt;.operator&lt;=</definition>
        <argsstring>(Maybe&lt; T &gt; maybe0, Maybe&lt; T &gt; maybe1)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe0</declname>
        </param>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybe1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="264" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a3e2f5f111be3ac192e38896499dbb406" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>implicit</type>
        <definition>static implicit Leap.Unity.Maybe&lt; T &gt;.operator Maybe&lt; T &gt;</definition>
        <argsstring>(T t)</argsstring>
        <name>operator Maybe&lt; T &gt;</name>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="268" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a6e3ef005cdc028cf5c6f1d6645ba4d97" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>implicit</type>
        <definition>static implicit Leap.Unity.Maybe&lt; T &gt;.operator Maybe&lt; T &gt;</definition>
        <argsstring>(Maybe.NoneType none)</argsstring>
        <name>operator Maybe&lt; T &gt;</name>
        <param>
          <type>Maybe.NoneType</type>
          <declname>none</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="272" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="272" bodyend="274"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1abfc9d8c6b1cf1e222491254e719da954" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Unity.Maybe&lt; T &gt;.Maybe</definition>
        <argsstring>(T t)</argsstring>
        <name>Maybe</name>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> given a value. If the value is not null, this maybe will have a value. If the value is null, this maybe will have no value. For value types, the <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> struct will always have a value. (Use Maybe.None to refer to &quot;no value.&quot;) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="92" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1afdf329a3efff3acaf870544e4e4d3599" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Leap.Unity.Maybe&lt; T &gt;.TryGetValue</definition>
        <argsstring>(out T t)</argsstring>
        <name>TryGetValue</name>
        <param>
          <type>out T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>If this <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> has a value, the out argument is filled with that value and this method returns true, else it returns false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="117" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a4a9e92db2681f7e079cc348e6794ac9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Unity.Maybe&lt; T &gt;.Match</definition>
        <argsstring>(Action&lt; T &gt; ifValue)</argsstring>
        <name>Match</name>
        <param>
          <type>Action&lt; T &gt;</type>
          <declname>ifValue</declname>
        </param>
        <briefdescription>
<para>If this <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> has a value, the delegate is called with that value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="125" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a38c4cfc0ba561054138d7d66ae938701" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Unity.Maybe&lt; T &gt;.Match</definition>
        <argsstring>(Action&lt; T &gt; ifValue, Action ifNot)</argsstring>
        <name>Match</name>
        <param>
          <type>Action&lt; T &gt;</type>
          <declname>ifValue</declname>
        </param>
        <param>
          <type>Action</type>
          <declname>ifNot</declname>
        </param>
        <briefdescription>
<para>If this <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> has a value, the first delegate is called with that value, else the second delegate is called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="135" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1afe13439839657eb44f2a88cdb6b0d0ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>K</type>
        <definition>K Leap.Unity.Maybe&lt; T &gt;.Match&lt; K &gt;</definition>
        <argsstring>(Func&lt; T, K &gt; ifValue, Func&lt; K &gt; ifNot)</argsstring>
        <name>Match&lt; K &gt;</name>
        <param>
          <type>Func&lt; T, K &gt;</type>
          <declname>ifValue</declname>
        </param>
        <param>
          <type>Func&lt; K &gt;</type>
          <declname>ifNot</declname>
        </param>
        <briefdescription>
<para>If this <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> has a value, the first delegate is called with that value, else the second delegate is called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="147" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="147" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a1cbb985bad26370faab9b7f4c8f540e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T Leap.Unity.Maybe&lt; T &gt;.ValueOr</definition>
        <argsstring>(T customDefault)</argsstring>
        <name>ValueOr</name>
        <param>
          <type>T</type>
          <declname>customDefault</declname>
        </param>
        <briefdescription>
<para>If this <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> has a value, returns the value, otherwise returns the argument custom default value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="163" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="163" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1acdf8ed9fda0221e3e8ce1d261456fbbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Maybe&lt; T &gt;</type>
        <definition>Maybe&lt;T&gt; Leap.Unity.Maybe&lt; T &gt;.ValueOr</definition>
        <argsstring>(Maybe&lt; T &gt; maybeCustomDefault)</argsstring>
        <name>ValueOr</name>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>maybeCustomDefault</declname>
        </param>
        <briefdescription>
<para>Returns this <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> if it has a value, otherwise returns the argument <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> value. Useful for overlaying multiple <ref refid="struct_leap_1_1_unity_1_1_maybe" kindref="compound">Maybe</ref> values. For example, if I want to overlay a &quot;maybe override font&quot; variable with another &quot;maybe override font&quot; variable, I can call: this.font = other.font.ValueOr(this.font); </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="178" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="178" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1ac93e5cfe078b1b6a72ec8a5c4abb9415" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>Query&lt;T&gt; Leap.Unity.Maybe&lt; T &gt;.Query</definition>
        <argsstring>()</argsstring>
        <name>Query</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="186" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="186" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a798f24bed636cee1351a409980dc45d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override int</type>
        <definition>override int Leap.Unity.Maybe&lt; T &gt;.GetHashCode</definition>
        <argsstring>()</argsstring>
        <name>GetHashCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="194" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1addb568a203b5cc6d0a95788dcc6cd657" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Leap.Unity.Maybe&lt; T &gt;.Equals</definition>
        <argsstring>(object obj)</argsstring>
        <name>Equals</name>
        <param>
          <type>object</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="198" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="198" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1a113a57c5e768a2e6fd2dd6dd781cda09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Leap.Unity.Maybe&lt; T &gt;.Equals</definition>
        <argsstring>(Maybe&lt; T &gt; other)</argsstring>
        <name>Equals</name>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="206" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="206" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1ac36e83faf555c40073b67bd60a3db171" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Leap.Unity.Maybe&lt; T &gt;.CompareTo</definition>
        <argsstring>(object obj)</argsstring>
        <name>CompareTo</name>
        <param>
          <type>object</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="216" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="216" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_maybe_1acc399adb01d04edf1009a414af7536d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Leap.Unity.Maybe&lt; T &gt;.CompareTo</definition>
        <argsstring>(Maybe&lt; T &gt; other)</argsstring>
        <name>CompareTo</name>
        <param>
          <type>Maybe&lt; T &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="224" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="224" bodyend="242"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A struct that represents a value that could or could not exist. Unlike the built-int nullable types, you are unable to access the value unless it does exist, and will never recieve a null value. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3272">
        <label>IEquatable&lt; Maybe&lt; T &gt;&gt;</label>
      </node>
      <node id="3273">
        <label>IComparable</label>
      </node>
      <node id="3274">
        <label>IComparable&lt; Maybe&lt; T &gt;&gt;</label>
      </node>
      <node id="3271">
        <label>Leap.Unity.Maybe&lt; T &gt;</label>
        <link refid="struct_leap_1_1_unity_1_1_maybe"/>
        <childnode refid="3272" relation="public-inheritance">
        </childnode>
        <childnode refid="3273" relation="public-inheritance">
        </childnode>
        <childnode refid="3274" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3276">
        <label>IEquatable&lt; Maybe&lt; T &gt;&gt;</label>
      </node>
      <node id="3277">
        <label>IComparable</label>
      </node>
      <node id="3278">
        <label>IComparable&lt; Maybe&lt; T &gt;&gt;</label>
      </node>
      <node id="3275">
        <label>Leap.Unity.Maybe&lt; T &gt;</label>
        <link refid="struct_leap_1_1_unity_1_1_maybe"/>
        <childnode refid="3276" relation="public-inheritance">
        </childnode>
        <childnode refid="3277" relation="public-inheritance">
        </childnode>
        <childnode refid="3278" relation="public-inheritance">
        </childnode>
        <childnode refid="3275" relation="usage">
          <edgelabel>None</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" line="60" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Maybe.cs" bodystart="60" bodyend="275"/>
    <listofallmembers>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a64b2fb60103c3500b408936a60563ee6" prot="private" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>_t</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1ac36e83faf555c40073b67bd60a3db171" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>CompareTo</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1acc399adb01d04edf1009a414af7536d9" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>CompareTo</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1addb568a203b5cc6d0a95788dcc6cd657" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>Equals</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a113a57c5e768a2e6fd2dd6dd781cda09" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>Equals</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a798f24bed636cee1351a409980dc45d4" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>GetHashCode</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a55d188243423034235a9799010c342a6" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>hasValue</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a4a9e92db2681f7e079cc348e6794ac9b" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>Match</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a38c4cfc0ba561054138d7d66ae938701" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>Match</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1afe13439839657eb44f2a88cdb6b0d0ac" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>Match&lt; K &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a4364655c16c800a5185edf19f7c61872" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>MatchAll&lt; A, B &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a12c37046de032bd97c7ce2c609297eb3" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>MatchAll&lt; A, B, C &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a36f13934e29498f7383597a289d17ee1" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>MatchAll&lt; A, B, C, D &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1abfc9d8c6b1cf1e222491254e719da954" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>Maybe</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a1d87252438e4b54f16ac630407a90dd6" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>None</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a19088d15b992f977574f85c300265093" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>None</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a9b460ebcd929545260979e6fead834cd" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>operator !=</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1ab5c4fd4afd685482eaf7a1c83cb3b2cc" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>operator &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1ad9e0a05a1b1256c8fb44ee53a75c09ec" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>operator &gt;=</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a3e2f5f111be3ac192e38896499dbb406" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>operator Maybe&lt; T &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a6e3ef005cdc028cf5c6f1d6645ba4d97" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>operator Maybe&lt; T &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1ac7b68762ce54e825d4d4354844e5c72d" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>operator&lt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a799897d2cc6af35be391dff73eda1d2b" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>operator&lt;=</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1ac6de88bcbc004f0baae55189e084ebaa" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>operator==</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1ac93e5cfe078b1b6a72ec8a5c4abb9415" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>Query</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a2b98b31ce164c7716d913c30ce430aad" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>Some</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1aa3134f0ad7b257ab30a50d4d9259f66f" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>Some&lt; T &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1afdf329a3efff3acaf870544e4e4d3599" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>TryGetValue</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a1cbb985bad26370faab9b7f4c8f540e8" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>ValueOr</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1acdf8ed9fda0221e3e8ce1d261456fbbd" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>ValueOr</name></member>
      <member refid="struct_leap_1_1_unity_1_1_maybe_1a8f0faa3cc0b45a3610e9db9e5d9142d8" prot="public" virt="non-virtual"><scope>Leap::Unity::Maybe</scope><name>valueOrDefault</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
