<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_leap_1_1_unity_1_1_boxed_indexable_struct_extensions" kind="class" language="C#" prot="public">
    <compoundname>Leap::Unity::BoxedIndexableStructExtensions</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_boxed_indexable_struct_extensions_1a0527402e3c82067d20daad83e3992b7f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void Leap.Unity.BoxedIndexableStructExtensions.Recycle&lt; Element, IndexableStruct &gt;</definition>
        <argsstring>(this BoxedIndexableStruct&lt; Element, IndexableStruct &gt; pooledWrapper)</argsstring>
        <name>Recycle&lt; Element, IndexableStruct &gt;</name>
        <param>
          <type>this <ref refid="class_leap_1_1_unity_1_1_boxed_indexable_struct" kindref="compound">BoxedIndexableStruct</ref>&lt; Element, IndexableStruct &gt;</type>
          <declname>pooledWrapper</declname>
        </param>
        <briefdescription>
<para>If you spawned this <ref refid="class_leap_1_1_unity_1_1_boxed_indexable_struct" kindref="compound">BoxedIndexableStruct</ref> from a Pool, you can call this method to recycle it back into the pool. </para>
        </briefdescription>
        <detaileddescription>
<para>If you want to send an <ref refid="interface_leap_1_1_unity_1_1_i_indexable_struct" kindref="compound">IIndexableStruct</ref> into a context that expects an <ref refid="interface_leap_1_1_unity_1_1_i_indexable" kindref="compound">IIndexable</ref> without boxing, you can &quot;convert&quot; it to an <ref refid="interface_leap_1_1_unity_1_1_i_indexable" kindref="compound">IIndexable</ref> without allocating by pooling the wrapper objects instead.</para>
<para>This extension method is short-hand for recycling a pooled wrapper around a struct. It should be called in the <computeroutput>finally</computeroutput> block after a <computeroutput>try</computeroutput> block uses the wrapper as an <ref refid="interface_leap_1_1_unity_1_1_i_indexable" kindref="compound">IIndexable</ref>. Be sure to use the Pool for the <ref refid="class_leap_1_1_unity_1_1_boxed_indexable_struct" kindref="compound">BoxedIndexableStruct</ref> to spawn the wrapper in the first place. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/IIndexableStruct.cs" line="100" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/IIndexableStruct.cs" bodystart="101" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/IIndexableStruct.cs" line="85" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/IIndexableStruct.cs" bodystart="85" bodyend="108"/>
    <listofallmembers>
      <member refid="class_leap_1_1_unity_1_1_boxed_indexable_struct_extensions_1a0527402e3c82067d20daad83e3992b7f" prot="public" virt="non-virtual"><scope>Leap::Unity::BoxedIndexableStructExtensions</scope><name>Recycle&lt; Element, IndexableStruct &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
