<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions" kind="class" language="C#" prot="public">
    <compoundname>Leap::Unity::Query::QueryOperatorExtensions</compoundname>
    <innerclass refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1_1_functor_comparer" prot="private">Leap::Unity::Query::QueryOperatorExtensions::FunctorComparer</innerclass>
    <innerclass refid="struct_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1_1_indexed_value" prot="public">Leap::Unity::Query::QueryOperatorExtensions::IndexedValue</innerclass>
    <innerclass refid="struct_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1_1_prev_pair" prot="public">Leap::Unity::Query::QueryOperatorExtensions::PrevPair</innerclass>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1ab13880f6bdf24de4d4ab2e392e9785eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.Concat&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, ICollection&lt; T &gt; collection)</argsstring>
        <name>Concat&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>ICollection&lt; T &gt;</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> operation representing the concatenation of the current <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> to the argument ICollection. </para>
        </briefdescription>
        <detaileddescription>
<para>For example (A, B, C, D).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.Concat((E, F, G, H)) would result in (A, B, C, D, E, F, G, H) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="32" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="32" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1acf8c672f7da93fd9290f3f358fab86c7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.Concat&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Query&lt; T &gt; other)</argsstring>
        <name>Concat&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing the concatenation of the current <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> to the argument <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>For example (A, B, C, D).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.Concat((E, F, G, H)) would result in (A, B, C, D, E, F, G, H) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="52" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="52" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1acc5b0ad119ea37466e93573e3fe16d5b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.Distinct&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query)</argsstring>
        <name>Distinct&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing the original <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> but without any duplicates. The order of the elements in the returned query is undefined. </para>
        </briefdescription>
        <detaileddescription>
<para>For example (A, B, C, A, B, C, D).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.Distinct() Could result in (B, A, C, D) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="73" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="73" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a77b48363932a9c15f1a320775419709a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.OfType&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Type type)</argsstring>
        <name>OfType&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing only the items of the current <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> that are of a specific type. </para>
        </briefdescription>
        <detaileddescription>
<para>For example (&quot;A&quot;, 1, null, 5.0f, 900, &quot;hello&quot;).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.OfType(typeof(string)) would result in (&quot;A&quot;, &quot;hello&quot;) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="106" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="106" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a2185cde12eab196a42129212d2ec14ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.OrderBy&lt; T, K &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Func&lt; T, K &gt; selector)</argsstring>
        <name>OrderBy&lt; T, K &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Func&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> where the elements have been ordered using a selector function to select the values to order by. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="126" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="126" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1af6d99e1e1ad30c7a32e0fccd39d9354a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.OrderByDescending&lt; T, K &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Func&lt; T, K &gt; selector)</argsstring>
        <name>OrderByDescending&lt; T, K &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Func&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> where the elements have been ordered using a selector function to select the values to order by. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="142" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="142" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1ab31a65e7a61cee632b445a29f6f28357" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.Repeat&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, int times)</argsstring>
        <name>Repeat&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>int</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing the current <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> repeated a number of times. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: (1, 2, 3).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.Repeat(3) Would result in: (1, 2, 3, 1, 2, 3, 1, 2, 3) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="163" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="163" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a298e6e0d7cd69b7faf5d4d0dceb05eac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.Reverse&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query)</argsstring>
        <name>Reverse&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing the original elements but in reverse order. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: (1, 2, 3).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.Reverse() Would result in: (3, 2, 1) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="187" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="187" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1ad43e899e1843e915ed8f6e7127c342c3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; K &gt;</type>
        <definition>static Query&lt;K&gt; Leap.Unity.Query.QueryOperatorExtensions.Select&lt; T, K &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Func&lt; T, K &gt; selector)</argsstring>
        <name>Select&lt; T, K &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Func&lt; T, K &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing the current <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> mapped element-by-element into a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> by a mapping operation. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: (1, 2, 3, 4).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.Select(num =&gt; (num * 2).ToString()) Would result in: (&quot;2&quot;, &quot;4&quot;, &quot;6&quot;, &quot;8&quot;) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="206" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="206" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1aefcac025247e205aad8903669c123092" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; K &gt;</type>
        <definition>static Query&lt;K&gt; Leap.Unity.Query.QueryOperatorExtensions.SelectMany&lt; T, K &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Func&lt; T, ICollection&lt; K &gt;&gt; selector)</argsstring>
        <name>SelectMany&lt; T, K &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Func&lt; T, ICollection&lt; K &gt;&gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing the current <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> where each element has been mapped onto a new Collection, and then all Collections are concatenated into a single long sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: (1, 2, 3, 4).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.SelectMany(count =&gt; new List().Fill(count, count.ToString())) Would result in: (&quot;1&quot;, &quot;2&quot;, &quot;2&quot;, &quot;3&quot;, &quot;3&quot;, &quot;3&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="227" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="227" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a48df1b2ed5be97cb7dceeedc19f5bd2a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; K &gt;</type>
        <definition>static Query&lt;K&gt; Leap.Unity.Query.QueryOperatorExtensions.SelectMany&lt; T, K &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Func&lt; T, Query&lt; K &gt;&gt; selector)</argsstring>
        <name>SelectMany&lt; T, K &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Func&lt; T, <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; K &gt;&gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing the current <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> where each element has been mapped onto a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>, and then all Queries are concatenated into a single long sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: (1, 2, 3, 4).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.SelectMany(count =&gt; new List().Fill(count, count.ToString()).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>) Would result in: (&quot;1&quot;, &quot;2&quot;, &quot;2&quot;, &quot;3&quot;, &quot;3&quot;, &quot;3&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="257" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="257" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a88c4d4c06eae29b50fb73f79e64af1f9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.Skip&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, int toSkip)</argsstring>
        <name>Skip&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>int</type>
          <declname>toSkip</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing the current <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> but without a certain number of the elements at the start. This method is safe to call with a skip amount that is larger than the number of elements in the sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: (A, B, C, D, E, F, G).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.Skip(2) Would result in: (C, D, E, F, G) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="292" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="292" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a7eeff2168b693eda094105225e617b67" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.SkipWhile&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Func&lt; T, bool &gt; predicate)</argsstring>
        <name>SkipWhile&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Func&lt; T, bool &gt;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> that skips values while the predicate returns true. As soon as the predicate returns false, the operation returns the remainder of the sequence. Even if the predicate becomes true again, the elements are still returned. </para>
        </briefdescription>
        <detaileddescription>
<para>For example (-1, -2, -5, 5, 9, -1, 5, -3).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.SkipWhile(isNegative) Would result in (5, 9, -1, 5, -3) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="315" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="315" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1ae1f44919755dc2fef34807f6299930a2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.Sort&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query)</argsstring>
        <name>Sort&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> with the elements of the original query in sorted order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="339" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="339" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a14119cbe906d75b1aee91a3bbf3dd416" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.SortDescending&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query)</argsstring>
        <name>SortDescending&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> with the elements of the original query in reverse sorted order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="352" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="352" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1ae9e10dda0a8f796ddb255c15c4643b37" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.Take&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, int toTake)</argsstring>
        <name>Take&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>int</type>
          <declname>toTake</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing only the first few elements of the current sequence. This method is safe to call even with a count that is larger than the number of elements in the sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: (A, B, C, D, E, F, G).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.Take(4) Would result in: (A, B, C, D) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="373" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="373" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a5904b3f25162ab17eadd7963ea61bff4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.TakeWhile&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Func&lt; T, bool &gt; predicate)</argsstring>
        <name>TakeWhile&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Func&lt; T, bool &gt;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> that takes values while the predicate returns true. As soon as the predicate returns false, the sequence will return no more elements. Even if the predicate becomes true again, the sequence will still halt. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: (1, 3, 9, -1, 5, -4, 9).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.TakeWhile(isPositive) Would result in: (1, 3, 9) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="394" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="394" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a396874d2420d1410b8d13cb0f4a3099b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.Where&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Func&lt; T, bool &gt; predicate)</argsstring>
        <name>Where&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>Func&lt; T, bool &gt;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing only the elements of the <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> for which the predicate returns true. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: (1, 2, 3, 4, 5, 6, 7).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.Where(isEven) Would result in: (2, 4, 6) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="420" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="420" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1afb97e665082d6bbbf9719756bd27496e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
        <definition>static Query&lt;T&gt; Leap.Unity.Query.QueryOperatorExtensions.ValidUnityObjs&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query)</argsstring>
        <name>ValidUnityObjs&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing only the elements that are valid <ref refid="namespace_leap_1_1_unity" kindref="compound">Unity</ref> Objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="440" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="440" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a612b6758919485bf8ae1a2bddcb56cf0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1_1_indexed_value" kindref="compound">IndexedValue</ref>&lt; T &gt; &gt;</type>
        <definition>static Query&lt;IndexedValue&lt;T&gt; &gt; Leap.Unity.Query.QueryOperatorExtensions.WithIndices&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query)</argsstring>
        <name>WithIndices&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing all of the elements paired with their index that they are located within the query. This can be useful if you want to retrieve the original index later. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: (A, B, C).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.WithIndices() Would result in: ((0, A), (1, B), (2, C)) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="457" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="457" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a1ec8574f3e4f871d836f35142a65ddcc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1_1_prev_pair" kindref="compound">PrevPair</ref>&lt; T &gt; &gt;</type>
        <definition>static Query&lt;PrevPair&lt;T&gt; &gt; Leap.Unity.Query.QueryOperatorExtensions.WithPrevious&lt; T &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, int offset=1, bool includeStart=false)</argsstring>
        <name>WithPrevious&lt; T &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>includeStart</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> where each new element in the sequence is an instance of the <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1_1_prev_pair" kindref="compound">PrevPair</ref> struct. The value field of the pair will point to an element in the current sequence, and the prev field will point to an element that comes &apos;offset&apos; elements before the current element. If &apos;includeStart&apos; is true, the sequence will also include elements that have no previous element. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, with an offset of 2 and with includeStart as true, the sequence: A, B, C, D, E, F is transformed into: (A,_) (B,_) (C,A) (D,B) (E,C) (F,D) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="483" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="483" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a0aa85e385d9880d7661cf2f85cb40069" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; V &gt;</type>
        <definition>static Query&lt;V&gt; Leap.Unity.Query.QueryOperatorExtensions.Zip&lt; T, K, V &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, ICollection&lt; K &gt; collection, Func&lt; T, K, V &gt; selector)</argsstring>
        <name>Zip&lt; T, K, V &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>ICollection&lt; K &gt;</type>
          <declname>collection</declname>
        </param>
        <param>
          <type>Func&lt; T, K, V &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> that represents the combination of this query sequence with a Collection. The two sequences are combined element-by-element using a selector function. The resulting sequence has a length equal to the smaller of the two sequences. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: sequenceA = (A, B, C, D) sequenceB = (E, F, G, H) sequenceA.Query().Zip(sequenceB, (a, b) =&gt; a + b) Would result in: (AE, BF, CG, DH) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="524" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="524" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a903fc1677e697205537b9acb9140a036" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; V &gt;</type>
        <definition>static Query&lt;V&gt; Leap.Unity.Query.QueryOperatorExtensions.Zip&lt; T, K, V &gt;</definition>
        <argsstring>(this Query&lt; T &gt; query, Query&lt; K &gt; otherQuery, Func&lt; T, K, V &gt; selector)</argsstring>
        <name>Zip&lt; T, K, V &gt;</name>
        <param>
          <type>this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; K &gt;</type>
          <declname>otherQuery</declname>
        </param>
        <param>
          <type>Func&lt; T, K, V &gt;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> that represents the combination of this query sequence with another <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>. The two sequences are combined element-by-element using a selector function. The resulting sequence has a length equal to the smaller of the two sequences. </para>
        </briefdescription>
        <detaileddescription>
<para>For example: sequenceA = (A, B, C, D) sequenceB = (E, F, G, H) sequenceA.Query().Zip(sequenceB.Query(), (a, b) =&gt; a + b) Would result in: (AE, BF, CG, DH) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="554" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="554" bodyend="566"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of extension methods that operate on a <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> structure. All of these methods destroy the original query and return a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> based on the original. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" line="21" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/QueryOperatorExtensions.cs" bodystart="21" bodyend="625"/>
    <listofallmembers>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1ab13880f6bdf24de4d4ab2e392e9785eb" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Concat&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1acf8c672f7da93fd9290f3f358fab86c7" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Concat&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1acc5b0ad119ea37466e93573e3fe16d5b" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Distinct&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a77b48363932a9c15f1a320775419709a" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>OfType&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a2185cde12eab196a42129212d2ec14ff" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>OrderBy&lt; T, K &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1af6d99e1e1ad30c7a32e0fccd39d9354a" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>OrderByDescending&lt; T, K &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1ab31a65e7a61cee632b445a29f6f28357" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Repeat&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a298e6e0d7cd69b7faf5d4d0dceb05eac" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Reverse&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1ad43e899e1843e915ed8f6e7127c342c3" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Select&lt; T, K &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1aefcac025247e205aad8903669c123092" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>SelectMany&lt; T, K &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a48df1b2ed5be97cb7dceeedc19f5bd2a" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>SelectMany&lt; T, K &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a88c4d4c06eae29b50fb73f79e64af1f9" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Skip&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a7eeff2168b693eda094105225e617b67" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>SkipWhile&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1ae1f44919755dc2fef34807f6299930a2" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Sort&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a14119cbe906d75b1aee91a3bbf3dd416" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>SortDescending&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1ae9e10dda0a8f796ddb255c15c4643b37" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Take&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a5904b3f25162ab17eadd7963ea61bff4" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>TakeWhile&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1afb97e665082d6bbbf9719756bd27496e" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>ValidUnityObjs&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a396874d2420d1410b8d13cb0f4a3099b" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Where&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a612b6758919485bf8ae1a2bddcb56cf0" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>WithIndices&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a1ec8574f3e4f871d836f35142a65ddcc" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>WithPrevious&lt; T &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a0aa85e385d9880d7661cf2f85cb40069" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Zip&lt; T, K, V &gt;</name></member>
      <member refid="class_leap_1_1_unity_1_1_query_1_1_query_operator_extensions_1a903fc1677e697205537b9acb9140a036" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::QueryOperatorExtensions</scope><name>Zip&lt; T, K, V &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
