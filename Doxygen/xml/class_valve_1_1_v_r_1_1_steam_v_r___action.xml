<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_valve_1_1_v_r_1_1_steam_v_r___action" kind="class" language="C#" prot="public" abstract="yes">
    <compoundname>Valve::VR::SteamVR_Action</compoundname>
    <basecompoundref prot="public" virt="non-virtual">IEquatable&lt; SteamVR_Action &gt;</basecompoundref>
    <basecompoundref refid="interface_valve_1_1_v_r_1_1_i_steam_v_r___action" prot="public" virt="non-virtual">Valve.VR.ISteamVR_Action</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">SteamVR_Action</basecompoundref>
    <basecompoundref refid="interface_valve_1_1_v_r_1_1_i_steam_v_r___action" prot="public" virt="non-virtual">Valve.VR.ISteamVR_Action</basecompoundref>
    <derivedcompoundref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___in" prot="public" virt="non-virtual">Valve.VR.SteamVR_Action_In&lt; SourceMap, SourceElement &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___out" prot="public" virt="non-virtual">Valve.VR.SteamVR_Action_Out&lt; SourceMap, SourceElement &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>SourceMap</type>
      </param>
      <param>
        <type>SourceElement</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a70a7f08d07c54c294f26441619352401" prot="protected" static="no" mutable="no">
        <type>SourceMap</type>
        <definition>SourceMap Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.sourceMap</definition>
        <argsstring></argsstring>
        <name>sourceMap</name>
        <briefdescription>
<para>The map to the source elements, a dictionary of source elements. Should be accessed through the action indexer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="32" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ab8b674e7217eb047723b26597088c703" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="90" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a75a8c6b9641982a47e32039b131e3eca" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.actionPath</definition>
        <argsstring></argsstring>
        <name>actionPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="278" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a361379ce58b79d870a16b3a07cabcdbf" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.needsReinit</definition>
        <argsstring></argsstring>
        <name>needsReinit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="281" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="281" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1abdb54a9331f280213d28abe5ef78ec07" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>SourceElement</type>
        <definition>virtual SourceElement Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.this[SteamVR_Input_Sources inputSource]</definition>
        <argsstring></argsstring>
        <name>this[SteamVR_Input_Sources inputSource]</name>
        <briefdescription>
<para>Access this action restricted to individual input sources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The input source to access for this action</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="38" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a765a5c4c2de688392f4968fa3dcf2703" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>override string</type>
        <definition>override string Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.fullPath</definition>
        <argsstring></argsstring>
        <name>fullPath</name>
        <briefdescription>
<para>The full string path for this action </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="47" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1abb2ae18798c46b03be6c44872f3da084" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>override ulong</type>
        <definition>override ulong Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <briefdescription>
<para>The underlying handle for this action used for native <ref refid="class_valve_1_1_v_r_1_1_steam_v_r" kindref="compound">SteamVR</ref> Input calls </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="56" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad4b01239b68cfa6a4b0daa1c91e2f134" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>override <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action_set" kindref="compound">SteamVR_ActionSet</ref></type>
        <definition>override SteamVR_ActionSet Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.actionSet</definition>
        <argsstring></argsstring>
        <name>actionSet</name>
        <briefdescription>
<para>The actionset this action is contained within </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="59" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1aee8591fed8be32dde8c11ab75b830323" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>override <ref refid="namespace_valve_1_1_v_r_1a1e6192cb5ddaf204afab87ccb5728780" kindref="member">SteamVR_ActionDirections</ref></type>
        <definition>override SteamVR_ActionDirections Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.direction</definition>
        <argsstring></argsstring>
        <name>direction</name>
        <briefdescription>
<para>The action direction of this action (in for input - most actions, out for output - mainly haptics) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="68" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="69" bodyend="74"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a4737fe5382afbd927eb06bdcadbbbbf4" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>override bool</type>
        <definition>override bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.active</definition>
        <argsstring></argsstring>
        <name>active</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Returns true if the action is bound and the actionset is active </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="77" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a99ec33a591be6c792dff8c13b32fe675" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>override bool</type>
        <definition>override bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.lastActive</definition>
        <argsstring></argsstring>
        <name>lastActive</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Returns true if the action was bound and the ActionSet was active during the previous update </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="80" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad275cb288073b48f2b0e92a4cc797014" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>override bool</type>
        <definition>override bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.activeBinding</definition>
        <argsstring></argsstring>
        <name>activeBinding</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Returns true if the action is bound </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="83" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad45e21db94737a22efd0efcab6401fec" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>override bool</type>
        <definition>override bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.lastActiveBinding</definition>
        <argsstring></argsstring>
        <name>lastActiveBinding</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Returns true if the action was bound at the previous update </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="86" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a7e982d8e80fc65827cce3b141e360413" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>abstract string</type>
        <definition>abstract string Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.fullPath</definition>
        <argsstring></argsstring>
        <name>fullPath</name>
        <briefdescription>
<para>The full string path for this action </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="334" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1abfacc5556f01d13474d68dff1b649b64" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>abstract ulong</type>
        <definition>abstract ulong Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <briefdescription>
<para>The underlying handle for this action used for native <ref refid="class_valve_1_1_v_r_1_1_steam_v_r" kindref="compound">SteamVR</ref> Input calls </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="337" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a136c44b47df0a9380c4488059b125fd3" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>abstract <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action_set" kindref="compound">SteamVR_ActionSet</ref></type>
        <definition>abstract SteamVR_ActionSet Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.actionSet</definition>
        <argsstring></argsstring>
        <name>actionSet</name>
        <briefdescription>
<para>The actionset this action is contained within </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="340" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1aa47ba3da1a7fa07d5f4d70fcae84f778" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>abstract <ref refid="namespace_valve_1_1_v_r_1a1e6192cb5ddaf204afab87ccb5728780" kindref="member">SteamVR_ActionDirections</ref></type>
        <definition>abstract SteamVR_ActionDirections Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.direction</definition>
        <argsstring></argsstring>
        <name>direction</name>
        <briefdescription>
<para>The action direction of this action (in for input - most actions, out for output - mainly haptics) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="343" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="343" bodyend="343"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad92856584dc24071f25b610fe237e4ee" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.setActive</definition>
        <argsstring></argsstring>
        <name>setActive</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Returns true if the action set that contains this action is active for Any input source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="346" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="346" bodyend="346"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a0fd56f7ca6074a8320738f50c8d43844" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>abstract bool</type>
        <definition>abstract bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.active</definition>
        <argsstring></argsstring>
        <name>active</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Returns true if the action is bound and the actionset is active </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="349" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="349" bodyend="349"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a66107ca9c11bd18775b0e1bf794d3568" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>abstract bool</type>
        <definition>abstract bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.activeBinding</definition>
        <argsstring></argsstring>
        <name>activeBinding</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Returns true if the action is bound </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="352" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="352" bodyend="352"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a38ff81951fad828a51df2bdd1f3f50f6" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>abstract bool</type>
        <definition>abstract bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.lastActive</definition>
        <argsstring></argsstring>
        <name>lastActive</name>
        <briefdescription>
<para><bold>[Shortcut to: <ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853faed36a1ef76a59ee3f15180e0441188ad" kindref="member">SteamVR_Input_Sources.Any</ref>]</bold> Returns true if the action was bound and the actionset was active at the previous update </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="355" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="property" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a679b7a902fc8c53b9bf421c6e96bc26a" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>abstract bool</type>
        <definition>abstract bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.lastActiveBinding</definition>
        <argsstring></argsstring>
        <name>lastActiveBinding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="360" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="360" bodyend="360"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ae27e9858dec18a4307cca7779ed87ad8" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.startUpdatingSourceOnAccess</definition>
        <argsstring></argsstring>
        <name>startUpdatingSourceOnAccess</name>
        <initializer>= true</initializer>
        <briefdescription>
<para><bold>Not recommended.</bold> Determines if we should do a lazy-loading style of updating actions where we don&apos;t check for their data until the code asks for it. Note: You will have to manually activate actions otherwise. Not recommended. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="286" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="286" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a628babac1da65e7fc2f1b21899f41964" prot="private" static="no" mutable="no">
        <type>string</type>
        <definition>string Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.cachedShortName</definition>
        <argsstring></argsstring>
        <name>cachedShortName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="529" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="529" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ae3ab26df1e48bd668134f71845cf727a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override void</type>
        <definition>override void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.PreInitialize</definition>
        <argsstring>(string newActionPath)</argsstring>
        <name>PreInitialize</name>
        <param>
          <type>string</type>
          <declname>newActionPath</declname>
        </param>
        <briefdescription>
<para>Prepares the action to be initialized. Creating dictionaries, finding the right existing action, etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="95" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="95" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1aab211e4315d3a39b4db1e033ae1e353b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override string</type>
        <definition>override string Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.TryNeedsInitData</definition>
        <argsstring>()</argsstring>
        <name>TryNeedsInitData</name>
        <briefdescription>
<para><bold>[Should not be called by user code]</bold> If it looks like we aren&apos;t attached to a real action then try and find the existing action for our given path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="130" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="130" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a5f4858a566f91219d4896161c346f9f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override void</type>
        <definition>override void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.Initialize</definition>
        <argsstring>(bool createNew=false, bool throwErrors=true)</argsstring>
        <name>Initialize</name>
        <param>
          <type>bool</type>
          <declname>createNew</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>throwErrors</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para><bold>[Should not be called by user code]</bold> Initializes the individual sources as well as the base map itself. Gets the handle for the action from <ref refid="class_valve_1_1_v_r_1_1_steam_v_r" kindref="compound">SteamVR</ref> and does any other <ref refid="class_valve_1_1_v_r_1_1_steam_v_r" kindref="compound">SteamVR</ref> related setup that needs to be done </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="159" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="159" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a948d9db18a20fde79dd442cd0e119fa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___source___map" kindref="compound">SteamVR_Action_Source_Map</ref></type>
        <definition>override SteamVR_Action_Source_Map Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetSourceMap</definition>
        <argsstring>()</argsstring>
        <name>GetSourceMap</name>
        <briefdescription>
<para><bold>[Should not be called by user code]</bold> Returns the underlying source map for the action. <bold>[Should not be called by user code]</bold> Returns the underlying source map for the action. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="199" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a76c9b93e06e87e5fa861423bd4102c4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetActive</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetActive</name>
        <reimplements refid="interface_valve_1_1_v_r_1_1_i_steam_v_r___action_1ad8d90df47697c9e5b43a0a46a241aa85">GetActive</reimplements>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Gets a value indicating whether or not the action is currently bound and if the containing action set is active </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="237" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1adb510f6f020a3023d6bbfa59110edf58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetActiveBinding</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetActiveBinding</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Gets a value indicating whether or not the action is currently bound </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="246" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a24bb49705ffd97a432add0cb2233ff91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetLastActive</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetLastActive</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Gets the value from the previous update indicating whether or not the action was currently bound and if the containing action set was active </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="256" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a9f6a753a369e7932e99aebd540bdf886" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetLastActiveBinding</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetLastActiveBinding</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Gets the value from the previous update indicating whether or not the action is currently bound </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="265" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1af433e8fb310a9f16c274341055fe025f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.SteamVR_Action</definition>
        <argsstring>()</argsstring>
        <name>SteamVR_Action</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="275" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a641a73a51f3dc9509bbaf48667c47b71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CreateType</type>
        <definition>CreateType Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetCopy&lt; CreateType &gt;</definition>
        <argsstring>()</argsstring>
        <name>GetCopy&lt; CreateType &gt;</name>
        <briefdescription>
<para><bold>[Should not be called by user code]</bold> Gets a copy of the underlying source map so we&apos;re always using the same underlying event data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="321" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="321" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1af53dc99944ee543c7570e6defc55aa48" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract string</type>
        <definition>abstract string Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.TryNeedsInitData</definition>
        <argsstring>()</argsstring>
        <name>TryNeedsInitData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a8ead085a816500f060b6cfbc96b8da87" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract void</type>
        <definition>abstract void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.PreInitialize</definition>
        <argsstring>(string newActionPath)</argsstring>
        <name>PreInitialize</name>
        <param>
          <type>string</type>
          <declname>newActionPath</declname>
        </param>
        <briefdescription>
<para>Prepares the action to be initialized. Creating dictionaries, finding the right existing action, etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a29bea2023c1139d9bd612b82d02f8d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract void</type>
        <definition>abstract void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.Initialize</definition>
        <argsstring>(bool createNew=false, bool throwNotSetError=true)</argsstring>
        <name>Initialize</name>
        <param>
          <type>bool</type>
          <declname>createNew</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>throwNotSetError</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Initializes the individual sources as well as the base map itself. Gets the handle for the action from <ref refid="class_valve_1_1_v_r_1_1_steam_v_r" kindref="compound">SteamVR</ref> and does any other <ref refid="class_valve_1_1_v_r_1_1_steam_v_r" kindref="compound">SteamVR</ref> related setup that needs to be done </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ac8b7caef88740be5ec2ff78fd8fcbfad" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract float</type>
        <definition>abstract float Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetTimeLastChanged</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetTimeLastChanged</name>
        <reimplementedby refid="class_valve_1_1_v_r_1_1_steam_v_r___action___in_1accdc869f6fd50ef15580a271b6de4d30">GetTimeLastChanged</reimplementedby>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Gets the last timestamp this action was changed. (by Time.realtimeSinceStartup) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The input source to use to select the last changed time</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a59d2546a9c1a9097e2243e1537f1bfe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___source___map" kindref="compound">SteamVR_Action_Source_Map</ref></type>
        <definition>abstract SteamVR_Action_Source_Map Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetSourceMap</definition>
        <argsstring>()</argsstring>
        <name>GetSourceMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a22690e2467a2d5b78b495f7fcdd5666b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetActive</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetActive</name>
        <reimplements refid="interface_valve_1_1_v_r_1_1_i_steam_v_r___action_1ad8d90df47697c9e5b43a0a46a241aa85">GetActive</reimplements>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Gets a value indicating whether or not the action is currently bound and if the containing action set is active </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a78c588d2687e397766adb5f004e3597d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetSetActive</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetSetActive</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Gets a value indicating whether or not the containing action set is active </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="394" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="394" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a86d2eae9b5b28ea8eec464abf7ea53bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetActiveBinding</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetActiveBinding</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Gets a value indicating whether or not the action is currently bound </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a33092fe773f3dd669be8cb019a1dffa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetLastActive</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetLastActive</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Gets the value from the previous update indicating whether or not the action is currently bound and if the containing action set is active </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ab3f5864e5b4baaf02de9ab7eb77ba4d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetLastActiveBinding</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>GetLastActiveBinding</name>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Gets the value from the previous update indicating whether or not the action is currently bound </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSource</parametername>
</parameternamelist>
<parameterdescription>
<para>The device you would like to get data from. Any if the action is not device specific.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1aa6babacca9654f7d8184b281b99fa004" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetPath</definition>
        <argsstring>()</argsstring>
        <name>GetPath</name>
        <briefdescription>
<para>Returns the full action path for this action. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="419" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ade2f7fe24302b71484c25419fd94271d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract bool</type>
        <definition>abstract bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.IsUpdating</definition>
        <argsstring>(SteamVR_Input_Sources inputSource)</argsstring>
        <name>IsUpdating</name>
        <reimplementedby refid="class_valve_1_1_v_r_1_1_steam_v_r___action___in_1a648d3f94c79e2ec43ec9846535fbf8ef">IsUpdating</reimplementedby>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a82e5bf501cc3aa155444ee3f0662853f" kindref="member">SteamVR_Input_Sources</ref></type>
          <declname>inputSource</declname>
        </param>
        <briefdescription>
<para>Returns true if the data for this action is being updated for the specified input source. This can be triggered by querying the data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ae10204d3c1c0f5e01fee7e22c8d56a15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override int</type>
        <definition>override int Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetHashCode</definition>
        <argsstring>()</argsstring>
        <name>GetHashCode</name>
        <briefdescription>
<para>Creates a hashcode from the full action path of this action </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="433" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="433" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a47cd704e2eab7d9ea4ac09fb257ba4cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.Equals</definition>
        <argsstring>(SteamVR_Action other)</argsstring>
        <name>Equals</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action" kindref="compound">SteamVR_Action</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___actions" kindref="compound">SteamVR_Actions</ref> by their action path instead of references </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="444" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="444" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ac09cc52154a6418bb9782117f519c3b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override bool</type>
        <definition>override bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.Equals</definition>
        <argsstring>(object other)</argsstring>
        <name>Equals</name>
        <param>
          <type>object</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___actions" kindref="compound">SteamVR_Actions</ref> by their action path instead of references </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="455" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="455" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a94911ac96600a93ce23790166435b593" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>string</type>
        <definition>string Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.GetShortName</definition>
        <argsstring>()</argsstring>
        <name>GetShortName</name>
        <reimplements refid="interface_valve_1_1_v_r_1_1_i_steam_v_r___action_1ae21f01096754a807c68543f61e63bf1c">GetShortName</reimplements>
        <briefdescription>
<para>Gets just the name of this action. The last part of the path for this action. Removes action set, and direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="532" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="532" bodyend="540"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1af69bed4c4b5b9640c2cac9e118743df3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override void</type>
        <definition>override void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.CreateUninitialized</definition>
        <argsstring>(string newActionPath, bool caseSensitive)</argsstring>
        <name>CreateUninitialized</name>
        <param>
          <type>string</type>
          <declname>newActionPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="105" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="105" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a3ef78876da16318e17896536ae380e0a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override void</type>
        <definition>override void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.CreateUninitialized</definition>
        <argsstring>(string newActionSet, SteamVR_ActionDirections direction, string newAction, bool caseSensitive)</argsstring>
        <name>CreateUninitialized</name>
        <param>
          <type>string</type>
          <declname>newActionSet</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a1e6192cb5ddaf204afab87ccb5728780" kindref="member">SteamVR_ActionDirections</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type>string</type>
          <declname>newAction</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="116" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1af28d577bb913087c833873e4a66e9b2f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override void</type>
        <definition>override void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.InitializeCopy</definition>
        <argsstring>(string newActionPath, SteamVR_Action_Source_Map newData)</argsstring>
        <name>InitializeCopy</name>
        <param>
          <type>string</type>
          <declname>newActionPath</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___source___map" kindref="compound">SteamVR_Action_Source_Map</ref></type>
          <declname>newData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="204" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="204" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ac3195ebfd368a3ee5673d792b9e08eba" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.InitAfterDeserialize</definition>
        <argsstring>()</argsstring>
        <name>InitAfterDeserialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="212" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="212" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1aee6486f13a4e850779f50c95725b30d0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract void</type>
        <definition>abstract void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.InitializeCopy</definition>
        <argsstring>(string newActionPath, SteamVR_Action_Source_Map newData)</argsstring>
        <name>InitializeCopy</name>
        <param>
          <type>string</type>
          <declname>newActionPath</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___source___map" kindref="compound">SteamVR_Action_Source_Map</ref></type>
          <declname>newData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a973b707bcccec103ca220f9e06df8662" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract void</type>
        <definition>abstract void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.CreateUninitialized</definition>
        <argsstring>(string newActionPath, bool caseSensitive)</argsstring>
        <name>CreateUninitialized</name>
        <param>
          <type>string</type>
          <declname>newActionPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad2c8fc63857c6a6c9c551ec858797202" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract void</type>
        <definition>abstract void Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.CreateUninitialized</definition>
        <argsstring>(string newActionSet, SteamVR_ActionDirections direction, string newAction, bool caseSensitive)</argsstring>
        <name>CreateUninitialized</name>
        <param>
          <type>string</type>
          <declname>newActionSet</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a1e6192cb5ddaf204afab87ccb5728780" kindref="member">SteamVR_ActionDirections</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type>string</type>
          <declname>newAction</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="369" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a75746fdff4c10e89c9e43bd598a106f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CreateType</type>
        <definition>static CreateType Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.Create&lt; CreateType &gt;</definition>
        <argsstring>(string newActionPath)</argsstring>
        <name>Create&lt; CreateType &gt;</name>
        <param>
          <type>string</type>
          <declname>newActionPath</declname>
        </param>
        <briefdescription>
<para><bold>[Should not be called by user code]</bold> Creates an actual action that will later be called by user code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="291" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="291" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a22efd6a86141fef284c6de86ba31f75e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CreateType</type>
        <definition>static CreateType Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.CreateUninitialized&lt; CreateType &gt;</definition>
        <argsstring>(string setName, SteamVR_ActionDirections direction, string newActionName, bool caseSensitive)</argsstring>
        <name>CreateUninitialized&lt; CreateType &gt;</name>
        <param>
          <type>string</type>
          <declname>setName</declname>
        </param>
        <param>
          <type><ref refid="namespace_valve_1_1_v_r_1a1e6192cb5ddaf204afab87ccb5728780" kindref="member">SteamVR_ActionDirections</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type>string</type>
          <declname>newActionName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
<para><bold>[Should not be called by user code]</bold> Creates an uninitialized action that can be saved without being attached to a real action </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="301" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad9e9c7d4a4f472f28dfa9d787919384a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CreateType</type>
        <definition>static CreateType Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.CreateUninitialized&lt; CreateType &gt;</definition>
        <argsstring>(string actionPath, bool caseSensitive)</argsstring>
        <name>CreateUninitialized&lt; CreateType &gt;</name>
        <param>
          <type>string</type>
          <declname>actionPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>caseSensitive</declname>
        </param>
        <briefdescription>
<para><bold>[Should not be called by user code]</bold> Creates an uninitialized action that can be saved without being attached to a real action </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="311" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="311" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad7b81277f914a527971510f8c1b3f38d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.operator !=</definition>
        <argsstring>(SteamVR_Action action1, SteamVR_Action action2)</argsstring>
        <name>operator !=</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action" kindref="compound">SteamVR_Action</ref></type>
          <declname>action1</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action" kindref="compound">SteamVR_Action</ref></type>
          <declname>action2</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___actions" kindref="compound">SteamVR_Actions</ref> by their action path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="479" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="479" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1a58a25d1d89f51b0ddcc65ebf6c1e8e54" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.operator==</definition>
        <argsstring>(SteamVR_Action action1, SteamVR_Action action2)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action" kindref="compound">SteamVR_Action</ref></type>
          <declname>action1</declname>
        </param>
        <param>
          <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action" kindref="compound">SteamVR_Action</ref></type>
          <declname>action2</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___actions" kindref="compound">SteamVR_Actions</ref> by their action path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="487" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="487" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="class_valve_1_1_v_r_1_1_steam_v_r___action_1aa10a1be562d9c134f16601b579ec6e65" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action" kindref="compound">SteamVR_Action</ref></type>
        <definition>static SteamVR_Action Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;.FindExistingActionForPartialPath</definition>
        <argsstring>(string path)</argsstring>
        <name>FindExistingActionForPartialPath</name>
        <param>
          <type>string</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Tries to find an existing action matching some subsection of an action path. More useful functions in <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___input" kindref="compound">SteamVR_Input</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="503" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="503" bodyend="525"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the base level action for <ref refid="class_valve_1_1_v_r_1_1_steam_v_r" kindref="compound">SteamVR</ref> Input Actions. All <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___in" kindref="compound">SteamVR_Action_In</ref> and <ref refid="class_valve_1_1_v_r_1_1_steam_v_r___action___out" kindref="compound">SteamVR_Action_Out</ref> inherit from this. Initializes the ulong handle for the action, has some helper references that all actions will have. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4656">
        <label>ISteamVR_Action_Source</label>
        <link refid="interface_valve_1_1_v_r_1_1_i_steam_v_r___action___source"/>
      </node>
      <node id="4655">
        <label>ISteamVR_Action</label>
        <link refid="interface_valve_1_1_v_r_1_1_i_steam_v_r___action"/>
        <childnode refid="4656" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4653">
        <label>Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action"/>
        <childnode refid="4654" relation="public-inheritance">
        </childnode>
        <childnode refid="4655" relation="public-inheritance">
        </childnode>
        <childnode refid="4657" relation="public-inheritance">
        </childnode>
        <childnode refid="4655" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4660">
        <label>Valve::VR::SteamVR_Action_Out&lt; SourceMap, SourceElement &gt;</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___out"/>
        <childnode refid="4653" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4658">
        <label>Valve::VR::SteamVR_Action_In&lt; SourceMap, SourceElement &gt;</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___in"/>
        <childnode refid="4653" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4654">
        <label>IEquatable&lt; SteamVR_Action &gt;</label>
      </node>
      <node id="4657">
        <label>SteamVR_Action</label>
      </node>
      <node id="4659">
        <label>Valve::VR::SteamVR_Action_Pose_Base&lt; SourceMap, SourceElement &gt;</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action___pose___base"/>
        <childnode refid="4658" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4664">
        <label>ISteamVR_Action_Source</label>
        <link refid="interface_valve_1_1_v_r_1_1_i_steam_v_r___action___source"/>
      </node>
      <node id="4663">
        <label>ISteamVR_Action</label>
        <link refid="interface_valve_1_1_v_r_1_1_i_steam_v_r___action"/>
        <childnode refid="4664" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4661">
        <label>Valve.VR.SteamVR_Action&lt; SourceMap, SourceElement &gt;</label>
        <link refid="class_valve_1_1_v_r_1_1_steam_v_r___action"/>
        <childnode refid="4662" relation="public-inheritance">
        </childnode>
        <childnode refid="4663" relation="public-inheritance">
        </childnode>
        <childnode refid="4665" relation="public-inheritance">
        </childnode>
        <childnode refid="4663" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4662">
        <label>IEquatable&lt; SteamVR_Action &gt;</label>
      </node>
      <node id="4665">
        <label>SteamVR_Action</label>
      </node>
    </collaborationgraph>
    <location file="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" line="27" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/SteamVR/Input/SteamVR_Action.cs" bodystart="26" bodyend="269"/>
    <listofallmembers>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a75a8c6b9641982a47e32039b131e3eca" prot="protected" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>actionPath</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad4b01239b68cfa6a4b0daa1c91e2f134" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>actionSet</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a136c44b47df0a9380c4488059b125fd3" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>actionSet</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a4737fe5382afbd927eb06bdcadbbbbf4" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>active</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a0fd56f7ca6074a8320738f50c8d43844" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>active</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad275cb288073b48f2b0e92a4cc797014" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>activeBinding</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a66107ca9c11bd18775b0e1bf794d3568" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>activeBinding</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a628babac1da65e7fc2f1b21899f41964" prot="private" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>cachedShortName</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a75746fdff4c10e89c9e43bd598a106f0" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>Create&lt; CreateType &gt;</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1af69bed4c4b5b9640c2cac9e118743df3" prot="protected" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>CreateUninitialized</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a3ef78876da16318e17896536ae380e0a" prot="protected" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>CreateUninitialized</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a973b707bcccec103ca220f9e06df8662" prot="protected" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>CreateUninitialized</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad2c8fc63857c6a6c9c551ec858797202" prot="protected" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>CreateUninitialized</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a22efd6a86141fef284c6de86ba31f75e" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>CreateUninitialized&lt; CreateType &gt;</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad9e9c7d4a4f472f28dfa9d787919384a" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>CreateUninitialized&lt; CreateType &gt;</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1aee8591fed8be32dde8c11ab75b830323" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>direction</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1aa47ba3da1a7fa07d5f4d70fcae84f778" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>direction</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a47cd704e2eab7d9ea4ac09fb257ba4cb" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>Equals</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ac09cc52154a6418bb9782117f519c3b5" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>Equals</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1aa10a1be562d9c134f16601b579ec6e65" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>FindExistingActionForPartialPath</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a765a5c4c2de688392f4968fa3dcf2703" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>fullPath</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a7e982d8e80fc65827cce3b141e360413" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>fullPath</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a76c9b93e06e87e5fa861423bd4102c4c" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetActive</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a22690e2467a2d5b78b495f7fcdd5666b" prot="public" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetActive</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1adb510f6f020a3023d6bbfa59110edf58" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetActiveBinding</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a86d2eae9b5b28ea8eec464abf7ea53bb" prot="public" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetActiveBinding</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a641a73a51f3dc9509bbaf48667c47b71" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetCopy&lt; CreateType &gt;</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ae10204d3c1c0f5e01fee7e22c8d56a15" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetHashCode</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a24bb49705ffd97a432add0cb2233ff91" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetLastActive</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a33092fe773f3dd669be8cb019a1dffa4" prot="public" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetLastActive</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a9f6a753a369e7932e99aebd540bdf886" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetLastActiveBinding</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ab3f5864e5b4baaf02de9ab7eb77ba4d0" prot="public" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetLastActiveBinding</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1aa6babacca9654f7d8184b281b99fa004" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetPath</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a78c588d2687e397766adb5f004e3597d" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetSetActive</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a94911ac96600a93ce23790166435b593" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetShortName</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a948d9db18a20fde79dd442cd0e119fa6" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetSourceMap</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a59d2546a9c1a9097e2243e1537f1bfe3" prot="public" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetSourceMap</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ac8b7caef88740be5ec2ff78fd8fcbfad" prot="public" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>GetTimeLastChanged</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1abb2ae18798c46b03be6c44872f3da084" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>handle</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1abfacc5556f01d13474d68dff1b649b64" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>handle</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ac3195ebfd368a3ee5673d792b9e08eba" prot="protected" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>InitAfterDeserialize</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a5f4858a566f91219d4896161c346f9f3" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>Initialize</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a29bea2023c1139d9bd612b82d02f8d61" prot="public" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>Initialize</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1af28d577bb913087c833873e4a66e9b2f" prot="protected" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>InitializeCopy</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1aee6486f13a4e850779f50c95725b30d0" prot="protected" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>InitializeCopy</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ab8b674e7217eb047723b26597088c703" prot="protected" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>initialized</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ade2f7fe24302b71484c25419fd94271d" prot="public" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>IsUpdating</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a99ec33a591be6c792dff8c13b32fe675" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>lastActive</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a38ff81951fad828a51df2bdd1f3f50f6" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>lastActive</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad45e21db94737a22efd0efcab6401fec" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>lastActiveBinding</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a679b7a902fc8c53b9bf421c6e96bc26a" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>lastActiveBinding</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a361379ce58b79d870a16b3a07cabcdbf" prot="protected" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>needsReinit</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad7b81277f914a527971510f8c1b3f38d" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>operator !=</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a58a25d1d89f51b0ddcc65ebf6c1e8e54" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>operator==</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ae3ab26df1e48bd668134f71845cf727a" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>PreInitialize</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a8ead085a816500f060b6cfbc96b8da87" prot="public" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>PreInitialize</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ad92856584dc24071f25b610fe237e4ee" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>setActive</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1a70a7f08d07c54c294f26441619352401" prot="protected" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>sourceMap</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1ae27e9858dec18a4307cca7779ed87ad8" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>startUpdatingSourceOnAccess</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1af433e8fb310a9f16c274341055fe025f" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>SteamVR_Action</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1abdb54a9331f280213d28abe5ef78ec07" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>this[SteamVR_Input_Sources inputSource]</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1aab211e4315d3a39b4db1e033ae1e353b" prot="public" virt="non-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>TryNeedsInitData</name></member>
      <member refid="class_valve_1_1_v_r_1_1_steam_v_r___action_1af53dc99944ee543c7570e6defc55aa48" prot="public" virt="pure-virtual"><scope>Valve::VR::SteamVR_Action</scope><name>TryNeedsInitData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
