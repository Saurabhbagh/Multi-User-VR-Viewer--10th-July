<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_leap_1_1_unity_1_1_query_1_1_query" kind="struct" language="C#" prot="public">
    <compoundname>Leap::Unity::Query::Query</compoundname>
    <innerclass refid="struct_leap_1_1_unity_1_1_query_1_1_query_1_1_enumerator" prot="public">Leap::Unity::Query::Query::Enumerator</innerclass>
    <innerclass refid="struct_leap_1_1_unity_1_1_query_1_1_query_1_1_query_slice" prot="public">Leap::Unity::Query::Query::QuerySlice</innerclass>
    <innerclass refid="struct_leap_1_1_unity_1_1_query_1_1_query_1_1_validator" prot="private">Leap::Unity::Query::Query::Validator</innerclass>
    <templateparamlist>
      <param>
        <type>T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a1d6f3b0f3256965d752c1b61c565bf9b" prot="private" static="no" mutable="no">
        <type>T []</type>
        <definition>T [] Leap.Unity.Query.Query&lt; T &gt;._array</definition>
        <argsstring></argsstring>
        <name>_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="92" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_query_1_1_query_1ad066b2a07ff5a67273b9779980f30341" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Leap.Unity.Query.Query&lt; T &gt;._count</definition>
        <argsstring></argsstring>
        <name>_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="93" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a4ff5405a262a0a762d092200abe46f33" prot="private" static="no" mutable="no">
        <type>Validator</type>
        <definition>Validator Leap.Unity.Query.Query&lt; T &gt;._validator</definition>
        <argsstring></argsstring>
        <name>_validator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="95" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Unity.Query.Query&lt; T &gt;.Query</definition>
        <argsstring>(T[] array, int count)</argsstring>
        <name>Query</name>
        <param>
          <type>T []</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Constructs a new query given a source array and a count. The query assumes ownership of the array, so you should not use it or store it after the query is constructed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="102" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="102" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a38ad1df9355f871cde35fe9ca7c72da0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Unity.Query.Query&lt; T &gt;.Query</definition>
        <argsstring>(ICollection&lt; T &gt; collection)</argsstring>
        <name>Query</name>
        <param>
          <type>ICollection&lt; T &gt;</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
<para>Constructs a new query of the given collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="123" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="123" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a023addd104eccd2f92b37e67eb84208f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Unity.Query.Query&lt; T &gt;.Query</definition>
        <argsstring>(Query&lt; T &gt; other)</argsstring>
        <name>Query</name>
        <param>
          <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; T &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs a query that is an exact copy of another query. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="134" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="134" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a88411752d9806dc0364de025ac9b53b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; K &gt;</type>
        <definition>Query&lt;K&gt; Leap.Unity.Query.Query&lt; T &gt;.OfType&lt; K &gt;</definition>
        <argsstring>()</argsstring>
        <name>OfType&lt; K &gt;</name>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing only the items of the current <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> that are of a specific type. </para>
        </briefdescription>
        <detaileddescription>
<para>For example (&quot;A&quot;, 1, null, 5.0f, 900, &quot;hello&quot;).<ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" kindref="member">Query()</ref>.OfType&lt;string&gt;() would result in (&quot;A&quot;, &quot;hello&quot;) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="158" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="158" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a907b194ea3d1901191343fa409ca6c42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref>&lt; K &gt;</type>
        <definition>Query&lt;K&gt; Leap.Unity.Query.Query&lt; T &gt;.Cast&lt; K &gt;</definition>
        <argsstring>()</argsstring>
        <name>Cast&lt; K &gt;</name>
        <briefdescription>
<para>Returns a new <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> representing the current query sequence where each element is cast to a new type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="178" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a4c333e8a0bb14c3237fa65d2ad308c5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Unity.Query.Query&lt; T &gt;.Dispose</definition>
        <argsstring>()</argsstring>
        <name>Dispose</name>
        <briefdescription>
<para>Disposes of the resources that this query holds. The <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> cannot be used after this method is called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="188" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="188" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a411e47e60b7ae4d9df1d64f280feb617" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Unity.Query.Query&lt; T &gt;.Deconstruct</definition>
        <argsstring>(out T[] array, out int count)</argsstring>
        <name>Deconstruct</name>
        <param>
          <type>out T []</type>
          <declname>array</declname>
        </param>
        <param>
          <type>out int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Deconstructs this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> into its base elements, the array and the count. The caller assumes ownership of the array and is responsible for managing its lifecycle. The <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> cannot be used after this method is called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="203" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="203" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a945832fdab8203804442a9d043ea55cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1_1_query_slice" kindref="compound">QuerySlice</ref></type>
        <definition>QuerySlice Leap.Unity.Query.Query&lt; T &gt;.Deconstruct</definition>
        <argsstring>()</argsstring>
        <name>Deconstruct</name>
        <briefdescription>
<para>Deconstructs this <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> into a simple <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1_1_query_slice" kindref="compound">QuerySlice</ref> construct. This is simply a utility overload of the regular Deconstruct method. The user is still responsible for managing the memory lifecycle of the returned slice. The <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> cannot be used after this method is called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="220" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="220" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="struct_leap_1_1_unity_1_1_query_1_1_query_1a754dd1572406e8be39111c186daa1b74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_1_1_unity_1_1_query_1_1_query_1_1_enumerator" kindref="compound">Enumerator</ref></type>
        <definition>Enumerator Leap.Unity.Query.Query&lt; T &gt;.GetEnumerator</definition>
        <argsstring>()</argsstring>
        <name>GetEnumerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="228" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="228" bodyend="236"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> object is a type of immutable ordered collection of elements that can be used to perform useful queries. These queries are very similar to LINQ style queries, providing useful methods such as Where, Select, Concat, etc.... </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> struct and its interfaces use a pooling strategy backed by ArrayPool to incur an amortized cost of zero GC allocations.</para>
<para>A <ref refid="struct_leap_1_1_unity_1_1_query_1_1_query" kindref="compound">Query</ref> struct is immutable, and so cannot be modified once it has been created. You can use a query in few ways:<itemizedlist>
<listitem><para>The simplest way is to call an operator method such as Where or Select. These methods CONSUME the query to produce a new query. Trying to use the original query after it has been consumed will cause a runtime error.</para>
</listitem><listitem><para>The next way is to call a collapsing operator, which will consume the query and produce a non-query value or other side-effect. <ref refid="namespace_leap_1_1_unity_1_1_examples" kindref="compound">Examples</ref> of collapsing operators are First, Last, or ElementAt.</para>
</listitem><listitem><para>The last way to use a query is to Deconstruct it, by calling a Deconstruct method to destroy the query and get access to its underlying data. You will be responsible for cleaning up or disposing the data you get. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" line="91" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/Query/Query.cs" bodystart="91" bodyend="334"/>
    <listofallmembers>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a1d6f3b0f3256965d752c1b61c565bf9b" prot="private" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>_array</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1ad066b2a07ff5a67273b9779980f30341" prot="private" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>_count</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a4ff5405a262a0a762d092200abe46f33" prot="private" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>_validator</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a907b194ea3d1901191343fa409ca6c42" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>Cast&lt; K &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a411e47e60b7ae4d9df1d64f280feb617" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>Deconstruct</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a945832fdab8203804442a9d043ea55cf" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>Deconstruct</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a4c333e8a0bb14c3237fa65d2ad308c5a" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>Dispose</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a754dd1572406e8be39111c186daa1b74" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>GetEnumerator</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a88411752d9806dc0364de025ac9b53b9" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>OfType&lt; K &gt;</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a045e15022385ac33bf7ea2448de59f93" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>Query</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a38ad1df9355f871cde35fe9ca7c72da0" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>Query</name></member>
      <member refid="struct_leap_1_1_unity_1_1_query_1_1_query_1a023addd104eccd2f92b37e67eb84208f" prot="public" virt="non-virtual"><scope>Leap::Unity::Query::Query</scope><name>Query</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
