<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_object_equality_8cs" kind="file" language="C#">
    <compoundname>ObjectEquality.cs</compoundname>
    <innerclass refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality" prot="public">Leap::LeapCSharp::Tests::ObjectEquality</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_leap_c_sharp">Leap::LeapCSharp</innernamespace>
    <innernamespace refid="namespace_leap_1_1_leap_c_sharp_1_1_tests">Leap::LeapCSharp::Tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_leap_c_sharp_1_1_tests" kindref="compound">Leap.LeapCSharp.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>[TestFixture()]</highlight></codeline>
<codeline lineno="14" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality" kindref="compound">ObjectEquality</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="16" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1a08e1f1866ddcb0ce5fea14cbc17a43d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1a08e1f1866ddcb0ce5fea14cbc17a43d0" kindref="member">Vector_ints</ref>()<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>thisVector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_leap" kindref="compound">Leap</ref>.<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>thatVector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_leap" kindref="compound">Leap</ref>.<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(thisVector.<ref refid="struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de" kindref="member">Equals</ref>(thatVector),<sp/></highlight><highlight class="stringliteral">&quot;this.Equals(that)<sp/>Vector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Assert.True<sp/>(thisVector<sp/>==<sp/>thatVector,<sp/>&quot;this<sp/>==<sp/>that<sp/>Vector&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="24" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1afbc37ef469be74e009c9d841453c7418" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1afbc37ef469be74e009c9d841453c7418" kindref="member">Vector_floats</ref>()<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>thisVector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_leap" kindref="compound">Leap</ref>.<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1.111111111111111f,<sp/>2.222222222222222f,<sp/>3.333333333333333f);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>thatVector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespace_leap" kindref="compound">Leap</ref>.<ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(1.111111111111111f,<sp/>2.222222222222222f,<sp/>3.333333333333333f);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(thisVector.<ref refid="struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de" kindref="member">Equals</ref>(thatVector),<sp/></highlight><highlight class="stringliteral">&quot;this.Equals(that)<sp/>Vector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Assert.True<sp/>(thisVector<sp/>==<sp/>thatVector,<sp/>&quot;this<sp/>==<sp/>that<sp/>Vector&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test()]</highlight></codeline>
<codeline lineno="32" refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1a171da70f23f5ceb3a8ec713bf161998d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_leap_c_sharp_1_1_tests_1_1_object_equality_1a171da70f23f5ceb3a8ec713bf161998d" kindref="member">Vector_more_floats</ref>()<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>thisVector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(0.199821f,<sp/>-0.845375f,<sp/>0.495392f);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref><sp/>thatVector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_leap_1_1_vector" kindref="compound">Vector</ref>(0.199821f,<sp/>-0.845375f,<sp/>0.495392f);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.True(thisVector.<ref refid="struct_leap_1_1_vector_1aafba24baa2a58a85c0b07ba28b4a56de" kindref="member">Equals</ref>(thatVector),<sp/></highlight><highlight class="stringliteral">&quot;this.Equals(that)<sp/>Vector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Assert.True<sp/>(thisVector<sp/>==<sp/>thatVector,<sp/>&quot;this<sp/>==<sp/>that<sp/>Vector&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Editor/Tests/ObjectEquality.cs"/>
  </compounddef>
</doxygen>
