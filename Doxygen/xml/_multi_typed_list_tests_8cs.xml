<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_multi_typed_list_tests_8cs" kind="file" language="C#">
    <compoundname>MultiTypedListTests.cs</compoundname>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests" prot="public">Leap::Unity::Tests::MultiTypedListTests</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" prot="public">Leap::Unity::Tests::MultiTypedListTests::BaseClass</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" prot="public">Leap::Unity::Tests::MultiTypedListTests::A</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b" prot="public">Leap::Unity::Tests::MultiTypedListTests::B</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c" prot="public">Leap::Unity::Tests::MultiTypedListTests::C</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d" prot="public">Leap::Unity::Tests::MultiTypedListTests::D</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e" prot="public">Leap::Unity::Tests::MultiTypedListTests::E</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f" prot="public">Leap::Unity::Tests::MultiTypedListTests::F</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g" prot="public">Leap::Unity::Tests::MultiTypedListTests::G</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h" prot="public">Leap::Unity::Tests::MultiTypedListTests::H</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_invalid_class" prot="public">Leap::Unity::Tests::MultiTypedListTests::InvalidClass</innerclass>
    <innerclass refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_list_class" prot="private">Leap::Unity::Tests::MultiTypedListTests::ListClass</innerclass>
    <innernamespace refid="namespace_leap">Leap</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity">Leap::Unity</innernamespace>
    <innernamespace refid="namespace_leap_1_1_unity_1_1_tests">Leap::Unity::Tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Leap<sp/>Motion,<sp/>Inc.<sp/>2011-2018.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Leap<sp/>Motion<sp/>proprietary<sp/>and<sp/>confidential.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Use<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Leap<sp/>Motion<sp/>SDK<sp/>Agreement<sp/>available<sp/>at<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>https://developer.leapmotion.com/sdk_agreement,<sp/>or<sp/>another<sp/>agreement<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>between<sp/>Leap<sp/>Motion<sp/>and<sp/>you,<sp/>your<sp/>company<sp/>or<sp/>other<sp/>organization.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NUnit.Framework;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_leap_1_1_unity_1_1_tests" kindref="compound">Leap.Unity.Tests</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests" kindref="compound">MultiTypedListTests</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="18" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" kindref="compound">A</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="19" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b" kindref="compound">B</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="20" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c" kindref="compound">C</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="21" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d" kindref="compound">D</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="22" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e" kindref="compound">E</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="23" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f" kindref="compound">F</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="24" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g" kindref="compound">G</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="25" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h" kindref="compound">H</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_invalid_class" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_invalid_class" kindref="compound">InvalidClass</ref><sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_base_class" kindref="compound">BaseClass</ref><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ListClass<sp/>:<sp/><ref refid="class_leap_1_1_unity_1_1_multi_typed_list" kindref="compound">MultiTypedList</ref>&lt;BaseClass,<sp/>A,<sp/>B,<sp/>C,<sp/>D,<sp/>E,<sp/>F,<sp/>G,<sp/>H&gt;<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>ListClass<sp/>_list;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>[SetUp]</highlight></codeline>
<codeline lineno="34" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a27a72c13752661f9add82375dcc06830" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a27a72c13752661f9add82375dcc06830" kindref="member">Setup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ListClass();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>[TearDown]</highlight></codeline>
<codeline lineno="39" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1abb37d7aef9813348c4dc7a8628570e44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1abb37d7aef9813348c4dc7a8628570e44" kindref="member">Teardown</ref>()<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="44" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1af604b90f1b0aa0ad1a091604f65a197c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1af604b90f1b0aa0ad1a091604f65a197c" kindref="member">InsertTests</ref>()<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addOneOfEach();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>countBefore<sp/>=<sp/>_list.Count;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.Insert(0,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" kindref="compound">A</ref>());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>countAfter<sp/>=<sp/>_list.Count;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(countAfter,<sp/>Is.EqualTo(countBefore<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[0],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" kindref="compound">A</ref>&gt;());</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[1],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" kindref="compound">A</ref>&gt;());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[2],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b" kindref="compound">B</ref>&gt;());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="61" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a57f2fc72968e11d119b250d4294c836f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a57f2fc72968e11d119b250d4294c836f" kindref="member">EnumerableTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addOneOfEach();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;BaseClass&gt;<sp/>objs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;BaseClass&gt;();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>obj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_list)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objs.Add(obj);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs[0],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" kindref="compound">A</ref>&gt;());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs[1],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b" kindref="compound">B</ref>&gt;());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs[2],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c" kindref="compound">C</ref>&gt;());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs[3],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d" kindref="compound">D</ref>&gt;());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs[4],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e" kindref="compound">E</ref>&gt;());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs[5],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f" kindref="compound">F</ref>&gt;());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs[6],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g" kindref="compound">G</ref>&gt;());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(objs[7],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h" kindref="compound">H</ref>&gt;());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="80" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a127d0c279c27fac41ad8e95811f0ba84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a127d0c279c27fac41ad8e95811f0ba84" kindref="member">RemoveAtTest1</ref>()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addOneOfEach();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list.Count,<sp/>Is.EqualTo(8));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list.RemoveAt(0);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list.Count,<sp/>Is.EqualTo(0));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="92" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a6c2b2ebcdc9e5b0adf49e28f3896d1fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a6c2b2ebcdc9e5b0adf49e28f3896d1fb" kindref="member">RemoveAtTest2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addOneOfEach();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list.Count,<sp/>Is.EqualTo(8));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>8;<sp/>i--<sp/>!=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list.RemoveAt(i);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list.Count,<sp/>Is.EqualTo(0));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="104" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a7d43113a447580147d5d7ec9550e017f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a7d43113a447580147d5d7ec9550e017f" kindref="member">IndexTest1</ref>()<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addOneOfEach();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[0],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" kindref="compound">A</ref>&gt;());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[1],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b" kindref="compound">B</ref>&gt;());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[2],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c" kindref="compound">C</ref>&gt;());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[3],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d" kindref="compound">D</ref>&gt;());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[4],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e" kindref="compound">E</ref>&gt;());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[5],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f" kindref="compound">F</ref>&gt;());</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[6],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g" kindref="compound">G</ref>&gt;());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[7],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h" kindref="compound">H</ref>&gt;());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="118" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1ac796b65a0af06247f3525947b58f2e4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1ac796b65a0af06247f3525947b58f2e4f" kindref="member">IndexTest2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addOneOfEach();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.RemoveAt(0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.RemoveAt(0);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.RemoveAt(0);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.RemoveAt(0);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[0],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e" kindref="compound">E</ref>&gt;());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[1],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_f" kindref="compound">F</ref>&gt;());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[2],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g" kindref="compound">G</ref>&gt;());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[3],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h" kindref="compound">H</ref>&gt;());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="133" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a5e1c771c9f6a127947ded55b42e4101c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a5e1c771c9f6a127947ded55b42e4101c" kindref="member">AssignTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addOneOfEach();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" kindref="compound">A</ref><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" kindref="compound">A</ref>();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list[5]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[0],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_a" kindref="compound">A</ref>&gt;());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[1],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_b" kindref="compound">B</ref>&gt;());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[2],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_c" kindref="compound">C</ref>&gt;());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[3],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_d" kindref="compound">D</ref>&gt;());</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[4],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_e" kindref="compound">E</ref>&gt;());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[5],<sp/>Is.EqualTo(a));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[6],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_g" kindref="compound">G</ref>&gt;());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(_list[7],<sp/>Is.TypeOf&lt;<ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_h" kindref="compound">H</ref>&gt;());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>[Test]</highlight></codeline>
<codeline lineno="150" refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a7ccf200faac9c14d44c01f7eac410778" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1a7ccf200faac9c14d44c01f7eac410778" kindref="member">AddInvalidObjectTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Assert.That(()<sp/>=&gt;<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_leap_1_1_unity_1_1_tests_1_1_multi_typed_list_tests_1_1_invalid_class" kindref="compound">InvalidClass</ref>());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>Throws.ArgumentException);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addOneOfEach()<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>A());</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>B());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>C());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>D());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>E());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>F());</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>H());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Scripts/DataStructures/Editor/Tests/MultiTypedListTests.cs"/>
  </compounddef>
</doxygen>
