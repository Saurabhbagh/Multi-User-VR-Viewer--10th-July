<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_leap_1_1_controller" kind="class" language="C#" prot="public">
    <compoundname>Leap::Controller</compoundname>
    <basecompoundref refid="interface_leap_1_1_i_controller" prot="public" virt="non-virtual">Leap.IController</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6" prot="public" static="no" strong="yes">
        <type></type>
        <name>PolicyFlag</name>
        <enumvalue id="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6ab59265c49564c97b26e7bcd5010a5f84" prot="public">
          <name>POLICY_DEFAULT</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>The default policy. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6a9fc384525c1401b9857161b983424b2a" prot="public">
          <name>POLICY_BACKGROUND_FRAMES</name>
          <initializer>= (1 &lt;&lt; 0)</initializer>
          <briefdescription>
<para>Receive background frames. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6a641dbeeedb2436f6a066543de846bd31" prot="public">
          <name>POLICY_IMAGES</name>
          <initializer>= (1 &lt;&lt; 1)</initializer>
          <briefdescription>
<para>Allow streaming images. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6abc23e8520336d09d968f5206793d3d8e" prot="public">
          <name>POLICY_OPTIMIZE_HMD</name>
          <initializer>= (1 &lt;&lt; 2)</initializer>
          <briefdescription>
<para>Optimize the tracking for head-mounted device. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6a0c44039d577c70083c82666b332bd71b" prot="public">
          <name>POLICY_ALLOW_PAUSE_RESUME</name>
          <initializer>= (1 &lt;&lt; 3)</initializer>
          <briefdescription>
<para>Allow pausing and unpausing of the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion service. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6a913295f4bfba846c1ee80037a8a2b7be" prot="public">
          <name>POLICY_MAP_POINTS</name>
          <initializer>= (1 &lt;&lt; 7)</initializer>
          <briefdescription>
<para>Allow streaming map point </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The supported controller policies. </para>
        </briefdescription>
        <detaileddescription>
<para>The supported policy flags are:</para>
<para><bold>POLICY_BACKGROUND_FRAMES</bold> <ndash/> requests that your application receives frames when it is not the foreground application for user input.</para>
<para>The background frames policy determines whether an application receives frames of tracking data while in the background. By default, the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion software only sends tracking data to the foreground application. Only applications that need this ability should request the background frames policy. The &quot;Allow Background Apps&quot; checkbox must be enabled in the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion Control Panel or this policy will be denied.</para>
<para><bold>POLICY_OPTIMIZE_HMD</bold> <ndash/> request that the tracking be optimized for head-mounted tracking.</para>
<para>The optimize HMD policy improves tracking in situations where the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion hardware is attached to a head-mounted display. This policy is not granted for devices that cannot be mounted to an HMD, such as <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion controllers embedded in a laptop or keyboard.</para>
<para>Some policies can be denied if the user has disabled the feature on their <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion control panel.</para>
<para><simplesect kind="since"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="690" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="690" bodyend="715"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_leap_1_1_controller_1a17cdb3a6755e43c7dd246b0073e5145e" prot="private" static="no" mutable="no">
        <type><ref refid="class_leap_internal_1_1_connection" kindref="compound">Connection</ref></type>
        <definition>Connection Leap.Controller._connection</definition>
        <argsstring></argsstring>
        <name>_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="41" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_leap_1_1_controller_1a427f485846fc083541ea9484fd4a3558" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Leap.Controller._disposed</definition>
        <argsstring></argsstring>
        <name>_disposed</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="42" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_leap_1_1_controller_1a35ddb8ce941a7a59427d219bbbb0c4ed" prot="private" static="no" mutable="no">
        <type><ref refid="class_leap_1_1_config" kindref="compound">Config</ref></type>
        <definition>Config Leap.Controller._config</definition>
        <argsstring></argsstring>
        <name>_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="43" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_leap_1_1_controller_1af5c91f4eaafe1373f85bebe182425f2f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Leap.Controller._hasInitialized</definition>
        <argsstring></argsstring>
        <name>_hasInitialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="75" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_leap_1_1_controller_1a298c0f6716d9115c907a64e6cf001146" prot="private" static="no" mutable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_leap_event_args" kindref="compound">LeapEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;LeapEventArgs&gt; Leap.Controller._init</definition>
        <argsstring></argsstring>
        <name>_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="76" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_leap_1_1_controller_1a7cd27a07494122e961a68ae6fb91ce2b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Leap.Controller._hasConnected</definition>
        <argsstring></argsstring>
        <name>_hasConnected</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="91" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_leap_1_1_controller_1ae0e2ea991c8b17a34efc48f5af82a53f" prot="private" static="no" mutable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_connection_event_args" kindref="compound">ConnectionEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;ConnectionEventArgs&gt; Leap.Controller._connect</definition>
        <argsstring></argsstring>
        <name>_connect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="92" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_leap_1_1_controller_1afa47e4254ee6d9fa05ba485593b05e4e" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type>SynchronizationContext</type>
        <definition>SynchronizationContext Leap.Controller.EventContext</definition>
        <argsstring></argsstring>
        <name>EventContext</name>
        <briefdescription>
<para>The SynchronizationContext used for dispatching events. </para>
        </briefdescription>
        <detaileddescription>
<para>By default the synchronization context of the thread creating the controller instance is used. You can change the context if desired. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="51" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="51" bodyend="58"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1aeabfa1a25d7aa3724cb786885195e0b2" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_leap_event_args" kindref="compound">LeapEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;LeapEventArgs&gt; Leap.Controller.Init</definition>
        <argsstring></argsstring>
        <name>Init</name>
        <briefdescription>
<para>Dispatched when the connection is initialized (but not necessarily connected). </para>
        </briefdescription>
        <detaileddescription>
<para>Can be dispatched more than once, if connection is restarted. <simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="66" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1abc23a30fb9ef4327ab4c12dc90698f14" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_connection_event_args" kindref="compound">ConnectionEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;ConnectionEventArgs&gt; Leap.Controller.Connect</definition>
        <argsstring></argsstring>
        <name>Connect</name>
        <briefdescription>
<para>Dispatched when the connection to the service is established. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="82" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="82" bodyend="89"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1ac627061e99531a03874428bebc5f1111" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_connection_lost_event_args" kindref="compound">ConnectionLostEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;ConnectionLostEventArgs&gt; Leap.Controller.Disconnect</definition>
        <argsstring></argsstring>
        <name>Disconnect</name>
        <briefdescription>
<para>Dispatched if the connection to the service is lost. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="98" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="98" bodyend="105"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1af401a79284cacb70afa71d0b109143fe" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_frame_event_args" kindref="compound">FrameEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;FrameEventArgs&gt; Leap.Controller.FrameReady</definition>
        <argsstring></argsstring>
        <name>FrameReady</name>
        <briefdescription>
<para>Dispatched when a tracking frame is ready. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="111" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a0713d49768905ceba0ffb63ecc216aa1" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_internal_frame_event_args" kindref="compound">InternalFrameEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;InternalFrameEventArgs&gt; Leap.Controller.InternalFrameReady</definition>
        <argsstring></argsstring>
        <name>InternalFrameReady</name>
        <briefdescription>
<para>Dispatched when an internal tracking frame is ready. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="124" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="124" bodyend="131"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1ac9a2f80c418e12b42b8331c0d5b116b1" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_device_event_args" kindref="compound">DeviceEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;DeviceEventArgs&gt; Leap.Controller.Device</definition>
        <argsstring></argsstring>
        <name>Device</name>
        <briefdescription>
<para>Dispatched when a <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion device is connected. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="137" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="137" bodyend="144"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a1f624439c16ddaf866ac657aa811a622" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_device_event_args" kindref="compound">DeviceEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;DeviceEventArgs&gt; Leap.Controller.DeviceLost</definition>
        <argsstring></argsstring>
        <name>DeviceLost</name>
        <briefdescription>
<para>Dispatched when a <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion device is disconnected. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="150" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="150" bodyend="157"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1aebe559b634e766a31c1f2041714313ca" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_device_failure_event_args" kindref="compound">DeviceFailureEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;DeviceFailureEventArgs&gt; Leap.Controller.DeviceFailure</definition>
        <argsstring></argsstring>
        <name>DeviceFailure</name>
        <briefdescription>
<para>Dispatched when a <ref refid="namespace_leap" kindref="compound">Leap</ref> device fails to initialize. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="163" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="163" bodyend="170"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a40c12ae7c232621b91f9bb40987a33a3" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_log_event_args" kindref="compound">LogEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;LogEventArgs&gt; Leap.Controller.LogMessage</definition>
        <argsstring></argsstring>
        <name>LogMessage</name>
        <briefdescription>
<para>Dispatched when the system generates a loggable event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="176" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a0177e366833918615a05f1be4177c53b" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_policy_event_args" kindref="compound">PolicyEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;PolicyEventArgs&gt; Leap.Controller.PolicyChange</definition>
        <argsstring></argsstring>
        <name>PolicyChange</name>
        <briefdescription>
<para>Dispatched when a policy changes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="189" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="189" bodyend="196"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1aa95b8d42774232245cd10c23d90d0343" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_config_change_event_args" kindref="compound">ConfigChangeEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;ConfigChangeEventArgs&gt; Leap.Controller.ConfigChange</definition>
        <argsstring></argsstring>
        <name>ConfigChange</name>
        <briefdescription>
<para>Dispatched when a configuration setting changes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="202" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="202" bodyend="209"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a3a00d190090f618416c578d8615e4921" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_distortion_event_args" kindref="compound">DistortionEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;DistortionEventArgs&gt; Leap.Controller.DistortionChange</definition>
        <argsstring></argsstring>
        <name>DistortionChange</name>
        <briefdescription>
<para>Dispatched when the image distortion map changes. The distortion map can change when the <ref refid="namespace_leap" kindref="compound">Leap</ref> device switches orientation, or a new device becomes active. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="217" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="217" bodyend="224"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1ac9829d338d232ab7b09e59fadf2d24c5" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_dropped_frame_event_args" kindref="compound">DroppedFrameEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;DroppedFrameEventArgs&gt; Leap.Controller.DroppedFrame</definition>
        <argsstring></argsstring>
        <name>DroppedFrame</name>
        <briefdescription>
<para>Dispatched when the service drops a tracking frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="229" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="229" bodyend="236"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1ad76a140483ce708520eb0e940c345a1f" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_image_event_args" kindref="compound">ImageEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;ImageEventArgs&gt; Leap.Controller.ImageReady</definition>
        <argsstring></argsstring>
        <name>ImageReady</name>
        <briefdescription>
<para>Dispatched when an unrequested image is ready. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="242" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="242" bodyend="249"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a483c1f8ff0a5557ee0a609bfe242f01c" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>Action&lt; <ref refid="struct_leap_1_1_begin_profiling_for_thread_args" kindref="compound">BeginProfilingForThreadArgs</ref> &gt;</type>
        <definition>Action&lt;BeginProfilingForThreadArgs&gt; Leap.Controller.BeginProfilingForThread</definition>
        <argsstring></argsstring>
        <name>BeginProfilingForThread</name>
        <briefdescription>
<para>Dispatched whenever a thread wants to start profiling for a custom thread. The event is always dispatched from the thread itself. </para>
        </briefdescription>
        <detaileddescription>
<para>The event data will contain the name of the thread, as well as an array of all possible profiling blocks that could be entered on that thread.</para>
<para><simplesect kind="since"><para>4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="260" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="260" bodyend="267"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a29354296ef9a6de70e2ce06db251c16b" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>Action&lt; <ref refid="struct_leap_1_1_end_profiling_for_thread_args" kindref="compound">EndProfilingForThreadArgs</ref> &gt;</type>
        <definition>Action&lt;EndProfilingForThreadArgs&gt; Leap.Controller.EndProfilingForThread</definition>
        <argsstring></argsstring>
        <name>EndProfilingForThread</name>
        <briefdescription>
<para>Dispatched whenever a thread is finished profiling. The event is always dispatched from the thread itself. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="275" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="275" bodyend="282"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a6195a732f3ce5a94f41bda37fecca548" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>Action&lt; <ref refid="struct_leap_1_1_begin_profiling_block_args" kindref="compound">BeginProfilingBlockArgs</ref> &gt;</type>
        <definition>Action&lt;BeginProfilingBlockArgs&gt; Leap.Controller.BeginProfilingBlock</definition>
        <argsstring></argsstring>
        <name>BeginProfilingBlock</name>
        <briefdescription>
<para>Dispatched whenever a thread enters a profiling block. The event is always dispatched from the thread itself. </para>
        </briefdescription>
        <detaileddescription>
<para>The event data will contain the name of the profiling block.</para>
<para><simplesect kind="since"><para>4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="292" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="292" bodyend="299"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a47514a57487eb7543323ef7ca8f197e3" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>Action&lt; <ref refid="struct_leap_1_1_end_profiling_block_args" kindref="compound">EndProfilingBlockArgs</ref> &gt;</type>
        <definition>Action&lt;EndProfilingBlockArgs&gt; Leap.Controller.EndProfilingBlock</definition>
        <argsstring></argsstring>
        <name>EndProfilingBlock</name>
        <briefdescription>
<para>Dispatched whenever a thread ends a profiling block. The event is always dispatched from the thread itself. </para>
        </briefdescription>
        <detaileddescription>
<para>The event data will contain the name of the profiling block.</para>
<para><simplesect kind="since"><para>4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="309" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="309" bodyend="316"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a148e5d3bcc1f4e4d3c972d7482f1d1ab" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_point_mapping_change_event_args" kindref="compound">PointMappingChangeEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;PointMappingChangeEventArgs&gt; Leap.Controller.PointMappingChange</definition>
        <argsstring></argsstring>
        <name>PointMappingChange</name>
        <briefdescription>
<para>Dispatched when point mapping change events are generated by the service. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>4.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="322" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="322" bodyend="329"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a8f102727031288a8b1c8f2583c31d161" prot="public" static="no" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>EventHandler&lt; <ref refid="class_leap_1_1_head_pose_event_args" kindref="compound">HeadPoseEventArgs</ref> &gt;</type>
        <definition>EventHandler&lt;HeadPoseEventArgs&gt; Leap.Controller.HeadPoseChange</definition>
        <argsstring></argsstring>
        <name>HeadPoseChange</name>
        <briefdescription>
<para>Dispatched when a new HeadPose is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="334" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="334" bodyend="341"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a8ecf0fd02e617da823b46b5f73b38eb0" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool Leap.Controller.IsServiceConnected</definition>
        <argsstring></argsstring>
        <name>IsServiceConnected</name>
        <briefdescription>
<para>Reports whether your application has a connection to the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion daemon/service. Can be true even if the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion hardware is not available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>1.2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="418" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="418" bodyend="422"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1aac7cccf354ef1a6f1f01222a9b63d8bd" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool Leap.Controller.IsConnected</definition>
        <argsstring></argsstring>
        <name>IsConnected</name>
        <briefdescription>
<para>Reports whether this <ref refid="class_leap_1_1_controller" kindref="compound">Controller</ref> is connected to the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion service and the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion hardware is plugged in. </para>
        </briefdescription>
        <detaileddescription>
<para>When you first create a <ref refid="class_leap_1_1_controller" kindref="compound">Controller</ref> object, isConnected() returns false. After the controller finishes initializing and connects to the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion software and if the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion hardware is plugged in, isConnected() returns true.</para>
<para>You can either handle the onConnect event using a Listener instance or poll the isConnected() function if you need to wait for your application to be connected to the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion software before performing some other operation.</para>
<para><simplesect kind="since"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="612" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="612" bodyend="616"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1a12503273371b21d58952a99b5fc5b0d9" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_leap_1_1_config" kindref="compound">Config</ref></type>
        <definition>Config Leap.Controller.Config</definition>
        <argsstring></argsstring>
        <name>Config</name>
        <briefdescription>
<para>Returns a <ref refid="class_leap_1_1_config" kindref="compound">Config</ref> object, which you can use to query the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion system for configuration information. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="624" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="624" bodyend="630"/>
      </memberdef>
      <memberdef kind="property" id="class_leap_1_1_controller_1aa5e641f54418e5194161ac45dc15c7fb" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="class_leap_1_1_device_list" kindref="compound">DeviceList</ref></type>
        <definition>DeviceList Leap.Controller.Devices</definition>
        <argsstring></argsstring>
        <name>Devices</name>
        <briefdescription>
<para>The list of currently attached and recognized <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion controller devices. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="class_leap_1_1_device" kindref="compound">Device</ref> objects in the list describe information such as the range and tracking volume.</para>
<para>Currently, the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion <ref refid="class_leap_1_1_controller" kindref="compound">Controller</ref> only allows a single active device at a time, however there may be multiple devices physically attached and listed here. Any active device(s) are guaranteed to be listed first, however order is not determined beyond that.</para>
<para><simplesect kind="since"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="644" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="644" bodyend="648"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_leap_1_1_controller_1ad2b8546f002e50164178d1cb7fff4d57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.Dispose</definition>
        <argsstring>()</argsstring>
        <name>Dispose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="343" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a55b80a043ff15459a08b60bf9f85a955" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Controller.Controller</definition>
        <argsstring>()</argsstring>
        <name>Controller</name>
        <briefdescription>
<para>Constructs a <ref refid="class_leap_1_1_controller" kindref="compound">Controller</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>The default constructor uses a connection key of 0.</para>
<para><simplesect kind="since"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="364" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="364" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1aa96fa3ac415fe7564a7a9578041d5fff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Leap.Controller.Controller</definition>
        <argsstring>(int connectionKey)</argsstring>
        <name>Controller</name>
        <param>
          <type>int</type>
          <declname>connectionKey</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="class_leap_1_1_controller" kindref="compound">Controller</ref> object using the specified connection key. </para>
        </briefdescription>
        <detaileddescription>
<para>All controller instances using the same key will use the same connection to the service. In general, an application should not use more than one connection for all its controllers. Each connection keeps its own cache of frames and images.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connectionKey</parametername>
</parameternamelist>
<parameterdescription>
<para>An identifier specifying the connection to use. If a connection with the specified key already exists, that connection is used. Otherwise, a new connection is created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="378" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="378" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a3e1e2694a23c62c79f9592217529e860" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.StartConnection</definition>
        <argsstring>()</argsstring>
        <name>StartConnection</name>
        <briefdescription>
<para>Starts the connection. </para>
        </briefdescription>
        <detaileddescription>
<para>A connection starts automatically when created, but you can use this function to restart the connection after stopping it.</para>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="397" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="397" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a08c17e46012a2774afe1b5901e82ce6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.StopConnection</definition>
        <argsstring>()</argsstring>
        <name>StopConnection</name>
        <briefdescription>
<para>Stops the connection. </para>
        </briefdescription>
        <detaileddescription>
<para>No more frames or other events are received from a stopped connection. You can restart with <ref refid="class_leap_1_1_controller_1a3e1e2694a23c62c79f9592217529e860" kindref="member">StartConnection()</ref>.</para>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="409" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="409" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a7e862547a7ea735203220e43c0e04a85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.SetPolicy</definition>
        <argsstring>(PolicyFlag policy)</argsstring>
        <name>SetPolicy</name>
        <reimplements refid="interface_leap_1_1_i_controller_1a12a90db07fb494e152cc937569ec77f0">SetPolicy</reimplements>
        <param>
          <type><ref refid="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6" kindref="member">PolicyFlag</ref></type>
          <declname>policy</declname>
        </param>
        <briefdescription>
<para>Requests setting a policy. </para>
        </briefdescription>
        <detaileddescription>
<para>A request to change a policy is subject to user approval and a policy can be changed by the user at any time (using the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion settings dialog). The desired policy flags must be set every time an application runs.</para>
<para>Policy changes are completed asynchronously and, because they are subject to user approval or system compatibility checks, may not complete successfully. Call <ref refid="class_leap_1_1_controller_1af0f85f9c36a57143107952afc26ec5d4" kindref="member">Controller.IsPolicySet()</ref> after a suitable interval to test whether the change was accepted. <simplesect kind="since"><para>2.1.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="437" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="437" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a78edc0a692fa7200a07eee4b651012a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.ClearPolicy</definition>
        <argsstring>(PolicyFlag policy)</argsstring>
        <name>ClearPolicy</name>
        <reimplements refid="interface_leap_1_1_i_controller_1a7aaaef3d250d3b9114a5836d5e470bb3">ClearPolicy</reimplements>
        <param>
          <type><ref refid="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6" kindref="member">PolicyFlag</ref></type>
          <declname>policy</declname>
        </param>
        <briefdescription>
<para>Requests clearing a policy. </para>
        </briefdescription>
        <detaileddescription>
<para>Policy changes are completed asynchronously and, because they are subject to user approval or system compatibility checks, may not complete successfully. Call <ref refid="class_leap_1_1_controller_1af0f85f9c36a57143107952afc26ec5d4" kindref="member">Controller.IsPolicySet()</ref> after a suitable interval to test whether the change was accepted. <simplesect kind="since"><para>2.1.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="450" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="450" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1af0f85f9c36a57143107952afc26ec5d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Leap.Controller.IsPolicySet</definition>
        <argsstring>(PolicyFlag policy)</argsstring>
        <name>IsPolicySet</name>
        <reimplements refid="interface_leap_1_1_i_controller_1abdb91a0a5278f41c91cb92e37854c27c">IsPolicySet</reimplements>
        <param>
          <type><ref refid="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6" kindref="member">PolicyFlag</ref></type>
          <declname>policy</declname>
        </param>
        <briefdescription>
<para>Gets the active setting for a specific policy. </para>
        </briefdescription>
        <detaileddescription>
<para>Keep in mind that setting a policy flag is asynchronous, so changes are not effective immediately after calling setPolicyFlag(). In addition, a policy request can be declined by the user. You should always set the policy flags required by your application at startup and check that the policy change request was successful after an appropriate interval.</para>
<para>If the controller object is not connected to the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion software, then the default state for the selected policy is returned.</para>
<para><simplesect kind="since"><para>2.1.6 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="468" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="468" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1ac41dc9c50a3bd2a892cc44af0859ef0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
        <definition>Frame Leap.Controller.Frame</definition>
        <argsstring>(int history=0)</argsstring>
        <name>Frame</name>
        <reimplements refid="interface_leap_1_1_i_controller_1a0f8fe519944cc39eae5cf0d3caeaa33c">Frame</reimplements>
        <param>
          <type>int</type>
          <declname>history</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>In most cases you should get <ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref> objects using the <ref refid="class_leap_1_1_unity_1_1_leap_provider_1a9a5cf65099912311c37f340d3be7e454" kindref="member">LeapProvider.CurrentFrame</ref> property. The data in <ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref> objects taken directly from a <ref refid="class_leap_1_1_controller" kindref="compound">Leap.Controller</ref> instance is still in the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion frame of reference and will not match the hands displayed in a <ref refid="namespace_leap_1_1_unity" kindref="compound">Unity</ref> scene. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a frame of tracking data from the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion software. Use the optional history parameter to specify which frame to retrieve. Call frame() or frame(0) to access the most recent frame; call frame(1) to access the previous frame, and so on. If you use a history value greater than the number of stored frames, then the controller returns an empty frame.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>history</parametername>
</parameternamelist>
<parameterdescription>
<para>The age of the frame to return, counting backwards from the most recent frame (0) into the past and up to the maximum age (59). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The specified frame; or, if no history parameter is specified, the newest frame. If a frame is not available at the specified history position, an invalid <ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref> is returned. </para>
</simplesect>
<simplesect kind="since"><para>1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="491" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="491" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1acab28236972c254e53d3508cb8aaa1cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.Frame</definition>
        <argsstring>(Frame toFill, int history=0)</argsstring>
        <name>Frame</name>
        <param>
          <type><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
          <declname>toFill</declname>
        </param>
        <param>
          <type>int</type>
          <declname>history</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Identical to Frame(history) but instead of constructing a new frame and returning it, the user provides a frame object to be filled with data instead. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="501" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="501" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a3babd82558546e8bc5de90fb80d201ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long Leap.Controller.FrameTimestamp</definition>
        <argsstring>(int history=0)</argsstring>
        <name>FrameTimestamp</name>
        <param>
          <type>int</type>
          <declname>history</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the timestamp of a recent tracking frame. Use the optional history parameter to specify how many frames in the past to retrieve the timestamp. Leave the history parameter as it&apos;s default value to return the timestamp of the most recent tracked frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="514" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="514" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1ac8b0d112dcaa36505057f7787a0dedda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
        <definition>Frame Leap.Controller.GetTransformedFrame</definition>
        <argsstring>(LeapTransform trs, int history=0)</argsstring>
        <name>GetTransformedFrame</name>
        <reimplements refid="interface_leap_1_1_i_controller_1a10970bf31bdf9dfd46f0449a1759151d">GetTransformedFrame</reimplements>
        <param>
          <type><ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>trs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>history</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the frame object with all hands transformed by the specified transform matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="524" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="524" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1aa99cf433f25105c63083d9b6f6ded2e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
        <definition>Frame Leap.Controller.GetInterpolatedFrame</definition>
        <argsstring>(Int64 time)</argsstring>
        <name>GetInterpolatedFrame</name>
        <reimplements refid="interface_leap_1_1_i_controller_1a47758a602643bb7d6db92e024b334009">GetInterpolatedFrame</reimplements>
        <param>
          <type>Int64</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref> at the specified time, interpolating the data between existing frames, if necessary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="531" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="531" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a44c7a28591b2dab45849aa03640b4889" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.GetInterpolatedFrame</definition>
        <argsstring>(Frame toFill, Int64 time)</argsstring>
        <name>GetInterpolatedFrame</name>
        <param>
          <type><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
          <declname>toFill</declname>
        </param>
        <param>
          <type>Int64</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Fills the <ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref> with data taken at the specified time, interpolating the data between existing frames, if necessary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="538" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="538" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a569698b8f3bfbf04216145f4c39d317a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_leap_internal_1_1_l_e_a_p___h_e_a_d___p_o_s_e___e_v_e_n_t" kindref="compound">LEAP_HEAD_POSE_EVENT</ref></type>
        <definition>LEAP_HEAD_POSE_EVENT Leap.Controller.GetInterpolatedHeadPose</definition>
        <argsstring>(Int64 time)</argsstring>
        <name>GetInterpolatedHeadPose</name>
        <param>
          <type>Int64</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Returns the Head pose at the specified time, interpolating the data between existing frames, if necessary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="545" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="545" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a3a249a28db2fc7e0088440d55a290638" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.GetInterpolatedHeadPose</definition>
        <argsstring>(ref LEAP_HEAD_POSE_EVENT toFill, Int64 time)</argsstring>
        <name>GetInterpolatedHeadPose</name>
        <param>
          <type>ref <ref refid="struct_leap_internal_1_1_l_e_a_p___h_e_a_d___p_o_s_e___e_v_e_n_t" kindref="compound">LEAP_HEAD_POSE_EVENT</ref></type>
          <declname>toFill</declname>
        </param>
        <param>
          <type>Int64</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="549" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="549" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a0992fb52095c6948ab685dada1abfa2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.TelemetryProfiling</definition>
        <argsstring>(ref LEAP_TELEMETRY_DATA telemetryData)</argsstring>
        <name>TelemetryProfiling</name>
        <param>
          <type>ref <ref refid="struct_leap_internal_1_1_l_e_a_p___t_e_l_e_m_e_t_r_y___d_a_t_a" kindref="compound">LEAP_TELEMETRY_DATA</ref></type>
          <declname>telemetryData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="553" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="553" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a30f5d6dc2dfdce1cb56bcd8de049c38e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>UInt64</type>
        <definition>UInt64 Leap.Controller.TelemetryGetNow</definition>
        <argsstring>()</argsstring>
        <name>TelemetryGetNow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="557" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="557" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a513b19658a9928fbcb338eda0dc49a13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.GetPointMapping</definition>
        <argsstring>(ref PointMapping pointMapping)</argsstring>
        <name>GetPointMapping</name>
        <param>
          <type>ref <ref refid="struct_leap_1_1_point_mapping" kindref="compound">PointMapping</ref></type>
          <declname>pointMapping</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="561" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="561" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a10fe0670c31aa9c8193cde4abd57fcd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.GetInterpolatedLeftRightTransform</definition>
        <argsstring>(Int64 time, Int64 sourceTime, int leftId, int rightId, out LeapTransform leftTransform, out LeapTransform rightTransform)</argsstring>
        <name>GetInterpolatedLeftRightTransform</name>
        <param>
          <type>Int64</type>
          <declname>time</declname>
        </param>
        <param>
          <type>Int64</type>
          <declname>sourceTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>leftId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rightId</declname>
        </param>
        <param>
          <type>out <ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>leftTransform</declname>
        </param>
        <param>
          <type>out <ref refid="struct_leap_1_1_leap_transform" kindref="compound">LeapTransform</ref></type>
          <declname>rightTransform</declname>
        </param>
        <briefdescription>
<para>This is a special variant of GetInterpolatedFrameFromTime, for use with special features that only require the position and orientation of the palm positions, and do not care about pose data or any other data. </para>
        </briefdescription>
        <detaileddescription>
<para>You must specify the id of the hand that you wish to get a transform for. If you specify an id that is not present in the interpolated frame, the output transform will be the identity transform. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="574" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="574" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1ae025d7fd3e26a385907af50732d5cf6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Leap.Controller.GetInterpolatedFrameFromTime</definition>
        <argsstring>(Frame toFill, Int64 time, Int64 sourceTime)</argsstring>
        <name>GetInterpolatedFrameFromTime</name>
        <param>
          <type><ref refid="class_leap_1_1_frame" kindref="compound">Frame</ref></type>
          <declname>toFill</declname>
        </param>
        <param>
          <type>Int64</type>
          <declname>time</declname>
        </param>
        <param>
          <type>Int64</type>
          <declname>sourceTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="583" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="583" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a57650944fa868adcfe4cea8608af5a03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long Leap.Controller.Now</definition>
        <argsstring>()</argsstring>
        <name>Now</name>
        <reimplements refid="interface_leap_1_1_i_controller_1a965ef8281ece6db686682378a71ce38c">Now</reimplements>
        <briefdescription>
<para>Returns a timestamp value as close as possible to the current time. Values are in microseconds, as with all the other timestamp values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>2.2.7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="593" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="593" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1ab73815d54d49bf570371fe1ec39fe770" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_leap_1_1_failed_device_list" kindref="compound">FailedDeviceList</ref></type>
        <definition>FailedDeviceList Leap.Controller.FailedDevices</definition>
        <argsstring>()</argsstring>
        <name>FailedDevices</name>
        <briefdescription>
<para>A list of any <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion hardware devices that are physically connected to the client computer, but are not functioning correctly. The list contains <ref refid="class_leap_1_1_failed_device" kindref="compound">FailedDevice</ref> objects containing the pnpID and the reason for failure. No other device information is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="658" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="658" bodyend="660"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_leap_1_1_controller_1a491436d5722a11b55596f2f14434098b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Leap.Controller.Dispose</definition>
        <argsstring>(bool disposing)</argsstring>
        <name>Dispose</name>
        <param>
          <type>bool</type>
          <declname>disposing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="349" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="349" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a0e0ce4c3c7526305c2a8c79c7f5cd1a7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Leap.Controller.OnInit</definition>
        <argsstring>(object sender, LeapEventArgs eventArgs)</argsstring>
        <name>OnInit</name>
        <param>
          <type>object</type>
          <declname>sender</declname>
        </param>
        <param>
          <type><ref refid="class_leap_1_1_leap_event_args" kindref="compound">LeapEventArgs</ref></type>
          <declname>eventArgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="717" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="717" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1afb73429c5375282477149dfbb9cc698f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Leap.Controller.OnConnect</definition>
        <argsstring>(object sender, ConnectionEventArgs eventArgs)</argsstring>
        <name>OnConnect</name>
        <param>
          <type>object</type>
          <declname>sender</declname>
        </param>
        <param>
          <type><ref refid="class_leap_1_1_connection_event_args" kindref="compound">ConnectionEventArgs</ref></type>
          <declname>eventArgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="721" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="721" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="class_leap_1_1_controller_1a06fff0c5313c992da0b84714f561acff" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Leap.Controller.OnDisconnect</definition>
        <argsstring>(object sender, ConnectionLostEventArgs eventArgs)</argsstring>
        <name>OnDisconnect</name>
        <param>
          <type>object</type>
          <declname>sender</declname>
        </param>
        <param>
          <type><ref refid="class_leap_1_1_connection_lost_event_args" kindref="compound">ConnectionLostEventArgs</ref></type>
          <declname>eventArgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="725" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="725" bodyend="728"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="class_leap_1_1_controller" kindref="compound">Controller</ref> class is your main interface to the <ref refid="namespace_leap" kindref="compound">Leap</ref> Motion <ref refid="class_leap_1_1_controller" kindref="compound">Controller</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Create an instance of this <ref refid="class_leap_1_1_controller" kindref="compound">Controller</ref> class to access frames of tracking data and configuration information.Frame data can be polled at any time using the <ref refid="class_leap_1_1_controller_1ac41dc9c50a3bd2a892cc44af0859ef0d" kindref="member">Controller.Frame()</ref> function.Call frame() or frame(0) to get the most recent frame.Set the history parameter to a positive integer to access previous frames.A controller stores up to 60 frames in its frame history.</para>
<para>Polling is an appropriate strategy for applications which already have an intrinsic update loop, such as a game. You can also subscribe to the FrameReady event to get tracking frames through an event delegate.</para>
<para>If the current thread implements a SynchronizationContext that contains a message loop, events are posted to that threads message loop. Otherwise, events are called on an independent thread and applications must perform any needed synchronization or marshalling of data between threads. Note that Unity3D does not create an appropriate SynchronizationContext object. Typically, event handlers cannot access any <ref refid="namespace_leap_1_1_unity" kindref="compound">Unity</ref> objects.</para>
<para><simplesect kind="since"><para>1.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="713">
        <label>IDisposable</label>
      </node>
      <node id="712">
        <label>IController</label>
        <link refid="interface_leap_1_1_i_controller"/>
        <childnode refid="713" relation="public-inheritance">
        </childnode>
      </node>
      <node id="711">
        <label>Leap.Controller</label>
        <link refid="class_leap_1_1_controller"/>
        <childnode refid="712" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="716">
        <label>IDisposable</label>
      </node>
      <node id="715">
        <label>IController</label>
        <link refid="interface_leap_1_1_i_controller"/>
        <childnode refid="716" relation="public-inheritance">
        </childnode>
      </node>
      <node id="714">
        <label>Leap.Controller</label>
        <link refid="class_leap_1_1_controller"/>
        <childnode refid="715" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" line="40" column="1" bodyfile="O:/GitHUBMINIPRoject/Assets/LeapMotion/Core/Plugins/LeapCSharp/Controller.cs" bodystart="39" bodyend="729"/>
    <listofallmembers>
      <member refid="class_leap_1_1_controller_1a35ddb8ce941a7a59427d219bbbb0c4ed" prot="private" virt="non-virtual"><scope>Leap::Controller</scope><name>_config</name></member>
      <member refid="class_leap_1_1_controller_1ae0e2ea991c8b17a34efc48f5af82a53f" prot="private" virt="non-virtual"><scope>Leap::Controller</scope><name>_connect</name></member>
      <member refid="class_leap_1_1_controller_1a17cdb3a6755e43c7dd246b0073e5145e" prot="private" virt="non-virtual"><scope>Leap::Controller</scope><name>_connection</name></member>
      <member refid="class_leap_1_1_controller_1a427f485846fc083541ea9484fd4a3558" prot="private" virt="non-virtual"><scope>Leap::Controller</scope><name>_disposed</name></member>
      <member refid="class_leap_1_1_controller_1a7cd27a07494122e961a68ae6fb91ce2b" prot="private" virt="non-virtual"><scope>Leap::Controller</scope><name>_hasConnected</name></member>
      <member refid="class_leap_1_1_controller_1af5c91f4eaafe1373f85bebe182425f2f" prot="private" virt="non-virtual"><scope>Leap::Controller</scope><name>_hasInitialized</name></member>
      <member refid="class_leap_1_1_controller_1a298c0f6716d9115c907a64e6cf001146" prot="private" virt="non-virtual"><scope>Leap::Controller</scope><name>_init</name></member>
      <member refid="class_leap_1_1_controller_1a6195a732f3ce5a94f41bda37fecca548" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>BeginProfilingBlock</name></member>
      <member refid="class_leap_1_1_controller_1a483c1f8ff0a5557ee0a609bfe242f01c" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>BeginProfilingForThread</name></member>
      <member refid="class_leap_1_1_controller_1a78edc0a692fa7200a07eee4b651012a4" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>ClearPolicy</name></member>
      <member refid="class_leap_1_1_controller_1a12503273371b21d58952a99b5fc5b0d9" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Config</name></member>
      <member refid="class_leap_1_1_controller_1aa95b8d42774232245cd10c23d90d0343" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>ConfigChange</name></member>
      <member refid="class_leap_1_1_controller_1abc23a30fb9ef4327ab4c12dc90698f14" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Connect</name></member>
      <member refid="class_leap_1_1_controller_1a55b80a043ff15459a08b60bf9f85a955" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Controller</name></member>
      <member refid="class_leap_1_1_controller_1aa96fa3ac415fe7564a7a9578041d5fff" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Controller</name></member>
      <member refid="class_leap_1_1_controller_1ac9a2f80c418e12b42b8331c0d5b116b1" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Device</name></member>
      <member refid="class_leap_1_1_controller_1aebe559b634e766a31c1f2041714313ca" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>DeviceFailure</name></member>
      <member refid="class_leap_1_1_controller_1a1f624439c16ddaf866ac657aa811a622" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>DeviceLost</name></member>
      <member refid="class_leap_1_1_controller_1aa5e641f54418e5194161ac45dc15c7fb" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Devices</name></member>
      <member refid="class_leap_1_1_controller_1ac627061e99531a03874428bebc5f1111" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Disconnect</name></member>
      <member refid="class_leap_1_1_controller_1ad2b8546f002e50164178d1cb7fff4d57" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Dispose</name></member>
      <member refid="class_leap_1_1_controller_1a491436d5722a11b55596f2f14434098b" prot="protected" virt="virtual"><scope>Leap::Controller</scope><name>Dispose</name></member>
      <member refid="class_leap_1_1_controller_1a3a00d190090f618416c578d8615e4921" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>DistortionChange</name></member>
      <member refid="class_leap_1_1_controller_1ac9829d338d232ab7b09e59fadf2d24c5" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>DroppedFrame</name></member>
      <member refid="class_leap_1_1_controller_1a47514a57487eb7543323ef7ca8f197e3" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>EndProfilingBlock</name></member>
      <member refid="class_leap_1_1_controller_1a29354296ef9a6de70e2ce06db251c16b" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>EndProfilingForThread</name></member>
      <member refid="class_leap_1_1_controller_1afa47e4254ee6d9fa05ba485593b05e4e" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>EventContext</name></member>
      <member refid="class_leap_1_1_controller_1ab73815d54d49bf570371fe1ec39fe770" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>FailedDevices</name></member>
      <member refid="class_leap_1_1_controller_1ac41dc9c50a3bd2a892cc44af0859ef0d" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Frame</name></member>
      <member refid="class_leap_1_1_controller_1acab28236972c254e53d3508cb8aaa1cd" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Frame</name></member>
      <member refid="class_leap_1_1_controller_1af401a79284cacb70afa71d0b109143fe" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>FrameReady</name></member>
      <member refid="class_leap_1_1_controller_1a3babd82558546e8bc5de90fb80d201ec" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>FrameTimestamp</name></member>
      <member refid="class_leap_1_1_controller_1aa99cf433f25105c63083d9b6f6ded2e9" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>GetInterpolatedFrame</name></member>
      <member refid="class_leap_1_1_controller_1a44c7a28591b2dab45849aa03640b4889" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>GetInterpolatedFrame</name></member>
      <member refid="class_leap_1_1_controller_1ae025d7fd3e26a385907af50732d5cf6f" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>GetInterpolatedFrameFromTime</name></member>
      <member refid="class_leap_1_1_controller_1a569698b8f3bfbf04216145f4c39d317a" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>GetInterpolatedHeadPose</name></member>
      <member refid="class_leap_1_1_controller_1a3a249a28db2fc7e0088440d55a290638" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>GetInterpolatedHeadPose</name></member>
      <member refid="class_leap_1_1_controller_1a10fe0670c31aa9c8193cde4abd57fcd7" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>GetInterpolatedLeftRightTransform</name></member>
      <member refid="class_leap_1_1_controller_1a513b19658a9928fbcb338eda0dc49a13" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>GetPointMapping</name></member>
      <member refid="class_leap_1_1_controller_1ac8b0d112dcaa36505057f7787a0dedda" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>GetTransformedFrame</name></member>
      <member refid="class_leap_1_1_controller_1a8f102727031288a8b1c8f2583c31d161" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>HeadPoseChange</name></member>
      <member refid="class_leap_1_1_controller_1ad76a140483ce708520eb0e940c345a1f" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>ImageReady</name></member>
      <member refid="class_leap_1_1_controller_1aeabfa1a25d7aa3724cb786885195e0b2" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Init</name></member>
      <member refid="class_leap_1_1_controller_1a0713d49768905ceba0ffb63ecc216aa1" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>InternalFrameReady</name></member>
      <member refid="class_leap_1_1_controller_1aac7cccf354ef1a6f1f01222a9b63d8bd" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>IsConnected</name></member>
      <member refid="class_leap_1_1_controller_1af0f85f9c36a57143107952afc26ec5d4" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>IsPolicySet</name></member>
      <member refid="class_leap_1_1_controller_1a8ecf0fd02e617da823b46b5f73b38eb0" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>IsServiceConnected</name></member>
      <member refid="class_leap_1_1_controller_1a40c12ae7c232621b91f9bb40987a33a3" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>LogMessage</name></member>
      <member refid="class_leap_1_1_controller_1a57650944fa868adcfe4cea8608af5a03" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>Now</name></member>
      <member refid="class_leap_1_1_controller_1afb73429c5375282477149dfbb9cc698f" prot="protected" virt="virtual"><scope>Leap::Controller</scope><name>OnConnect</name></member>
      <member refid="class_leap_1_1_controller_1a06fff0c5313c992da0b84714f561acff" prot="protected" virt="virtual"><scope>Leap::Controller</scope><name>OnDisconnect</name></member>
      <member refid="class_leap_1_1_controller_1a0e0ce4c3c7526305c2a8c79c7f5cd1a7" prot="protected" virt="virtual"><scope>Leap::Controller</scope><name>OnInit</name></member>
      <member refid="class_leap_1_1_controller_1a148e5d3bcc1f4e4d3c972d7482f1d1ab" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>PointMappingChange</name></member>
      <member refid="class_leap_1_1_controller_1a0177e366833918615a05f1be4177c53b" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>PolicyChange</name></member>
      <member refid="class_leap_1_1_controller_1a0bdb49fa94aa2da8b098c1ac296528d6" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>PolicyFlag</name></member>
      <member refid="class_leap_1_1_controller_1a7e862547a7ea735203220e43c0e04a85" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>SetPolicy</name></member>
      <member refid="class_leap_1_1_controller_1a3e1e2694a23c62c79f9592217529e860" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>StartConnection</name></member>
      <member refid="class_leap_1_1_controller_1a08c17e46012a2774afe1b5901e82ce6a" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>StopConnection</name></member>
      <member refid="class_leap_1_1_controller_1a30f5d6dc2dfdce1cb56bcd8de049c38e" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>TelemetryGetNow</name></member>
      <member refid="class_leap_1_1_controller_1a0992fb52095c6948ab685dada1abfa2d" prot="public" virt="non-virtual"><scope>Leap::Controller</scope><name>TelemetryProfiling</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
