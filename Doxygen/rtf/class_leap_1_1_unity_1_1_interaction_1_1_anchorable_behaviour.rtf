{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Leap.Unity.Interaction.AnchorableBehaviour Class Reference\par \pard\plain 
{\tc\tcl2 \v Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour}
{\bkmkstart AAAAAAAESB}
{\bkmkend AAAAAAAESB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
AnchorableBehaviours mix well with InteractionBehaviours you'd like to be able to pick up and place in specific locations, specified by other GameObjects with an {\b Anchor} component. }}\par
Inheritance diagram for Leap.Unity.Interaction.AnchorableBehaviour:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_leap_1_1_unity_1_1_interaction_1_1_anchorable_behaviour.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b EventType} \{ {\b EventType.OnAttachedToAnchor} = 100, 
{\b EventType.OnLockedToAnchor} = 105, 
{\b EventType.OnDetachedFromAnchor} = 110, 
{\b EventType.WhileAttachedToAnchor} = 120, 
{\b EventType.WhileLockedToAnchor} = 125, 
{\b EventType.OnPostTryAnchorOnGraspEnd} = 130
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Detach} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Detaches this Anchorable object from its anchor. The anchor reference remains unchanged. Call {\b TryAttach()} to re-attach to this object's assigned anchor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b IsValidAnchor} ({\b Anchor} {\b anchor})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns whether the argument anchor is an acceptable anchor for this anchorable object; that is, whether the argument {\b Anchor} is within this behaviour's {\b AnchorGroup} if it has one, or if this behaviour has no {\b AnchorGroup}, returns true. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b IsWithinRange} ({\b Anchor} {\b anchor})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns whether the specified anchor is within attachment range of this Anchorable object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Anchor} {\b FindPreferredAnchor} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Attempts to find and return the best anchor for this anchorable object to attach to based on its current configuration. If useTrajectory is enabled, the object will consider anchor proximity as well as its own trajectory towards a particular anchor, and may return null if the object is moving away from all of its possible anchors. Otherwise, the object will simply return the nearest valid anchor, or null if there is no valid anchor nearby. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
List< {\b Anchor} > {\b GetNearbyValidAnchors} (bool requireAnchorHasSpace=true, bool requireAnchorActiveAndEnabled=true)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns all anchors within the max anchor range of this anchorable object. If this anchorable object has its anchorGroup property set, only anchors within that {\b AnchorGroup} will be returned. By default, this method will only return anchors that have space for an object to attach to it. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Anchor} {\b GetNearestValidAnchor} (bool requireWithinRange=true, bool requireAnchorHasSpace=true, bool requireAnchorActiveAndEnabled=true)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the nearest valid anchor to this Anchorable object. If this anchorable object has its anchorGroup property set, all anchors within that {\b AnchorGroup} are valid to be this object's anchor. If there is no valid anchor within range, returns null. By default, this method will only return anchors that are within the max anchor range of this object and that have space for an object to attach to it. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b TryAttach} (bool ignoreRange=false)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Attempts to attach to this Anchorable object's currently specified anchor. The attempt may fail if this anchor is out of range. Optionally, the range requirement can be ignored. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b TryAttachToNearestAnchor} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Attempts to find and attach this anchorable object to the nearest valid anchor, or the most optimal nearby anchor based on proximity and the object's trajectory if useTrajectory is enabled. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static float {\b GetAnchorScore} (Vector3 anchObjPos, Vector3 anchObjVel, Vector3 anchorPos, float maxDistance, float nonDirectedMaxDistance, float minAngleProduct, float alwaysAttachDistance=0f)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculates and returns a score from 0 (non-valid anchor) to 1 (ideal anchor) based on the argument configuration, using an anchorable object's position and velocity, an anchor position, and distance/angle settings. A score of zero indicates an invalid anchor no matter what; a non-zero score indicates a possible anchor, with more optimal anchors receiving a score closer to 1. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b maxAnchorRange} = 0.3F\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b useTrajectory} = true\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b lockToAnchor} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b lockWhenAttached} = true\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b matchAnchorMotionWhileAttaching} = true\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b anchorLerpCoeffPerSec} = 20F\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b anchorRotation} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b InteractionBehaviour} {\b interactionBehaviour}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b detachWhenGrasped} = true\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isAttractedByHand} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b maxAttractionReach} = 0.1F\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
AnimationCurve {\b attractionReachByDistance}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Action {\b OnAttachedToAnchor} = () => \{ \}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called when this {\b AnchorableBehaviour} attaches to an {\b Anchor}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Action {\b OnLockedToAnchor} = () => \{ \}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called when this {\b AnchorableBehaviour} locks to an {\b Anchor}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Action {\b OnDetachedFromAnchor} = () => \{ \}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called when this {\b AnchorableBehaviour} detaches from an {\b Anchor}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Action {\b WhileAttachedToAnchor} = () => \{ \}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called during every Update() in which this {\b AnchorableBehaviour} is attached to an {\b Anchor}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Action {\b WhileLockedToAnchor} = () => \{ \}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called during every Update() in which this {\b AnchorableBehaviour} is locked to an {\b Anchor}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Action {\b OnPostTryAnchorOnGraspEnd} = () => \{ \}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called just after this anchorable behaviour's {\b InteractionBehaviour} OnObjectGraspEnd for this anchor. This callback will never fire if tryAttachAnchorOnGraspEnd is not enabled. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Properties\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isAttached}{\f2  [get, set]}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Anchor} {\b anchor}{\f2  [get, set]}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AnchorGroup} {\b anchorGroup}{\f2  [get, set]}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b tryAnchorNearestOnGraspEnd}{\f2  [get, set]}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Anchor} {\b preferredAnchor}{\f2  [get]}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the anchor this {\b AnchorableBehaviour} would most prefer to attach to. This value is refreshed every Update() during which the {\b AnchorableBehaviour} has no anchor or is detached from its current anchor. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
AnchorableBehaviours mix well with InteractionBehaviours you'd like to be able to pick up and place in specific locations, specified by other GameObjects with an {\b Anchor} component. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 25 of file AnchorableBehaviour.cs.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Enumeration Documentation\par
\pard\plain 
{\xe \v EventType\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:EventType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b Leap.Unity.Interaction.AnchorableBehaviour.EventType}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAESC}
{\bkmkend AAAAAAAESC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v OnAttachedToAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:OnAttachedToAnchor}
{\qr OnAttachedToAnchor{\bkmkstart AAAAAAAESD}
{\bkmkend AAAAAAAESD}
\cell }{\cell }{\row }
{\xe \v OnLockedToAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:OnLockedToAnchor}
{\qr OnLockedToAnchor{\bkmkstart AAAAAAAESE}
{\bkmkend AAAAAAAESE}
\cell }{\cell }{\row }
{\xe \v OnDetachedFromAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:OnDetachedFromAnchor}
{\qr OnDetachedFromAnchor{\bkmkstart AAAAAAAESF}
{\bkmkend AAAAAAAESF}
\cell }{\cell }{\row }
{\xe \v WhileAttachedToAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:WhileAttachedToAnchor}
{\qr WhileAttachedToAnchor{\bkmkstart AAAAAAAESG}
{\bkmkend AAAAAAAESG}
\cell }{\cell }{\row }
{\xe \v WhileLockedToAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:WhileLockedToAnchor}
{\qr WhileLockedToAnchor{\bkmkstart AAAAAAAESH}
{\bkmkend AAAAAAAESH}
\cell }{\cell }{\row }
{\xe \v OnPostTryAnchorOnGraspEnd\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:OnPostTryAnchorOnGraspEnd}
{\qr OnPostTryAnchorOnGraspEnd{\bkmkstart AAAAAAAESI}
{\bkmkend AAAAAAAESI}
\cell }{\cell }{\row }
}
\par
{
Definition at line 809 of file AnchorableBehaviour.cs.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Detach\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:Detach}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Leap.Unity.Interaction.AnchorableBehaviour.Detach ()}}
\par
{\bkmkstart AAAAAAAESJ}
{\bkmkend AAAAAAAESJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Detaches this Anchorable object from its anchor. The anchor reference remains unchanged. Call {\b TryAttach()} to re-attach to this object's assigned anchor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 384 of file AnchorableBehaviour.cs.}\par
}
{\xe \v FindPreferredAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:FindPreferredAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Anchor} Leap.Unity.Interaction.AnchorableBehaviour.FindPreferredAnchor ()}}
\par
{\bkmkstart AAAAAAAESK}
{\bkmkend AAAAAAAESK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Attempts to find and return the best anchor for this anchorable object to attach to based on its current configuration. If useTrajectory is enabled, the object will consider anchor proximity as well as its own trajectory towards a particular anchor, and may return null if the object is moving away from all of its possible anchors. Otherwise, the object will simply return the nearest valid anchor, or null if there is no valid anchor nearby. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This method is called every Update() automatically by anchorable objects, and its result is stored in preferredAnchor. Only call this if you need a new calculation. \par
}{
Definition at line 420 of file AnchorableBehaviour.cs.}\par
}
{\xe \v GetAnchorScore\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:GetAnchorScore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static float Leap.Unity.Interaction.AnchorableBehaviour.GetAnchorScore (Vector3  {\i anchObjPos}, Vector3  {\i anchObjVel}, Vector3  {\i anchorPos}, float  {\i maxDistance}, float  {\i nonDirectedMaxDistance}, float  {\i minAngleProduct}, float  {\i alwaysAttachDistance} = {\f2 0f}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAESL}
{\bkmkend AAAAAAAESL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculates and returns a score from 0 (non-valid anchor) to 1 (ideal anchor) based on the argument configuration, using an anchorable object's position and velocity, an anchor position, and distance/angle settings. A score of zero indicates an invalid anchor no matter what; a non-zero score indicates a possible anchor, with more optimal anchors receiving a score closer to 1. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 586 of file AnchorableBehaviour.cs.}\par
}
{\xe \v GetNearbyValidAnchors\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:GetNearbyValidAnchors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
List<{\b Anchor}> Leap.Unity.Interaction.AnchorableBehaviour.GetNearbyValidAnchors (bool  {\i requireAnchorHasSpace} = {\f2 true}, bool  {\i requireAnchorActiveAndEnabled} = {\f2 true})}}
\par
{\bkmkstart AAAAAAAESM}
{\bkmkend AAAAAAAESM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns all anchors within the max anchor range of this anchorable object. If this anchorable object has its anchorGroup property set, only anchors within that {\b AnchorGroup} will be returned. By default, this method will only return anchors that have space for an object to attach to it. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Warning: This method checks squared-distance for all anchors in teh scene if this {\b AnchorableBehaviour} has no {\b AnchorGroup}. \par
}{
Definition at line 458 of file AnchorableBehaviour.cs.}\par
}
{\xe \v GetNearestValidAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:GetNearestValidAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Anchor} Leap.Unity.Interaction.AnchorableBehaviour.GetNearestValidAnchor (bool  {\i requireWithinRange} = {\f2 true}, bool  {\i requireAnchorHasSpace} = {\f2 true}, bool  {\i requireAnchorActiveAndEnabled} = {\f2 true})}}
\par
{\bkmkstart AAAAAAAESN}
{\bkmkend AAAAAAAESN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the nearest valid anchor to this Anchorable object. If this anchorable object has its anchorGroup property set, all anchors within that {\b AnchorGroup} are valid to be this object's anchor. If there is no valid anchor within range, returns null. By default, this method will only return anchors that are within the max anchor range of this object and that have space for an object to attach to it. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Warning: This method checks squared-distance for all anchors in the scene if this {\b AnchorableBehaviour} has no {\b AnchorGroup}. \par
}{
Definition at line 492 of file AnchorableBehaviour.cs.}\par
}
{\xe \v IsValidAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:IsValidAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.IsValidAnchor ({\b Anchor}  {\i anchor})}}
\par
{\bkmkstart AAAAAAAESO}
{\bkmkend AAAAAAAESO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns whether the argument anchor is an acceptable anchor for this anchorable object; that is, whether the argument {\b Anchor} is within this behaviour's {\b AnchorGroup} if it has one, or if this behaviour has no {\b AnchorGroup}, returns true. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 393 of file AnchorableBehaviour.cs.}\par
}
{\xe \v IsWithinRange\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:IsWithinRange}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.IsWithinRange ({\b Anchor}  {\i anchor})}}
\par
{\bkmkstart AAAAAAAESP}
{\bkmkend AAAAAAAESP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns whether the specified anchor is within attachment range of this Anchorable object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 405 of file AnchorableBehaviour.cs.}\par
}
{\xe \v TryAttach\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:TryAttach}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.TryAttach (bool  {\i ignoreRange} = {\f2 false})}}
\par
{\bkmkstart AAAAAAAESQ}
{\bkmkend AAAAAAAESQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Attempts to attach to this Anchorable object's currently specified anchor. The attempt may fail if this anchor is out of range. Optionally, the range requirement can be ignored. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 540 of file AnchorableBehaviour.cs.}\par
}
{\xe \v TryAttachToNearestAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:TryAttachToNearestAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.TryAttachToNearestAnchor ()}}
\par
{\bkmkstart AAAAAAAESR}
{\bkmkend AAAAAAAESR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Attempts to find and attach this anchorable object to the nearest valid anchor, or the most optimal nearby anchor based on proximity and the object's trajectory if useTrajectory is enabled. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 555 of file AnchorableBehaviour.cs.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v anchorLerpCoeffPerSec\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:anchorLerpCoeffPerSec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Leap.Unity.Interaction.AnchorableBehaviour.anchorLerpCoeffPerSec = 20F}}
\par
{\bkmkstart AAAAAAAESS}
{\bkmkend AAAAAAAESS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 178 of file AnchorableBehaviour.cs.}\par
}
{\xe \v anchorRotation\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:anchorRotation}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.anchorRotation = false}}
\par
{\bkmkstart AAAAAAAEST}
{\bkmkend AAAAAAAEST}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 184 of file AnchorableBehaviour.cs.}\par
}
{\xe \v attractionReachByDistance\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:attractionReachByDistance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
AnimationCurve Leap.Unity.Interaction.AnchorableBehaviour.attractionReachByDistance}}
\par
{\bkmkstart AAAAAAAESU}
{\bkmkend AAAAAAAESU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 230 of file AnchorableBehaviour.cs.}\par
}
{\xe \v detachWhenGrasped\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:detachWhenGrasped}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.detachWhenGrasped = true}}
\par
{\bkmkstart AAAAAAAESV}
{\bkmkend AAAAAAAESV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 196 of file AnchorableBehaviour.cs.}\par
}
{\xe \v interactionBehaviour\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:interactionBehaviour}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b InteractionBehaviour} Leap.Unity.Interaction.AnchorableBehaviour.interactionBehaviour}}
\par
{\bkmkstart AAAAAAAESW}
{\bkmkend AAAAAAAESW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 190 of file AnchorableBehaviour.cs.}\par
}
{\xe \v isAttractedByHand\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:isAttractedByHand}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.isAttractedByHand = false}}
\par
{\bkmkstart AAAAAAAESX}
{\bkmkend AAAAAAAESX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 222 of file AnchorableBehaviour.cs.}\par
}
{\xe \v lockToAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:lockToAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.lockToAnchor = false}}
\par
{\bkmkstart AAAAAAAESY}
{\bkmkend AAAAAAAESY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 161 of file AnchorableBehaviour.cs.}\par
}
{\xe \v lockWhenAttached\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:lockWhenAttached}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.lockWhenAttached = true}}
\par
{\bkmkstart AAAAAAAESZ}
{\bkmkend AAAAAAAESZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 167 of file AnchorableBehaviour.cs.}\par
}
{\xe \v matchAnchorMotionWhileAttaching\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:matchAnchorMotionWhileAttaching}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.matchAnchorMotionWhileAttaching = true}}
\par
{\bkmkstart AAAAAAAETA}
{\bkmkend AAAAAAAETA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 173 of file AnchorableBehaviour.cs.}\par
}
{\xe \v maxAnchorRange\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:maxAnchorRange}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Leap.Unity.Interaction.AnchorableBehaviour.maxAnchorRange = 0.3F}}
\par
{\bkmkstart AAAAAAAETB}
{\bkmkend AAAAAAAETB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 127 of file AnchorableBehaviour.cs.}\par
}
{\xe \v maxAttractionReach\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:maxAttractionReach}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float Leap.Unity.Interaction.AnchorableBehaviour.maxAttractionReach = 0.1F}}
\par
{\bkmkstart AAAAAAAETC}
{\bkmkend AAAAAAAETC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 226 of file AnchorableBehaviour.cs.}\par
}
{\xe \v OnAttachedToAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:OnAttachedToAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Action Leap.Unity.Interaction.AnchorableBehaviour.OnAttachedToAnchor = () => \{ \}}}
\par
{\bkmkstart AAAAAAAETD}
{\bkmkend AAAAAAAETD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called when this {\b AnchorableBehaviour} attaches to an {\b Anchor}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 245 of file AnchorableBehaviour.cs.}\par
}
{\xe \v OnDetachedFromAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:OnDetachedFromAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Action Leap.Unity.Interaction.AnchorableBehaviour.OnDetachedFromAnchor = () => \{ \}}}
\par
{\bkmkstart AAAAAAAETE}
{\bkmkend AAAAAAAETE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called when this {\b AnchorableBehaviour} detaches from an {\b Anchor}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 255 of file AnchorableBehaviour.cs.}\par
}
{\xe \v OnLockedToAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:OnLockedToAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Action Leap.Unity.Interaction.AnchorableBehaviour.OnLockedToAnchor = () => \{ \}}}
\par
{\bkmkstart AAAAAAAETF}
{\bkmkend AAAAAAAETF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called when this {\b AnchorableBehaviour} locks to an {\b Anchor}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 250 of file AnchorableBehaviour.cs.}\par
}
{\xe \v OnPostTryAnchorOnGraspEnd\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:OnPostTryAnchorOnGraspEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Action Leap.Unity.Interaction.AnchorableBehaviour.OnPostTryAnchorOnGraspEnd = () => \{ \}}}
\par
{\bkmkstart AAAAAAAETG}
{\bkmkend AAAAAAAETG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called just after this anchorable behaviour's {\b InteractionBehaviour} OnObjectGraspEnd for this anchor. This callback will never fire if tryAttachAnchorOnGraspEnd is not enabled. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If tryAttachAnchorOnGraspEnd is enabled, the anchor will be attached to an anchor only if its preferredAnchor property is non-null; otherwise, the attempt to anchor failed. \par
}{
Definition at line 275 of file AnchorableBehaviour.cs.}\par
}
{\xe \v useTrajectory\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:useTrajectory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.useTrajectory = true}}
\par
{\bkmkstart AAAAAAAETH}
{\bkmkend AAAAAAAETH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 133 of file AnchorableBehaviour.cs.}\par
}
{\xe \v WhileAttachedToAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:WhileAttachedToAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Action Leap.Unity.Interaction.AnchorableBehaviour.WhileAttachedToAnchor = () => \{ \}}}
\par
{\bkmkstart AAAAAAAETI}
{\bkmkend AAAAAAAETI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called during every Update() in which this {\b AnchorableBehaviour} is attached to an {\b Anchor}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 260 of file AnchorableBehaviour.cs.}\par
}
{\xe \v WhileLockedToAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:WhileLockedToAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Action Leap.Unity.Interaction.AnchorableBehaviour.WhileLockedToAnchor = () => \{ \}}}
\par
{\bkmkstart AAAAAAAETJ}
{\bkmkend AAAAAAAETJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called during every Update() in which this {\b AnchorableBehaviour} is locked to an {\b Anchor}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 265 of file AnchorableBehaviour.cs.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Property Documentation\par
\pard\plain 
{\xe \v anchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:anchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Anchor} Leap.Unity.Interaction.AnchorableBehaviour.anchor{\f2 [get]}, {\f2 [set]}}}
\par
{\bkmkstart AAAAAAAETK}
{\bkmkend AAAAAAAETK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 73 of file AnchorableBehaviour.cs.}\par
}
{\xe \v anchorGroup\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:anchorGroup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b AnchorGroup} Leap.Unity.Interaction.AnchorableBehaviour.anchorGroup{\f2 [get]}, {\f2 [set]}}}
\par
{\bkmkstart AAAAAAAETL}
{\bkmkend AAAAAAAETL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 109 of file AnchorableBehaviour.cs.}\par
}
{\xe \v isAttached\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:isAttached}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.isAttached{\f2 [get]}, {\f2 [set]}}}
\par
{\bkmkstart AAAAAAAETM}
{\bkmkend AAAAAAAETM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 31 of file AnchorableBehaviour.cs.}\par
}
{\xe \v preferredAnchor\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:preferredAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Anchor} Leap.Unity.Interaction.AnchorableBehaviour.preferredAnchor{\f2 [get]}}}
\par
{\bkmkstart AAAAAAAETN}
{\bkmkend AAAAAAAETN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the anchor this {\b AnchorableBehaviour} would most prefer to attach to. This value is refreshed every Update() during which the {\b AnchorableBehaviour} has no anchor or is detached from its current anchor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition at line 238 of file AnchorableBehaviour.cs.}\par
}
{\xe \v tryAnchorNearestOnGraspEnd\:Leap.Unity.Interaction.AnchorableBehaviour}
{\xe \v Leap.Unity.Interaction.AnchorableBehaviour\:tryAnchorNearestOnGraspEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Leap.Unity.Interaction.AnchorableBehaviour.tryAnchorNearestOnGraspEnd{\f2 [get]}, {\f2 [set]}}}
\par
{\bkmkstart AAAAAAAETO}
{\bkmkend AAAAAAAETO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 204 of file AnchorableBehaviour.cs.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
O:/GitHUBMINIPRoject/Assets/LeapMotion/Modules/InteractionEngine/Scripts/UI/Anchors/{\b AnchorableBehaviour.cs}\par
}}